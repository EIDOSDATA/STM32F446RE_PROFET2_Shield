
PROFET2_12V_Shield_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008258  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08008428  08008428  00018428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b08  08008b08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b10  08008b10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  200001dc  08008cf4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08008cf4  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130f6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002810  00000000  00000000  00033302  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a31c  00000000  00000000  00035b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ea8  00000000  00000000  0003fe30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e10  00000000  00000000  00040cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000238e4  00000000  00000000  00041ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000bb5c  00000000  00000000  000653cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d5f72  00000000  00000000  00070f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00146e9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038e8  00000000  00000000  00146f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008410 	.word	0x08008410

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008410 	.word	0x08008410

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fcc:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct =
 8000fce:	2400      	movs	r4, #0
 8000fd0:	9405      	str	r4, [sp, #20]
 8000fd2:	9406      	str	r4, [sp, #24]
 8000fd4:	9407      	str	r4, [sp, #28]
 8000fd6:	9408      	str	r4, [sp, #32]
 8000fd8:	9409      	str	r4, [sp, #36]	; 0x24
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	9401      	str	r4, [sp, #4]
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <MX_GPIO_Init+0xf8>)
 8000fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe0:	f042 0204 	orr.w	r2, r2, #4
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	f002 0204 	and.w	r2, r2, #4
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff0:	9402      	str	r4, [sp, #8]
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001000:	9202      	str	r2, [sp, #8]
 8001002:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	9403      	str	r4, [sp, #12]
 8001006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
 800100e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001010:	f002 0201 	and.w	r2, r2, #1
 8001014:	9203      	str	r2, [sp, #12]
 8001016:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	9404      	str	r4, [sp, #16]
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	f042 0202 	orr.w	r2, r2, #2
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	9304      	str	r3, [sp, #16]
 800102a:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800102c:	4f25      	ldr	r7, [pc, #148]	; (80010c4 <MX_GPIO_Init+0xfc>)
 800102e:	4622      	mov	r2, r4
 8001030:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001034:	4638      	mov	r0, r7
 8001036:	f001 ffc5 	bl	8002fc4 <HAL_GPIO_WritePin>
	LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin | DEN2_DEN4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800103a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80010d0 <MX_GPIO_Init+0x108>
 800103e:	4622      	mov	r2, r4
 8001040:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001044:	4640      	mov	r0, r8
 8001046:	f001 ffbd 	bl	8002fc4 <HAL_GPIO_WritePin>
	DEN1_DEN3_Pin | IN4_Pin | LED2_Pin | LED1_Pin | IN2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800104a:	4d1f      	ldr	r5, [pc, #124]	; (80010c8 <MX_GPIO_Init+0x100>)
 800104c:	4622      	mov	r2, r4
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	4628      	mov	r0, r5
 8001052:	f001 ffb7 	bl	8002fc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_GPIO_Init+0x104>)
 800105e:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001062:	a905      	add	r1, sp, #20
 8001064:	4628      	mov	r0, r5
 8001066:	f001 fecf 	bl	8002e08 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 800106a:	f240 4301 	movw	r3, #1025	; 0x401
 800106e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	a905      	add	r1, sp, #20
 8001076:	4638      	mov	r0, r7
 8001078:	f001 fec6 	bl	8002e08 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED4_Pin LED3_Pin IN3_Pin OLOFF_Pin
	 DEN2_DEN4_Pin */
	GPIO_InitStruct.Pin = LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin
 800107c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001080:	9305      	str	r3, [sp, #20]
			| DEN2_DEN4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2601      	movs	r6, #1
 8001084:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	a905      	add	r1, sp, #20
 800108c:	4638      	mov	r0, r7
 800108e:	f001 febb 	bl	8002e08 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEN1_DEN3_Pin IN4_Pin LED2_Pin LED1_Pin
	 IN2_Pin */
	GPIO_InitStruct.Pin = DEN1_DEN3_Pin | IN4_Pin | LED2_Pin | LED1_Pin
 8001092:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001096:	9305      	str	r3, [sp, #20]
			| IN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	a905      	add	r1, sp, #20
 80010a0:	4640      	mov	r0, r8
 80010a2:	f001 feb1 	bl	8002e08 <HAL_GPIO_Init>

	/*Configure GPIO pin : IN1_Pin */
	GPIO_InitStruct.Pin = IN1_Pin;
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 80010b0:	a905      	add	r1, sp, #20
 80010b2:	4628      	mov	r0, r5
 80010b4:	f001 fea8 	bl	8002e08 <HAL_GPIO_Init>

}
 80010b8:	b00a      	add	sp, #40	; 0x28
 80010ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020800 	.word	0x40020800
 80010cc:	10210000 	.word	0x10210000
 80010d0:	40020400 	.word	0x40020400

080010d4 <MX_DMA_Init>:
{
 80010d4:	b500      	push	{lr}
 80010d6:	b083      	sub	sp, #12
	__HAL_RCC_DMA2_CLK_ENABLE();
 80010d8:	2100      	movs	r1, #0
 80010da:	9101      	str	r1, [sp, #4]
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_DMA_Init+0x30>)
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010f0:	460a      	mov	r2, r1
 80010f2:	2038      	movs	r0, #56	; 0x38
 80010f4:	f001 fb40 	bl	8002778 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f8:	2038      	movs	r0, #56	; 0x38
 80010fa:	f001 fb71 	bl	80027e0 <HAL_NVIC_EnableIRQ>
}
 80010fe:	b003      	add	sp, #12
 8001100:	f85d fb04 	ldr.w	pc, [sp], #4
 8001104:	40023800 	.word	0x40023800

08001108 <WriteShieldLED>:
{
 8001108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800110c:	460f      	mov	r7, r1
 800110e:	4616      	mov	r6, r2
 8001110:	461d      	mov	r5, r3
 8001112:	9c06      	ldr	r4, [sp, #24]
	if (_LED1 == 0)
 8001114:	4680      	mov	r8, r0
 8001116:	bb00      	cbnz	r0, 800115a <WriteShieldLED+0x52>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001120:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001124:	f001 ff4e 	bl	8002fc4 <HAL_GPIO_WritePin>
	if (_LED2 == 0)
 8001128:	b9ef      	cbnz	r7, 8001166 <WriteShieldLED+0x5e>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <WriteShieldLED+0x84>)
 8001130:	f001 ff48 	bl	8002fc4 <HAL_GPIO_WritePin>
	if (_LED3 == 0)
 8001134:	b9ee      	cbnz	r6, 8001172 <WriteShieldLED+0x6a>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	4815      	ldr	r0, [pc, #84]	; (8001190 <WriteShieldLED+0x88>)
 800113c:	f001 ff42 	bl	8002fc4 <HAL_GPIO_WritePin>
	if (_LED4 == 0)
 8001140:	b1ed      	cbz	r5, 800117e <WriteShieldLED+0x76>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2120      	movs	r1, #32
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <WriteShieldLED+0x88>)
 8001148:	f001 ff3c 	bl	8002fc4 <HAL_GPIO_WritePin>
	Shield->status_LED1 = _LED1;   // remember LED1 status
 800114c:	f884 8004 	strb.w	r8, [r4, #4]
	Shield->status_LED2 = _LED2;   // remember LED" status
 8001150:	7167      	strb	r7, [r4, #5]
	Shield->status_LED3 = _LED3;   // remember LED3 status
 8001152:	71a6      	strb	r6, [r4, #6]
	Shield->status_LED4 = _LED4;   // remember LED4 status
 8001154:	71e5      	strb	r5, [r4, #7]
}
 8001156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2120      	movs	r1, #32
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <WriteShieldLED+0x84>)
 8001160:	f001 ff30 	bl	8002fc4 <HAL_GPIO_WritePin>
 8001164:	e7e0      	b.n	8001128 <WriteShieldLED+0x20>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2110      	movs	r1, #16
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <WriteShieldLED+0x84>)
 800116c:	f001 ff2a 	bl	8002fc4 <HAL_GPIO_WritePin>
 8001170:	e7e0      	b.n	8001134 <WriteShieldLED+0x2c>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <WriteShieldLED+0x88>)
 8001178:	f001 ff24 	bl	8002fc4 <HAL_GPIO_WritePin>
 800117c:	e7e0      	b.n	8001140 <WriteShieldLED+0x38>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <WriteShieldLED+0x88>)
 8001184:	f001 ff1e 	bl	8002fc4 <HAL_GPIO_WritePin>
 8001188:	e7e0      	b.n	800114c <WriteShieldLED+0x44>
 800118a:	bf00      	nop
 800118c:	40020400 	.word	0x40020400
 8001190:	40020000 	.word	0x40020000

08001194 <WriteShieldIN>:
{
 8001194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001198:	460f      	mov	r7, r1
 800119a:	4616      	mov	r6, r2
 800119c:	461d      	mov	r5, r3
 800119e:	9c06      	ldr	r4, [sp, #24]
	if (_In1 == 0)
 80011a0:	4680      	mov	r8, r0
 80011a2:	bb00      	cbnz	r0, 80011e6 <WriteShieldIN+0x52>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80011ac:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80011b0:	f001 ff08 	bl	8002fc4 <HAL_GPIO_WritePin>
	if (_In2 == 0)
 80011b4:	b9ef      	cbnz	r7, 80011f2 <WriteShieldIN+0x5e>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <WriteShieldIN+0x84>)
 80011bc:	f001 ff02 	bl	8002fc4 <HAL_GPIO_WritePin>
	if (_In3 == 0)
 80011c0:	b9ee      	cbnz	r6, 80011fe <WriteShieldIN+0x6a>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	4815      	ldr	r0, [pc, #84]	; (800121c <WriteShieldIN+0x88>)
 80011c8:	f001 fefc 	bl	8002fc4 <HAL_GPIO_WritePin>
	if (_In4 == 0)
 80011cc:	b1ed      	cbz	r5, 800120a <WriteShieldIN+0x76>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2108      	movs	r1, #8
 80011d2:	4811      	ldr	r0, [pc, #68]	; (8001218 <WriteShieldIN+0x84>)
 80011d4:	f001 fef6 	bl	8002fc4 <HAL_GPIO_WritePin>
	Shield->status_In_U1 = _In1; // remember PROFET U1 output status
 80011d8:	f884 8000 	strb.w	r8, [r4]
	Shield->status_In_U2 = _In2; // remember PROFET U2 output status
 80011dc:	7067      	strb	r7, [r4, #1]
	Shield->status_In_U3 = _In3; // remember PROFET U3 output status
 80011de:	70a6      	strb	r6, [r4, #2]
	Shield->status_In_U4 = _In4; // remember PROFET U4 output status
 80011e0:	70e5      	strb	r5, [r4, #3]
}
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <WriteShieldIN+0x8c>)
 80011ec:	f001 feea 	bl	8002fc4 <HAL_GPIO_WritePin>
 80011f0:	e7e0      	b.n	80011b4 <WriteShieldIN+0x20>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <WriteShieldIN+0x84>)
 80011f8:	f001 fee4 	bl	8002fc4 <HAL_GPIO_WritePin>
 80011fc:	e7e0      	b.n	80011c0 <WriteShieldIN+0x2c>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <WriteShieldIN+0x88>)
 8001204:	f001 fede 	bl	8002fc4 <HAL_GPIO_WritePin>
 8001208:	e7e0      	b.n	80011cc <WriteShieldIN+0x38>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4802      	ldr	r0, [pc, #8]	; (8001218 <WriteShieldIN+0x84>)
 8001210:	f001 fed8 	bl	8002fc4 <HAL_GPIO_WritePin>
 8001214:	e7e0      	b.n	80011d8 <WriteShieldIN+0x44>
 8001216:	bf00      	nop
 8001218:	40020400 	.word	0x40020400
 800121c:	40020000 	.word	0x40020000
 8001220:	40020800 	.word	0x40020800

08001224 <Read_ADC>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4604      	mov	r4, r0
	HAL_ADC_Start(&hadc1);
 8001228:	4d79      	ldr	r5, [pc, #484]	; (8001410 <Read_ADC+0x1ec>)
 800122a:	4628      	mov	r0, r5
 800122c:	f000 fec2 	bl	8001fb4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001230:	2164      	movs	r1, #100	; 0x64
 8001232:	4628      	mov	r0, r5
 8001234:	f000 ff78 	bl	8002128 <HAL_ADC_PollForConversion>
	Shield->A1_adc_raw_value_Vbb = HAL_ADC_GetValue(&hadc1);    // Vbb raw value
 8001238:	4628      	mov	r0, r5
 800123a:	f001 f8c0 	bl	80023be <HAL_ADC_GetValue>
 800123e:	6160      	str	r0, [r4, #20]
	HAL_ADC_Stop(&hadc1);
 8001240:	4628      	mov	r0, r5
 8001242:	f000 ff51 	bl	80020e8 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_SET); // Select sense signal from PROFET+2 device U1 and U3 (DEN1_DEN3= high,DEN2_DEN4 = low)
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124c:	4871      	ldr	r0, [pc, #452]	; (8001414 <Read_ADC+0x1f0>)
 800124e:	f001 feb9 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET); // Select sense signal from PROFET+2 device U1 and U3
 8001252:	4e71      	ldr	r6, [pc, #452]	; (8001418 <Read_ADC+0x1f4>)
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	4630      	mov	r0, r6
 800125c:	f001 feb2 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET); // open load in state OFF diagnosis disabled
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001266:	4630      	mov	r0, r6
 8001268:	f001 feac 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // generously delay of 1ms to give the PROFET+2 time to provide the sense signal
 800126c:	2001      	movs	r0, #1
 800126e:	f000 fdc7 	bl	8001e00 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 4);
 8001272:	2204      	movs	r2, #4
 8001274:	4969      	ldr	r1, [pc, #420]	; (800141c <Read_ADC+0x1f8>)
 8001276:	4628      	mov	r0, r5
 8001278:	f000 ffb2 	bl	80021e0 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 4; i++)
 800127c:	2500      	movs	r5, #0
 800127e:	e006      	b.n	800128e <Read_ADC+0x6a>
		HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 8001280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001284:	2100      	movs	r1, #0
 8001286:	4866      	ldr	r0, [pc, #408]	; (8001420 <Read_ADC+0x1fc>)
 8001288:	f001 fc42 	bl	8002b10 <HAL_DMA_PollForTransfer>
	for (int i = 0; i < 4; i++)
 800128c:	3501      	adds	r5, #1
 800128e:	2d03      	cmp	r5, #3
 8001290:	ddf6      	ble.n	8001280 <Read_ADC+0x5c>
	HAL_ADC_Stop_DMA(&hadc1);
 8001292:	4e5f      	ldr	r6, [pc, #380]	; (8001410 <Read_ADC+0x1ec>)
 8001294:	4630      	mov	r0, r6
 8001296:	f001 f863 	bl	8002360 <HAL_ADC_Stop_DMA>
	Shield->A2_adc_raw_value_IS_1 = ADC_Value[1]; // read analog value from analog input A2 -> device U1 -> sense IS1
 800129a:	4d60      	ldr	r5, [pc, #384]	; (800141c <Read_ADC+0x1f8>)
 800129c:	686b      	ldr	r3, [r5, #4]
 800129e:	61a3      	str	r3, [r4, #24]
	Shield->A3_adc_raw_value_IS_3 = ADC_Value[2]; // read analog value from analog input A3 -> device U3 -> sense IS3
 80012a0:	68ab      	ldr	r3, [r5, #8]
 80012a2:	6223      	str	r3, [r4, #32]
	HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET); // Select sense signal from PROFET+2 device U2 and U4 (DEN1_DEN3= low, DEN2_DEN4 = high)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012aa:	485a      	ldr	r0, [pc, #360]	; (8001414 <Read_ADC+0x1f0>)
 80012ac:	f001 fe8a 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_SET); // Select sense signal from PROFET+2 device U2 and U4
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	4858      	ldr	r0, [pc, #352]	; (8001418 <Read_ADC+0x1f4>)
 80012b8:	f001 fe84 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // generously delay of 1ms to give the PROFET+2 time to provide the sense signal
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fd9f 	bl	8001e00 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 4);
 80012c2:	2204      	movs	r2, #4
 80012c4:	4629      	mov	r1, r5
 80012c6:	4630      	mov	r0, r6
 80012c8:	f000 ff8a 	bl	80021e0 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 4; i++)
 80012cc:	2500      	movs	r5, #0
 80012ce:	e006      	b.n	80012de <Read_ADC+0xba>
		HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 80012d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d4:	2100      	movs	r1, #0
 80012d6:	4852      	ldr	r0, [pc, #328]	; (8001420 <Read_ADC+0x1fc>)
 80012d8:	f001 fc1a 	bl	8002b10 <HAL_DMA_PollForTransfer>
	for (int i = 0; i < 4; i++)
 80012dc:	3501      	adds	r5, #1
 80012de:	2d03      	cmp	r5, #3
 80012e0:	ddf6      	ble.n	80012d0 <Read_ADC+0xac>
	HAL_ADC_Stop_DMA(&hadc1);
 80012e2:	484b      	ldr	r0, [pc, #300]	; (8001410 <Read_ADC+0x1ec>)
 80012e4:	f001 f83c 	bl	8002360 <HAL_ADC_Stop_DMA>
	Shield->A2_adc_raw_value_IS_2 = ADC_Value[1]; // read analog value from analog input A2 -> device U2 -> sense IS2
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <Read_ADC+0x1f8>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	61e2      	str	r2, [r4, #28]
	Shield->A3_adc_raw_value_IS_4 = ADC_Value[2]; // read analog value from analog input A3 -> device U4 -> sense IS4
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	6263      	str	r3, [r4, #36]	; 0x24
			/ Shield->max_adc_reading * Shield->adc_reference_voltage); // e.g. 1024/1024*5 -> 5V max
 80012f2:	ed94 6a02 	vldr	s12, [r4, #8]
 80012f6:	edd4 7a05 	vldr	s15, [r4, #20]
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8001302:	ed94 7a03 	vldr	s14, [r4, #12]
	Shield->A1_Vbb_ADC_Voltage = (float) (Shield->A1_adc_raw_value_Vbb
 8001306:	ee67 7a87 	vmul.f32	s15, s15, s14
			- Shield->A1_Vbb_Offset) * Shield->A1_Vbb_Gain; // e.g. (5V - 0V) * 1 = 5V
 800130a:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800130e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001312:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8001316:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Shield->A1_Vbb_ADC_Voltage = (Shield->A1_Vbb_ADC_Voltage
 800131a:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
			* (Shield->Vbb_Resistor_1 + Shield->Vbb_Resistor_2))
 800131e:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 8001322:	edd4 5a15 	vldr	s11, [r4, #84]	; 0x54
 8001326:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800132a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Shield->A1_Vbb_Real_Voltage = (float) ((Shield->A1_Vbb_ADC_Voltage
 800132e:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001332:	edc4 6a17 	vstr	s13, [r4, #92]	; 0x5c
			/ Shield->max_adc_reading * Shield->adc_reference_voltage; // e.g. 1024/1024*5 -> 5V
 8001336:	edd4 7a06 	vldr	s15, [r4, #24]
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001342:	ee67 6a26 	vmul.f32	s13, s14, s13
	Shield->U1_IS_Voltage = Shield->A2_adc_raw_value_IS_1
 8001346:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
	Shield->U1_IS_Ampere = (float) ((Shield->U1_IS_Voltage * Shield->kilis)
 800134a:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001356:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8001424 <Read_ADC+0x200>
 800135a:	eec6 5a85 	vdiv.f32	s11, s13, s10
	Shield->U1_IS_Ampere = (Shield->U1_IS_Ampere - Shield->U1_Ampere_Offset)
 800135e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8001362:	ee75 6ae6 	vsub.f32	s13, s11, s13
			* Shield->U1_Ampere_Gain;             // (113.5 - 0) * 1 = 113.5A
 8001366:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 800136a:	ee66 6aa5 	vmul.f32	s13, s13, s11
	Shield->U1_IS_Ampere = (Shield->U1_IS_Ampere - Shield->U1_Ampere_Offset)
 800136e:	edc4 6a1d 	vstr	s13, [r4, #116]	; 0x74
			/ Shield->max_adc_reading * Shield->adc_reference_voltage; // e.g. calculation for 10A // e.g. (91/1024)*5 = 0,4443359375
 8001372:	ee06 2a90 	vmov	s13, r2
 8001376:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 800137a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800137e:	ee67 6a26 	vmul.f32	s13, s14, s13
	Shield->U2_IS_Voltage = Shield->A2_adc_raw_value_IS_2
 8001382:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
	Shield->U2_IS_Ampere = (float) ((Shield->U2_IS_Voltage * Shield->kilis)
 8001386:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800138a:	eec6 5a85 	vdiv.f32	s11, s13, s10
	Shield->U2_IS_Ampere = (Shield->U2_IS_Ampere - Shield->U2_Ampere_Offset)
 800138e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8001392:	ee75 6ae6 	vsub.f32	s13, s11, s13
			* Shield->U2_Ampere_Gain;           // e.g. (10,086-0) * 1 = 10,086A
 8001396:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 800139a:	ee66 6aa5 	vmul.f32	s13, s13, s11
	Shield->U2_IS_Ampere = (Shield->U2_IS_Ampere - Shield->U2_Ampere_Offset)
 800139e:	edc4 6a1e 	vstr	s13, [r4, #120]	; 0x78
			/ Shield->max_adc_reading * Shield->adc_reference_voltage; // e.g. calculation for 2.2A // e.g. (20/1024)*5 = 0,09765625
 80013a2:	edd4 6a08 	vldr	s13, [r4, #32]
 80013a6:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80013aa:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80013ae:	ee67 6a26 	vmul.f32	s13, s14, s13
	Shield->U3_IS_Voltage = Shield->A3_adc_raw_value_IS_3
 80013b2:	edc4 6a1b 	vstr	s13, [r4, #108]	; 0x6c
	Shield->U3_IS_Ampere = (float) ((Shield->U3_IS_Voltage * Shield->kilis)
 80013b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013ba:	eec6 5a85 	vdiv.f32	s11, s13, s10
	Shield->U3_IS_Ampere = (Shield->U3_IS_Ampere - Shield->U3_Ampere_Offset)
 80013be:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 80013c2:	ee75 6ae6 	vsub.f32	s13, s11, s13
			* Shield->U3_Ampere_Gain;           // e.g. (2,2167-0) * 1 = 2,2167A
 80013c6:	edd4 5a11 	vldr	s11, [r4, #68]	; 0x44
 80013ca:	ee66 6aa5 	vmul.f32	s13, s13, s11
	Shield->U3_IS_Ampere = (Shield->U3_IS_Ampere - Shield->U3_Ampere_Offset)
 80013ce:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
			/ Shield->max_adc_reading * Shield->adc_reference_voltage;
 80013d2:	ee06 3a90 	vmov	s13, r3
 80013d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80013da:	eec6 5a86 	vdiv.f32	s11, s13, s12
 80013de:	ee27 7a25 	vmul.f32	s14, s14, s11
	Shield->U4_IS_Voltage = Shield->A3_adc_raw_value_IS_4
 80013e2:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
	Shield->U4_IS_Ampere = (float) ((Shield->U4_IS_Voltage * Shield->kilis)
 80013e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ea:	ee87 7a85 	vdiv.f32	s14, s15, s10
	Shield->U4_IS_Ampere = (Shield->U4_IS_Ampere - Shield->U4_Ampere_Offset)
 80013ee:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 80013f2:	ee77 7a67 	vsub.f32	s15, s14, s15
			* Shield->U4_Ampere_Gain;
 80013f6:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 80013fa:	ee67 7a87 	vmul.f32	s15, s15, s14
	Shield->U4_IS_Ampere = (Shield->U4_IS_Ampere - Shield->U4_Ampere_Offset)
 80013fe:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <Read_ADC+0x1f4>)
 800140a:	f001 fddb 	bl	8002fc4 <HAL_GPIO_WritePin>
}
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	20000418 	.word	0x20000418
 8001414:	40020400 	.word	0x40020400
 8001418:	40020000 	.word	0x40020000
 800141c:	20000408 	.word	0x20000408
 8001420:	20000460 	.word	0x20000460
 8001424:	447a0000 	.word	0x447a0000

08001428 <PrintStatus>:
{
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	b087      	sub	sp, #28
			"LED4: %d\r\n\r\n", Shield->status_In_U1, Shield->status_In_U2,
 800142c:	7802      	ldrb	r2, [r0, #0]
 800142e:	7843      	ldrb	r3, [r0, #1]
			Shield->status_In_U3, Shield->status_In_U4, Shield->status_LED1,
 8001430:	7881      	ldrb	r1, [r0, #2]
 8001432:	78c5      	ldrb	r5, [r0, #3]
 8001434:	7906      	ldrb	r6, [r0, #4]
			Shield->status_LED2, Shield->status_LED3, Shield->status_LED4);
 8001436:	7947      	ldrb	r7, [r0, #5]
 8001438:	f890 c006 	ldrb.w	ip, [r0, #6]
 800143c:	79c0      	ldrb	r0, [r0, #7]
	sprintf(UBuf, "OUT1: %d\r\n"
 800143e:	4c0c      	ldr	r4, [pc, #48]	; (8001470 <PrintStatus+0x48>)
 8001440:	9005      	str	r0, [sp, #20]
 8001442:	f8cd c010 	str.w	ip, [sp, #16]
 8001446:	9703      	str	r7, [sp, #12]
 8001448:	9602      	str	r6, [sp, #8]
 800144a:	9501      	str	r5, [sp, #4]
 800144c:	9100      	str	r1, [sp, #0]
 800144e:	4909      	ldr	r1, [pc, #36]	; (8001474 <PrintStatus+0x4c>)
 8001450:	4620      	mov	r0, r4
 8001452:	f003 fda1 	bl	8004f98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UBuf, strlen(UBuf), 1000);
 8001456:	4620      	mov	r0, r4
 8001458:	f7fe feda 	bl	8000210 <strlen>
 800145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001460:	b282      	uxth	r2, r0
 8001462:	4621      	mov	r1, r4
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <PrintStatus+0x50>)
 8001466:	f002 fcb1 	bl	8003dcc <HAL_UART_Transmit>
}
 800146a:	b007      	add	sp, #28
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	bf00      	nop
 8001470:	20000210 	.word	0x20000210
 8001474:	080085d8 	.word	0x080085d8
 8001478:	20000904 	.word	0x20000904

0800147c <PrintADC>:
{
 800147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001480:	ed2d 8b04 	vpush	{d8-d9}
 8001484:	b09d      	sub	sp, #116	; 0x74
 8001486:	4604      	mov	r4, r0
	, Shield->A1_adc_raw_value_Vbb, Shield->A1_Vbb_ADC_Voltage,
 8001488:	6d87      	ldr	r7, [r0, #88]	; 0x58
			Shield->A1_Vbb_Real_Voltage,
 800148a:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
			Shield->A2_adc_raw_value_IS_1, Shield->U1_IS_Voltage,
 800148e:	f8d0 9064 	ldr.w	r9, [r0, #100]	; 0x64
			Shield->U1_IS_Ampere,
 8001492:	f8d0 a074 	ldr.w	sl, [r0, #116]	; 0x74
			Shield->A2_adc_raw_value_IS_2, Shield->U2_IS_Voltage,
 8001496:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
			Shield->U2_IS_Ampere,
 800149a:	ed90 8a1e 	vldr	s16, [r0, #120]	; 0x78
			Shield->A3_adc_raw_value_IS_3, Shield->U3_IS_Voltage,
 800149e:	edd0 8a1b 	vldr	s17, [r0, #108]	; 0x6c
			Shield->U3_IS_Ampere,
 80014a2:	ed90 9a1f 	vldr	s18, [r0, #124]	; 0x7c
			Shield->A3_adc_raw_value_IS_4, Shield->U4_IS_Voltage,
 80014a6:	edd0 9a1c 	vldr	s19, [r0, #112]	; 0x70
	sprintf(UBuf, "=================================\r\n"
 80014aa:	6946      	ldr	r6, [r0, #20]
 80014ac:	4d29      	ldr	r5, [pc, #164]	; (8001554 <PrintADC+0xd8>)
 80014ae:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80014b2:	f7ff f869 	bl	8000588 <__aeabi_f2d>
 80014b6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 80014ba:	ee19 0a90 	vmov	r0, s19
 80014be:	f7ff f863 	bl	8000588 <__aeabi_f2d>
 80014c2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80014c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014c8:	9316      	str	r3, [sp, #88]	; 0x58
 80014ca:	ee19 0a10 	vmov	r0, s18
 80014ce:	f7ff f85b 	bl	8000588 <__aeabi_f2d>
 80014d2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80014d6:	ee18 0a90 	vmov	r0, s17
 80014da:	f7ff f855 	bl	8000588 <__aeabi_f2d>
 80014de:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80014e2:	6a23      	ldr	r3, [r4, #32]
 80014e4:	9310      	str	r3, [sp, #64]	; 0x40
 80014e6:	ee18 0a10 	vmov	r0, s16
 80014ea:	f7ff f84d 	bl	8000588 <__aeabi_f2d>
 80014ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80014f2:	4658      	mov	r0, fp
 80014f4:	f7ff f848 	bl	8000588 <__aeabi_f2d>
 80014f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80014fc:	69e3      	ldr	r3, [r4, #28]
 80014fe:	930a      	str	r3, [sp, #40]	; 0x28
 8001500:	4650      	mov	r0, sl
 8001502:	f7ff f841 	bl	8000588 <__aeabi_f2d>
 8001506:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800150a:	4648      	mov	r0, r9
 800150c:	f7ff f83c 	bl	8000588 <__aeabi_f2d>
 8001510:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001514:	69a3      	ldr	r3, [r4, #24]
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	4640      	mov	r0, r8
 800151a:	f7ff f835 	bl	8000588 <__aeabi_f2d>
 800151e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001522:	4638      	mov	r0, r7
 8001524:	f7ff f830 	bl	8000588 <__aeabi_f2d>
 8001528:	e9cd 0100 	strd	r0, r1, [sp]
 800152c:	4632      	mov	r2, r6
 800152e:	490a      	ldr	r1, [pc, #40]	; (8001558 <PrintADC+0xdc>)
 8001530:	4628      	mov	r0, r5
 8001532:	f003 fd31 	bl	8004f98 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UBuf, strlen(UBuf), 1000);
 8001536:	4628      	mov	r0, r5
 8001538:	f7fe fe6a 	bl	8000210 <strlen>
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	b282      	uxth	r2, r0
 8001542:	4629      	mov	r1, r5
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <PrintADC+0xe0>)
 8001546:	f002 fc41 	bl	8003dcc <HAL_UART_Transmit>
}
 800154a:	b01d      	add	sp, #116	; 0x74
 800154c:	ecbd 8b04 	vpop	{d8-d9}
 8001550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001554:	20000210 	.word	0x20000210
 8001558:	08008428 	.word	0x08008428
 800155c:	20000904 	.word	0x20000904

08001560 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM6)
 8001560:	6802      	ldr	r2, [r0, #0]
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001564:	429a      	cmp	r2, r3
 8001566:	d000      	beq.n	800156a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001568:	4770      	bx	lr
		tcnt++;
 800156a:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800156c:	7813      	ldrb	r3, [r2, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	7013      	strb	r3, [r2, #0]
}
 8001572:	e7f9      	b.n	8001568 <HAL_TIM_PeriodElapsedCallback+0x8>
 8001574:	40001000 	.word	0x40001000
 8001578:	20000201 	.word	0x20000201

0800157c <HAL_UART_RxCpltCallback>:
	if (huart->Instance == huart2.Instance)
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_UART_RxCpltCallback+0x40>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d000      	beq.n	8001588 <HAL_UART_RxCpltCallback+0xc>
 8001586:	4770      	bx	lr
{
 8001588:	b510      	push	{r4, lr}
 800158a:	4604      	mov	r4, r0
		HAL_UART_Receive_IT(&huart2, &tmpbuf, 1);
 800158c:	2201      	movs	r2, #1
 800158e:	490c      	ldr	r1, [pc, #48]	; (80015c0 <HAL_UART_RxCpltCallback+0x44>)
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <HAL_UART_RxCpltCallback+0x40>)
 8001592:	f002 fd00 	bl	8003f96 <HAL_UART_Receive_IT>
		buf[bufTail] = huart->pRxBuffPtr[0];
 8001596:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <HAL_UART_RxCpltCallback+0x48>)
 800159a:	6803      	ldr	r3, [r0, #0]
 800159c:	7811      	ldrb	r1, [r2, #0]
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_UART_RxCpltCallback+0x4c>)
 80015a0:	54d1      	strb	r1, [r2, r3]
		bufTail++;
 80015a2:	3301      	adds	r3, #1
		bufTail %= 200;
 80015a4:	4909      	ldr	r1, [pc, #36]	; (80015cc <HAL_UART_RxCpltCallback+0x50>)
 80015a6:	fb81 2103 	smull	r2, r1, r1, r3
 80015aa:	17da      	asrs	r2, r3, #31
 80015ac:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
 80015b0:	21c8      	movs	r1, #200	; 0xc8
 80015b2:	fb01 3312 	mls	r3, r1, r2, r3
 80015b6:	6003      	str	r3, [r0, #0]
}
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	20000904 	.word	0x20000904
 80015c0:	20000404 	.word	0x20000404
 80015c4:	200001fc 	.word	0x200001fc
 80015c8:	20000504 	.word	0x20000504
 80015cc:	51eb851f 	.word	0x51eb851f

080015d0 <__io_putchar>:
{
 80015d0:	b500      	push	{lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	a902      	add	r1, sp, #8
 80015d6:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart2, &tr[0], 1, -1);
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	2201      	movs	r2, #1
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <__io_putchar+0x20>)
 80015e2:	f002 fbf3 	bl	8003dcc <HAL_UART_Transmit>
}
 80015e6:	9801      	ldr	r0, [sp, #4]
 80015e8:	b003      	add	sp, #12
 80015ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ee:	bf00      	nop
 80015f0:	20000904 	.word	0x20000904

080015f4 <__io_getchar>:
	__retry: if (bufHead != bufTail)
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <__io_getchar+0x30>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <__io_getchar+0x34>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d0f9      	beq.n	80015f4 <__io_getchar>
		ret = buf[bufHead];
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <__io_getchar+0x38>)
 8001602:	5cd0      	ldrb	r0, [r2, r3]
		if (ret == '\r')
 8001604:	280d      	cmp	r0, #13
 8001606:	d00a      	beq.n	800161e <__io_getchar+0x2a>
		bufHead++;
 8001608:	3301      	adds	r3, #1
		bufHead %= MAX_BUFLEN;
 800160a:	425a      	negs	r2, r3
 800160c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001610:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001614:	bf58      	it	pl
 8001616:	4253      	negpl	r3, r2
 8001618:	4a02      	ldr	r2, [pc, #8]	; (8001624 <__io_getchar+0x30>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	4770      	bx	lr
			ret = '\n';
 800161e:	200a      	movs	r0, #10
 8001620:	e7f2      	b.n	8001608 <__io_getchar+0x14>
 8001622:	bf00      	nop
 8001624:	200001f8 	.word	0x200001f8
 8001628:	200001fc 	.word	0x200001fc
 800162c:	20000504 	.word	0x20000504

08001630 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
 8001632:	e7fe      	b.n	8001632 <Error_Handler+0x2>

08001634 <MX_USART2_UART_Init>:
{
 8001634:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <MX_USART2_UART_Init+0x2c>)
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_USART2_UART_Init+0x30>)
 800163a:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 800163c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001640:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	2300      	movs	r3, #0
 8001644:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001646:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001648:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800164a:	220c      	movs	r2, #12
 800164c:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	f002 fb8c 	bl	8003d6e <HAL_UART_Init>
 8001656:	b900      	cbnz	r0, 800165a <MX_USART2_UART_Init+0x26>
}
 8001658:	bd08      	pop	{r3, pc}
		Error_Handler();
 800165a:	f7ff ffe9 	bl	8001630 <Error_Handler>
 800165e:	bf00      	nop
 8001660:	20000904 	.word	0x20000904
 8001664:	40004400 	.word	0x40004400

08001668 <MX_ADC1_Init>:
{
 8001668:	b500      	push	{lr}
 800166a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig =
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 8001676:	481f      	ldr	r0, [pc, #124]	; (80016f4 <MX_ADC1_Init+0x8c>)
 8001678:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <MX_ADC1_Init+0x90>)
 800167a:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800167c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001680:	6042      	str	r2, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001682:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001684:	2201      	movs	r2, #1
 8001686:	6102      	str	r2, [r0, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001688:	7602      	strb	r2, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800168a:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001690:	491a      	ldr	r1, [pc, #104]	; (80016fc <MX_ADC1_Init+0x94>)
 8001692:	6281      	str	r1, [r0, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001694:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001696:	2103      	movs	r1, #3
 8001698:	61c1      	str	r1, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800169a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169e:	6142      	str	r2, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a0:	f000 fc5c 	bl	8001f5c <HAL_ADC_Init>
 80016a4:	b9f0      	cbnz	r0, 80016e4 <MX_ADC1_Init+0x7c>
	sConfig.Channel = ADC_CHANNEL_1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 80016aa:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016ac:	2300      	movs	r3, #0
 80016ae:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	4669      	mov	r1, sp
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <MX_ADC1_Init+0x8c>)
 80016b4:	f000 ff7a 	bl	80025ac <HAL_ADC_ConfigChannel>
 80016b8:	b9b0      	cbnz	r0, 80016e8 <MX_ADC1_Init+0x80>
	sConfig.Channel = ADC_CHANNEL_4;
 80016ba:	2304      	movs	r3, #4
 80016bc:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c2:	4669      	mov	r1, sp
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <MX_ADC1_Init+0x8c>)
 80016c6:	f000 ff71 	bl	80025ac <HAL_ADC_ConfigChannel>
 80016ca:	b978      	cbnz	r0, 80016ec <MX_ADC1_Init+0x84>
	sConfig.Channel = ADC_CHANNEL_8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 3;
 80016d0:	2303      	movs	r3, #3
 80016d2:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	4669      	mov	r1, sp
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_ADC1_Init+0x8c>)
 80016d8:	f000 ff68 	bl	80025ac <HAL_ADC_ConfigChannel>
 80016dc:	b940      	cbnz	r0, 80016f0 <MX_ADC1_Init+0x88>
}
 80016de:	b005      	add	sp, #20
 80016e0:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80016e4:	f7ff ffa4 	bl	8001630 <Error_Handler>
		Error_Handler();
 80016e8:	f7ff ffa2 	bl	8001630 <Error_Handler>
		Error_Handler();
 80016ec:	f7ff ffa0 	bl	8001630 <Error_Handler>
		Error_Handler();
 80016f0:	f7ff ff9e 	bl	8001630 <Error_Handler>
 80016f4:	20000418 	.word	0x20000418
 80016f8:	40012000 	.word	0x40012000
 80016fc:	0f000001 	.word	0x0f000001

08001700 <MX_TIM6_Init>:
{
 8001700:	b500      	push	{lr}
 8001702:	b083      	sub	sp, #12
	TIM_MasterConfigTypeDef sMasterConfig =
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	9301      	str	r3, [sp, #4]
	htim6.Instance = TIM6;
 800170a:	480f      	ldr	r0, [pc, #60]	; (8001748 <MX_TIM6_Init+0x48>)
 800170c:	4a0f      	ldr	r2, [pc, #60]	; (800174c <MX_TIM6_Init+0x4c>)
 800170e:	6002      	str	r2, [r0, #0]
	htim6.Init.Prescaler = 449;
 8001710:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001714:	6042      	str	r2, [r0, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	6083      	str	r3, [r0, #8]
	htim6.Init.Period = 9999;
 8001718:	f242 730f 	movw	r3, #9999	; 0x270f
 800171c:	60c3      	str	r3, [r0, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001722:	f002 f945 	bl	80039b0 <HAL_TIM_Base_Init>
 8001726:	b950      	cbnz	r0, 800173e <MX_TIM6_Init+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800172e:	4669      	mov	r1, sp
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_TIM6_Init+0x48>)
 8001732:	f002 f957 	bl	80039e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	b920      	cbnz	r0, 8001742 <MX_TIM6_Init+0x42>
}
 8001738:	b003      	add	sp, #12
 800173a:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800173e:	f7ff ff77 	bl	8001630 <Error_Handler>
		Error_Handler();
 8001742:	f7ff ff75 	bl	8001630 <Error_Handler>
 8001746:	bf00      	nop
 8001748:	200004c0 	.word	0x200004c0
 800174c:	40001000 	.word	0x40001000

08001750 <SystemClock_Config>:
{
 8001750:	b500      	push	{lr}
 8001752:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001754:	2234      	movs	r2, #52	; 0x34
 8001756:	2100      	movs	r1, #0
 8001758:	a807      	add	r0, sp, #28
 800175a:	f002 fd6d 	bl	8004238 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800175e:	2300      	movs	r3, #0
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	9303      	str	r3, [sp, #12]
 8001764:	9304      	str	r3, [sp, #16]
 8001766:	9305      	str	r3, [sp, #20]
 8001768:	9306      	str	r3, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <SystemClock_Config+0xa8>)
 800176e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001770:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001774:	6411      	str	r1, [r2, #64]	; 0x40
 8001776:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001778:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <SystemClock_Config+0xac>)
 8001784:	6811      	ldr	r1, [r2, #0]
 8001786:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800178a:	6011      	str	r1, [r2, #0]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001796:	2202      	movs	r2, #2
 8001798:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179a:	2101      	movs	r1, #1
 800179c:	910a      	str	r1, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179e:	2110      	movs	r1, #16
 80017a0:	910b      	str	r1, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a4:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80017a6:	2308      	movs	r3, #8
 80017a8:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80017aa:	23b4      	movs	r3, #180	; 0xb4
 80017ac:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ae:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80017b0:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80017b2:	9213      	str	r2, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	a807      	add	r0, sp, #28
 80017b6:	f001 fde3 	bl	8003380 <HAL_RCC_OscConfig>
 80017ba:	b9b0      	cbnz	r0, 80017ea <SystemClock_Config+0x9a>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017bc:	f001 fc08 	bl	8002fd0 <HAL_PWREx_EnableOverDrive>
 80017c0:	b9a8      	cbnz	r0, 80017ee <SystemClock_Config+0x9e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017c2:	230f      	movs	r3, #15
 80017c4:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2302      	movs	r3, #2
 80017c8:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017d2:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017da:	2105      	movs	r1, #5
 80017dc:	a802      	add	r0, sp, #8
 80017de:	f001 fc37 	bl	8003050 <HAL_RCC_ClockConfig>
 80017e2:	b930      	cbnz	r0, 80017f2 <SystemClock_Config+0xa2>
}
 80017e4:	b015      	add	sp, #84	; 0x54
 80017e6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80017ea:	f7ff ff21 	bl	8001630 <Error_Handler>
		Error_Handler();
 80017ee:	f7ff ff1f 	bl	8001630 <Error_Handler>
		Error_Handler();
 80017f2:	f7ff ff1d 	bl	8001630 <Error_Handler>
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <main>:
{
 8001800:	b500      	push	{lr}
 8001802:	b0a9      	sub	sp, #164	; 0xa4
	ArduinoShield Shield =
 8001804:	ac02      	add	r4, sp, #8
 8001806:	2294      	movs	r2, #148	; 0x94
 8001808:	2100      	movs	r1, #0
 800180a:	4620      	mov	r0, r4
 800180c:	f002 fd14 	bl	8004238 <memset>
 8001810:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001814:	9304      	str	r3, [sp, #16]
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <main+0x1d0>)
 8001818:	9305      	str	r3, [sp, #20]
 800181a:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <main+0x1d4>)
 800181c:	930d      	str	r3, [sp, #52]	; 0x34
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <main+0x1d8>)
 8001820:	930f      	str	r3, [sp, #60]	; 0x3c
 8001822:	9311      	str	r3, [sp, #68]	; 0x44
 8001824:	9313      	str	r3, [sp, #76]	; 0x4c
 8001826:	9315      	str	r3, [sp, #84]	; 0x54
 8001828:	4b6c      	ldr	r3, [pc, #432]	; (80019dc <main+0x1dc>)
 800182a:	9316      	str	r3, [sp, #88]	; 0x58
 800182c:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <main+0x1e0>)
 800182e:	9317      	str	r3, [sp, #92]	; 0x5c
 8001830:	f645 03ac 	movw	r3, #22700	; 0x58ac
 8001834:	9327      	str	r3, [sp, #156]	; 0x9c
	HAL_Init();
 8001836:	f000 fab7 	bl	8001da8 <HAL_Init>
	SystemClock_Config();
 800183a:	f7ff ff89 	bl	8001750 <SystemClock_Config>
	MX_GPIO_Init();
 800183e:	f7ff fbc3 	bl	8000fc8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001842:	f7ff fc47 	bl	80010d4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001846:	f7ff fef5 	bl	8001634 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800184a:	f7ff ff0d 	bl	8001668 <MX_ADC1_Init>
	MX_TIM6_Init();
 800184e:	f7ff ff57 	bl	8001700 <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 8001852:	4864      	ldr	r0, [pc, #400]	; (80019e4 <main+0x1e4>)
 8001854:	f001 ff76 	bl	8003744 <HAL_TIM_Base_Start_IT>
	WriteShieldIN(0, 0, 0, 0, &Shield);
 8001858:	9400      	str	r4, [sp, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	461a      	mov	r2, r3
 800185e:	4619      	mov	r1, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc97 	bl	8001194 <WriteShieldIN>
	WriteShieldLED(0, 0, 0, 0, &Shield);
 8001866:	9400      	str	r4, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	461a      	mov	r2, r3
 800186c:	4619      	mov	r1, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc4a 	bl	8001108 <WriteShieldLED>
	printf("-----------------------------------------------------\r\n");
 8001874:	4c5c      	ldr	r4, [pc, #368]	; (80019e8 <main+0x1e8>)
 8001876:	4620      	mov	r0, r4
 8001878:	f003 fb80 	bl	8004f7c <puts>
	printf(" Infineon PROFET+2 12V Arduino Shield HW Rev 5.0     \r\n");
 800187c:	485b      	ldr	r0, [pc, #364]	; (80019ec <main+0x1ec>)
 800187e:	f003 fb7d 	bl	8004f7c <puts>
	printf(" Software Version 1.00                SW Button3     \r\n");
 8001882:	485b      	ldr	r0, [pc, #364]	; (80019f0 <main+0x1f0>)
 8001884:	f003 fb7a 	bl	8004f7c <puts>
	printf(" PROFET+2 BTS7002-1EPP                               \r\n");
 8001888:	485a      	ldr	r0, [pc, #360]	; (80019f4 <main+0x1f4>)
 800188a:	f003 fb77 	bl	8004f7c <puts>
	printf(" PROFET+2 BTS7004-1EPP                               \r\n");
 800188e:	485a      	ldr	r0, [pc, #360]	; (80019f8 <main+0x1f8>)
 8001890:	f003 fb74 	bl	8004f7c <puts>
	printf(" PROFET+2 BTS7006-1EPP                               \r\n");
 8001894:	4859      	ldr	r0, [pc, #356]	; (80019fc <main+0x1fc>)
 8001896:	f003 fb71 	bl	8004f7c <puts>
	printf(" PROFET+2 BTS7008-1EPP                     2019-10-29\r\n");
 800189a:	4859      	ldr	r0, [pc, #356]	; (8001a00 <main+0x200>)
 800189c:	f003 fb6e 	bl	8004f7c <puts>
	printf("-----------------------------------------------------\r\n");
 80018a0:	4620      	mov	r0, r4
 80018a2:	f003 fb6b 	bl	8004f7c <puts>
 80018a6:	e012      	b.n	80018ce <main+0xce>
				WriteShieldLED(0, 0, 0, 0, &Shield);
 80018a8:	ac02      	add	r4, sp, #8
 80018aa:	9400      	str	r4, [sp, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc28 	bl	8001108 <WriteShieldLED>
				WriteShieldIN(0, 0, 0, 0, &Shield);
 80018b8:	9400      	str	r4, [sp, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	461a      	mov	r2, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc67 	bl	8001194 <WriteShieldIN>
		if (tcnt >= 30)
 80018c6:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <main+0x204>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b1d      	cmp	r3, #29
 80018cc:	d872      	bhi.n	80019b4 <main+0x1b4>
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 80018ce:	230a      	movs	r3, #10
 80018d0:	2201      	movs	r2, #1
 80018d2:	494d      	ldr	r1, [pc, #308]	; (8001a08 <main+0x208>)
 80018d4:	484d      	ldr	r0, [pc, #308]	; (8001a0c <main+0x20c>)
 80018d6:	f002 faea 	bl	8003eae <HAL_UART_Receive>
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <main+0x210>)
 80018dc:	7018      	strb	r0, [r3, #0]
		if (rcvStat2 == HAL_OK)
 80018de:	2800      	cmp	r0, #0
 80018e0:	d1f1      	bne.n	80018c6 <main+0xc6>
			HAL_UART_Transmit(&huart2, (uint8_t*) "TX UART2 : ", 11, 1000);
 80018e2:	4c4a      	ldr	r4, [pc, #296]	; (8001a0c <main+0x20c>)
 80018e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e8:	220b      	movs	r2, #11
 80018ea:	494a      	ldr	r1, [pc, #296]	; (8001a14 <main+0x214>)
 80018ec:	4620      	mov	r0, r4
 80018ee:	f002 fa6d 	bl	8003dcc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &received2, 1, 1000);
 80018f2:	4d45      	ldr	r5, [pc, #276]	; (8001a08 <main+0x208>)
 80018f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f8:	2201      	movs	r2, #1
 80018fa:	4629      	mov	r1, r5
 80018fc:	4620      	mov	r0, r4
 80018fe:	f002 fa65 	bl	8003dcc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n\r\n", 4, 1000);
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	2204      	movs	r2, #4
 8001908:	4943      	ldr	r1, [pc, #268]	; (8001a18 <main+0x218>)
 800190a:	4620      	mov	r0, r4
 800190c:	f002 fa5e 	bl	8003dcc <HAL_UART_Transmit>
			switch (received2)
 8001910:	782b      	ldrb	r3, [r5, #0]
 8001912:	3b30      	subs	r3, #48	; 0x30
 8001914:	2b04      	cmp	r3, #4
 8001916:	d8d6      	bhi.n	80018c6 <main+0xc6>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <main+0x120>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	080018a9 	.word	0x080018a9
 8001924:	08001935 	.word	0x08001935
 8001928:	08001955 	.word	0x08001955
 800192c:	08001975 	.word	0x08001975
 8001930:	08001995 	.word	0x08001995
				WriteShieldLED(1, 0, 0, 0, &Shield);
 8001934:	ac02      	add	r4, sp, #8
 8001936:	9400      	str	r4, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	461a      	mov	r2, r3
 800193c:	4619      	mov	r1, r3
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fbe2 	bl	8001108 <WriteShieldLED>
				WriteShieldIN(1, 0, 0, 0, &Shield);
 8001944:	9400      	str	r4, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	461a      	mov	r2, r3
 800194a:	4619      	mov	r1, r3
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff fc21 	bl	8001194 <WriteShieldIN>
				break;
 8001952:	e7b8      	b.n	80018c6 <main+0xc6>
				WriteShieldLED(0, 1, 0, 0, &Shield);
 8001954:	ac02      	add	r4, sp, #8
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	461a      	mov	r2, r3
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fbd2 	bl	8001108 <WriteShieldLED>
				WriteShieldIN(0, 1, 0, 0, &Shield);
 8001964:	9400      	str	r4, [sp, #0]
 8001966:	2300      	movs	r3, #0
 8001968:	461a      	mov	r2, r3
 800196a:	2101      	movs	r1, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fc11 	bl	8001194 <WriteShieldIN>
				break;
 8001972:	e7a8      	b.n	80018c6 <main+0xc6>
				WriteShieldLED(0, 0, 1, 0, &Shield);
 8001974:	ac02      	add	r4, sp, #8
 8001976:	9400      	str	r4, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	2201      	movs	r2, #1
 800197c:	4619      	mov	r1, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fbc2 	bl	8001108 <WriteShieldLED>
				WriteShieldIN(0, 0, 1, 0, &Shield);
 8001984:	9400      	str	r4, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fc01 	bl	8001194 <WriteShieldIN>
				break;
 8001992:	e798      	b.n	80018c6 <main+0xc6>
				WriteShieldLED(0, 0, 0, 1, &Shield);
 8001994:	ac02      	add	r4, sp, #8
 8001996:	9400      	str	r4, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	2200      	movs	r2, #0
 800199c:	4611      	mov	r1, r2
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff fbb2 	bl	8001108 <WriteShieldLED>
				WriteShieldIN(0, 0, 0, 1, &Shield);
 80019a4:	9400      	str	r4, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	2200      	movs	r2, #0
 80019aa:	4611      	mov	r1, r2
 80019ac:	4610      	mov	r0, r2
 80019ae:	f7ff fbf1 	bl	8001194 <WriteShieldIN>
				break;
 80019b2:	e788      	b.n	80018c6 <main+0xc6>
			Read_ADC(&Shield);
 80019b4:	a802      	add	r0, sp, #8
 80019b6:	f7ff fc35 	bl	8001224 <Read_ADC>
			PrintStatus(&Shield);
 80019ba:	a802      	add	r0, sp, #8
 80019bc:	f7ff fd34 	bl	8001428 <PrintStatus>
			PrintADC(&Shield);
 80019c0:	a802      	add	r0, sp, #8
 80019c2:	f7ff fd5b 	bl	800147c <PrintADC>
			tcnt = 0;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <main+0x204>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e77f      	b.n	80018ce <main+0xce>
 80019ce:	bf00      	nop
 80019d0:	40a00000 	.word	0x40a00000
 80019d4:	3f85c28f 	.word	0x3f85c28f
 80019d8:	3f8a3d71 	.word	0x3f8a3d71
 80019dc:	47379800 	.word	0x47379800
 80019e0:	461c4000 	.word	0x461c4000
 80019e4:	200004c0 	.word	0x200004c0
 80019e8:	08008630 	.word	0x08008630
 80019ec:	08008668 	.word	0x08008668
 80019f0:	080086a0 	.word	0x080086a0
 80019f4:	080086d8 	.word	0x080086d8
 80019f8:	08008710 	.word	0x08008710
 80019fc:	08008748 	.word	0x08008748
 8001a00:	08008780 	.word	0x08008780
 8001a04:	20000201 	.word	0x20000201
 8001a08:	20000200 	.word	0x20000200
 8001a0c:	20000904 	.word	0x20000904
 8001a10:	20000500 	.word	0x20000500
 8001a14:	080087b8 	.word	0x080087b8
 8001a18:	08008628 	.word	0x08008628

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b500      	push	{lr}
 8001a1e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	2100      	movs	r1, #0
 8001a22:	9100      	str	r1, [sp, #0]
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_MspInit+0x3c>)
 8001a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a30:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a34:	9200      	str	r2, [sp, #0]
 8001a36:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	9101      	str	r1, [sp, #4]
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a4c:	2007      	movs	r0, #7
 8001a4e:	f000 fe81 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	b003      	add	sp, #12
 8001a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	2300      	movs	r3, #0
 8001a62:	9303      	str	r3, [sp, #12]
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	9305      	str	r3, [sp, #20]
 8001a68:	9306      	str	r3, [sp, #24]
 8001a6a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8001a6c:	6802      	ldr	r2, [r0, #0]
 8001a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a72:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a7a:	b008      	add	sp, #32
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a80:	2500      	movs	r5, #0
 8001a82:	9500      	str	r5, [sp, #0]
 8001a84:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001a96:	9200      	str	r2, [sp, #0]
 8001a98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	9501      	str	r5, [sp, #4]
 8001a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa6:	f002 0201 	and.w	r2, r2, #1
 8001aaa:	9201      	str	r2, [sp, #4]
 8001aac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	9502      	str	r5, [sp, #8]
 8001ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab2:	f042 0202 	orr.w	r2, r2, #2
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Vbb_Pin|A2_Isense_1_2_Pin;
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2603      	movs	r6, #3
 8001ac8:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	a903      	add	r1, sp, #12
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <HAL_ADC_MspInit+0xd4>)
 8001ace:	f001 f99b 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A3_Isense_3_4_Pin;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A3_Isense_3_4_GPIO_Port, &GPIO_InitStruct);
 8001ada:	a903      	add	r1, sp, #12
 8001adc:	4815      	ldr	r0, [pc, #84]	; (8001b34 <HAL_ADC_MspInit+0xd8>)
 8001ade:	f001 f993 	bl	8002e08 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <HAL_ADC_MspInit+0xdc>)
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_ADC_MspInit+0xe0>)
 8001ae6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ae8:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aea:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aec:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afe:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b04:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b06:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b08:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0a:	f000 ff09 	bl	8002920 <HAL_DMA_Init>
 8001b0e:	b958      	cbnz	r0, 8001b28 <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_ADC_MspInit+0xdc>)
 8001b12:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b14:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	4611      	mov	r1, r2
 8001b1a:	2012      	movs	r0, #18
 8001b1c:	f000 fe2c 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b20:	2012      	movs	r0, #18
 8001b22:	f000 fe5d 	bl	80027e0 <HAL_NVIC_EnableIRQ>
}
 8001b26:	e7a8      	b.n	8001a7a <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8001b28:	f7ff fd82 	bl	8001630 <Error_Handler>
 8001b2c:	e7f0      	b.n	8001b10 <HAL_ADC_MspInit+0xb4>
 8001b2e:	bf00      	nop
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	20000460 	.word	0x20000460
 8001b3c:	40026410 	.word	0x40026410

08001b40 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001b40:	6802      	ldr	r2, [r0, #0]
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_Base_MspInit+0x3c>)
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d000      	beq.n	8001b4a <HAL_TIM_Base_MspInit+0xa>
 8001b48:	4770      	bx	lr
{
 8001b4a:	b500      	push	{lr}
 8001b4c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4e:	2100      	movs	r1, #0
 8001b50:	9101      	str	r1, [sp, #4]
 8001b52:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8001b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b58:	f042 0210 	orr.w	r2, r2, #16
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b68:	460a      	mov	r2, r1
 8001b6a:	2036      	movs	r0, #54	; 0x36
 8001b6c:	f000 fe04 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b70:	2036      	movs	r0, #54	; 0x36
 8001b72:	f000 fe35 	bl	80027e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b76:	b003      	add	sp, #12
 8001b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b7c:	40001000 	.word	0x40001000

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b510      	push	{r4, lr}
 8001b82:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	2300      	movs	r3, #0
 8001b86:	9303      	str	r3, [sp, #12]
 8001b88:	9304      	str	r3, [sp, #16]
 8001b8a:	9305      	str	r3, [sp, #20]
 8001b8c:	9306      	str	r3, [sp, #24]
 8001b8e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001b90:	6802      	ldr	r2, [r0, #0]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0x74>)
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b98:	b008      	add	sp, #32
 8001b9a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b9c:	2400      	movs	r4, #0
 8001b9e:	9401      	str	r4, [sp, #4]
 8001ba0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
 8001bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	9402      	str	r4, [sp, #8]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bca:	230c      	movs	r3, #12
 8001bcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	a903      	add	r1, sp, #12
 8001bdc:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <HAL_UART_MspInit+0x78>)
 8001bde:	f001 f913 	bl	8002e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001be2:	4622      	mov	r2, r4
 8001be4:	4621      	mov	r1, r4
 8001be6:	2026      	movs	r0, #38	; 0x26
 8001be8:	f000 fdc6 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bec:	2026      	movs	r0, #38	; 0x26
 8001bee:	f000 fdf7 	bl	80027e0 <HAL_NVIC_EnableIRQ>
}
 8001bf2:	e7d1      	b.n	8001b98 <HAL_UART_MspInit+0x18>
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	40020000 	.word	0x40020000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler>

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	e7fe      	b.n	8001c00 <MemManage_Handler>

08001c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler>

08001c06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	4770      	bx	lr

08001c08 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0e:	f000 f8e5 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	bd08      	pop	{r3, pc}

08001c14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c16:	4802      	ldr	r0, [pc, #8]	; (8001c20 <ADC_IRQHandler+0xc>)
 8001c18:	f000 fbdd 	bl	80023d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c1c:	bd08      	pop	{r3, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000418 	.word	0x20000418

08001c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c26:	4802      	ldr	r0, [pc, #8]	; (8001c30 <USART2_IRQHandler+0xc>)
 8001c28:	f002 fa40 	bl	80040ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000904 	.word	0x20000904

08001c34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM6_DAC_IRQHandler+0xc>)
 8001c38:	f001 fd99 	bl	800376e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c3c:	bd08      	pop	{r3, pc}
 8001c3e:	bf00      	nop
 8001c40:	200004c0 	.word	0x200004c0

08001c44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c46:	4802      	ldr	r0, [pc, #8]	; (8001c50 <DMA2_Stream0_IRQHandler+0xc>)
 8001c48:	f000 fff0 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c4c:	bd08      	pop	{r3, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000460 	.word	0x20000460

08001c54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	460d      	mov	r5, r1
 8001c58:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	e004      	b.n	8001c68 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8001c5e:	f7ff fcc9 	bl	80015f4 <__io_getchar>
 8001c62:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8001c66:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	42b4      	cmp	r4, r6
 8001c6a:	dbf8      	blt.n	8001c5e <_read+0xa>
	}

return len;
}
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}

08001c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2400      	movs	r4, #0
 8001c76:	e005      	b.n	8001c84 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001c78:	1c4d      	adds	r5, r1, #1
 8001c7a:	7808      	ldrb	r0, [r1, #0]
 8001c7c:	f7ff fca8 	bl	80015d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8001c82:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c84:	42b4      	cmp	r4, r6
 8001c86:	dbf7      	blt.n	8001c78 <_write+0x8>
	}
	return len;
}
 8001c88:	4630      	mov	r0, r6
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}

08001c8c <_close>:

int _close(int file)
{
	return -1;
}
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	4770      	bx	lr

08001c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c96:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4770      	bx	lr

08001c9c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	4770      	bx	lr

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <_sbrk+0x38>)
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <_sbrk+0x40>)
 8001cae:	6800      	ldr	r0, [r0, #0]
 8001cb0:	b140      	cbz	r0, 8001cc4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <_sbrk+0x40>)
 8001cb4:	6800      	ldr	r0, [r0, #0]
 8001cb6:	4403      	add	r3, r0
 8001cb8:	1a52      	subs	r2, r2, r1
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d806      	bhi.n	8001ccc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <_sbrk+0x40>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001cc2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <_sbrk+0x40>)
 8001cc6:	4c08      	ldr	r4, [pc, #32]	; (8001ce8 <_sbrk+0x44>)
 8001cc8:	6004      	str	r4, [r0, #0]
 8001cca:	e7f2      	b.n	8001cb2 <_sbrk+0xe>
    errno = ENOMEM;
 8001ccc:	f002 fa8a 	bl	80041e4 <__errno>
 8001cd0:	230c      	movs	r3, #12
 8001cd2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	e7f3      	b.n	8001cc2 <_sbrk+0x1e>
 8001cda:	bf00      	nop
 8001cdc:	20020000 	.word	0x20020000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	20000204 	.word	0x20000204
 8001ce8:	20000950 	.word	0x20000950

08001cec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <SystemInit+0x18>)
 8001cee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cf2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d0e:	e003      	b.n	8001d18 <LoopCopyDataInit>

08001d10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d16:	3104      	adds	r1, #4

08001d18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d20:	d3f6      	bcc.n	8001d10 <CopyDataInit>
  ldr  r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d24:	e002      	b.n	8001d2c <LoopFillZerobss>

08001d26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d28:	f842 3b04 	str.w	r3, [r2], #4

08001d2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d30:	d3f9      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d32:	f7ff ffdb 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f002 fa5b 	bl	80041f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff fd61 	bl	8001800 <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d44:	08008b18 	.word	0x08008b18
  ldr  r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d4c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001d50:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001d54:	2000094c 	.word	0x2000094c

08001d58 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <CAN1_RX0_IRQHandler>
	...

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_InitTick+0x40>)
 8001d62:	7818      	ldrb	r0, [r3, #0]
 8001d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d68:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_InitTick+0x44>)
 8001d6e:	6810      	ldr	r0, [r2, #0]
 8001d70:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d74:	f000 fd42 	bl	80027fc <HAL_SYSTICK_Config>
 8001d78:	b968      	cbnz	r0, 8001d96 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	2c0f      	cmp	r4, #15
 8001d7c:	d901      	bls.n	8001d82 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e00a      	b.n	8001d98 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d82:	2200      	movs	r2, #0
 8001d84:	4621      	mov	r1, r4
 8001d86:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8a:	f000 fcf5 	bl	8002778 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_InitTick+0x48>)
 8001d90:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2000      	movs	r0, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001d96:	2001      	movs	r0, #1
}
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000008 	.word	0x20000008

08001da8 <HAL_Init>:
{
 8001da8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_Init+0x30>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 fcc5 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff ffc6 	bl	8001d5c <HAL_InitTick>
  HAL_MspInit();
 8001dd0:	f7ff fe24 	bl	8001a1c <HAL_MspInit>
}
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	bd08      	pop	{r3, pc}
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ddc:	4a03      	ldr	r2, [pc, #12]	; (8001dec <HAL_IncTick+0x10>)
 8001dde:	6811      	ldr	r1, [r2, #0]
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_IncTick+0x14>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	440b      	add	r3, r1
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000944 	.word	0x20000944
 8001df0:	20000004 	.word	0x20000004

08001df4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001df4:	4b01      	ldr	r3, [pc, #4]	; (8001dfc <HAL_GetTick+0x8>)
 8001df6:	6818      	ldr	r0, [r3, #0]
}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000944 	.word	0x20000944

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff fff6 	bl	8001df4 <HAL_GetTick>
 8001e08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001e0e:	d002      	beq.n	8001e16 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_Delay+0x24>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	f7ff ffed 	bl	8001df4 <HAL_GetTick>
 8001e1a:	1b40      	subs	r0, r0, r5
 8001e1c:	42a0      	cmp	r0, r4
 8001e1e:	d3fa      	bcc.n	8001e16 <HAL_Delay+0x16>
  {
  }
}
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004

08001e28 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <ADC_Init+0x12c>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e30:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	6841      	ldr	r1, [r0, #4]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3a:	6802      	ldr	r2, [r0, #0]
 8001e3c:	6853      	ldr	r3, [r2, #4]
 8001e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e42:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e44:	6802      	ldr	r2, [r0, #0]
 8001e46:	6853      	ldr	r3, [r2, #4]
 8001e48:	6901      	ldr	r1, [r0, #16]
 8001e4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e4e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e50:	6802      	ldr	r2, [r0, #0]
 8001e52:	6853      	ldr	r3, [r2, #4]
 8001e54:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001e58:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e5a:	6802      	ldr	r2, [r0, #0]
 8001e5c:	6853      	ldr	r3, [r2, #4]
 8001e5e:	6881      	ldr	r1, [r0, #8]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e64:	6802      	ldr	r2, [r0, #0]
 8001e66:	6893      	ldr	r3, [r2, #8]
 8001e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e6c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e6e:	6802      	ldr	r2, [r0, #0]
 8001e70:	6893      	ldr	r3, [r2, #8]
 8001e72:	68c1      	ldr	r1, [r0, #12]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e78:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <ADC_Init+0x130>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d04b      	beq.n	8001f18 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e80:	6802      	ldr	r2, [r0, #0]
 8001e82:	6893      	ldr	r3, [r2, #8]
 8001e84:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001e88:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e8a:	6802      	ldr	r2, [r0, #0]
 8001e8c:	6893      	ldr	r3, [r2, #8]
 8001e8e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e94:	6802      	ldr	r2, [r0, #0]
 8001e96:	6893      	ldr	r3, [r2, #8]
 8001e98:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e9c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e9e:	6802      	ldr	r2, [r0, #0]
 8001ea0:	6893      	ldr	r3, [r2, #8]
 8001ea2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ea8:	6802      	ldr	r2, [r0, #0]
 8001eaa:	6893      	ldr	r3, [r2, #8]
 8001eac:	f023 0302 	bic.w	r3, r3, #2
 8001eb0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eb2:	6802      	ldr	r2, [r0, #0]
 8001eb4:	6893      	ldr	r3, [r2, #8]
 8001eb6:	7e01      	ldrb	r1, [r0, #24]
 8001eb8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001ebc:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ebe:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d133      	bne.n	8001f2e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ec6:	6802      	ldr	r2, [r0, #0]
 8001ec8:	6853      	ldr	r3, [r2, #4]
 8001eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ece:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ed0:	6802      	ldr	r2, [r0, #0]
 8001ed2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eda:	6801      	ldr	r1, [r0, #0]
 8001edc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001ede:	69c2      	ldr	r2, [r0, #28]
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001ee6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ee8:	6802      	ldr	r2, [r0, #0]
 8001eea:	6893      	ldr	r3, [r2, #8]
 8001eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ef0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ef2:	6802      	ldr	r2, [r0, #0]
 8001ef4:	6893      	ldr	r3, [r2, #8]
 8001ef6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001efa:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001efe:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f00:	6802      	ldr	r2, [r0, #0]
 8001f02:	6893      	ldr	r3, [r2, #8]
 8001f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f08:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f0a:	6802      	ldr	r2, [r0, #0]
 8001f0c:	6893      	ldr	r3, [r2, #8]
 8001f0e:	6941      	ldr	r1, [r0, #20]
 8001f10:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001f14:	6093      	str	r3, [r2, #8]
}
 8001f16:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	6893      	ldr	r3, [r2, #8]
 8001f1c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f20:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f22:	6802      	ldr	r2, [r0, #0]
 8001f24:	6893      	ldr	r3, [r2, #8]
 8001f26:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f2a:	6093      	str	r3, [r2, #8]
 8001f2c:	e7bc      	b.n	8001ea8 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f2e:	6802      	ldr	r2, [r0, #0]
 8001f30:	6853      	ldr	r3, [r2, #4]
 8001f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f36:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	6853      	ldr	r3, [r2, #4]
 8001f3c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f40:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f42:	6801      	ldr	r1, [r0, #0]
 8001f44:	684b      	ldr	r3, [r1, #4]
 8001f46:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e7be      	b.n	8001ed0 <ADC_Init+0xa8>
 8001f52:	bf00      	nop
 8001f54:	40012300 	.word	0x40012300
 8001f58:	0f000001 	.word	0x0f000001

08001f5c <HAL_ADC_Init>:
  if(hadc == NULL)
 8001f5c:	b338      	cbz	r0, 8001fae <HAL_ADC_Init+0x52>
{
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f64:	b143      	cbz	r3, 8001f78 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f68:	f013 0f10 	tst.w	r3, #16
 8001f6c:	d00b      	beq.n	8001f86 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001f6e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001f70:	2300      	movs	r3, #0
 8001f72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001f76:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001f78:	f7ff fd70 	bl	8001a5c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001f80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001f84:	e7ef      	b.n	8001f66 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8c:	f023 0302 	bic.w	r3, r3, #2
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff ff46 	bl	8001e28 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6423      	str	r3, [r4, #64]	; 0x40
 8001fac:	e7e0      	b.n	8001f70 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_ADC_Start>:
{
 8001fb4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001fba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d07d      	beq.n	80020be <HAL_ADC_Start+0x10a>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fc8:	6803      	ldr	r3, [r0, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	f012 0f01 	tst.w	r2, #1
 8001fd0:	d113      	bne.n	8001ffa <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_ADC_Start+0x120>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_ADC_Start+0x124>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	0c9b      	lsrs	r3, r3, #18
 8001fe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fea:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001fec:	e002      	b.n	8001ff4 <HAL_ADC_Start+0x40>
      counter--;
 8001fee:	9b01      	ldr	r3, [sp, #4]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ffa:	6802      	ldr	r2, [r0, #0]
 8001ffc:	6893      	ldr	r3, [r2, #8]
 8001ffe:	f013 0f01 	tst.w	r3, #1
 8002002:	d05e      	beq.n	80020c2 <HAL_ADC_Start+0x10e>
    ADC_STATE_CLR_SET(hadc->State,
 8002004:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002006:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002014:	6853      	ldr	r3, [r2, #4]
 8002016:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800201a:	d005      	beq.n	8002028 <HAL_ADC_Start+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800201c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800201e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002026:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002028:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800202a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800202e:	d01b      	beq.n	8002068 <HAL_ADC_Start+0xb4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002030:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002032:	f023 0306 	bic.w	r3, r3, #6
 8002036:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8002038:	2300      	movs	r3, #0
 800203a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800203e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8002042:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_ADC_Start+0x128>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f013 0f1f 	tst.w	r3, #31
 800204c:	d127      	bne.n	800209e <HAL_ADC_Start+0xea>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_ADC_Start+0x12c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_ADC_Start+0xd6>
 8002056:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_ADC_Start+0xba>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800205e:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <HAL_ADC_Start+0x130>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00b      	beq.n	800207c <HAL_ADC_Start+0xc8>
  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e02d      	b.n	80020c4 <HAL_ADC_Start+0x110>
      ADC_CLEAR_ERRORCODE(hadc);
 8002068:	2300      	movs	r3, #0
 800206a:	6443      	str	r3, [r0, #68]	; 0x44
 800206c:	e7e4      	b.n	8002038 <HAL_ADC_Start+0x84>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800206e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002072:	6852      	ldr	r2, [r2, #4]
 8002074:	f012 0f1f 	tst.w	r2, #31
 8002078:	d007      	beq.n	800208a <HAL_ADC_Start+0xd6>
 800207a:	e7f0      	b.n	800205e <HAL_ADC_Start+0xaa>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800207c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002080:	6852      	ldr	r2, [r2, #4]
 8002082:	f002 021f 	and.w	r2, r2, #31
 8002086:	2a0f      	cmp	r2, #15
 8002088:	d81e      	bhi.n	80020c8 <HAL_ADC_Start+0x114>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002090:	d11c      	bne.n	80020cc <HAL_ADC_Start+0x118>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002098:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800209a:	2000      	movs	r0, #0
 800209c:	e012      	b.n	80020c4 <HAL_ADC_Start+0x110>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800209e:	6803      	ldr	r3, [r0, #0]
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_ADC_Start+0x12c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d001      	beq.n	80020aa <HAL_ADC_Start+0xf6>
  return HAL_OK;
 80020a6:	2000      	movs	r0, #0
 80020a8:	e00c      	b.n	80020c4 <HAL_ADC_Start+0x110>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020b0:	d10e      	bne.n	80020d0 <HAL_ADC_Start+0x11c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80020ba:	2000      	movs	r0, #0
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_Start+0x110>
  __HAL_LOCK(hadc);
 80020be:	2002      	movs	r0, #2
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_Start+0x110>
  return HAL_OK;
 80020c2:	2000      	movs	r0, #0
}
 80020c4:	b002      	add	sp, #8
 80020c6:	4770      	bx	lr
  return HAL_OK;
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7fb      	b.n	80020c4 <HAL_ADC_Start+0x110>
 80020cc:	2000      	movs	r0, #0
 80020ce:	e7f9      	b.n	80020c4 <HAL_ADC_Start+0x110>
 80020d0:	2000      	movs	r0, #0
 80020d2:	e7f7      	b.n	80020c4 <HAL_ADC_Start+0x110>
 80020d4:	20000000 	.word	0x20000000
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	40012300 	.word	0x40012300
 80020e0:	40012000 	.word	0x40012000
 80020e4:	40012200 	.word	0x40012200

080020e8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80020e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d019      	beq.n	8002124 <HAL_ADC_Stop+0x3c>
 80020f0:	2301      	movs	r3, #1
 80020f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80020f6:	6802      	ldr	r2, [r0, #0]
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002100:	6803      	ldr	r3, [r0, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f013 0f01 	tst.w	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 800210a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800210c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800211a:	2300      	movs	r3, #0
 800211c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002120:	4618      	mov	r0, r3
 8002122:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8002124:	2002      	movs	r0, #2
}
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002128:	6803      	ldr	r3, [r0, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002130:	d003      	beq.n	800213a <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002132:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002134:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002138:	d11c      	bne.n	8002174 <HAL_ADC_PollForConversion+0x4c>
{
 800213a:	b570      	push	{r4, r5, r6, lr}
 800213c:	460d      	mov	r5, r1
 800213e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002140:	f7ff fe58 	bl	8001df4 <HAL_GetTick>
 8002144:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f012 0f02 	tst.w	r2, #2
 800214e:	d11a      	bne.n	8002186 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002150:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002154:	d0f7      	beq.n	8002146 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002156:	b125      	cbz	r5, 8002162 <HAL_ADC_PollForConversion+0x3a>
 8002158:	f7ff fe4c 	bl	8001df4 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	42a8      	cmp	r0, r5
 8002160:	d9f1      	bls.n	8002146 <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800216a:	2300      	movs	r3, #0
 800216c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
 8002172:	e02d      	b.n	80021d0 <HAL_ADC_PollForConversion+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002176:	f043 0320 	orr.w	r3, r3, #32
 800217a:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800217c:	2300      	movs	r3, #0
 800217e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
}
 8002184:	4770      	bx	lr
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002186:	f06f 0212 	mvn.w	r2, #18
 800218a:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800218c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800218e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002192:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800219c:	d117      	bne.n	80021ce <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800219e:	7e22      	ldrb	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021a0:	b9ba      	cbnz	r2, 80021d2 <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80021a8:	d003      	beq.n	80021b2 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021aa:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021b0:	d111      	bne.n	80021d6 <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b8:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80021c0:	d10b      	bne.n	80021da <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 80021ca:	2000      	movs	r0, #0
 80021cc:	e000      	b.n	80021d0 <HAL_ADC_PollForConversion+0xa8>
 80021ce:	2000      	movs	r0, #0
}
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80021d2:	2000      	movs	r0, #0
 80021d4:	e7fc      	b.n	80021d0 <HAL_ADC_PollForConversion+0xa8>
 80021d6:	2000      	movs	r0, #0
 80021d8:	e7fa      	b.n	80021d0 <HAL_ADC_PollForConversion+0xa8>
 80021da:	2000      	movs	r0, #0
 80021dc:	e7f8      	b.n	80021d0 <HAL_ADC_PollForConversion+0xa8>
	...

080021e0 <HAL_ADC_Start_DMA>:
{
 80021e0:	b530      	push	{r4, r5, lr}
 80021e2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80021e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	f000 809b 	beq.w	8002328 <HAL_ADC_Start_DMA+0x148>
 80021f2:	2301      	movs	r3, #1
 80021f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021f8:	6804      	ldr	r4, [r0, #0]
 80021fa:	68a3      	ldr	r3, [r4, #8]
 80021fc:	f013 0f01 	tst.w	r3, #1
 8002200:	d113      	bne.n	800222a <HAL_ADC_Start_DMA+0x4a>
    __HAL_ADC_ENABLE(hadc);
 8002202:	68a3      	ldr	r3, [r4, #8]
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	60a3      	str	r3, [r4, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800220a:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_ADC_Start_DMA+0x160>)
 800220c:	681c      	ldr	r4, [r3, #0]
 800220e:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <HAL_ADC_Start_DMA+0x164>)
 8002210:	fba3 3404 	umull	r3, r4, r3, r4
 8002214:	0ca4      	lsrs	r4, r4, #18
 8002216:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800221a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800221c:	e002      	b.n	8002224 <HAL_ADC_Start_DMA+0x44>
      counter--;
 800221e:	9c01      	ldr	r4, [sp, #4]
 8002220:	3c01      	subs	r4, #1
 8002222:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8002224:	9c01      	ldr	r4, [sp, #4]
 8002226:	2c00      	cmp	r4, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800222a:	6803      	ldr	r3, [r0, #0]
 800222c:	689c      	ldr	r4, [r3, #8]
 800222e:	f014 0f01 	tst.w	r4, #1
 8002232:	d07b      	beq.n	800232c <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8002234:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002236:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800223a:	f024 0401 	bic.w	r4, r4, #1
 800223e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002242:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800224a:	d005      	beq.n	8002258 <HAL_ADC_Start_DMA+0x78>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800224c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800224e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002256:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002258:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800225a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800225e:	d038      	beq.n	80022d2 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002260:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002262:	f023 0306 	bic.w	r3, r3, #6
 8002266:	6443      	str	r3, [r0, #68]	; 0x44
 8002268:	4613      	mov	r3, r2
 800226a:	4604      	mov	r4, r0
    __HAL_UNLOCK(hadc);   
 800226c:	2200      	movs	r2, #0
 800226e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002272:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002274:	4834      	ldr	r0, [pc, #208]	; (8002348 <HAL_ADC_Start_DMA+0x168>)
 8002276:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002278:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800227a:	4834      	ldr	r0, [pc, #208]	; (800234c <HAL_ADC_Start_DMA+0x16c>)
 800227c:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800227e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002280:	4833      	ldr	r0, [pc, #204]	; (8002350 <HAL_ADC_Start_DMA+0x170>)
 8002282:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002284:	6822      	ldr	r2, [r4, #0]
 8002286:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800228a:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800228c:	6825      	ldr	r5, [r4, #0]
 800228e:	6868      	ldr	r0, [r5, #4]
 8002290:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002294:	6068      	str	r0, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002296:	6825      	ldr	r5, [r4, #0]
 8002298:	68a8      	ldr	r0, [r5, #8]
 800229a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800229e:	60a8      	str	r0, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022a0:	6820      	ldr	r0, [r4, #0]
 80022a2:	460a      	mov	r2, r1
 80022a4:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80022a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022aa:	f000 fb9f 	bl	80029ec <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_ADC_Start_DMA+0x174>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f013 0f1f 	tst.w	r3, #31
 80022b6:	d127      	bne.n	8002308 <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	4a27      	ldr	r2, [pc, #156]	; (8002358 <HAL_ADC_Start_DMA+0x178>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d019      	beq.n	80022f4 <HAL_ADC_Start_DMA+0x114>
 80022c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_ADC_Start_DMA+0x17c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00b      	beq.n	80022e6 <HAL_ADC_Start_DMA+0x106>
  return HAL_OK;
 80022ce:	2000      	movs	r0, #0
 80022d0:	e02d      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	2300      	movs	r3, #0
 80022d4:	6443      	str	r3, [r0, #68]	; 0x44
 80022d6:	e7c7      	b.n	8002268 <HAL_ADC_Start_DMA+0x88>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80022dc:	6852      	ldr	r2, [r2, #4]
 80022de:	f012 0f1f 	tst.w	r2, #31
 80022e2:	d007      	beq.n	80022f4 <HAL_ADC_Start_DMA+0x114>
 80022e4:	e7f0      	b.n	80022c8 <HAL_ADC_Start_DMA+0xe8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022e6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80022ea:	6852      	ldr	r2, [r2, #4]
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	2a0f      	cmp	r2, #15
 80022f2:	d81e      	bhi.n	8002332 <HAL_ADC_Start_DMA+0x152>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80022fa:	d11c      	bne.n	8002336 <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002304:	2000      	movs	r0, #0
 8002306:	e012      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_ADC_Start_DMA+0x178>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d001      	beq.n	8002314 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 8002310:	2000      	movs	r0, #0
 8002312:	e00c      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800231a:	d10e      	bne.n	800233a <HAL_ADC_Start_DMA+0x15a>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002324:	2000      	movs	r0, #0
 8002326:	e002      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 8002328:	2002      	movs	r0, #2
 800232a:	e000      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 800232c:	2000      	movs	r0, #0
}
 800232e:	b003      	add	sp, #12
 8002330:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8002332:	2000      	movs	r0, #0
 8002334:	e7fb      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
 8002336:	2000      	movs	r0, #0
 8002338:	e7f9      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
 800233a:	2000      	movs	r0, #0
 800233c:	e7f7      	b.n	800232e <HAL_ADC_Start_DMA+0x14e>
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83
 8002348:	0800253b 	.word	0x0800253b
 800234c:	080023c9 	.word	0x080023c9
 8002350:	08002525 	.word	0x08002525
 8002354:	40012300 	.word	0x40012300
 8002358:	40012000 	.word	0x40012000
 800235c:	40012200 	.word	0x40012200

08002360 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8002360:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d028      	beq.n	80023ba <HAL_ADC_Stop_DMA+0x5a>
{
 8002368:	b510      	push	{r4, lr}
 800236a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800236c:	2301      	movs	r3, #1
 800236e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	6893      	ldr	r3, [r2, #8]
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800237c:	6803      	ldr	r3, [r0, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	f012 0f01 	tst.w	r2, #1
 8002384:	d004      	beq.n	8002390 <HAL_ADC_Stop_DMA+0x30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002386:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002388:	2300      	movs	r3, #0
 800238a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800238e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002396:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002398:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800239a:	f000 fb5c 	bl	8002a56 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	6853      	ldr	r3, [r2, #4]
 80023a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023a6:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6423      	str	r3, [r4, #64]	; 0x40
 80023b8:	e7e6      	b.n	8002388 <HAL_ADC_Stop_DMA+0x28>
  __HAL_LOCK(hadc);
 80023ba:	2002      	movs	r0, #2
}
 80023bc:	4770      	bx	lr

080023be <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80023be:	6803      	ldr	r3, [r0, #0]
 80023c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_ConvCpltCallback>:
}
 80023c4:	4770      	bx	lr

080023c6 <HAL_ADC_ConvHalfCpltCallback>:
}
 80023c6:	4770      	bx	lr

080023c8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023c8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023cc:	f7ff fffb 	bl	80023c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d0:	bd08      	pop	{r3, pc}

080023d2 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_ErrorCallback>:
}
 80023d4:	4770      	bx	lr

080023d6 <HAL_ADC_IRQHandler>:
{
 80023d6:	b538      	push	{r3, r4, r5, lr}
 80023d8:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80023da:	6802      	ldr	r2, [r0, #0]
 80023dc:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80023de:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 80023e0:	f011 0f02 	tst.w	r1, #2
 80023e4:	d02f      	beq.n	8002446 <HAL_ADC_IRQHandler+0x70>
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	b363      	cbz	r3, 8002446 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023ee:	f013 0f10 	tst.w	r3, #16
 80023f2:	d103      	bne.n	80023fc <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023fc:	6893      	ldr	r3, [r2, #8]
 80023fe:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8002402:	d119      	bne.n	8002438 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002404:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002406:	b9bb      	cbnz	r3, 8002438 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002408:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800240a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800240e:	d003      	beq.n	8002418 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002410:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002412:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002416:	d10f      	bne.n	8002438 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002418:	6853      	ldr	r3, [r2, #4]
 800241a:	f023 0320 	bic.w	r3, r3, #32
 800241e:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002426:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800242a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800242e:	d103      	bne.n	8002438 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002438:	4620      	mov	r0, r4
 800243a:	f7ff ffc3 	bl	80023c4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	f06f 0212 	mvn.w	r2, #18
 8002444:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 8002450:	f011 0f04 	tst.w	r1, #4
 8002454:	d036      	beq.n	80024c4 <HAL_ADC_IRQHandler+0xee>
 8002456:	2a00      	cmp	r2, #0
 8002458:	d034      	beq.n	80024c4 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800245c:	f012 0f10 	tst.w	r2, #16
 8002460:	d103      	bne.n	800246a <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002462:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002468:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002470:	d121      	bne.n	80024b6 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002474:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002478:	d003      	beq.n	8002482 <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800247a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800247c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002480:	d119      	bne.n	80024b6 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002482:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002484:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002488:	d115      	bne.n	80024b6 <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800248a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800248c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002490:	d111      	bne.n	80024b6 <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002492:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002494:	b97a      	cbnz	r2, 80024b6 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800249e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024a4:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024ac:	d103      	bne.n	80024b6 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f000 f94a 	bl	8002750 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	f06f 020c 	mvn.w	r2, #12
 80024c2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80024c8:	6853      	ldr	r3, [r2, #4]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 80024ce:	f011 0f01 	tst.w	r1, #1
 80024d2:	d004      	beq.n	80024de <HAL_ADC_IRQHandler+0x108>
 80024d4:	b11b      	cbz	r3, 80024de <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	f013 0f01 	tst.w	r3, #1
 80024dc:	d109      	bne.n	80024f2 <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80024e2:	6853      	ldr	r3, [r2, #4]
 80024e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 80024e8:	f011 0f20 	tst.w	r1, #32
 80024ec:	d000      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x11a>
 80024ee:	b963      	cbnz	r3, 800250a <HAL_ADC_IRQHandler+0x134>
}
 80024f0:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff ff69 	bl	80023d2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	f06f 0201 	mvn.w	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e7e9      	b.n	80024de <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800250a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002512:	f06f 0520 	mvn.w	r5, #32
 8002516:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ff5b 	bl	80023d4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	601d      	str	r5, [r3, #0]
}
 8002522:	e7e5      	b.n	80024f0 <HAL_ADC_IRQHandler+0x11a>

08002524 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002524:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002526:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002528:	2340      	movs	r3, #64	; 0x40
 800252a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800252c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002534:	f7ff ff4e 	bl	80023d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002538:	bd08      	pop	{r3, pc}

0800253a <ADC_DMAConvCplt>:
{
 800253a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800253c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800253e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002540:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002544:	d126      	bne.n	8002594 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6891      	ldr	r1, [r2, #8]
 8002552:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002556:	d119      	bne.n	800258c <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002558:	7e19      	ldrb	r1, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800255a:	b9b9      	cbnz	r1, 800258c <ADC_DMAConvCplt+0x52>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800255c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800255e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8002562:	d003      	beq.n	800256c <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002564:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002566:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800256a:	d10f      	bne.n	800258c <ADC_DMAConvCplt+0x52>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800256c:	6851      	ldr	r1, [r2, #4]
 800256e:	f021 0120 	bic.w	r1, r1, #32
 8002572:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800257c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002582:	d103      	bne.n	800258c <ADC_DMAConvCplt+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff19 	bl	80023c4 <HAL_ADC_ConvCpltCallback>
}
 8002592:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002596:	f012 0f10 	tst.w	r2, #16
 800259a:	d103      	bne.n	80025a4 <ADC_DMAConvCplt+0x6a>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	4798      	blx	r3
}
 80025a2:	e7f6      	b.n	8002592 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff15 	bl	80023d4 <HAL_ADC_ErrorCallback>
 80025aa:	e7f2      	b.n	8002592 <ADC_DMAConvCplt+0x58>

080025ac <HAL_ADC_ConfigChannel>:
{
 80025ac:	b430      	push	{r4, r5}
 80025ae:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80025b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f000 80bd 	beq.w	8002738 <HAL_ADC_ConfigChannel+0x18c>
 80025be:	2301      	movs	r3, #1
 80025c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025c4:	680b      	ldr	r3, [r1, #0]
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	d93e      	bls.n	8002648 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025ca:	6805      	ldr	r5, [r0, #0]
 80025cc:	68ea      	ldr	r2, [r5, #12]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2407      	movs	r4, #7
 80025d8:	fa04 f303 	lsl.w	r3, r4, r3
 80025dc:	ea22 0303 	bic.w	r3, r2, r3
 80025e0:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e2:	6805      	ldr	r5, [r0, #0]
 80025e4:	68ea      	ldr	r2, [r5, #12]
 80025e6:	688c      	ldr	r4, [r1, #8]
 80025e8:	880b      	ldrh	r3, [r1, #0]
 80025ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025ee:	3b1e      	subs	r3, #30
 80025f0:	fa04 f303 	lsl.w	r3, r4, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80025f8:	684b      	ldr	r3, [r1, #4]
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d83a      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025fe:	6805      	ldr	r5, [r0, #0]
 8002600:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002606:	3b05      	subs	r3, #5
 8002608:	241f      	movs	r4, #31
 800260a:	fa04 f303 	lsl.w	r3, r4, r3
 800260e:	ea22 0303 	bic.w	r3, r2, r3
 8002612:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002614:	6805      	ldr	r5, [r0, #0]
 8002616:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002618:	684b      	ldr	r3, [r1, #4]
 800261a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800261e:	3b05      	subs	r3, #5
 8002620:	880c      	ldrh	r4, [r1, #0]
 8002622:	fa04 f303 	lsl.w	r3, r4, r3
 8002626:	4313      	orrs	r3, r2
 8002628:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262a:	6802      	ldr	r2, [r0, #0]
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_ADC_ConfigChannel+0x190>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d050      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002632:	6802      	ldr	r2, [r0, #0]
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_ADC_ConfigChannel+0x190>)
 8002636:	429a      	cmp	r2, r3
 8002638:	d059      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 800263a:	2300      	movs	r3, #0
 800263c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002640:	4618      	mov	r0, r3
}
 8002642:	b002      	add	sp, #8
 8002644:	bc30      	pop	{r4, r5}
 8002646:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002648:	6805      	ldr	r5, [r0, #0]
 800264a:	692a      	ldr	r2, [r5, #16]
 800264c:	b29b      	uxth	r3, r3
 800264e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002652:	2407      	movs	r4, #7
 8002654:	fa04 f303 	lsl.w	r3, r4, r3
 8002658:	ea22 0303 	bic.w	r3, r2, r3
 800265c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800265e:	6805      	ldr	r5, [r0, #0]
 8002660:	692a      	ldr	r2, [r5, #16]
 8002662:	688c      	ldr	r4, [r1, #8]
 8002664:	880b      	ldrh	r3, [r1, #0]
 8002666:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800266a:	fa04 f303 	lsl.w	r3, r4, r3
 800266e:	4313      	orrs	r3, r2
 8002670:	612b      	str	r3, [r5, #16]
 8002672:	e7c1      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d816      	bhi.n	80026a6 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002678:	6805      	ldr	r5, [r0, #0]
 800267a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800267c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002680:	3b23      	subs	r3, #35	; 0x23
 8002682:	241f      	movs	r4, #31
 8002684:	fa04 f303 	lsl.w	r3, r4, r3
 8002688:	ea22 0303 	bic.w	r3, r2, r3
 800268c:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800268e:	6805      	ldr	r5, [r0, #0]
 8002690:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002692:	684b      	ldr	r3, [r1, #4]
 8002694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002698:	3b23      	subs	r3, #35	; 0x23
 800269a:	880c      	ldrh	r4, [r1, #0]
 800269c:	fa04 f303 	lsl.w	r3, r4, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	632b      	str	r3, [r5, #48]	; 0x30
 80026a4:	e7c1      	b.n	800262a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026a6:	6805      	ldr	r5, [r0, #0]
 80026a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80026aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026ae:	3b41      	subs	r3, #65	; 0x41
 80026b0:	241f      	movs	r4, #31
 80026b2:	fa04 f303 	lsl.w	r3, r4, r3
 80026b6:	ea22 0303 	bic.w	r3, r2, r3
 80026ba:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026bc:	6805      	ldr	r5, [r0, #0]
 80026be:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80026c0:	684b      	ldr	r3, [r1, #4]
 80026c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026c6:	3b41      	subs	r3, #65	; 0x41
 80026c8:	880c      	ldrh	r4, [r1, #0]
 80026ca:	fa04 f303 	lsl.w	r3, r4, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80026d2:	e7aa      	b.n	800262a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026d4:	680b      	ldr	r3, [r1, #0]
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d1ab      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_ADC_ConfigChannel+0x194>)
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80026e2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	e7a1      	b.n	8002632 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ee:	680b      	ldr	r3, [r1, #0]
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_ADC_ConfigChannel+0x198>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d001      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x14e>
 80026f6:	2b11      	cmp	r3, #17
 80026f8:	d19f      	bne.n	800263a <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_ADC_ConfigChannel+0x194>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002702:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800270a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800270c:	680a      	ldr	r2, [r1, #0]
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_ADC_ConfigChannel+0x198>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d192      	bne.n	800263a <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_ADC_ConfigChannel+0x19c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_ADC_ConfigChannel+0x1a0>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002724:	005a      	lsls	r2, r3, #1
 8002726:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8002728:	e002      	b.n	8002730 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 800272a:	9b01      	ldr	r3, [sp, #4]
 800272c:	3b01      	subs	r3, #1
 800272e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002730:	9b01      	ldr	r3, [sp, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f9      	bne.n	800272a <HAL_ADC_ConfigChannel+0x17e>
 8002736:	e780      	b.n	800263a <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8002738:	2002      	movs	r0, #2
 800273a:	e782      	b.n	8002642 <HAL_ADC_ConfigChannel+0x96>
 800273c:	40012000 	.word	0x40012000
 8002740:	40012300 	.word	0x40012300
 8002744:	10000012 	.word	0x10000012
 8002748:	20000000 	.word	0x20000000
 800274c:	431bde83 	.word	0x431bde83

08002750 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002756:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002758:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	0200      	lsls	r0, r0, #8
 8002762:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002766:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002768:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800276c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002770:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002778:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_NVIC_SetPriority+0x60>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002782:	f1c3 0407 	rsb	r4, r3, #7
 8002786:	2c04      	cmp	r4, #4
 8002788:	bf28      	it	cs
 800278a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278c:	1d1d      	adds	r5, r3, #4
 800278e:	2d06      	cmp	r5, #6
 8002790:	d918      	bls.n	80027c4 <HAL_NVIC_SetPriority+0x4c>
 8002792:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 35ff 	mov.w	r5, #4294967295
 8002798:	fa05 f404 	lsl.w	r4, r5, r4
 800279c:	ea21 0104 	bic.w	r1, r1, r4
 80027a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a2:	fa05 f303 	lsl.w	r3, r5, r3
 80027a6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027aa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80027ac:	2800      	cmp	r0, #0
 80027ae:	db0b      	blt.n	80027c8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	0109      	lsls	r1, r1, #4
 80027b2:	b2c9      	uxtb	r1, r1
 80027b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80027b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80027bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027c0:	bc30      	pop	{r4, r5}
 80027c2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c4:	2300      	movs	r3, #0
 80027c6:	e7e5      	b.n	8002794 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	f000 000f 	and.w	r0, r0, #15
 80027cc:	0109      	lsls	r1, r1, #4
 80027ce:	b2c9      	uxtb	r1, r1
 80027d0:	4b02      	ldr	r3, [pc, #8]	; (80027dc <HAL_NVIC_SetPriority+0x64>)
 80027d2:	5419      	strb	r1, [r3, r0]
 80027d4:	e7f4      	b.n	80027c0 <HAL_NVIC_SetPriority+0x48>
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00
 80027dc:	e000ed14 	.word	0xe000ed14

080027e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027e0:	2800      	cmp	r0, #0
 80027e2:	db07      	blt.n	80027f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e4:	f000 021f 	and.w	r2, r0, #31
 80027e8:	0940      	lsrs	r0, r0, #5
 80027ea:	2301      	movs	r3, #1
 80027ec:	4093      	lsls	r3, r2
 80027ee:	4a02      	ldr	r2, [pc, #8]	; (80027f8 <HAL_NVIC_EnableIRQ+0x18>)
 80027f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027fc:	3801      	subs	r0, #1
 80027fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002802:	d20a      	bcs.n	800281a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_SYSTICK_Config+0x24>)
 8002806:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_SYSTICK_Config+0x28>)
 800280a:	21f0      	movs	r1, #240	; 0xf0
 800280c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002810:	2000      	movs	r0, #0
 8002812:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800282a:	6805      	ldr	r5, [r0, #0]
 800282c:	682c      	ldr	r4, [r5, #0]
 800282e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002832:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002834:	6804      	ldr	r4, [r0, #0]
 8002836:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002838:	6883      	ldr	r3, [r0, #8]
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d005      	beq.n	800284a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	60da      	str	r2, [r3, #12]
  }
}
 8002846:	bc30      	pop	{r4, r5}
 8002848:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800284a:	6803      	ldr	r3, [r0, #0]
 800284c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	60d9      	str	r1, [r3, #12]
 8002852:	e7f8      	b.n	8002846 <DMA_SetConfig+0x1e>

08002854 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002854:	6802      	ldr	r2, [r0, #0]
 8002856:	b2d3      	uxtb	r3, r2
 8002858:	3b10      	subs	r3, #16
 800285a:	490b      	ldr	r1, [pc, #44]	; (8002888 <DMA_CalcBaseAndBitshift+0x34>)
 800285c:	fba1 1303 	umull	r1, r3, r1, r3
 8002860:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <DMA_CalcBaseAndBitshift+0x38>)
 8002864:	5cc9      	ldrb	r1, [r1, r3]
 8002866:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002868:	2b03      	cmp	r3, #3
 800286a:	d806      	bhi.n	800287a <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800286c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002870:	f022 0203 	bic.w	r2, r2, #3
 8002874:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002876:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002878:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800287e:	f022 0203 	bic.w	r2, r2, #3
 8002882:	3204      	adds	r2, #4
 8002884:	6582      	str	r2, [r0, #88]	; 0x58
 8002886:	e7f6      	b.n	8002876 <DMA_CalcBaseAndBitshift+0x22>
 8002888:	aaaaaaab 	.word	0xaaaaaaab
 800288c:	080087dc 	.word	0x080087dc

08002890 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002890:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002892:	6982      	ldr	r2, [r0, #24]
 8002894:	b992      	cbnz	r2, 80028bc <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002896:	2b01      	cmp	r3, #1
 8002898:	d00a      	beq.n	80028b0 <DMA_CheckFifoParam+0x20>
 800289a:	b11b      	cbz	r3, 80028a4 <DMA_CheckFifoParam+0x14>
 800289c:	2b02      	cmp	r3, #2
 800289e:	d001      	beq.n	80028a4 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2000      	movs	r0, #0
 80028a2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80028aa:	d12c      	bne.n	8002906 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2000      	movs	r0, #0
 80028ae:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b6:	d028      	beq.n	800290a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80028b8:	2000      	movs	r0, #0
 80028ba:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80028c0:	d005      	beq.n	80028ce <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d929      	bls.n	800291a <DMA_CheckFifoParam+0x8a>
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d015      	beq.n	80028f6 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2000      	movs	r0, #0
 80028cc:	4770      	bx	lr
    switch (tmp)
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d803      	bhi.n	80028da <DMA_CheckFifoParam+0x4a>
 80028d2:	e8df f003 	tbb	[pc, r3]
 80028d6:	041c      	.short	0x041c
 80028d8:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2000      	movs	r0, #0
 80028dc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80028e4:	d115      	bne.n	8002912 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2000      	movs	r0, #0
 80028e8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f0:	d011      	beq.n	8002916 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2000      	movs	r0, #0
 80028f4:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80028f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80028fc:	d001      	beq.n	8002902 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002900:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2000      	movs	r0, #0
 8002904:	4770      	bx	lr
        status = HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	4770      	bx	lr
        status = HAL_ERROR;
 800290a:	2001      	movs	r0, #1
 800290c:	4770      	bx	lr
      status = HAL_ERROR;
 800290e:	2001      	movs	r0, #1
 8002910:	4770      	bx	lr
        status = HAL_ERROR;
 8002912:	2001      	movs	r0, #1
 8002914:	4770      	bx	lr
        status = HAL_ERROR;
 8002916:	2001      	movs	r0, #1
 8002918:	4770      	bx	lr
      status = HAL_ERROR;
 800291a:	2001      	movs	r0, #1
 800291c:	4770      	bx	lr
	...

08002920 <HAL_DMA_Init>:
{
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff fa66 	bl	8001df4 <HAL_GetTick>
  if(hdma == NULL)
 8002928:	2c00      	cmp	r4, #0
 800292a:	d05b      	beq.n	80029e4 <HAL_DMA_Init+0xc4>
 800292c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800292e:	2300      	movs	r3, #0
 8002930:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	2302      	movs	r3, #2
 8002936:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f012 0f01 	tst.w	r2, #1
 800294c:	d00a      	beq.n	8002964 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800294e:	f7ff fa51 	bl	8001df4 <HAL_GetTick>
 8002952:	1b40      	subs	r0, r0, r5
 8002954:	2805      	cmp	r0, #5
 8002956:	d9f5      	bls.n	8002944 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002958:	2320      	movs	r3, #32
 800295a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295c:	2003      	movs	r0, #3
 800295e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002962:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002964:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002966:	4820      	ldr	r0, [pc, #128]	; (80029e8 <HAL_DMA_Init+0xc8>)
 8002968:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296a:	6861      	ldr	r1, [r4, #4]
 800296c:	68a2      	ldr	r2, [r4, #8]
 800296e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002970:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002972:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002974:	6921      	ldr	r1, [r4, #16]
 8002976:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002978:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297c:	69a1      	ldr	r1, [r4, #24]
 800297e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002984:	6a21      	ldr	r1, [r4, #32]
 8002986:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002988:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800298c:	2904      	cmp	r1, #4
 800298e:	d01e      	beq.n	80029ce <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002990:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002992:	6826      	ldr	r6, [r4, #0]
 8002994:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002996:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800299a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800299c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80029a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029a4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029a8:	b11b      	cbz	r3, 80029b2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff ff70 	bl	8002890 <DMA_CheckFifoParam>
 80029b0:	b990      	cbnz	r0, 80029d8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80029b2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff ff4d 	bl	8002854 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80029bc:	233f      	movs	r3, #63	; 0x3f
 80029be:	4093      	lsls	r3, r2
 80029c0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c2:	2000      	movs	r0, #0
 80029c4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80029cc:	e7c9      	b.n	8002962 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80029d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80029d2:	4301      	orrs	r1, r0
 80029d4:	430a      	orrs	r2, r1
 80029d6:	e7db      	b.n	8002990 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d8:	2340      	movs	r3, #64	; 0x40
 80029da:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80029dc:	2001      	movs	r0, #1
 80029de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80029e2:	e7be      	b.n	8002962 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80029e4:	2001      	movs	r0, #1
 80029e6:	e7bc      	b.n	8002962 <HAL_DMA_Init+0x42>
 80029e8:	f010803f 	.word	0xf010803f

080029ec <HAL_DMA_Start_IT>:
{
 80029ec:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ee:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80029f0:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80029f4:	2c01      	cmp	r4, #1
 80029f6:	d02c      	beq.n	8002a52 <HAL_DMA_Start_IT+0x66>
 80029f8:	2401      	movs	r4, #1
 80029fa:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80029fe:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002a02:	b2e4      	uxtb	r4, r4
 8002a04:	2c01      	cmp	r4, #1
 8002a06:	d004      	beq.n	8002a12 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002a0e:	2002      	movs	r0, #2
}
 8002a10:	bd38      	pop	{r3, r4, r5, pc}
 8002a12:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	2002      	movs	r0, #2
 8002a16:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff ff02 	bl	8002828 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a26:	233f      	movs	r3, #63	; 0x3f
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a2c:	6822      	ldr	r2, [r4, #0]
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	f043 0316 	orr.w	r3, r3, #22
 8002a34:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a38:	b123      	cbz	r3, 8002a44 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a3a:	6822      	ldr	r2, [r4, #0]
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e7de      	b.n	8002a10 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002a52:	2002      	movs	r0, #2
 8002a54:	e7dc      	b.n	8002a10 <HAL_DMA_Start_IT+0x24>

08002a56 <HAL_DMA_Abort>:
{
 8002a56:	b570      	push	{r4, r5, r6, lr}
 8002a58:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff f9ca 	bl	8001df4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a60:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d006      	beq.n	8002a78 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
}
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	f023 0316 	bic.w	r3, r3, #22
 8002a82:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	6953      	ldr	r3, [r2, #20]
 8002a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a8c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a90:	b1e3      	cbz	r3, 8002acc <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	6813      	ldr	r3, [r2, #0]
 8002a96:	f023 0308 	bic.w	r3, r3, #8
 8002a9a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f013 0f01 	tst.w	r3, #1
 8002aae:	d011      	beq.n	8002ad4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab0:	f7ff f9a0 	bl	8001df4 <HAL_GetTick>
 8002ab4:	1b40      	subs	r0, r0, r5
 8002ab6:	2805      	cmp	r0, #5
 8002ab8:	d9f5      	bls.n	8002aa6 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aba:	2320      	movs	r3, #32
 8002abc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002aca:	e7d4      	b.n	8002a76 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002acc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1df      	bne.n	8002a92 <HAL_DMA_Abort+0x3c>
 8002ad2:	e7e3      	b.n	8002a9c <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ad6:	233f      	movs	r3, #63	; 0x3f
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002ae8:	e7c5      	b.n	8002a76 <HAL_DMA_Abort+0x20>

08002aea <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
 8002afa:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002afc:	2305      	movs	r3, #5
 8002afe:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002b02:	6802      	ldr	r2, [r0, #0]
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002b0c:	2000      	movs	r0, #0
}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_DMA_PollForTransfer>:
{
 8002b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b14:	4604      	mov	r4, r0
 8002b16:	4689      	mov	r9, r1
 8002b18:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick(); 
 8002b1a:	f7ff f96b 	bl	8001df4 <HAL_GetTick>
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b1e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d007      	beq.n	8002b38 <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002b32:	2001      	movs	r0, #1
}
 8002b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b38:	4680      	mov	r8, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b42:	d138      	bne.n	8002bb6 <HAL_DMA_PollForTransfer+0xa6>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002b44:	f1b9 0f00 	cmp.w	r9, #0
 8002b48:	d13a      	bne.n	8002bc0 <HAL_DMA_PollForTransfer+0xb0>
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b4c:	2720      	movs	r7, #32
 8002b4e:	409f      	lsls	r7, r3
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b50:	6da6      	ldr	r6, [r4, #88]	; 0x58
  tmpisr = regs->ISR;
 8002b52:	6833      	ldr	r3, [r6, #0]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002b54:	421f      	tst	r7, r3
 8002b56:	d141      	bne.n	8002bdc <HAL_DMA_PollForTransfer+0xcc>
 8002b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b5a:	f013 0f01 	tst.w	r3, #1
 8002b5e:	d13d      	bne.n	8002bdc <HAL_DMA_PollForTransfer+0xcc>
    if(Timeout != HAL_MAX_DELAY)
 8002b60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b64:	d007      	beq.n	8002b76 <HAL_DMA_PollForTransfer+0x66>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d02e      	beq.n	8002bc8 <HAL_DMA_PollForTransfer+0xb8>
 8002b6a:	f7ff f943 	bl	8001df4 <HAL_GetTick>
 8002b6e:	eba0 0008 	sub.w	r0, r0, r8
 8002b72:	42a8      	cmp	r0, r5
 8002b74:	d828      	bhi.n	8002bc8 <HAL_DMA_PollForTransfer+0xb8>
    tmpisr = regs->ISR;
 8002b76:	6833      	ldr	r3, [r6, #0]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	408a      	lsls	r2, r1
 8002b7e:	421a      	tst	r2, r3
 8002b80:	d004      	beq.n	8002b8c <HAL_DMA_PollForTransfer+0x7c>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b82:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002b84:	f041 0101 	orr.w	r1, r1, #1
 8002b88:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b8a:	60b2      	str	r2, [r6, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	408a      	lsls	r2, r1
 8002b92:	421a      	tst	r2, r3
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_PollForTransfer+0x90>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b96:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002b98:	f041 0102 	orr.w	r1, r1, #2
 8002b9c:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b9e:	60b2      	str	r2, [r6, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	408a      	lsls	r2, r1
 8002ba6:	421a      	tst	r2, r3
 8002ba8:	d0d4      	beq.n	8002b54 <HAL_DMA_PollForTransfer+0x44>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002baa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002bac:	f041 0104 	orr.w	r1, r1, #4
 8002bb0:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb2:	60b2      	str	r2, [r6, #8]
 8002bb4:	e7ce      	b.n	8002b54 <HAL_DMA_PollForTransfer+0x44>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bba:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	e7b9      	b.n	8002b34 <HAL_DMA_PollForTransfer+0x24>
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bc2:	2710      	movs	r7, #16
 8002bc4:	409f      	lsls	r7, r3
 8002bc6:	e7c3      	b.n	8002b50 <HAL_DMA_PollForTransfer+0x40>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002bd8:	2003      	movs	r0, #3
 8002bda:	e7ab      	b.n	8002b34 <HAL_DMA_PollForTransfer+0x24>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bde:	b11b      	cbz	r3, 8002be8 <HAL_DMA_PollForTransfer+0xd8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002be2:	f013 0f01 	tst.w	r3, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_DMA_PollForTransfer+0xea>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002be8:	f1b9 0f00 	cmp.w	r9, #0
 8002bec:	d013      	beq.n	8002c16 <HAL_DMA_PollForTransfer+0x106>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002bee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	4093      	lsls	r3, r2
 8002bf4:	60b3      	str	r3, [r6, #8]
  return status;
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	e79c      	b.n	8002b34 <HAL_DMA_PollForTransfer+0x24>
      HAL_DMA_Abort(hdma);
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff ff2b 	bl	8002a56 <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002c00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c02:	2330      	movs	r3, #48	; 0x30
 8002c04:	4093      	lsls	r3, r2
 8002c06:	60b3      	str	r3, [r6, #8]
      __HAL_UNLOCK(hdma);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_ERROR;
 8002c14:	e78e      	b.n	8002b34 <HAL_DMA_PollForTransfer+0x24>
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002c16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c18:	2330      	movs	r3, #48	; 0x30
 8002c1a:	4093      	lsls	r3, r2
 8002c1c:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8002c2a:	e783      	b.n	8002b34 <HAL_DMA_PollForTransfer+0x24>

08002c2c <HAL_DMA_IRQHandler>:
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c36:	4b72      	ldr	r3, [pc, #456]	; (8002e00 <HAL_DMA_IRQHandler+0x1d4>)
 8002c38:	681d      	ldr	r5, [r3, #0]
 8002c3a:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <HAL_DMA_IRQHandler+0x1d8>)
 8002c3c:	fba3 3505 	umull	r3, r5, r3, r5
 8002c40:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c42:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002c44:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c46:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002c48:	2308      	movs	r3, #8
 8002c4a:	4093      	lsls	r3, r2
 8002c4c:	4233      	tst	r3, r6
 8002c4e:	d010      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c50:	6803      	ldr	r3, [r0, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f012 0f04 	tst.w	r2, #4
 8002c58:	d00b      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	f022 0204 	bic.w	r2, r2, #4
 8002c60:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c62:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002c64:	2308      	movs	r3, #8
 8002c66:	4093      	lsls	r3, r2
 8002c68:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c74:	2301      	movs	r3, #1
 8002c76:	4093      	lsls	r3, r2
 8002c78:	4233      	tst	r3, r6
 8002c7a:	d009      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	6952      	ldr	r2, [r2, #20]
 8002c80:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c84:	d004      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c86:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c92:	2304      	movs	r3, #4
 8002c94:	4093      	lsls	r3, r2
 8002c96:	4233      	tst	r3, r6
 8002c98:	d009      	beq.n	8002cae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	f012 0f02 	tst.w	r2, #2
 8002ca2:	d004      	beq.n	8002cae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ca6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	4093      	lsls	r3, r2
 8002cb4:	4233      	tst	r3, r6
 8002cb6:	d024      	beq.n	8002d02 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	f012 0f08 	tst.w	r2, #8
 8002cc0:	d01f      	beq.n	8002d02 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cc2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002ccc:	d00d      	beq.n	8002cea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002cd4:	d104      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cd8:	b19b      	cbz	r3, 8002d02 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4798      	blx	r3
 8002cde:	e010      	b.n	8002d02 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ce2:	b173      	cbz	r3, 8002d02 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4798      	blx	r3
 8002ce8:	e00b      	b.n	8002d02 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002cf0:	d103      	bne.n	8002cfa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f022 0208 	bic.w	r2, r2, #8
 8002cf8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cfc:	b10b      	cbz	r3, 8002d02 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d04:	2320      	movs	r3, #32
 8002d06:	4093      	lsls	r3, r2
 8002d08:	4233      	tst	r3, r6
 8002d0a:	d055      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	f012 0f10 	tst.w	r2, #16
 8002d14:	d050      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d16:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d18:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d00e      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002d2a:	d033      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d32:	d12a      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002d34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03e      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4798      	blx	r3
 8002d3e:	e03b      	b.n	8002db8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d40:	6822      	ldr	r2, [r4, #0]
 8002d42:	6813      	ldr	r3, [r2, #0]
 8002d44:	f023 0316 	bic.w	r3, r3, #22
 8002d48:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	6953      	ldr	r3, [r2, #20]
 8002d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d52:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d56:	b1a3      	cbz	r3, 8002d82 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	f023 0308 	bic.w	r3, r3, #8
 8002d60:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d64:	233f      	movs	r3, #63	; 0x3f
 8002d66:	4093      	lsls	r3, r2
 8002d68:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002d76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d03f      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4798      	blx	r3
 8002d80:	e03c      	b.n	8002dfc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e7      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x12c>
 8002d88:	e7eb      	b.n	8002d62 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002d8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d8c:	b1a3      	cbz	r3, 8002db8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4798      	blx	r3
 8002d92:	e011      	b.n	8002db8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d9a:	d109      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002da4:	2300      	movs	r3, #0
 8002da6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002db2:	b10b      	cbz	r3, 8002db8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002db4:	4620      	mov	r0, r4
 8002db6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dba:	b1fb      	cbz	r3, 8002dfc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dbe:	f013 0f01 	tst.w	r3, #1
 8002dc2:	d017      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dc4:	2305      	movs	r3, #5
 8002dc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002dd4:	9b01      	ldr	r3, [sp, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	42ab      	cmp	r3, r5
 8002ddc:	d804      	bhi.n	8002de8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f013 0f01 	tst.w	r3, #1
 8002de6:	d1f5      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002de8:	2300      	movs	r3, #0
 8002dea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002df4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002df6:	b10b      	cbz	r3, 8002dfc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002df8:	4620      	mov	r0, r4
 8002dfa:	4798      	blx	r3
}
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e00:	20000000 	.word	0x20000000
 8002e04:	1b4e81b5 	.word	0x1b4e81b5

08002e08 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f200 80d1 	bhi.w	8002fb2 <HAL_GPIO_Init+0x1aa>
{
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b083      	sub	sp, #12
 8002e14:	e039      	b.n	8002e8a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e16:	2206      	movs	r2, #6
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x14>
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	40aa      	lsls	r2, r5
 8002e1e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e20:	3402      	adds	r4, #2
 8002e22:	4d64      	ldr	r5, [pc, #400]	; (8002fb4 <HAL_GPIO_Init+0x1ac>)
 8002e24:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e28:	4a63      	ldr	r2, [pc, #396]	; (8002fb8 <HAL_GPIO_Init+0x1b0>)
 8002e2a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	43f2      	mvns	r2, r6
 8002e2e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e32:	684f      	ldr	r7, [r1, #4]
 8002e34:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002e38:	d001      	beq.n	8002e3e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002e3a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8002e3e:	4c5e      	ldr	r4, [pc, #376]	; (8002fb8 <HAL_GPIO_Init+0x1b0>)
 8002e40:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8002e42:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e48:	684f      	ldr	r7, [r1, #4]
 8002e4a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002e4e:	d001      	beq.n	8002e54 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002e50:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8002e54:	4c58      	ldr	r4, [pc, #352]	; (8002fb8 <HAL_GPIO_Init+0x1b0>)
 8002e56:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e58:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5e:	684f      	ldr	r7, [r1, #4]
 8002e60:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002e64:	d001      	beq.n	8002e6a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002e66:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8002e6a:	4c53      	ldr	r4, [pc, #332]	; (8002fb8 <HAL_GPIO_Init+0x1b0>)
 8002e6c:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002e6e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e72:	684d      	ldr	r5, [r1, #4]
 8002e74:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8002e78:	d001      	beq.n	8002e7e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002e7a:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8002e7e:	4c4e      	ldr	r4, [pc, #312]	; (8002fb8 <HAL_GPIO_Init+0x1b0>)
 8002e80:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	3301      	adds	r3, #1
 8002e84:	2b0f      	cmp	r3, #15
 8002e86:	f200 8092 	bhi.w	8002fae <HAL_GPIO_Init+0x1a6>
    ioposition = 0x01U << position;
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	680c      	ldr	r4, [r1, #0]
 8002e90:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8002e94:	42b2      	cmp	r2, r6
 8002e96:	d1f4      	bne.n	8002e82 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e98:	684c      	ldr	r4, [r1, #4]
 8002e9a:	1e65      	subs	r5, r4, #1
 8002e9c:	2d01      	cmp	r5, #1
 8002e9e:	d903      	bls.n	8002ea8 <HAL_GPIO_Init+0xa0>
 8002ea0:	2c11      	cmp	r4, #17
 8002ea2:	d001      	beq.n	8002ea8 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea4:	2c12      	cmp	r4, #18
 8002ea6:	d112      	bne.n	8002ece <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8002ea8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eaa:	005f      	lsls	r7, r3, #1
 8002eac:	2403      	movs	r4, #3
 8002eae:	40bc      	lsls	r4, r7
 8002eb0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb4:	68cc      	ldr	r4, [r1, #12]
 8002eb6:	40bc      	lsls	r4, r7
 8002eb8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002eba:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ebc:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ebe:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec2:	684c      	ldr	r4, [r1, #4]
 8002ec4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002ecc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ece:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed0:	005f      	lsls	r7, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	40ba      	lsls	r2, r7
 8002ed6:	43d2      	mvns	r2, r2
 8002ed8:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eda:	688d      	ldr	r5, [r1, #8]
 8002edc:	40bd      	lsls	r5, r7
 8002ede:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8002ee0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee2:	684c      	ldr	r4, [r1, #4]
 8002ee4:	2c02      	cmp	r4, #2
 8002ee6:	d001      	beq.n	8002eec <HAL_GPIO_Init+0xe4>
 8002ee8:	2c12      	cmp	r4, #18
 8002eea:	d113      	bne.n	8002f14 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8002eec:	08dd      	lsrs	r5, r3, #3
 8002eee:	3508      	adds	r5, #8
 8002ef0:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ef4:	f003 0407 	and.w	r4, r3, #7
 8002ef8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002efc:	240f      	movs	r4, #15
 8002efe:	fa04 f40c 	lsl.w	r4, r4, ip
 8002f02:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f06:	690c      	ldr	r4, [r1, #16]
 8002f08:	fa04 f40c 	lsl.w	r4, r4, ip
 8002f0c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002f10:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002f14:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f16:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f18:	684c      	ldr	r4, [r1, #4]
 8002f1a:	f004 0403 	and.w	r4, r4, #3
 8002f1e:	40bc      	lsls	r4, r7
 8002f20:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002f22:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f24:	684a      	ldr	r2, [r1, #4]
 8002f26:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002f2a:	d0aa      	beq.n	8002e82 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_GPIO_Init+0x1b4>)
 8002f32:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002f34:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002f38:	6454      	str	r4, [r2, #68]	; 0x44
 8002f3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f3c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f40:	9201      	str	r2, [sp, #4]
 8002f42:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f44:	089c      	lsrs	r4, r3, #2
 8002f46:	1ca5      	adds	r5, r4, #2
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_GPIO_Init+0x1ac>)
 8002f4a:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	0095      	lsls	r5, r2, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	40aa      	lsls	r2, r5
 8002f58:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_GPIO_Init+0x1b8>)
 8002f5e:	4290      	cmp	r0, r2
 8002f60:	f43f af5b 	beq.w	8002e1a <HAL_GPIO_Init+0x12>
 8002f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f68:	4290      	cmp	r0, r2
 8002f6a:	d016      	beq.n	8002f9a <HAL_GPIO_Init+0x192>
 8002f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f70:	4290      	cmp	r0, r2
 8002f72:	d014      	beq.n	8002f9e <HAL_GPIO_Init+0x196>
 8002f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f78:	4290      	cmp	r0, r2
 8002f7a:	d012      	beq.n	8002fa2 <HAL_GPIO_Init+0x19a>
 8002f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f80:	4290      	cmp	r0, r2
 8002f82:	d010      	beq.n	8002fa6 <HAL_GPIO_Init+0x19e>
 8002f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f88:	4290      	cmp	r0, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_GPIO_Init+0x1a2>
 8002f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f90:	4290      	cmp	r0, r2
 8002f92:	f43f af40 	beq.w	8002e16 <HAL_GPIO_Init+0xe>
 8002f96:	2207      	movs	r2, #7
 8002f98:	e740      	b.n	8002e1c <HAL_GPIO_Init+0x14>
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	e73e      	b.n	8002e1c <HAL_GPIO_Init+0x14>
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	e73c      	b.n	8002e1c <HAL_GPIO_Init+0x14>
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	e73a      	b.n	8002e1c <HAL_GPIO_Init+0x14>
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	e738      	b.n	8002e1c <HAL_GPIO_Init+0x14>
 8002faa:	2205      	movs	r2, #5
 8002fac:	e736      	b.n	8002e1c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002fae:	b003      	add	sp, #12
 8002fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb2:	4770      	bx	lr
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40013c00 	.word	0x40013c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020000 	.word	0x40020000

08002fc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	b912      	cbnz	r2, 8002fcc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc6:	0409      	lsls	r1, r1, #16
 8002fc8:	6181      	str	r1, [r0, #24]
  }
}
 8002fca:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002fcc:	6181      	str	r1, [r0, #24]
 8002fce:	4770      	bx	lr

08002fd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_PWREx_EnableOverDrive+0x70>)
 8002fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_PWREx_EnableOverDrive+0x74>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff2:	f7fe feff 	bl	8001df4 <HAL_GetTick>
 8002ff6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_PWREx_EnableOverDrive+0x78>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003000:	d108      	bne.n	8003014 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003002:	f7fe fef7 	bl	8001df4 <HAL_GetTick>
 8003006:	1b00      	subs	r0, r0, r4
 8003008:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800300c:	d9f4      	bls.n	8002ff8 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800300e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003010:	b002      	add	sp, #8
 8003012:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_PWREx_EnableOverDrive+0x7c>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800301a:	f7fe feeb 	bl	8001df4 <HAL_GetTick>
 800301e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_PWREx_EnableOverDrive+0x78>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003028:	d107      	bne.n	800303a <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800302a:	f7fe fee3 	bl	8001df4 <HAL_GetTick>
 800302e:	1b00      	subs	r0, r0, r4
 8003030:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003034:	d9f4      	bls.n	8003020 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8003036:	2003      	movs	r0, #3
 8003038:	e7ea      	b.n	8003010 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800303a:	2000      	movs	r0, #0
 800303c:	e7e8      	b.n	8003010 <HAL_PWREx_EnableOverDrive+0x40>
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	420e0040 	.word	0x420e0040
 8003048:	40007000 	.word	0x40007000
 800304c:	420e0044 	.word	0x420e0044

08003050 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003050:	2800      	cmp	r0, #0
 8003052:	f000 809e 	beq.w	8003192 <HAL_RCC_ClockConfig+0x142>
{
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305a:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_ClockConfig+0x14c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	428b      	cmp	r3, r1
 8003064:	d209      	bcs.n	800307a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	b2cb      	uxtb	r3, r1
 8003068:	4a4c      	ldr	r2, [pc, #304]	; (800319c <HAL_RCC_ClockConfig+0x14c>)
 800306a:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306c:	6813      	ldr	r3, [r2, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	428b      	cmp	r3, r1
 8003074:	d001      	beq.n	800307a <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8003076:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003078:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	f013 0f02 	tst.w	r3, #2
 8003080:	d017      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003082:	f013 0f04 	tst.w	r3, #4
 8003086:	d004      	beq.n	8003092 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003088:	4a45      	ldr	r2, [pc, #276]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 800308a:	6893      	ldr	r3, [r2, #8]
 800308c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003090:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	f013 0f08 	tst.w	r3, #8
 8003098:	d004      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800309a:	4a41      	ldr	r2, [pc, #260]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 800309c:	6893      	ldr	r3, [r2, #8]
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4a3e      	ldr	r2, [pc, #248]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 80030a6:	6893      	ldr	r3, [r2, #8]
 80030a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ac:	68a0      	ldr	r0, [r4, #8]
 80030ae:	4303      	orrs	r3, r0
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f013 0f01 	tst.w	r3, #1
 80030ba:	d032      	beq.n	8003122 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d021      	beq.n	8003106 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	1e9a      	subs	r2, r3, #2
 80030c4:	2a01      	cmp	r2, #1
 80030c6:	d925      	bls.n	8003114 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	f012 0f02 	tst.w	r2, #2
 80030d0:	d061      	beq.n	8003196 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4933      	ldr	r1, [pc, #204]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 80030d4:	688a      	ldr	r2, [r1, #8]
 80030d6:	f022 0203 	bic.w	r2, r2, #3
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030de:	f7fe fe89 	bl	8001df4 <HAL_GetTick>
 80030e2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030f2:	d016      	beq.n	8003122 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe fe7e 	bl	8001df4 <HAL_GetTick>
 80030f8:	1b80      	subs	r0, r0, r6
 80030fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80030fe:	4298      	cmp	r0, r3
 8003100:	d9f0      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8003102:	2003      	movs	r0, #3
 8003104:	e7b8      	b.n	8003078 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800310e:	d1e0      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003110:	2001      	movs	r0, #1
 8003112:	e7b1      	b.n	8003078 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800311c:	d1d9      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	e7aa      	b.n	8003078 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003122:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_RCC_ClockConfig+0x14c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	42ab      	cmp	r3, r5
 800312c:	d909      	bls.n	8003142 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	b2ea      	uxtb	r2, r5
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x14c>)
 8003132:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	42ab      	cmp	r3, r5
 800313c:	d001      	beq.n	8003142 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800313e:	2001      	movs	r0, #1
 8003140:	e79a      	b.n	8003078 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	f013 0f04 	tst.w	r3, #4
 8003148:	d006      	beq.n	8003158 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 800314c:	6893      	ldr	r3, [r2, #8]
 800314e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003152:	68e1      	ldr	r1, [r4, #12]
 8003154:	430b      	orrs	r3, r1
 8003156:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	f013 0f08 	tst.w	r3, #8
 800315e:	d007      	beq.n	8003170 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003160:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 8003162:	6893      	ldr	r3, [r2, #8]
 8003164:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003168:	6921      	ldr	r1, [r4, #16]
 800316a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800316e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003170:	f000 f844 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x150>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800317c:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_RCC_ClockConfig+0x154>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	40d8      	lsrs	r0, r3
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x158>)
 8003184:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x15c>)
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f7fe fde7 	bl	8001d5c <HAL_InitTick>
  return HAL_OK;
 800318e:	2000      	movs	r0, #0
 8003190:	e772      	b.n	8003078 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003192:	2001      	movs	r0, #1
}
 8003194:	4770      	bx	lr
        return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	e76e      	b.n	8003078 <HAL_RCC_ClockConfig+0x28>
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	080087c4 	.word	0x080087c4
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000008 	.word	0x20000008

080031b0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80031b0:	4b01      	ldr	r3, [pc, #4]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031be:	f7ff fff7 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031ca:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80031ce:	40d8      	lsrs	r0, r3
 80031d0:	bd08      	pop	{r3, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	080087d4 	.word	0x080087d4

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031de:	f7ff ffe7 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80031ea:	4a03      	ldr	r2, [pc, #12]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80031ee:	40d8      	lsrs	r0, r3
 80031f0:	bd08      	pop	{r3, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	080087d4 	.word	0x080087d4

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003200:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d007      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x20>
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xcc>
 8003210:	2b04      	cmp	r3, #4
 8003212:	f000 80ad 	beq.w	8003370 <HAL_RCC_GetSysClockFreq+0x174>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003216:	4858      	ldr	r0, [pc, #352]	; (8003378 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003218:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800321c:	4b55      	ldr	r3, [pc, #340]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800322a:	d02a      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322c:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003234:	461e      	mov	r6, r3
 8003236:	2700      	movs	r7, #0
 8003238:	015c      	lsls	r4, r3, #5
 800323a:	2500      	movs	r5, #0
 800323c:	1ae4      	subs	r4, r4, r3
 800323e:	eb65 0507 	sbc.w	r5, r5, r7
 8003242:	01a9      	lsls	r1, r5, #6
 8003244:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003248:	01a0      	lsls	r0, r4, #6
 800324a:	1b00      	subs	r0, r0, r4
 800324c:	eb61 0105 	sbc.w	r1, r1, r5
 8003250:	00cb      	lsls	r3, r1, #3
 8003252:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003256:	00c4      	lsls	r4, r0, #3
 8003258:	19a0      	adds	r0, r4, r6
 800325a:	eb43 0107 	adc.w	r1, r3, r7
 800325e:	024b      	lsls	r3, r1, #9
 8003260:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003264:	0244      	lsls	r4, r0, #9
 8003266:	4620      	mov	r0, r4
 8003268:	4619      	mov	r1, r3
 800326a:	2300      	movs	r3, #0
 800326c:	f7fd fd2c 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003270:	4b40      	ldr	r3, [pc, #256]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003278:	3301      	adds	r3, #1
 800327a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800327c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003280:	e7ca      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800328a:	461e      	mov	r6, r3
 800328c:	2700      	movs	r7, #0
 800328e:	015c      	lsls	r4, r3, #5
 8003290:	2500      	movs	r5, #0
 8003292:	1ae4      	subs	r4, r4, r3
 8003294:	eb65 0507 	sbc.w	r5, r5, r7
 8003298:	01a9      	lsls	r1, r5, #6
 800329a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800329e:	01a0      	lsls	r0, r4, #6
 80032a0:	1b00      	subs	r0, r0, r4
 80032a2:	eb61 0105 	sbc.w	r1, r1, r5
 80032a6:	00cb      	lsls	r3, r1, #3
 80032a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80032ac:	00c4      	lsls	r4, r0, #3
 80032ae:	19a0      	adds	r0, r4, r6
 80032b0:	eb43 0107 	adc.w	r1, r3, r7
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80032ba:	0284      	lsls	r4, r0, #10
 80032bc:	4620      	mov	r0, r4
 80032be:	4619      	mov	r1, r3
 80032c0:	2300      	movs	r3, #0
 80032c2:	f7fd fd01 	bl	8000cc8 <__aeabi_uldivmod>
 80032c6:	e7d3      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032d6:	d028      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x12e>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80032e0:	461e      	mov	r6, r3
 80032e2:	2700      	movs	r7, #0
 80032e4:	015c      	lsls	r4, r3, #5
 80032e6:	2500      	movs	r5, #0
 80032e8:	1ae4      	subs	r4, r4, r3
 80032ea:	eb65 0507 	sbc.w	r5, r5, r7
 80032ee:	01a9      	lsls	r1, r5, #6
 80032f0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80032f4:	01a0      	lsls	r0, r4, #6
 80032f6:	1b00      	subs	r0, r0, r4
 80032f8:	eb61 0105 	sbc.w	r1, r1, r5
 80032fc:	00cb      	lsls	r3, r1, #3
 80032fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003302:	00c4      	lsls	r4, r0, #3
 8003304:	19a0      	adds	r0, r4, r6
 8003306:	eb43 0107 	adc.w	r1, r3, r7
 800330a:	024b      	lsls	r3, r1, #9
 800330c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003310:	0244      	lsls	r4, r0, #9
 8003312:	4620      	mov	r0, r4
 8003314:	4619      	mov	r1, r3
 8003316:	2300      	movs	r3, #0
 8003318:	f7fd fcd6 	bl	8000cc8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003324:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003328:	e776      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_GetSysClockFreq+0x178>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003332:	461e      	mov	r6, r3
 8003334:	2700      	movs	r7, #0
 8003336:	015c      	lsls	r4, r3, #5
 8003338:	2500      	movs	r5, #0
 800333a:	1ae4      	subs	r4, r4, r3
 800333c:	eb65 0507 	sbc.w	r5, r5, r7
 8003340:	01a9      	lsls	r1, r5, #6
 8003342:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003346:	01a0      	lsls	r0, r4, #6
 8003348:	1b00      	subs	r0, r0, r4
 800334a:	eb61 0105 	sbc.w	r1, r1, r5
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003354:	00c4      	lsls	r4, r0, #3
 8003356:	19a0      	adds	r0, r4, r6
 8003358:	eb43 0107 	adc.w	r1, r3, r7
 800335c:	028b      	lsls	r3, r1, #10
 800335e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003362:	0284      	lsls	r4, r0, #10
 8003364:	4620      	mov	r0, r4
 8003366:	4619      	mov	r1, r3
 8003368:	2300      	movs	r3, #0
 800336a:	f7fd fcad 	bl	8000cc8 <__aeabi_uldivmod>
 800336e:	e7d5      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x120>
      sysclockfreq = HSE_VALUE;
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <HAL_RCC_GetSysClockFreq+0x180>)
  return sysclockfreq;
 8003372:	e751      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x1c>
 8003374:	40023800 	.word	0x40023800
 8003378:	00f42400 	.word	0x00f42400
 800337c:	007a1200 	.word	0x007a1200

08003380 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	6803      	ldr	r3, [r0, #0]
 8003388:	f013 0f01 	tst.w	r3, #1
 800338c:	d041      	beq.n	8003412 <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800338e:	4ba6      	ldr	r3, [pc, #664]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d032      	beq.n	8003400 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800339a:	4ba3      	ldr	r3, [pc, #652]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d027      	beq.n	80033f6 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d059      	beq.n	8003466 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	6863      	ldr	r3, [r4, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d05b      	beq.n	8003472 <HAL_RCC_OscConfig+0xf2>
 80033ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033be:	d05e      	beq.n	800347e <HAL_RCC_OscConfig+0xfe>
 80033c0:	4b99      	ldr	r3, [pc, #612]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d2:	6863      	ldr	r3, [r4, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05c      	beq.n	8003492 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fd0c 	bl	8001df4 <HAL_GetTick>
 80033dc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b92      	ldr	r3, [pc, #584]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033e6:	d114      	bne.n	8003412 <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fd04 	bl	8001df4 <HAL_GetTick>
 80033ec:	1b40      	subs	r0, r0, r5
 80033ee:	2864      	cmp	r0, #100	; 0x64
 80033f0:	d9f5      	bls.n	80033de <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 80033f2:	2003      	movs	r0, #3
 80033f4:	e19d      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033f6:	4b8c      	ldr	r3, [pc, #560]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033fe:	d0d2      	beq.n	80033a6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	4b89      	ldr	r3, [pc, #548]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003408:	d003      	beq.n	8003412 <HAL_RCC_OscConfig+0x92>
 800340a:	6863      	ldr	r3, [r4, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 818d 	beq.w	800372c <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f013 0f02 	tst.w	r3, #2
 8003418:	d067      	beq.n	80034ea <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800341a:	4b83      	ldr	r3, [pc, #524]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f013 0f0c 	tst.w	r3, #12
 8003422:	d04a      	beq.n	80034ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003424:	4b80      	ldr	r3, [pc, #512]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800342c:	2b08      	cmp	r3, #8
 800342e:	d03f      	beq.n	80034b0 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003430:	4b7d      	ldr	r3, [pc, #500]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d048      	beq.n	80034ce <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800343c:	68e3      	ldr	r3, [r4, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d074      	beq.n	800352c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fcd4 	bl	8001df4 <HAL_GetTick>
 800344c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f013 0f02 	tst.w	r3, #2
 8003456:	d160      	bne.n	800351a <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7fe fccc 	bl	8001df4 <HAL_GetTick>
 800345c:	1b40      	subs	r0, r0, r5
 800345e:	2802      	cmp	r0, #2
 8003460:	d9f5      	bls.n	800344e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
 8003464:	e165      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800346e:	d0a0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x32>
 8003470:	e7c6      	b.n	8003400 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003472:	4a6d      	ldr	r2, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003474:	6813      	ldr	r3, [r2, #0]
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e7a9      	b.n	80033d2 <HAL_RCC_OscConfig+0x52>
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e79f      	b.n	80033d2 <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8003492:	f7fe fcaf 	bl	8001df4 <HAL_GetTick>
 8003496:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003498:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034a0:	d0b7      	beq.n	8003412 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a2:	f7fe fca7 	bl	8001df4 <HAL_GetTick>
 80034a6:	1b40      	subs	r0, r0, r5
 80034a8:	2864      	cmp	r0, #100	; 0x64
 80034aa:	d9f5      	bls.n	8003498 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80034ac:	2003      	movs	r0, #3
 80034ae:	e140      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034b0:	4b5d      	ldr	r3, [pc, #372]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034b8:	d1ba      	bne.n	8003430 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f013 0f02 	tst.w	r3, #2
 80034c2:	d00a      	beq.n	80034da <HAL_RCC_OscConfig+0x15a>
 80034c4:	68e3      	ldr	r3, [r4, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d007      	beq.n	80034da <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
 80034cc:	e131      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034d6:	d1b1      	bne.n	800343c <HAL_RCC_OscConfig+0xbc>
 80034d8:	e7ef      	b.n	80034ba <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4a53      	ldr	r2, [pc, #332]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80034dc:	6813      	ldr	r3, [r2, #0]
 80034de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034e2:	6921      	ldr	r1, [r4, #16]
 80034e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034e8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f013 0f08 	tst.w	r3, #8
 80034f0:	d040      	beq.n	8003574 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	6963      	ldr	r3, [r4, #20]
 80034f4:	b363      	cbz	r3, 8003550 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f6:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_RCC_OscConfig+0x2b0>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe fc7a 	bl	8001df4 <HAL_GetTick>
 8003500:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003502:	4b49      	ldr	r3, [pc, #292]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 8003504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003506:	f013 0f02 	tst.w	r3, #2
 800350a:	d133      	bne.n	8003574 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7fe fc72 	bl	8001df4 <HAL_GetTick>
 8003510:	1b40      	subs	r0, r0, r5
 8003512:	2802      	cmp	r0, #2
 8003514:	d9f5      	bls.n	8003502 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003516:	2003      	movs	r0, #3
 8003518:	e10b      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	4a43      	ldr	r2, [pc, #268]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800351c:	6813      	ldr	r3, [r2, #0]
 800351e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003522:	6921      	ldr	r1, [r4, #16]
 8003524:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e7de      	b.n	80034ea <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003532:	f7fe fc5f 	bl	8001df4 <HAL_GetTick>
 8003536:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003538:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f013 0f02 	tst.w	r3, #2
 8003540:	d0d3      	beq.n	80034ea <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003542:	f7fe fc57 	bl	8001df4 <HAL_GetTick>
 8003546:	1b40      	subs	r0, r0, r5
 8003548:	2802      	cmp	r0, #2
 800354a:	d9f5      	bls.n	8003538 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 800354c:	2003      	movs	r0, #3
 800354e:	e0f0      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_OscConfig+0x2b0>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe fc4d 	bl	8001df4 <HAL_GetTick>
 800355a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800355e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003560:	f013 0f02 	tst.w	r3, #2
 8003564:	d006      	beq.n	8003574 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe fc45 	bl	8001df4 <HAL_GetTick>
 800356a:	1b40      	subs	r0, r0, r5
 800356c:	2802      	cmp	r0, #2
 800356e:	d9f5      	bls.n	800355c <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8003570:	2003      	movs	r0, #3
 8003572:	e0de      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	f013 0f04 	tst.w	r3, #4
 800357a:	d079      	beq.n	8003670 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357c:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003584:	d133      	bne.n	80035ee <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	4b27      	ldr	r3, [pc, #156]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800358c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800359e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_OscConfig+0x2b4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035a8:	d023      	beq.n	80035f2 <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d034      	beq.n	800361a <HAL_RCC_OscConfig+0x29a>
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d041      	beq.n	8003638 <HAL_RCC_OscConfig+0x2b8>
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80035b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	671a      	str	r2, [r3, #112]	; 0x70
 80035be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035c0:	f022 0204 	bic.w	r2, r2, #4
 80035c4:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c6:	68a3      	ldr	r3, [r4, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d03f      	beq.n	800364c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe fc12 	bl	8001df4 <HAL_GetTick>
 80035d0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f013 0f02 	tst.w	r3, #2
 80035da:	d148      	bne.n	800366e <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fc0a 	bl	8001df4 <HAL_GetTick>
 80035e0:	1b80      	subs	r0, r0, r6
 80035e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80035e6:	4298      	cmp	r0, r3
 80035e8:	d9f3      	bls.n	80035d2 <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 80035ea:	2003      	movs	r0, #3
 80035ec:	e0a1      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2500      	movs	r5, #0
 80035f0:	e7d6      	b.n	80035a0 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x2b4>)
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80035fc:	f7fe fbfa 	bl	8001df4 <HAL_GetTick>
 8003600:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x2b4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800360a:	d1ce      	bne.n	80035aa <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fe fbf2 	bl	8001df4 <HAL_GetTick>
 8003610:	1b80      	subs	r0, r0, r6
 8003612:	2802      	cmp	r0, #2
 8003614:	d9f5      	bls.n	8003602 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8003616:	2003      	movs	r0, #3
 8003618:	e08b      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361a:	4a03      	ldr	r2, [pc, #12]	; (8003628 <HAL_RCC_OscConfig+0x2a8>)
 800361c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e7cf      	b.n	80035c6 <HAL_RCC_OscConfig+0x246>
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	42470000 	.word	0x42470000
 8003630:	42470e80 	.word	0x42470e80
 8003634:	40007000 	.word	0x40007000
 8003638:	4b40      	ldr	r3, [pc, #256]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 800363a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800363c:	f042 0204 	orr.w	r2, r2, #4
 8003640:	671a      	str	r2, [r3, #112]	; 0x70
 8003642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	671a      	str	r2, [r3, #112]	; 0x70
 800364a:	e7bc      	b.n	80035c6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fe fbd2 	bl	8001df4 <HAL_GetTick>
 8003650:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f013 0f02 	tst.w	r3, #2
 800365a:	d008      	beq.n	800366e <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fbca 	bl	8001df4 <HAL_GetTick>
 8003660:	1b80      	subs	r0, r0, r6
 8003662:	f241 3388 	movw	r3, #5000	; 0x1388
 8003666:	4298      	cmp	r0, r3
 8003668:	d9f3      	bls.n	8003652 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800366a:	2003      	movs	r0, #3
 800366c:	e061      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366e:	b9e5      	cbnz	r5, 80036aa <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003670:	69a3      	ldr	r3, [r4, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d05c      	beq.n	8003730 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003676:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	f002 020c 	and.w	r2, r2, #12
 800367e:	2a08      	cmp	r2, #8
 8003680:	d059      	beq.n	8003736 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003682:	2b02      	cmp	r3, #2
 8003684:	d017      	beq.n	80036b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_RCC_OscConfig+0x3c0>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fbb2 	bl	8001df4 <HAL_GetTick>
 8003690:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800369a:	d045      	beq.n	8003728 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fbaa 	bl	8001df4 <HAL_GetTick>
 80036a0:	1b00      	subs	r0, r0, r4
 80036a2:	2802      	cmp	r0, #2
 80036a4:	d9f5      	bls.n	8003692 <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 80036a6:	2003      	movs	r0, #3
 80036a8:	e043      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036aa:	4a24      	ldr	r2, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 80036ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6413      	str	r3, [r2, #64]	; 0x40
 80036b4:	e7dc      	b.n	8003670 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_OscConfig+0x3c0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036bc:	f7fe fb9a 	bl	8001df4 <HAL_GetTick>
 80036c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036ca:	d006      	beq.n	80036da <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fb92 	bl	8001df4 <HAL_GetTick>
 80036d0:	1b40      	subs	r0, r0, r5
 80036d2:	2802      	cmp	r0, #2
 80036d4:	d9f5      	bls.n	80036c2 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80036d6:	2003      	movs	r0, #3
 80036d8:	e02b      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036da:	69e3      	ldr	r3, [r4, #28]
 80036dc:	6a22      	ldr	r2, [r4, #32]
 80036de:	4313      	orrs	r3, r2
 80036e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036f8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80036fc:	4a0f      	ldr	r2, [pc, #60]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 80036fe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <HAL_RCC_OscConfig+0x3c0>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003706:	f7fe fb75 	bl	8001df4 <HAL_GetTick>
 800370a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_OscConfig+0x3bc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe fb6d 	bl	8001df4 <HAL_GetTick>
 800371a:	1b00      	subs	r0, r0, r4
 800371c:	2802      	cmp	r0, #2
 800371e:	d9f5      	bls.n	800370c <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8003720:	2003      	movs	r0, #3
 8003722:	e006      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003724:	2000      	movs	r0, #0
 8003726:	e004      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
 8003728:	2000      	movs	r0, #0
 800372a:	e002      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8003730:	2000      	movs	r0, #0
}
 8003732:	b002      	add	sp, #8
 8003734:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003736:	2001      	movs	r0, #1
 8003738:	e7fb      	b.n	8003732 <HAL_RCC_OscConfig+0x3b2>
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	42470060 	.word	0x42470060

08003744 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003744:	6802      	ldr	r2, [r0, #0]
 8003746:	68d3      	ldr	r3, [r2, #12]
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374e:	6802      	ldr	r2, [r0, #0]
 8003750:	6893      	ldr	r3, [r2, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	2b06      	cmp	r3, #6
 8003758:	d003      	beq.n	8003762 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003762:	2000      	movs	r0, #0
 8003764:	4770      	bx	lr

08003766 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376c:	4770      	bx	lr

0800376e <HAL_TIM_IRQHandler>:
{
 800376e:	b510      	push	{r4, lr}
 8003770:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003772:	6803      	ldr	r3, [r0, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	f012 0f02 	tst.w	r2, #2
 800377a:	d011      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	f012 0f02 	tst.w	r2, #2
 8003782:	d00d      	beq.n	80037a0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003784:	f06f 0202 	mvn.w	r2, #2
 8003788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378a:	2301      	movs	r3, #1
 800378c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378e:	6803      	ldr	r3, [r0, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f013 0f03 	tst.w	r3, #3
 8003796:	d070      	beq.n	800387a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003798:	f7ff ffe6 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379c:	2300      	movs	r3, #0
 800379e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	f012 0f04 	tst.w	r2, #4
 80037a8:	d012      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	f012 0f04 	tst.w	r2, #4
 80037b0:	d00e      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b2:	f06f 0204 	mvn.w	r2, #4
 80037b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b8:	2302      	movs	r3, #2
 80037ba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037c4:	d05f      	beq.n	8003886 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff ffce 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037cc:	2300      	movs	r3, #0
 80037ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	f012 0f08 	tst.w	r2, #8
 80037d8:	d012      	beq.n	8003800 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	f012 0f08 	tst.w	r2, #8
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e2:	f06f 0208 	mvn.w	r2, #8
 80037e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e8:	2304      	movs	r3, #4
 80037ea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f013 0f03 	tst.w	r3, #3
 80037f4:	d04e      	beq.n	8003894 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff ffb6 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fc:	2300      	movs	r3, #0
 80037fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	f012 0f10 	tst.w	r2, #16
 8003808:	d012      	beq.n	8003830 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	f012 0f10 	tst.w	r2, #16
 8003810:	d00e      	beq.n	8003830 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003812:	f06f 0210 	mvn.w	r2, #16
 8003816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003818:	2308      	movs	r3, #8
 800381a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003824:	d03d      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	4620      	mov	r0, r4
 8003828:	f7ff ff9e 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382c:	2300      	movs	r3, #0
 800382e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	f012 0f01 	tst.w	r2, #1
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	f012 0f01 	tst.w	r2, #1
 8003840:	d136      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	f012 0f80 	tst.w	r2, #128	; 0x80
 800384a:	d003      	beq.n	8003854 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003852:	d134      	bne.n	80038be <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	f012 0f40 	tst.w	r2, #64	; 0x40
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003864:	d132      	bne.n	80038cc <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	f012 0f20 	tst.w	r2, #32
 800386e:	d003      	beq.n	8003878 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	f012 0f20 	tst.w	r2, #32
 8003876:	d130      	bne.n	80038da <HAL_TIM_IRQHandler+0x16c>
}
 8003878:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	f7ff ff74 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff ff73 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
 8003884:	e78a      	b.n	800379c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff ff6d 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	4620      	mov	r0, r4
 800388e:	f7ff ff6c 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
 8003892:	e79b      	b.n	80037cc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff ff66 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ff65 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
 80038a0:	e7ac      	b.n	80037fc <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff5f 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff5e 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
 80038ae:	e7bd      	b.n	800382c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038b0:	f06f 0201 	mvn.w	r2, #1
 80038b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fd fe52 	bl	8001560 <HAL_TIM_PeriodElapsedCallback>
 80038bc:	e7c1      	b.n	8003842 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038c4:	4620      	mov	r0, r4
 80038c6:	f000 f8d2 	bl	8003a6e <HAL_TIMEx_BreakCallback>
 80038ca:	e7c3      	b.n	8003854 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038d2:	4620      	mov	r0, r4
 80038d4:	f7ff ff4a 	bl	800376c <HAL_TIM_TriggerCallback>
 80038d8:	e7c5      	b.n	8003866 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038da:	f06f 0220 	mvn.w	r2, #32
 80038de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80038e0:	4620      	mov	r0, r4
 80038e2:	f000 f8c3 	bl	8003a6c <HAL_TIMEx_CommutCallback>
}
 80038e6:	e7c7      	b.n	8003878 <HAL_TIM_IRQHandler+0x10a>

080038e8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ea:	4a30      	ldr	r2, [pc, #192]	; (80039ac <TIM_Base_SetConfig+0xc4>)
 80038ec:	4290      	cmp	r0, r2
 80038ee:	d012      	beq.n	8003916 <TIM_Base_SetConfig+0x2e>
 80038f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038f4:	d00f      	beq.n	8003916 <TIM_Base_SetConfig+0x2e>
 80038f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038fa:	4290      	cmp	r0, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0x2e>
 80038fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003902:	4290      	cmp	r0, r2
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0x2e>
 8003906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800390a:	4290      	cmp	r0, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0x2e>
 800390e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003912:	4290      	cmp	r0, r2
 8003914:	d103      	bne.n	800391e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800391a:	684a      	ldr	r2, [r1, #4]
 800391c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391e:	4a23      	ldr	r2, [pc, #140]	; (80039ac <TIM_Base_SetConfig+0xc4>)
 8003920:	4290      	cmp	r0, r2
 8003922:	d02a      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 8003924:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003928:	d027      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 800392a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800392e:	4290      	cmp	r0, r2
 8003930:	d023      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 8003932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003936:	4290      	cmp	r0, r2
 8003938:	d01f      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 800393a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393e:	4290      	cmp	r0, r2
 8003940:	d01b      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 8003942:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003946:	4290      	cmp	r0, r2
 8003948:	d017      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 800394a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800394e:	4290      	cmp	r0, r2
 8003950:	d013      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 8003952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003956:	4290      	cmp	r0, r2
 8003958:	d00f      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 800395a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800395e:	4290      	cmp	r0, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 8003962:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003966:	4290      	cmp	r0, r2
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 800396a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800396e:	4290      	cmp	r0, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x92>
 8003972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003976:	4290      	cmp	r0, r2
 8003978:	d103      	bne.n	8003982 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397e:	68ca      	ldr	r2, [r1, #12]
 8003980:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003986:	694a      	ldr	r2, [r1, #20]
 8003988:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800398a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	688b      	ldr	r3, [r1, #8]
 800398e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <TIM_Base_SetConfig+0xc4>)
 8003996:	4298      	cmp	r0, r3
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0xba>
 800399a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800399e:	4298      	cmp	r0, r3
 80039a0:	d101      	bne.n	80039a6 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a2:	690b      	ldr	r3, [r1, #16]
 80039a4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a6:	2301      	movs	r3, #1
 80039a8:	6143      	str	r3, [r0, #20]
}
 80039aa:	4770      	bx	lr
 80039ac:	40010000 	.word	0x40010000

080039b0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80039b0:	b1a8      	cbz	r0, 80039de <HAL_TIM_Base_Init+0x2e>
{
 80039b2:	b510      	push	{r4, lr}
 80039b4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80039b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039ba:	b15b      	cbz	r3, 80039d4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	2302      	movs	r3, #2
 80039be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c2:	1d21      	adds	r1, r4, #4
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	f7ff ff8f 	bl	80038e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039d0:	2000      	movs	r0, #0
}
 80039d2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80039d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039d8:	f7fe f8b2 	bl	8001b40 <HAL_TIM_Base_MspInit>
 80039dc:	e7ee      	b.n	80039bc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80039de:	2001      	movs	r0, #1
}
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d03b      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 80039ec:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80039ee:	2301      	movs	r3, #1
 80039f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039fe:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a00:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a04:	680a      	ldr	r2, [r1, #0]
 8003a06:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0a:	6803      	ldr	r3, [r0, #0]
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01a      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d017      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a18:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00f      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a30:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a38:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a40:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d104      	bne.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a48:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4c:	684a      	ldr	r2, [r1, #4]
 8003a4e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a50:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003a5e:	4618      	mov	r0, r3
}
 8003a60:	bc30      	pop	{r4, r5}
 8003a62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003a64:	2002      	movs	r0, #2
}
 8003a66:	4770      	bx	lr
 8003a68:	40010000 	.word	0x40010000

08003a6c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a6c:	4770      	bx	lr

08003a6e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6e:	4770      	bx	lr

08003a70 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a70:	6802      	ldr	r2, [r0, #0]
 8003a72:	68d3      	ldr	r3, [r2, #12]
 8003a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a78:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	6802      	ldr	r2, [r0, #0]
 8003a7c:	6953      	ldr	r3, [r2, #20]
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	2320      	movs	r3, #32
 8003a86:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003a8a:	4770      	bx	lr

08003a8c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a8c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b21      	cmp	r3, #33	; 0x21
 8003a94:	d12a      	bne.n	8003aec <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a96:	6883      	ldr	r3, [r0, #8]
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9c:	d016      	beq.n	8003acc <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a9e:	6a03      	ldr	r3, [r0, #32]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	6202      	str	r2, [r0, #32]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	6803      	ldr	r3, [r0, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aaa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003ab2:	b9eb      	cbnz	r3, 8003af0 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ab4:	6802      	ldr	r2, [r0, #0]
 8003ab6:	68d3      	ldr	r3, [r2, #12]
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abc:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003abe:	6802      	ldr	r2, [r0, #0]
 8003ac0:	68d3      	ldr	r3, [r2, #12]
 8003ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac6:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8003ac8:	2000      	movs	r0, #0
 8003aca:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003acc:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	6802      	ldr	r2, [r0, #0]
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ad8:	6903      	ldr	r3, [r0, #16]
 8003ada:	b91b      	cbnz	r3, 8003ae4 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8003adc:	6a03      	ldr	r3, [r0, #32]
 8003ade:	3302      	adds	r3, #2
 8003ae0:	6203      	str	r3, [r0, #32]
 8003ae2:	e7e2      	b.n	8003aaa <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8003ae4:	6a03      	ldr	r3, [r0, #32]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6203      	str	r3, [r0, #32]
 8003aea:	e7de      	b.n	8003aaa <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2002      	movs	r0, #2
 8003aee:	4770      	bx	lr
    return HAL_OK;
 8003af0:	2000      	movs	r0, #0
  }
}
 8003af2:	4770      	bx	lr

08003af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8003af8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afa:	6802      	ldr	r2, [r0, #0]
 8003afc:	6913      	ldr	r3, [r2, #16]
 8003afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b02:	68c1      	ldr	r1, [r0, #12]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b08:	6883      	ldr	r3, [r0, #8]
 8003b0a:	6902      	ldr	r2, [r0, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	6942      	ldr	r2, [r0, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	69c2      	ldr	r2, [r0, #28]
 8003b14:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003b16:	6801      	ldr	r1, [r0, #0]
 8003b18:	68cb      	ldr	r3, [r1, #12]
 8003b1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b1e:	f023 030c 	bic.w	r3, r3, #12
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b26:	6802      	ldr	r2, [r0, #0]
 8003b28:	6953      	ldr	r3, [r2, #20]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	6981      	ldr	r1, [r0, #24]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b34:	69c3      	ldr	r3, [r0, #28]
 8003b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3a:	d03b      	beq.n	8003bb4 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b3c:	6803      	ldr	r3, [r0, #0]
 8003b3e:	4a71      	ldr	r2, [pc, #452]	; (8003d04 <UART_SetConfig+0x210>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	f000 80ab 	beq.w	8003c9c <UART_SetConfig+0x1a8>
 8003b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	f000 80a6 	beq.w	8003c9c <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7ff fb34 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b54:	f04f 0900 	mov.w	r9, #0
 8003b58:	1806      	adds	r6, r0, r0
 8003b5a:	eb49 0709 	adc.w	r7, r9, r9
 8003b5e:	eb16 0b00 	adds.w	fp, r6, r0
 8003b62:	eb47 0c09 	adc.w	ip, r7, r9
 8003b66:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8003b6a:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8003b6e:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8003b72:	4693      	mov	fp, r2
 8003b74:	469c      	mov	ip, r3
 8003b76:	6863      	ldr	r3, [r4, #4]
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	0f9b      	lsrs	r3, r3, #30
 8003b7c:	eb10 000b 	adds.w	r0, r0, fp
 8003b80:	eb49 010c 	adc.w	r1, r9, ip
 8003b84:	f7fd f8a0 	bl	8000cc8 <__aeabi_uldivmod>
 8003b88:	4d5f      	ldr	r5, [pc, #380]	; (8003d08 <UART_SetConfig+0x214>)
 8003b8a:	fba5 3200 	umull	r3, r2, r5, r0
 8003b8e:	0951      	lsrs	r1, r2, #5
 8003b90:	2264      	movs	r2, #100	; 0x64
 8003b92:	fb02 0211 	mls	r2, r2, r1, r0
 8003b96:	0113      	lsls	r3, r2, #4
 8003b98:	3332      	adds	r3, #50	; 0x32
 8003b9a:	fba5 2303 	umull	r2, r3, r5, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ba4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	6821      	ldr	r1, [r4, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
    }
  }
}
 8003bb2:	e0a4      	b.n	8003cfe <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb4:	6803      	ldr	r3, [r0, #0]
 8003bb6:	4a53      	ldr	r2, [pc, #332]	; (8003d04 <UART_SetConfig+0x210>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d039      	beq.n	8003c30 <UART_SetConfig+0x13c>
 8003bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d035      	beq.n	8003c30 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7ff fafa 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc8:	4683      	mov	fp, r0
 8003bca:	f04f 0c00 	mov.w	ip, #0
 8003bce:	1806      	adds	r6, r0, r0
 8003bd0:	eb4c 070c 	adc.w	r7, ip, ip
 8003bd4:	eb16 0800 	adds.w	r8, r6, r0
 8003bd8:	eb47 090c 	adc.w	r9, r7, ip
 8003bdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003be0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be8:	4690      	mov	r8, r2
 8003bea:	4699      	mov	r9, r3
 8003bec:	6862      	ldr	r2, [r4, #4]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	1892      	adds	r2, r2, r2
 8003bf2:	eb41 0301 	adc.w	r3, r1, r1
 8003bf6:	eb1b 0008 	adds.w	r0, fp, r8
 8003bfa:	eb4c 0109 	adc.w	r1, ip, r9
 8003bfe:	f7fd f863 	bl	8000cc8 <__aeabi_uldivmod>
 8003c02:	4d41      	ldr	r5, [pc, #260]	; (8003d08 <UART_SetConfig+0x214>)
 8003c04:	fba5 3200 	umull	r3, r2, r5, r0
 8003c08:	0951      	lsrs	r1, r2, #5
 8003c0a:	2264      	movs	r2, #100	; 0x64
 8003c0c:	fb02 0211 	mls	r2, r2, r1, r0
 8003c10:	00d3      	lsls	r3, r2, #3
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	fba5 2303 	umull	r2, r3, r5, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	005a      	lsls	r2, r3, #1
 8003c1c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003c20:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	6821      	ldr	r1, [r4, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
 8003c2e:	e066      	b.n	8003cfe <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c30:	f7ff fad4 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c34:	4680      	mov	r8, r0
 8003c36:	f04f 0900 	mov.w	r9, #0
 8003c3a:	1806      	adds	r6, r0, r0
 8003c3c:	eb49 0709 	adc.w	r7, r9, r9
 8003c40:	eb16 0b00 	adds.w	fp, r6, r0
 8003c44:	eb47 0c09 	adc.w	ip, r7, r9
 8003c48:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8003c4c:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8003c50:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8003c54:	4693      	mov	fp, r2
 8003c56:	469c      	mov	ip, r3
 8003c58:	6862      	ldr	r2, [r4, #4]
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	1892      	adds	r2, r2, r2
 8003c5e:	eb41 0301 	adc.w	r3, r1, r1
 8003c62:	eb18 000b 	adds.w	r0, r8, fp
 8003c66:	eb49 010c 	adc.w	r1, r9, ip
 8003c6a:	f7fd f82d 	bl	8000cc8 <__aeabi_uldivmod>
 8003c6e:	4d26      	ldr	r5, [pc, #152]	; (8003d08 <UART_SetConfig+0x214>)
 8003c70:	fba5 3200 	umull	r3, r2, r5, r0
 8003c74:	0951      	lsrs	r1, r2, #5
 8003c76:	2264      	movs	r2, #100	; 0x64
 8003c78:	fb02 0211 	mls	r2, r2, r1, r0
 8003c7c:	00d3      	lsls	r3, r2, #3
 8003c7e:	3332      	adds	r3, #50	; 0x32
 8003c80:	fba5 2303 	umull	r2, r3, r5, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	005a      	lsls	r2, r3, #1
 8003c88:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003c8c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	6821      	ldr	r1, [r4, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
 8003c9a:	e030      	b.n	8003cfe <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7ff fa9e 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca0:	f04f 0900 	mov.w	r9, #0
 8003ca4:	1806      	adds	r6, r0, r0
 8003ca6:	eb49 0709 	adc.w	r7, r9, r9
 8003caa:	eb16 0b00 	adds.w	fp, r6, r0
 8003cae:	eb47 0c09 	adc.w	ip, r7, r9
 8003cb2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8003cb6:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8003cba:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8003cbe:	4693      	mov	fp, r2
 8003cc0:	469c      	mov	ip, r3
 8003cc2:	6863      	ldr	r3, [r4, #4]
 8003cc4:	009a      	lsls	r2, r3, #2
 8003cc6:	0f9b      	lsrs	r3, r3, #30
 8003cc8:	eb10 000b 	adds.w	r0, r0, fp
 8003ccc:	eb49 010c 	adc.w	r1, r9, ip
 8003cd0:	f7fc fffa 	bl	8000cc8 <__aeabi_uldivmod>
 8003cd4:	4d0c      	ldr	r5, [pc, #48]	; (8003d08 <UART_SetConfig+0x214>)
 8003cd6:	fba5 3200 	umull	r3, r2, r5, r0
 8003cda:	0951      	lsrs	r1, r2, #5
 8003cdc:	2264      	movs	r2, #100	; 0x64
 8003cde:	fb02 0211 	mls	r2, r2, r1, r0
 8003ce2:	0113      	lsls	r3, r2, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	fba5 2303 	umull	r2, r3, r5, r3
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
}
 8003cfe:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <UART_WaitOnFlagUntilTimeout>:
{
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	4605      	mov	r5, r0
 8003d12:	460f      	mov	r7, r1
 8003d14:	4616      	mov	r6, r2
 8003d16:	4698      	mov	r8, r3
 8003d18:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	ea37 0303 	bics.w	r3, r7, r3
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	42b3      	cmp	r3, r6
 8003d2a:	d11d      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003d2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003d30:	d0f3      	beq.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d32:	b12c      	cbz	r4, 8003d40 <UART_WaitOnFlagUntilTimeout+0x34>
 8003d34:	f7fe f85e 	bl	8001df4 <HAL_GetTick>
 8003d38:	eba0 0008 	sub.w	r0, r0, r8
 8003d3c:	42a0      	cmp	r0, r4
 8003d3e:	d9ec      	bls.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d40:	682a      	ldr	r2, [r5, #0]
 8003d42:	68d3      	ldr	r3, [r2, #12]
 8003d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d48:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	682a      	ldr	r2, [r5, #0]
 8003d4c:	6953      	ldr	r3, [r2, #20]
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003d54:	2320      	movs	r3, #32
 8003d56:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003d64:	2003      	movs	r0, #3
 8003d66:	e000      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8003d68:	2000      	movs	r0, #0
}
 8003d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d6e <HAL_UART_Init>:
  if (huart == NULL)
 8003d6e:	b358      	cbz	r0, 8003dc8 <HAL_UART_Init+0x5a>
{
 8003d70:	b510      	push	{r4, lr}
 8003d72:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003d74:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003d78:	b30b      	cbz	r3, 8003dbe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003d7a:	2324      	movs	r3, #36	; 0x24
 8003d7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	68d3      	ldr	r3, [r2, #12]
 8003d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d88:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff feb2 	bl	8003af4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	6913      	ldr	r3, [r2, #16]
 8003d94:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003d98:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	6953      	ldr	r3, [r2, #20]
 8003d9e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003da2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003da4:	6822      	ldr	r2, [r4, #0]
 8003da6:	68d3      	ldr	r3, [r2, #12]
 8003da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dac:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dae:	2000      	movs	r0, #0
 8003db0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003db2:	2320      	movs	r3, #32
 8003db4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003db8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003dbc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003dbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003dc2:	f7fd fedd 	bl	8001b80 <HAL_UART_MspInit>
 8003dc6:	e7d8      	b.n	8003d7a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003dc8:	2001      	movs	r0, #1
}
 8003dca:	4770      	bx	lr

08003dcc <HAL_UART_Transmit>:
{
 8003dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d156      	bne.n	8003e8c <HAL_UART_Transmit+0xc0>
 8003dde:	4604      	mov	r4, r0
 8003de0:	460d      	mov	r5, r1
 8003de2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d056      	beq.n	8003e96 <HAL_UART_Transmit+0xca>
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d056      	beq.n	8003e9a <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8003dec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d054      	beq.n	8003e9e <HAL_UART_Transmit+0xd2>
 8003df4:	2301      	movs	r3, #1
 8003df6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e02:	2321      	movs	r3, #33	; 0x21
 8003e04:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003e08:	f7fd fff4 	bl	8001df4 <HAL_GetTick>
 8003e0c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003e0e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e12:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003e16:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8003e1a:	e010      	b.n	8003e3e <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1c:	9600      	str	r6, [sp, #0]
 8003e1e:	463b      	mov	r3, r7
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7ff ff71 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d139      	bne.n	8003ea2 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e2e:	882b      	ldrh	r3, [r5, #0]
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	b9c3      	cbnz	r3, 8003e6e <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8003e3c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8003e3e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	b1b3      	cbz	r3, 8003e72 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8003e44:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d0e3      	beq.n	8003e1c <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e54:	9600      	str	r6, [sp, #0]
 8003e56:	463b      	mov	r3, r7
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff ff55 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003e62:	bb00      	cbnz	r0, 8003ea6 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e64:	782a      	ldrb	r2, [r5, #0]
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	e7e7      	b.n	8003e3e <HAL_UART_Transmit+0x72>
          pData += 1U;
 8003e6e:	3501      	adds	r5, #1
 8003e70:	e7e5      	b.n	8003e3e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	9600      	str	r6, [sp, #0]
 8003e74:	463b      	mov	r3, r7
 8003e76:	2200      	movs	r2, #0
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff ff46 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b990      	cbnz	r0, 8003eaa <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8003e84:	2220      	movs	r2, #32
 8003e86:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 8003e8a:	e000      	b.n	8003e8e <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	b003      	add	sp, #12
 8003e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e7f9      	b.n	8003e8e <HAL_UART_Transmit+0xc2>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e7f7      	b.n	8003e8e <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e7f5      	b.n	8003e8e <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e7f3      	b.n	8003e8e <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e7f1      	b.n	8003e8e <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e7ef      	b.n	8003e8e <HAL_UART_Transmit+0xc2>

08003eae <HAL_UART_Receive>:
{
 8003eae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eb6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d15c      	bne.n	8003f7a <HAL_UART_Receive+0xcc>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	460d      	mov	r5, r1
 8003ec4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003ec6:	2900      	cmp	r1, #0
 8003ec8:	d05b      	beq.n	8003f82 <HAL_UART_Receive+0xd4>
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d05b      	beq.n	8003f86 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8003ece:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d059      	beq.n	8003f8a <HAL_UART_Receive+0xdc>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	f04f 0900 	mov.w	r9, #0
 8003ee0:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee4:	2322      	movs	r3, #34	; 0x22
 8003ee6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8003eea:	f7fd ff83 	bl	8001df4 <HAL_GetTick>
 8003eee:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8003ef0:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ef4:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8003ef8:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8003efc:	e01d      	b.n	8003f3a <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003efe:	9600      	str	r6, [sp, #0]
 8003f00:	463b      	mov	r3, r7
 8003f02:	2200      	movs	r2, #0
 8003f04:	2120      	movs	r1, #32
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7ff ff00 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d13e      	bne.n	8003f8e <HAL_UART_Receive+0xe0>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	b933      	cbnz	r3, 8003f22 <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	f825 3b02 	strh.w	r3, [r5], #2
 8003f20:	e00b      	b.n	8003f3a <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f825 3b01 	strh.w	r3, [r5], #1
 8003f2c:	e005      	b.n	8003f3a <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f36:	702b      	strb	r3, [r5, #0]
 8003f38:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 8003f3a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	b1bb      	cbz	r3, 8003f70 <HAL_UART_Receive+0xc2>
      huart->RxXferCount--;
 8003f40:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f48:	68a3      	ldr	r3, [r4, #8]
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4e:	d0d6      	beq.n	8003efe <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f50:	9600      	str	r6, [sp, #0]
 8003f52:	463b      	mov	r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	2120      	movs	r1, #32
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff fed7 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003f5e:	b9c0      	cbnz	r0, 8003f92 <HAL_UART_Receive+0xe4>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f60:	6923      	ldr	r3, [r4, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	702b      	strb	r3, [r5, #0]
 8003f6c:	3501      	adds	r5, #1
 8003f6e:	e7e4      	b.n	8003f3a <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8003f76:	2000      	movs	r0, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8003f7a:	2002      	movs	r0, #2
}
 8003f7c:	b003      	add	sp, #12
 8003f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003f82:	2001      	movs	r0, #1
 8003f84:	e7fa      	b.n	8003f7c <HAL_UART_Receive+0xce>
 8003f86:	2001      	movs	r0, #1
 8003f88:	e7f8      	b.n	8003f7c <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8003f8a:	2002      	movs	r0, #2
 8003f8c:	e7f6      	b.n	8003f7c <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 8003f8e:	2003      	movs	r0, #3
 8003f90:	e7f4      	b.n	8003f7c <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 8003f92:	2003      	movs	r0, #3
 8003f94:	e7f2      	b.n	8003f7c <HAL_UART_Receive+0xce>

08003f96 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f96:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d120      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8003fa0:	b309      	cbz	r1, 8003fe6 <HAL_UART_Receive_IT+0x50>
 8003fa2:	b312      	cbz	r2, 8003fea <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8003fa4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d020      	beq.n	8003fee <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8003fac:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8003fae:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003fb0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb6:	2222      	movs	r2, #34	; 0x22
 8003fb8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8003fbc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fc0:	6801      	ldr	r1, [r0, #0]
 8003fc2:	68ca      	ldr	r2, [r1, #12]
 8003fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc8:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fca:	6801      	ldr	r1, [r0, #0]
 8003fcc:	694a      	ldr	r2, [r1, #20]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fd4:	6801      	ldr	r1, [r0, #0]
 8003fd6:	68ca      	ldr	r2, [r1, #12]
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4770      	bx	lr
    return HAL_BUSY;
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	4770      	bx	lr
      return HAL_ERROR;
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	4770      	bx	lr
 8003fea:	2001      	movs	r0, #1
 8003fec:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003fee:	2002      	movs	r0, #2
}
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_UART_TxCpltCallback>:
}
 8003ff2:	4770      	bx	lr

08003ff4 <UART_EndTransmit_IT>:
{
 8003ff4:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ff6:	6801      	ldr	r1, [r0, #0]
 8003ff8:	68cb      	ldr	r3, [r1, #12]
 8003ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffe:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004000:	2320      	movs	r3, #32
 8004002:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004006:	f7ff fff4 	bl	8003ff2 <HAL_UART_TxCpltCallback>
}
 800400a:	2000      	movs	r0, #0
 800400c:	bd08      	pop	{r3, pc}

0800400e <UART_Receive_IT>:
{
 800400e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004010:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b22      	cmp	r3, #34	; 0x22
 8004018:	d145      	bne.n	80040a6 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800401a:	6883      	ldr	r3, [r0, #8]
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004020:	d00e      	beq.n	8004040 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004022:	6903      	ldr	r3, [r0, #16]
 8004024:	bb03      	cbnz	r3, 8004068 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004026:	6803      	ldr	r3, [r0, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	6281      	str	r1, [r0, #40]	; 0x28
 8004030:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8004032:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004034:	3b01      	subs	r3, #1
 8004036:	b29b      	uxth	r3, r3
 8004038:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800403a:	b1f3      	cbz	r3, 800407a <UART_Receive_IT+0x6c>
    return HAL_OK;
 800403c:	2000      	movs	r0, #0
 800403e:	e033      	b.n	80040a8 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004040:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004042:	6903      	ldr	r3, [r0, #16]
 8004044:	b943      	cbnz	r3, 8004058 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004046:	6803      	ldr	r3, [r0, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8004050:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004052:	3302      	adds	r3, #2
 8004054:	6283      	str	r3, [r0, #40]	; 0x28
 8004056:	e7ec      	b.n	8004032 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004058:	6803      	ldr	r3, [r0, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8004060:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004062:	3301      	adds	r3, #1
 8004064:	6283      	str	r3, [r0, #40]	; 0x28
 8004066:	e7e4      	b.n	8004032 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004068:	6803      	ldr	r3, [r0, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800406e:	1c51      	adds	r1, r2, #1
 8004070:	6281      	str	r1, [r0, #40]	; 0x28
 8004072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004076:	7013      	strb	r3, [r2, #0]
 8004078:	e7db      	b.n	8004032 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800407a:	6802      	ldr	r2, [r0, #0]
 800407c:	68d3      	ldr	r3, [r2, #12]
 800407e:	f023 0320 	bic.w	r3, r3, #32
 8004082:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004084:	6802      	ldr	r2, [r0, #0]
 8004086:	68d3      	ldr	r3, [r2, #12]
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800408e:	6802      	ldr	r2, [r0, #0]
 8004090:	6953      	ldr	r3, [r2, #20]
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004098:	2320      	movs	r3, #32
 800409a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800409e:	f7fd fa6d 	bl	800157c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80040a2:	2000      	movs	r0, #0
 80040a4:	e000      	b.n	80040a8 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80040a6:	2002      	movs	r0, #2
}
 80040a8:	bd08      	pop	{r3, pc}

080040aa <HAL_UART_ErrorCallback>:
}
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_IRQHandler>:
{
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040b0:	6802      	ldr	r2, [r0, #0]
 80040b2:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040b4:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b6:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80040b8:	f013 000f 	ands.w	r0, r3, #15
 80040bc:	d105      	bne.n	80040ca <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040be:	f013 0f20 	tst.w	r3, #32
 80040c2:	d002      	beq.n	80040ca <HAL_UART_IRQHandler+0x1e>
 80040c4:	f011 0f20 	tst.w	r1, #32
 80040c8:	d156      	bne.n	8004178 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d06a      	beq.n	80041a4 <HAL_UART_IRQHandler+0xf8>
 80040ce:	f012 0201 	ands.w	r2, r2, #1
 80040d2:	d102      	bne.n	80040da <HAL_UART_IRQHandler+0x2e>
 80040d4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80040d8:	d064      	beq.n	80041a4 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040da:	f013 0f01 	tst.w	r3, #1
 80040de:	d006      	beq.n	80040ee <HAL_UART_IRQHandler+0x42>
 80040e0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80040e4:	d003      	beq.n	80040ee <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80040e8:	f040 0001 	orr.w	r0, r0, #1
 80040ec:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ee:	f013 0f04 	tst.w	r3, #4
 80040f2:	d004      	beq.n	80040fe <HAL_UART_IRQHandler+0x52>
 80040f4:	b11a      	cbz	r2, 80040fe <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80040f8:	f040 0002 	orr.w	r0, r0, #2
 80040fc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040fe:	f013 0f02 	tst.w	r3, #2
 8004102:	d004      	beq.n	800410e <HAL_UART_IRQHandler+0x62>
 8004104:	b11a      	cbz	r2, 800410e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004106:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004108:	f040 0004 	orr.w	r0, r0, #4
 800410c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800410e:	f013 0f08 	tst.w	r3, #8
 8004112:	d007      	beq.n	8004124 <HAL_UART_IRQHandler+0x78>
 8004114:	f011 0f20 	tst.w	r1, #32
 8004118:	d100      	bne.n	800411c <HAL_UART_IRQHandler+0x70>
 800411a:	b11a      	cbz	r2, 8004124 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800411c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004124:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004126:	2a00      	cmp	r2, #0
 8004128:	d048      	beq.n	80041bc <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412a:	f013 0f20 	tst.w	r3, #32
 800412e:	d002      	beq.n	8004136 <HAL_UART_IRQHandler+0x8a>
 8004130:	f011 0f20 	tst.w	r1, #32
 8004134:	d124      	bne.n	8004180 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004140:	f012 0f08 	tst.w	r2, #8
 8004144:	d100      	bne.n	8004148 <HAL_UART_IRQHandler+0x9c>
 8004146:	b33b      	cbz	r3, 8004198 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff fc91 	bl	8003a70 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004156:	d01b      	beq.n	8004190 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004162:	b18b      	cbz	r3, 8004188 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004164:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_UART_IRQHandler+0x124>)
 8004166:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004168:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800416a:	f7fe fcbe 	bl	8002aea <HAL_DMA_Abort_IT>
 800416e:	b328      	cbz	r0, 80041bc <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004170:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004172:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004174:	4798      	blx	r3
 8004176:	e021      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff ff48 	bl	800400e <UART_Receive_IT>
      return;
 800417e:	e01d      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8004180:	4620      	mov	r0, r4
 8004182:	f7ff ff44 	bl	800400e <UART_Receive_IT>
 8004186:	e7d6      	b.n	8004136 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8004188:	4620      	mov	r0, r4
 800418a:	f7ff ff8e 	bl	80040aa <HAL_UART_ErrorCallback>
 800418e:	e015      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff ff8a 	bl	80040aa <HAL_UART_ErrorCallback>
 8004196:	e011      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff ff86 	bl	80040aa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80041a2:	e00b      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_IRQHandler+0x104>
 80041aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041ae:	d106      	bne.n	80041be <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80041b4:	d002      	beq.n	80041bc <HAL_UART_IRQHandler+0x110>
 80041b6:	f011 0f40 	tst.w	r1, #64	; 0x40
 80041ba:	d104      	bne.n	80041c6 <HAL_UART_IRQHandler+0x11a>
}
 80041bc:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80041be:	4620      	mov	r0, r4
 80041c0:	f7ff fc64 	bl	8003a8c <UART_Transmit_IT>
    return;
 80041c4:	e7fa      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7ff ff14 	bl	8003ff4 <UART_EndTransmit_IT>
    return;
 80041cc:	e7f6      	b.n	80041bc <HAL_UART_IRQHandler+0x110>
 80041ce:	bf00      	nop
 80041d0:	080041d5 	.word	0x080041d5

080041d4 <UART_DMAAbortOnError>:
{
 80041d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041dc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80041de:	f7ff ff64 	bl	80040aa <HAL_UART_ErrorCallback>
}
 80041e2:	bd08      	pop	{r3, pc}

080041e4 <__errno>:
 80041e4:	4b01      	ldr	r3, [pc, #4]	; (80041ec <__errno+0x8>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	2000000c 	.word	0x2000000c

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4e0d      	ldr	r6, [pc, #52]	; (8004228 <__libc_init_array+0x38>)
 80041f4:	4c0d      	ldr	r4, [pc, #52]	; (800422c <__libc_init_array+0x3c>)
 80041f6:	1ba4      	subs	r4, r4, r6
 80041f8:	10a4      	asrs	r4, r4, #2
 80041fa:	2500      	movs	r5, #0
 80041fc:	42a5      	cmp	r5, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	4e0b      	ldr	r6, [pc, #44]	; (8004230 <__libc_init_array+0x40>)
 8004202:	4c0c      	ldr	r4, [pc, #48]	; (8004234 <__libc_init_array+0x44>)
 8004204:	f004 f904 	bl	8008410 <_init>
 8004208:	1ba4      	subs	r4, r4, r6
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	2500      	movs	r5, #0
 800420e:	42a5      	cmp	r5, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004218:	4798      	blx	r3
 800421a:	3501      	adds	r5, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004222:	4798      	blx	r3
 8004224:	3501      	adds	r5, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	08008b10 	.word	0x08008b10
 800422c:	08008b10 	.word	0x08008b10
 8004230:	08008b10 	.word	0x08008b10
 8004234:	08008b14 	.word	0x08008b14

08004238 <memset>:
 8004238:	4402      	add	r2, r0
 800423a:	4603      	mov	r3, r0
 800423c:	4293      	cmp	r3, r2
 800423e:	d100      	bne.n	8004242 <memset+0xa>
 8004240:	4770      	bx	lr
 8004242:	f803 1b01 	strb.w	r1, [r3], #1
 8004246:	e7f9      	b.n	800423c <memset+0x4>

08004248 <__cvt>:
 8004248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	ec55 4b10 	vmov	r4, r5, d0
 8004250:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004252:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004256:	2d00      	cmp	r5, #0
 8004258:	460e      	mov	r6, r1
 800425a:	4691      	mov	r9, r2
 800425c:	4619      	mov	r1, r3
 800425e:	bfb8      	it	lt
 8004260:	4622      	movlt	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	f027 0720 	bic.w	r7, r7, #32
 8004268:	bfbb      	ittet	lt
 800426a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800426e:	461d      	movlt	r5, r3
 8004270:	2300      	movge	r3, #0
 8004272:	232d      	movlt	r3, #45	; 0x2d
 8004274:	bfb8      	it	lt
 8004276:	4614      	movlt	r4, r2
 8004278:	2f46      	cmp	r7, #70	; 0x46
 800427a:	700b      	strb	r3, [r1, #0]
 800427c:	d004      	beq.n	8004288 <__cvt+0x40>
 800427e:	2f45      	cmp	r7, #69	; 0x45
 8004280:	d100      	bne.n	8004284 <__cvt+0x3c>
 8004282:	3601      	adds	r6, #1
 8004284:	2102      	movs	r1, #2
 8004286:	e000      	b.n	800428a <__cvt+0x42>
 8004288:	2103      	movs	r1, #3
 800428a:	ab03      	add	r3, sp, #12
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	ab02      	add	r3, sp, #8
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	4632      	mov	r2, r6
 8004294:	4653      	mov	r3, sl
 8004296:	ec45 4b10 	vmov	d0, r4, r5
 800429a:	f001 fe99 	bl	8005fd0 <_dtoa_r>
 800429e:	2f47      	cmp	r7, #71	; 0x47
 80042a0:	4680      	mov	r8, r0
 80042a2:	d102      	bne.n	80042aa <__cvt+0x62>
 80042a4:	f019 0f01 	tst.w	r9, #1
 80042a8:	d026      	beq.n	80042f8 <__cvt+0xb0>
 80042aa:	2f46      	cmp	r7, #70	; 0x46
 80042ac:	eb08 0906 	add.w	r9, r8, r6
 80042b0:	d111      	bne.n	80042d6 <__cvt+0x8e>
 80042b2:	f898 3000 	ldrb.w	r3, [r8]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d10a      	bne.n	80042d0 <__cvt+0x88>
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7fc fc21 	bl	8000b08 <__aeabi_dcmpeq>
 80042c6:	b918      	cbnz	r0, 80042d0 <__cvt+0x88>
 80042c8:	f1c6 0601 	rsb	r6, r6, #1
 80042cc:	f8ca 6000 	str.w	r6, [sl]
 80042d0:	f8da 3000 	ldr.w	r3, [sl]
 80042d4:	4499      	add	r9, r3
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fc13 	bl	8000b08 <__aeabi_dcmpeq>
 80042e2:	b938      	cbnz	r0, 80042f4 <__cvt+0xac>
 80042e4:	2230      	movs	r2, #48	; 0x30
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	454b      	cmp	r3, r9
 80042ea:	d205      	bcs.n	80042f8 <__cvt+0xb0>
 80042ec:	1c59      	adds	r1, r3, #1
 80042ee:	9103      	str	r1, [sp, #12]
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e7f8      	b.n	80042e6 <__cvt+0x9e>
 80042f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042fc:	eba3 0308 	sub.w	r3, r3, r8
 8004300:	4640      	mov	r0, r8
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	b004      	add	sp, #16
 8004306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800430a <__exponent>:
 800430a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430c:	2900      	cmp	r1, #0
 800430e:	4604      	mov	r4, r0
 8004310:	bfba      	itte	lt
 8004312:	4249      	neglt	r1, r1
 8004314:	232d      	movlt	r3, #45	; 0x2d
 8004316:	232b      	movge	r3, #43	; 0x2b
 8004318:	2909      	cmp	r1, #9
 800431a:	f804 2b02 	strb.w	r2, [r4], #2
 800431e:	7043      	strb	r3, [r0, #1]
 8004320:	dd20      	ble.n	8004364 <__exponent+0x5a>
 8004322:	f10d 0307 	add.w	r3, sp, #7
 8004326:	461f      	mov	r7, r3
 8004328:	260a      	movs	r6, #10
 800432a:	fb91 f5f6 	sdiv	r5, r1, r6
 800432e:	fb06 1115 	mls	r1, r6, r5, r1
 8004332:	3130      	adds	r1, #48	; 0x30
 8004334:	2d09      	cmp	r5, #9
 8004336:	f803 1c01 	strb.w	r1, [r3, #-1]
 800433a:	f103 32ff 	add.w	r2, r3, #4294967295
 800433e:	4629      	mov	r1, r5
 8004340:	dc09      	bgt.n	8004356 <__exponent+0x4c>
 8004342:	3130      	adds	r1, #48	; 0x30
 8004344:	3b02      	subs	r3, #2
 8004346:	f802 1c01 	strb.w	r1, [r2, #-1]
 800434a:	42bb      	cmp	r3, r7
 800434c:	4622      	mov	r2, r4
 800434e:	d304      	bcc.n	800435a <__exponent+0x50>
 8004350:	1a10      	subs	r0, r2, r0
 8004352:	b003      	add	sp, #12
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	4613      	mov	r3, r2
 8004358:	e7e7      	b.n	800432a <__exponent+0x20>
 800435a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800435e:	f804 2b01 	strb.w	r2, [r4], #1
 8004362:	e7f2      	b.n	800434a <__exponent+0x40>
 8004364:	2330      	movs	r3, #48	; 0x30
 8004366:	4419      	add	r1, r3
 8004368:	7083      	strb	r3, [r0, #2]
 800436a:	1d02      	adds	r2, r0, #4
 800436c:	70c1      	strb	r1, [r0, #3]
 800436e:	e7ef      	b.n	8004350 <__exponent+0x46>

08004370 <_printf_float>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	b08d      	sub	sp, #52	; 0x34
 8004376:	460c      	mov	r4, r1
 8004378:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800437c:	4616      	mov	r6, r2
 800437e:	461f      	mov	r7, r3
 8004380:	4605      	mov	r5, r0
 8004382:	f003 f883 	bl	800748c <_localeconv_r>
 8004386:	6803      	ldr	r3, [r0, #0]
 8004388:	9304      	str	r3, [sp, #16]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fb ff40 	bl	8000210 <strlen>
 8004390:	2300      	movs	r3, #0
 8004392:	930a      	str	r3, [sp, #40]	; 0x28
 8004394:	f8d8 3000 	ldr.w	r3, [r8]
 8004398:	9005      	str	r0, [sp, #20]
 800439a:	3307      	adds	r3, #7
 800439c:	f023 0307 	bic.w	r3, r3, #7
 80043a0:	f103 0208 	add.w	r2, r3, #8
 80043a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043a8:	f8d4 b000 	ldr.w	fp, [r4]
 80043ac:	f8c8 2000 	str.w	r2, [r8]
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043c0:	9307      	str	r3, [sp, #28]
 80043c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	4ba7      	ldr	r3, [pc, #668]	; (8004668 <_printf_float+0x2f8>)
 80043cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043d0:	f7fc fbcc 	bl	8000b6c <__aeabi_dcmpun>
 80043d4:	bb70      	cbnz	r0, 8004434 <_printf_float+0xc4>
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295
 80043da:	4ba3      	ldr	r3, [pc, #652]	; (8004668 <_printf_float+0x2f8>)
 80043dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043e0:	f7fc fba6 	bl	8000b30 <__aeabi_dcmple>
 80043e4:	bb30      	cbnz	r0, 8004434 <_printf_float+0xc4>
 80043e6:	2200      	movs	r2, #0
 80043e8:	2300      	movs	r3, #0
 80043ea:	4640      	mov	r0, r8
 80043ec:	4649      	mov	r1, r9
 80043ee:	f7fc fb95 	bl	8000b1c <__aeabi_dcmplt>
 80043f2:	b110      	cbz	r0, 80043fa <_printf_float+0x8a>
 80043f4:	232d      	movs	r3, #45	; 0x2d
 80043f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fa:	4a9c      	ldr	r2, [pc, #624]	; (800466c <_printf_float+0x2fc>)
 80043fc:	4b9c      	ldr	r3, [pc, #624]	; (8004670 <_printf_float+0x300>)
 80043fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004402:	bf8c      	ite	hi
 8004404:	4690      	movhi	r8, r2
 8004406:	4698      	movls	r8, r3
 8004408:	2303      	movs	r3, #3
 800440a:	f02b 0204 	bic.w	r2, fp, #4
 800440e:	6123      	str	r3, [r4, #16]
 8004410:	6022      	str	r2, [r4, #0]
 8004412:	f04f 0900 	mov.w	r9, #0
 8004416:	9700      	str	r7, [sp, #0]
 8004418:	4633      	mov	r3, r6
 800441a:	aa0b      	add	r2, sp, #44	; 0x2c
 800441c:	4621      	mov	r1, r4
 800441e:	4628      	mov	r0, r5
 8004420:	f000 f9e6 	bl	80047f0 <_printf_common>
 8004424:	3001      	adds	r0, #1
 8004426:	f040 808d 	bne.w	8004544 <_printf_float+0x1d4>
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	b00d      	add	sp, #52	; 0x34
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	4640      	mov	r0, r8
 800443a:	4649      	mov	r1, r9
 800443c:	f7fc fb96 	bl	8000b6c <__aeabi_dcmpun>
 8004440:	b110      	cbz	r0, 8004448 <_printf_float+0xd8>
 8004442:	4a8c      	ldr	r2, [pc, #560]	; (8004674 <_printf_float+0x304>)
 8004444:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <_printf_float+0x308>)
 8004446:	e7da      	b.n	80043fe <_printf_float+0x8e>
 8004448:	6861      	ldr	r1, [r4, #4]
 800444a:	1c4b      	adds	r3, r1, #1
 800444c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004450:	a80a      	add	r0, sp, #40	; 0x28
 8004452:	d13e      	bne.n	80044d2 <_printf_float+0x162>
 8004454:	2306      	movs	r3, #6
 8004456:	6063      	str	r3, [r4, #4]
 8004458:	2300      	movs	r3, #0
 800445a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800445e:	ab09      	add	r3, sp, #36	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	ec49 8b10 	vmov	d0, r8, r9
 8004466:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	f8cd a004 	str.w	sl, [sp, #4]
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	4628      	mov	r0, r5
 8004474:	f7ff fee8 	bl	8004248 <__cvt>
 8004478:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800447c:	2b47      	cmp	r3, #71	; 0x47
 800447e:	4680      	mov	r8, r0
 8004480:	d109      	bne.n	8004496 <_printf_float+0x126>
 8004482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004484:	1cd8      	adds	r0, r3, #3
 8004486:	db02      	blt.n	800448e <_printf_float+0x11e>
 8004488:	6862      	ldr	r2, [r4, #4]
 800448a:	4293      	cmp	r3, r2
 800448c:	dd47      	ble.n	800451e <_printf_float+0x1ae>
 800448e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004492:	fa5f fa8a 	uxtb.w	sl, sl
 8004496:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800449a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800449c:	d824      	bhi.n	80044e8 <_printf_float+0x178>
 800449e:	3901      	subs	r1, #1
 80044a0:	4652      	mov	r2, sl
 80044a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044a6:	9109      	str	r1, [sp, #36]	; 0x24
 80044a8:	f7ff ff2f 	bl	800430a <__exponent>
 80044ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ae:	1813      	adds	r3, r2, r0
 80044b0:	2a01      	cmp	r2, #1
 80044b2:	4681      	mov	r9, r0
 80044b4:	6123      	str	r3, [r4, #16]
 80044b6:	dc02      	bgt.n	80044be <_printf_float+0x14e>
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	07d1      	lsls	r1, r2, #31
 80044bc:	d501      	bpl.n	80044c2 <_printf_float+0x152>
 80044be:	3301      	adds	r3, #1
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0a5      	beq.n	8004416 <_printf_float+0xa6>
 80044ca:	232d      	movs	r3, #45	; 0x2d
 80044cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d0:	e7a1      	b.n	8004416 <_printf_float+0xa6>
 80044d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80044d6:	f000 8177 	beq.w	80047c8 <_printf_float+0x458>
 80044da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80044de:	d1bb      	bne.n	8004458 <_printf_float+0xe8>
 80044e0:	2900      	cmp	r1, #0
 80044e2:	d1b9      	bne.n	8004458 <_printf_float+0xe8>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e7b6      	b.n	8004456 <_printf_float+0xe6>
 80044e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80044ec:	d119      	bne.n	8004522 <_printf_float+0x1b2>
 80044ee:	2900      	cmp	r1, #0
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	dd0c      	ble.n	800450e <_printf_float+0x19e>
 80044f4:	6121      	str	r1, [r4, #16]
 80044f6:	b913      	cbnz	r3, 80044fe <_printf_float+0x18e>
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	07d2      	lsls	r2, r2, #31
 80044fc:	d502      	bpl.n	8004504 <_printf_float+0x194>
 80044fe:	3301      	adds	r3, #1
 8004500:	440b      	add	r3, r1
 8004502:	6123      	str	r3, [r4, #16]
 8004504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004506:	65a3      	str	r3, [r4, #88]	; 0x58
 8004508:	f04f 0900 	mov.w	r9, #0
 800450c:	e7d9      	b.n	80044c2 <_printf_float+0x152>
 800450e:	b913      	cbnz	r3, 8004516 <_printf_float+0x1a6>
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	07d0      	lsls	r0, r2, #31
 8004514:	d501      	bpl.n	800451a <_printf_float+0x1aa>
 8004516:	3302      	adds	r3, #2
 8004518:	e7f3      	b.n	8004502 <_printf_float+0x192>
 800451a:	2301      	movs	r3, #1
 800451c:	e7f1      	b.n	8004502 <_printf_float+0x192>
 800451e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004522:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004526:	4293      	cmp	r3, r2
 8004528:	db05      	blt.n	8004536 <_printf_float+0x1c6>
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	6123      	str	r3, [r4, #16]
 800452e:	07d1      	lsls	r1, r2, #31
 8004530:	d5e8      	bpl.n	8004504 <_printf_float+0x194>
 8004532:	3301      	adds	r3, #1
 8004534:	e7e5      	b.n	8004502 <_printf_float+0x192>
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfd4      	ite	le
 800453a:	f1c3 0302 	rsble	r3, r3, #2
 800453e:	2301      	movgt	r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	e7de      	b.n	8004502 <_printf_float+0x192>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	055a      	lsls	r2, r3, #21
 8004548:	d407      	bmi.n	800455a <_printf_float+0x1ea>
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	4642      	mov	r2, r8
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	d12b      	bne.n	80045b0 <_printf_float+0x240>
 8004558:	e767      	b.n	800442a <_printf_float+0xba>
 800455a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800455e:	f240 80dc 	bls.w	800471a <_printf_float+0x3aa>
 8004562:	2200      	movs	r2, #0
 8004564:	2300      	movs	r3, #0
 8004566:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800456a:	f7fc facd 	bl	8000b08 <__aeabi_dcmpeq>
 800456e:	2800      	cmp	r0, #0
 8004570:	d033      	beq.n	80045da <_printf_float+0x26a>
 8004572:	2301      	movs	r3, #1
 8004574:	4a41      	ldr	r2, [pc, #260]	; (800467c <_printf_float+0x30c>)
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	47b8      	blx	r7
 800457c:	3001      	adds	r0, #1
 800457e:	f43f af54 	beq.w	800442a <_printf_float+0xba>
 8004582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004586:	429a      	cmp	r2, r3
 8004588:	db02      	blt.n	8004590 <_printf_float+0x220>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	07d8      	lsls	r0, r3, #31
 800458e:	d50f      	bpl.n	80045b0 <_printf_float+0x240>
 8004590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004594:	4631      	mov	r1, r6
 8004596:	4628      	mov	r0, r5
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	f43f af45 	beq.w	800442a <_printf_float+0xba>
 80045a0:	f04f 0800 	mov.w	r8, #0
 80045a4:	f104 091a 	add.w	r9, r4, #26
 80045a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4543      	cmp	r3, r8
 80045ae:	dc09      	bgt.n	80045c4 <_printf_float+0x254>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	079b      	lsls	r3, r3, #30
 80045b4:	f100 8103 	bmi.w	80047be <_printf_float+0x44e>
 80045b8:	68e0      	ldr	r0, [r4, #12]
 80045ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045bc:	4298      	cmp	r0, r3
 80045be:	bfb8      	it	lt
 80045c0:	4618      	movlt	r0, r3
 80045c2:	e734      	b.n	800442e <_printf_float+0xbe>
 80045c4:	2301      	movs	r3, #1
 80045c6:	464a      	mov	r2, r9
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	f43f af2b 	beq.w	800442a <_printf_float+0xba>
 80045d4:	f108 0801 	add.w	r8, r8, #1
 80045d8:	e7e6      	b.n	80045a8 <_printf_float+0x238>
 80045da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dc2b      	bgt.n	8004638 <_printf_float+0x2c8>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4a26      	ldr	r2, [pc, #152]	; (800467c <_printf_float+0x30c>)
 80045e4:	4631      	mov	r1, r6
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	f43f af1d 	beq.w	800442a <_printf_float+0xba>
 80045f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f2:	b923      	cbnz	r3, 80045fe <_printf_float+0x28e>
 80045f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f6:	b913      	cbnz	r3, 80045fe <_printf_float+0x28e>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	07d9      	lsls	r1, r3, #31
 80045fc:	d5d8      	bpl.n	80045b0 <_printf_float+0x240>
 80045fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f af0e 	beq.w	800442a <_printf_float+0xba>
 800460e:	f04f 0900 	mov.w	r9, #0
 8004612:	f104 0a1a 	add.w	sl, r4, #26
 8004616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004618:	425b      	negs	r3, r3
 800461a:	454b      	cmp	r3, r9
 800461c:	dc01      	bgt.n	8004622 <_printf_float+0x2b2>
 800461e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004620:	e794      	b.n	800454c <_printf_float+0x1dc>
 8004622:	2301      	movs	r3, #1
 8004624:	4652      	mov	r2, sl
 8004626:	4631      	mov	r1, r6
 8004628:	4628      	mov	r0, r5
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f aefc 	beq.w	800442a <_printf_float+0xba>
 8004632:	f109 0901 	add.w	r9, r9, #1
 8004636:	e7ee      	b.n	8004616 <_printf_float+0x2a6>
 8004638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800463a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800463c:	429a      	cmp	r2, r3
 800463e:	bfa8      	it	ge
 8004640:	461a      	movge	r2, r3
 8004642:	2a00      	cmp	r2, #0
 8004644:	4691      	mov	r9, r2
 8004646:	dd07      	ble.n	8004658 <_printf_float+0x2e8>
 8004648:	4613      	mov	r3, r2
 800464a:	4631      	mov	r1, r6
 800464c:	4642      	mov	r2, r8
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f aee9 	beq.w	800442a <_printf_float+0xba>
 8004658:	f104 031a 	add.w	r3, r4, #26
 800465c:	f04f 0b00 	mov.w	fp, #0
 8004660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004664:	9306      	str	r3, [sp, #24]
 8004666:	e015      	b.n	8004694 <_printf_float+0x324>
 8004668:	7fefffff 	.word	0x7fefffff
 800466c:	080087ec 	.word	0x080087ec
 8004670:	080087e8 	.word	0x080087e8
 8004674:	080087f4 	.word	0x080087f4
 8004678:	080087f0 	.word	0x080087f0
 800467c:	080087f8 	.word	0x080087f8
 8004680:	2301      	movs	r3, #1
 8004682:	9a06      	ldr	r2, [sp, #24]
 8004684:	4631      	mov	r1, r6
 8004686:	4628      	mov	r0, r5
 8004688:	47b8      	blx	r7
 800468a:	3001      	adds	r0, #1
 800468c:	f43f aecd 	beq.w	800442a <_printf_float+0xba>
 8004690:	f10b 0b01 	add.w	fp, fp, #1
 8004694:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004698:	ebaa 0309 	sub.w	r3, sl, r9
 800469c:	455b      	cmp	r3, fp
 800469e:	dcef      	bgt.n	8004680 <_printf_float+0x310>
 80046a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a4:	429a      	cmp	r2, r3
 80046a6:	44d0      	add	r8, sl
 80046a8:	db15      	blt.n	80046d6 <_printf_float+0x366>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	07da      	lsls	r2, r3, #31
 80046ae:	d412      	bmi.n	80046d6 <_printf_float+0x366>
 80046b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046b4:	eba3 020a 	sub.w	r2, r3, sl
 80046b8:	eba3 0a01 	sub.w	sl, r3, r1
 80046bc:	4592      	cmp	sl, r2
 80046be:	bfa8      	it	ge
 80046c0:	4692      	movge	sl, r2
 80046c2:	f1ba 0f00 	cmp.w	sl, #0
 80046c6:	dc0e      	bgt.n	80046e6 <_printf_float+0x376>
 80046c8:	f04f 0800 	mov.w	r8, #0
 80046cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80046d0:	f104 091a 	add.w	r9, r4, #26
 80046d4:	e019      	b.n	800470a <_printf_float+0x39a>
 80046d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	d1e5      	bne.n	80046b0 <_printf_float+0x340>
 80046e4:	e6a1      	b.n	800442a <_printf_float+0xba>
 80046e6:	4653      	mov	r3, sl
 80046e8:	4642      	mov	r2, r8
 80046ea:	4631      	mov	r1, r6
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b8      	blx	r7
 80046f0:	3001      	adds	r0, #1
 80046f2:	d1e9      	bne.n	80046c8 <_printf_float+0x358>
 80046f4:	e699      	b.n	800442a <_printf_float+0xba>
 80046f6:	2301      	movs	r3, #1
 80046f8:	464a      	mov	r2, r9
 80046fa:	4631      	mov	r1, r6
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f ae92 	beq.w	800442a <_printf_float+0xba>
 8004706:	f108 0801 	add.w	r8, r8, #1
 800470a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	eba3 030a 	sub.w	r3, r3, sl
 8004714:	4543      	cmp	r3, r8
 8004716:	dcee      	bgt.n	80046f6 <_printf_float+0x386>
 8004718:	e74a      	b.n	80045b0 <_printf_float+0x240>
 800471a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800471c:	2a01      	cmp	r2, #1
 800471e:	dc01      	bgt.n	8004724 <_printf_float+0x3b4>
 8004720:	07db      	lsls	r3, r3, #31
 8004722:	d53a      	bpl.n	800479a <_printf_float+0x42a>
 8004724:	2301      	movs	r3, #1
 8004726:	4642      	mov	r2, r8
 8004728:	4631      	mov	r1, r6
 800472a:	4628      	mov	r0, r5
 800472c:	47b8      	blx	r7
 800472e:	3001      	adds	r0, #1
 8004730:	f43f ae7b 	beq.w	800442a <_printf_float+0xba>
 8004734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f108 0801 	add.w	r8, r8, #1
 8004744:	f43f ae71 	beq.w	800442a <_printf_float+0xba>
 8004748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474a:	2200      	movs	r2, #0
 800474c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004754:	2300      	movs	r3, #0
 8004756:	f7fc f9d7 	bl	8000b08 <__aeabi_dcmpeq>
 800475a:	b9c8      	cbnz	r0, 8004790 <_printf_float+0x420>
 800475c:	4653      	mov	r3, sl
 800475e:	4642      	mov	r2, r8
 8004760:	4631      	mov	r1, r6
 8004762:	4628      	mov	r0, r5
 8004764:	47b8      	blx	r7
 8004766:	3001      	adds	r0, #1
 8004768:	d10e      	bne.n	8004788 <_printf_float+0x418>
 800476a:	e65e      	b.n	800442a <_printf_float+0xba>
 800476c:	2301      	movs	r3, #1
 800476e:	4652      	mov	r2, sl
 8004770:	4631      	mov	r1, r6
 8004772:	4628      	mov	r0, r5
 8004774:	47b8      	blx	r7
 8004776:	3001      	adds	r0, #1
 8004778:	f43f ae57 	beq.w	800442a <_printf_float+0xba>
 800477c:	f108 0801 	add.w	r8, r8, #1
 8004780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004782:	3b01      	subs	r3, #1
 8004784:	4543      	cmp	r3, r8
 8004786:	dcf1      	bgt.n	800476c <_printf_float+0x3fc>
 8004788:	464b      	mov	r3, r9
 800478a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800478e:	e6de      	b.n	800454e <_printf_float+0x1de>
 8004790:	f04f 0800 	mov.w	r8, #0
 8004794:	f104 0a1a 	add.w	sl, r4, #26
 8004798:	e7f2      	b.n	8004780 <_printf_float+0x410>
 800479a:	2301      	movs	r3, #1
 800479c:	e7df      	b.n	800475e <_printf_float+0x3ee>
 800479e:	2301      	movs	r3, #1
 80047a0:	464a      	mov	r2, r9
 80047a2:	4631      	mov	r1, r6
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b8      	blx	r7
 80047a8:	3001      	adds	r0, #1
 80047aa:	f43f ae3e 	beq.w	800442a <_printf_float+0xba>
 80047ae:	f108 0801 	add.w	r8, r8, #1
 80047b2:	68e3      	ldr	r3, [r4, #12]
 80047b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	4543      	cmp	r3, r8
 80047ba:	dcf0      	bgt.n	800479e <_printf_float+0x42e>
 80047bc:	e6fc      	b.n	80045b8 <_printf_float+0x248>
 80047be:	f04f 0800 	mov.w	r8, #0
 80047c2:	f104 0919 	add.w	r9, r4, #25
 80047c6:	e7f4      	b.n	80047b2 <_printf_float+0x442>
 80047c8:	2900      	cmp	r1, #0
 80047ca:	f43f ae8b 	beq.w	80044e4 <_printf_float+0x174>
 80047ce:	2300      	movs	r3, #0
 80047d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80047d4:	ab09      	add	r3, sp, #36	; 0x24
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	ec49 8b10 	vmov	d0, r8, r9
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	f8cd a004 	str.w	sl, [sp, #4]
 80047e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7ff fd2e 	bl	8004248 <__cvt>
 80047ec:	4680      	mov	r8, r0
 80047ee:	e648      	b.n	8004482 <_printf_float+0x112>

080047f0 <_printf_common>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	4691      	mov	r9, r2
 80047f6:	461f      	mov	r7, r3
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	690b      	ldr	r3, [r1, #16]
 80047fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004800:	4293      	cmp	r3, r2
 8004802:	bfb8      	it	lt
 8004804:	4613      	movlt	r3, r2
 8004806:	f8c9 3000 	str.w	r3, [r9]
 800480a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	b112      	cbz	r2, 800481a <_printf_common+0x2a>
 8004814:	3301      	adds	r3, #1
 8004816:	f8c9 3000 	str.w	r3, [r9]
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	0699      	lsls	r1, r3, #26
 800481e:	bf42      	ittt	mi
 8004820:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004824:	3302      	addmi	r3, #2
 8004826:	f8c9 3000 	strmi.w	r3, [r9]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	f015 0506 	ands.w	r5, r5, #6
 8004830:	d107      	bne.n	8004842 <_printf_common+0x52>
 8004832:	f104 0a19 	add.w	sl, r4, #25
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	f8d9 2000 	ldr.w	r2, [r9]
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	42ab      	cmp	r3, r5
 8004840:	dc28      	bgt.n	8004894 <_printf_common+0xa4>
 8004842:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	3300      	adds	r3, #0
 800484a:	bf18      	it	ne
 800484c:	2301      	movne	r3, #1
 800484e:	0692      	lsls	r2, r2, #26
 8004850:	d42d      	bmi.n	80048ae <_printf_common+0xbe>
 8004852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004856:	4639      	mov	r1, r7
 8004858:	4630      	mov	r0, r6
 800485a:	47c0      	blx	r8
 800485c:	3001      	adds	r0, #1
 800485e:	d020      	beq.n	80048a2 <_printf_common+0xb2>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	68e5      	ldr	r5, [r4, #12]
 8004864:	f8d9 2000 	ldr.w	r2, [r9]
 8004868:	f003 0306 	and.w	r3, r3, #6
 800486c:	2b04      	cmp	r3, #4
 800486e:	bf08      	it	eq
 8004870:	1aad      	subeq	r5, r5, r2
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	6922      	ldr	r2, [r4, #16]
 8004876:	bf0c      	ite	eq
 8004878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800487c:	2500      	movne	r5, #0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfc4      	itt	gt
 8004882:	1a9b      	subgt	r3, r3, r2
 8004884:	18ed      	addgt	r5, r5, r3
 8004886:	f04f 0900 	mov.w	r9, #0
 800488a:	341a      	adds	r4, #26
 800488c:	454d      	cmp	r5, r9
 800488e:	d11a      	bne.n	80048c6 <_printf_common+0xd6>
 8004890:	2000      	movs	r0, #0
 8004892:	e008      	b.n	80048a6 <_printf_common+0xb6>
 8004894:	2301      	movs	r3, #1
 8004896:	4652      	mov	r2, sl
 8004898:	4639      	mov	r1, r7
 800489a:	4630      	mov	r0, r6
 800489c:	47c0      	blx	r8
 800489e:	3001      	adds	r0, #1
 80048a0:	d103      	bne.n	80048aa <_printf_common+0xba>
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048aa:	3501      	adds	r5, #1
 80048ac:	e7c3      	b.n	8004836 <_printf_common+0x46>
 80048ae:	18e1      	adds	r1, r4, r3
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	2030      	movs	r0, #48	; 0x30
 80048b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b8:	4422      	add	r2, r4
 80048ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c2:	3302      	adds	r3, #2
 80048c4:	e7c5      	b.n	8004852 <_printf_common+0x62>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4622      	mov	r2, r4
 80048ca:	4639      	mov	r1, r7
 80048cc:	4630      	mov	r0, r6
 80048ce:	47c0      	blx	r8
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0e6      	beq.n	80048a2 <_printf_common+0xb2>
 80048d4:	f109 0901 	add.w	r9, r9, #1
 80048d8:	e7d8      	b.n	800488c <_printf_common+0x9c>
	...

080048dc <_printf_i>:
 80048dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048e4:	460c      	mov	r4, r1
 80048e6:	7e09      	ldrb	r1, [r1, #24]
 80048e8:	b085      	sub	sp, #20
 80048ea:	296e      	cmp	r1, #110	; 0x6e
 80048ec:	4617      	mov	r7, r2
 80048ee:	4606      	mov	r6, r0
 80048f0:	4698      	mov	r8, r3
 80048f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048f4:	f000 80b3 	beq.w	8004a5e <_printf_i+0x182>
 80048f8:	d822      	bhi.n	8004940 <_printf_i+0x64>
 80048fa:	2963      	cmp	r1, #99	; 0x63
 80048fc:	d036      	beq.n	800496c <_printf_i+0x90>
 80048fe:	d80a      	bhi.n	8004916 <_printf_i+0x3a>
 8004900:	2900      	cmp	r1, #0
 8004902:	f000 80b9 	beq.w	8004a78 <_printf_i+0x19c>
 8004906:	2958      	cmp	r1, #88	; 0x58
 8004908:	f000 8083 	beq.w	8004a12 <_printf_i+0x136>
 800490c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004910:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004914:	e032      	b.n	800497c <_printf_i+0xa0>
 8004916:	2964      	cmp	r1, #100	; 0x64
 8004918:	d001      	beq.n	800491e <_printf_i+0x42>
 800491a:	2969      	cmp	r1, #105	; 0x69
 800491c:	d1f6      	bne.n	800490c <_printf_i+0x30>
 800491e:	6820      	ldr	r0, [r4, #0]
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	0605      	lsls	r5, r0, #24
 8004924:	f103 0104 	add.w	r1, r3, #4
 8004928:	d52a      	bpl.n	8004980 <_printf_i+0xa4>
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6011      	str	r1, [r2, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	da03      	bge.n	800493a <_printf_i+0x5e>
 8004932:	222d      	movs	r2, #45	; 0x2d
 8004934:	425b      	negs	r3, r3
 8004936:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800493a:	486f      	ldr	r0, [pc, #444]	; (8004af8 <_printf_i+0x21c>)
 800493c:	220a      	movs	r2, #10
 800493e:	e039      	b.n	80049b4 <_printf_i+0xd8>
 8004940:	2973      	cmp	r1, #115	; 0x73
 8004942:	f000 809d 	beq.w	8004a80 <_printf_i+0x1a4>
 8004946:	d808      	bhi.n	800495a <_printf_i+0x7e>
 8004948:	296f      	cmp	r1, #111	; 0x6f
 800494a:	d020      	beq.n	800498e <_printf_i+0xb2>
 800494c:	2970      	cmp	r1, #112	; 0x70
 800494e:	d1dd      	bne.n	800490c <_printf_i+0x30>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	e003      	b.n	8004962 <_printf_i+0x86>
 800495a:	2975      	cmp	r1, #117	; 0x75
 800495c:	d017      	beq.n	800498e <_printf_i+0xb2>
 800495e:	2978      	cmp	r1, #120	; 0x78
 8004960:	d1d4      	bne.n	800490c <_printf_i+0x30>
 8004962:	2378      	movs	r3, #120	; 0x78
 8004964:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004968:	4864      	ldr	r0, [pc, #400]	; (8004afc <_printf_i+0x220>)
 800496a:	e055      	b.n	8004a18 <_printf_i+0x13c>
 800496c:	6813      	ldr	r3, [r2, #0]
 800496e:	1d19      	adds	r1, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6011      	str	r1, [r2, #0]
 8004974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800497c:	2301      	movs	r3, #1
 800497e:	e08c      	b.n	8004a9a <_printf_i+0x1be>
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6011      	str	r1, [r2, #0]
 8004984:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004988:	bf18      	it	ne
 800498a:	b21b      	sxthne	r3, r3
 800498c:	e7cf      	b.n	800492e <_printf_i+0x52>
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	6825      	ldr	r5, [r4, #0]
 8004992:	1d18      	adds	r0, r3, #4
 8004994:	6010      	str	r0, [r2, #0]
 8004996:	0628      	lsls	r0, r5, #24
 8004998:	d501      	bpl.n	800499e <_printf_i+0xc2>
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	e002      	b.n	80049a4 <_printf_i+0xc8>
 800499e:	0668      	lsls	r0, r5, #25
 80049a0:	d5fb      	bpl.n	800499a <_printf_i+0xbe>
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	4854      	ldr	r0, [pc, #336]	; (8004af8 <_printf_i+0x21c>)
 80049a6:	296f      	cmp	r1, #111	; 0x6f
 80049a8:	bf14      	ite	ne
 80049aa:	220a      	movne	r2, #10
 80049ac:	2208      	moveq	r2, #8
 80049ae:	2100      	movs	r1, #0
 80049b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b4:	6865      	ldr	r5, [r4, #4]
 80049b6:	60a5      	str	r5, [r4, #8]
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	f2c0 8095 	blt.w	8004ae8 <_printf_i+0x20c>
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	f021 0104 	bic.w	r1, r1, #4
 80049c4:	6021      	str	r1, [r4, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d13d      	bne.n	8004a46 <_printf_i+0x16a>
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	f040 808e 	bne.w	8004aec <_printf_i+0x210>
 80049d0:	4665      	mov	r5, ip
 80049d2:	2a08      	cmp	r2, #8
 80049d4:	d10b      	bne.n	80049ee <_printf_i+0x112>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	07db      	lsls	r3, r3, #31
 80049da:	d508      	bpl.n	80049ee <_printf_i+0x112>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	bfde      	ittt	le
 80049e4:	2330      	movle	r3, #48	; 0x30
 80049e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ee:	ebac 0305 	sub.w	r3, ip, r5
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	f8cd 8000 	str.w	r8, [sp]
 80049f8:	463b      	mov	r3, r7
 80049fa:	aa03      	add	r2, sp, #12
 80049fc:	4621      	mov	r1, r4
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7ff fef6 	bl	80047f0 <_printf_common>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d14d      	bne.n	8004aa4 <_printf_i+0x1c8>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	b005      	add	sp, #20
 8004a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a12:	4839      	ldr	r0, [pc, #228]	; (8004af8 <_printf_i+0x21c>)
 8004a14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a18:	6813      	ldr	r3, [r2, #0]
 8004a1a:	6821      	ldr	r1, [r4, #0]
 8004a1c:	1d1d      	adds	r5, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6015      	str	r5, [r2, #0]
 8004a22:	060a      	lsls	r2, r1, #24
 8004a24:	d50b      	bpl.n	8004a3e <_printf_i+0x162>
 8004a26:	07ca      	lsls	r2, r1, #31
 8004a28:	bf44      	itt	mi
 8004a2a:	f041 0120 	orrmi.w	r1, r1, #32
 8004a2e:	6021      	strmi	r1, [r4, #0]
 8004a30:	b91b      	cbnz	r3, 8004a3a <_printf_i+0x15e>
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	f022 0220 	bic.w	r2, r2, #32
 8004a38:	6022      	str	r2, [r4, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	e7b7      	b.n	80049ae <_printf_i+0xd2>
 8004a3e:	064d      	lsls	r5, r1, #25
 8004a40:	bf48      	it	mi
 8004a42:	b29b      	uxthmi	r3, r3
 8004a44:	e7ef      	b.n	8004a26 <_printf_i+0x14a>
 8004a46:	4665      	mov	r5, ip
 8004a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a4c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a50:	5cc3      	ldrb	r3, [r0, r3]
 8004a52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a56:	460b      	mov	r3, r1
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d1f5      	bne.n	8004a48 <_printf_i+0x16c>
 8004a5c:	e7b9      	b.n	80049d2 <_printf_i+0xf6>
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	6825      	ldr	r5, [r4, #0]
 8004a62:	6961      	ldr	r1, [r4, #20]
 8004a64:	1d18      	adds	r0, r3, #4
 8004a66:	6010      	str	r0, [r2, #0]
 8004a68:	0628      	lsls	r0, r5, #24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	d501      	bpl.n	8004a72 <_printf_i+0x196>
 8004a6e:	6019      	str	r1, [r3, #0]
 8004a70:	e002      	b.n	8004a78 <_printf_i+0x19c>
 8004a72:	066a      	lsls	r2, r5, #25
 8004a74:	d5fb      	bpl.n	8004a6e <_printf_i+0x192>
 8004a76:	8019      	strh	r1, [r3, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	4665      	mov	r5, ip
 8004a7e:	e7b9      	b.n	80049f4 <_printf_i+0x118>
 8004a80:	6813      	ldr	r3, [r2, #0]
 8004a82:	1d19      	adds	r1, r3, #4
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	681d      	ldr	r5, [r3, #0]
 8004a88:	6862      	ldr	r2, [r4, #4]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f7fb fbc7 	bl	8000220 <memchr>
 8004a92:	b108      	cbz	r0, 8004a98 <_printf_i+0x1bc>
 8004a94:	1b40      	subs	r0, r0, r5
 8004a96:	6060      	str	r0, [r4, #4]
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa2:	e7a7      	b.n	80049f4 <_printf_i+0x118>
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	462a      	mov	r2, r5
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	4630      	mov	r0, r6
 8004aac:	47c0      	blx	r8
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d0aa      	beq.n	8004a08 <_printf_i+0x12c>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	079b      	lsls	r3, r3, #30
 8004ab6:	d413      	bmi.n	8004ae0 <_printf_i+0x204>
 8004ab8:	68e0      	ldr	r0, [r4, #12]
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	4298      	cmp	r0, r3
 8004abe:	bfb8      	it	lt
 8004ac0:	4618      	movlt	r0, r3
 8004ac2:	e7a3      	b.n	8004a0c <_printf_i+0x130>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	464a      	mov	r2, r9
 8004ac8:	4639      	mov	r1, r7
 8004aca:	4630      	mov	r0, r6
 8004acc:	47c0      	blx	r8
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d09a      	beq.n	8004a08 <_printf_i+0x12c>
 8004ad2:	3501      	adds	r5, #1
 8004ad4:	68e3      	ldr	r3, [r4, #12]
 8004ad6:	9a03      	ldr	r2, [sp, #12]
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	42ab      	cmp	r3, r5
 8004adc:	dcf2      	bgt.n	8004ac4 <_printf_i+0x1e8>
 8004ade:	e7eb      	b.n	8004ab8 <_printf_i+0x1dc>
 8004ae0:	2500      	movs	r5, #0
 8004ae2:	f104 0919 	add.w	r9, r4, #25
 8004ae6:	e7f5      	b.n	8004ad4 <_printf_i+0x1f8>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1ac      	bne.n	8004a46 <_printf_i+0x16a>
 8004aec:	7803      	ldrb	r3, [r0, #0]
 8004aee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af6:	e76c      	b.n	80049d2 <_printf_i+0xf6>
 8004af8:	080087fa 	.word	0x080087fa
 8004afc:	0800880b 	.word	0x0800880b

08004b00 <_scanf_float>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	469a      	mov	sl, r3
 8004b06:	688b      	ldr	r3, [r1, #8]
 8004b08:	4616      	mov	r6, r2
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b10:	b087      	sub	sp, #28
 8004b12:	bf83      	ittte	hi
 8004b14:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004b18:	189b      	addhi	r3, r3, r2
 8004b1a:	9301      	strhi	r3, [sp, #4]
 8004b1c:	2300      	movls	r3, #0
 8004b1e:	bf86      	itte	hi
 8004b20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b24:	608b      	strhi	r3, [r1, #8]
 8004b26:	9301      	strls	r3, [sp, #4]
 8004b28:	680b      	ldr	r3, [r1, #0]
 8004b2a:	4688      	mov	r8, r1
 8004b2c:	f04f 0b00 	mov.w	fp, #0
 8004b30:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004b34:	f848 3b1c 	str.w	r3, [r8], #28
 8004b38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004b3c:	4607      	mov	r7, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	4645      	mov	r5, r8
 8004b42:	465a      	mov	r2, fp
 8004b44:	46d9      	mov	r9, fp
 8004b46:	f8cd b008 	str.w	fp, [sp, #8]
 8004b4a:	68a1      	ldr	r1, [r4, #8]
 8004b4c:	b181      	cbz	r1, 8004b70 <_scanf_float+0x70>
 8004b4e:	6833      	ldr	r3, [r6, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b49      	cmp	r3, #73	; 0x49
 8004b54:	d071      	beq.n	8004c3a <_scanf_float+0x13a>
 8004b56:	d84d      	bhi.n	8004bf4 <_scanf_float+0xf4>
 8004b58:	2b39      	cmp	r3, #57	; 0x39
 8004b5a:	d840      	bhi.n	8004bde <_scanf_float+0xde>
 8004b5c:	2b31      	cmp	r3, #49	; 0x31
 8004b5e:	f080 8088 	bcs.w	8004c72 <_scanf_float+0x172>
 8004b62:	2b2d      	cmp	r3, #45	; 0x2d
 8004b64:	f000 8090 	beq.w	8004c88 <_scanf_float+0x188>
 8004b68:	d815      	bhi.n	8004b96 <_scanf_float+0x96>
 8004b6a:	2b2b      	cmp	r3, #43	; 0x2b
 8004b6c:	f000 808c 	beq.w	8004c88 <_scanf_float+0x188>
 8004b70:	f1b9 0f00 	cmp.w	r9, #0
 8004b74:	d003      	beq.n	8004b7e <_scanf_float+0x7e>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	2a01      	cmp	r2, #1
 8004b82:	f200 80ea 	bhi.w	8004d5a <_scanf_float+0x25a>
 8004b86:	4545      	cmp	r5, r8
 8004b88:	f200 80dc 	bhi.w	8004d44 <_scanf_float+0x244>
 8004b8c:	2601      	movs	r6, #1
 8004b8e:	4630      	mov	r0, r6
 8004b90:	b007      	add	sp, #28
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b96:	2b2e      	cmp	r3, #46	; 0x2e
 8004b98:	f000 809f 	beq.w	8004cda <_scanf_float+0x1da>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d1e7      	bne.n	8004b70 <_scanf_float+0x70>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004ba6:	d064      	beq.n	8004c72 <_scanf_float+0x172>
 8004ba8:	9b01      	ldr	r3, [sp, #4]
 8004baa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004bae:	6020      	str	r0, [r4, #0]
 8004bb0:	f109 0901 	add.w	r9, r9, #1
 8004bb4:	b11b      	cbz	r3, 8004bbe <_scanf_float+0xbe>
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	3101      	adds	r1, #1
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	60a1      	str	r1, [r4, #8]
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60a3      	str	r3, [r4, #8]
 8004bc4:	6923      	ldr	r3, [r4, #16]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	6873      	ldr	r3, [r6, #4]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	6073      	str	r3, [r6, #4]
 8004bd2:	f340 80ac 	ble.w	8004d2e <_scanf_float+0x22e>
 8004bd6:	6833      	ldr	r3, [r6, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	6033      	str	r3, [r6, #0]
 8004bdc:	e7b5      	b.n	8004b4a <_scanf_float+0x4a>
 8004bde:	2b45      	cmp	r3, #69	; 0x45
 8004be0:	f000 8085 	beq.w	8004cee <_scanf_float+0x1ee>
 8004be4:	2b46      	cmp	r3, #70	; 0x46
 8004be6:	d06a      	beq.n	8004cbe <_scanf_float+0x1be>
 8004be8:	2b41      	cmp	r3, #65	; 0x41
 8004bea:	d1c1      	bne.n	8004b70 <_scanf_float+0x70>
 8004bec:	2a01      	cmp	r2, #1
 8004bee:	d1bf      	bne.n	8004b70 <_scanf_float+0x70>
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	e046      	b.n	8004c82 <_scanf_float+0x182>
 8004bf4:	2b65      	cmp	r3, #101	; 0x65
 8004bf6:	d07a      	beq.n	8004cee <_scanf_float+0x1ee>
 8004bf8:	d818      	bhi.n	8004c2c <_scanf_float+0x12c>
 8004bfa:	2b54      	cmp	r3, #84	; 0x54
 8004bfc:	d066      	beq.n	8004ccc <_scanf_float+0x1cc>
 8004bfe:	d811      	bhi.n	8004c24 <_scanf_float+0x124>
 8004c00:	2b4e      	cmp	r3, #78	; 0x4e
 8004c02:	d1b5      	bne.n	8004b70 <_scanf_float+0x70>
 8004c04:	2a00      	cmp	r2, #0
 8004c06:	d146      	bne.n	8004c96 <_scanf_float+0x196>
 8004c08:	f1b9 0f00 	cmp.w	r9, #0
 8004c0c:	d145      	bne.n	8004c9a <_scanf_float+0x19a>
 8004c0e:	6821      	ldr	r1, [r4, #0]
 8004c10:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004c14:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004c18:	d13f      	bne.n	8004c9a <_scanf_float+0x19a>
 8004c1a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004c1e:	6021      	str	r1, [r4, #0]
 8004c20:	2201      	movs	r2, #1
 8004c22:	e02e      	b.n	8004c82 <_scanf_float+0x182>
 8004c24:	2b59      	cmp	r3, #89	; 0x59
 8004c26:	d01e      	beq.n	8004c66 <_scanf_float+0x166>
 8004c28:	2b61      	cmp	r3, #97	; 0x61
 8004c2a:	e7de      	b.n	8004bea <_scanf_float+0xea>
 8004c2c:	2b6e      	cmp	r3, #110	; 0x6e
 8004c2e:	d0e9      	beq.n	8004c04 <_scanf_float+0x104>
 8004c30:	d815      	bhi.n	8004c5e <_scanf_float+0x15e>
 8004c32:	2b66      	cmp	r3, #102	; 0x66
 8004c34:	d043      	beq.n	8004cbe <_scanf_float+0x1be>
 8004c36:	2b69      	cmp	r3, #105	; 0x69
 8004c38:	d19a      	bne.n	8004b70 <_scanf_float+0x70>
 8004c3a:	f1bb 0f00 	cmp.w	fp, #0
 8004c3e:	d138      	bne.n	8004cb2 <_scanf_float+0x1b2>
 8004c40:	f1b9 0f00 	cmp.w	r9, #0
 8004c44:	d197      	bne.n	8004b76 <_scanf_float+0x76>
 8004c46:	6821      	ldr	r1, [r4, #0]
 8004c48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004c4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004c50:	d195      	bne.n	8004b7e <_scanf_float+0x7e>
 8004c52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004c56:	6021      	str	r1, [r4, #0]
 8004c58:	f04f 0b01 	mov.w	fp, #1
 8004c5c:	e011      	b.n	8004c82 <_scanf_float+0x182>
 8004c5e:	2b74      	cmp	r3, #116	; 0x74
 8004c60:	d034      	beq.n	8004ccc <_scanf_float+0x1cc>
 8004c62:	2b79      	cmp	r3, #121	; 0x79
 8004c64:	d184      	bne.n	8004b70 <_scanf_float+0x70>
 8004c66:	f1bb 0f07 	cmp.w	fp, #7
 8004c6a:	d181      	bne.n	8004b70 <_scanf_float+0x70>
 8004c6c:	f04f 0b08 	mov.w	fp, #8
 8004c70:	e007      	b.n	8004c82 <_scanf_float+0x182>
 8004c72:	eb12 0f0b 	cmn.w	r2, fp
 8004c76:	f47f af7b 	bne.w	8004b70 <_scanf_float+0x70>
 8004c7a:	6821      	ldr	r1, [r4, #0]
 8004c7c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004c80:	6021      	str	r1, [r4, #0]
 8004c82:	702b      	strb	r3, [r5, #0]
 8004c84:	3501      	adds	r5, #1
 8004c86:	e79a      	b.n	8004bbe <_scanf_float+0xbe>
 8004c88:	6821      	ldr	r1, [r4, #0]
 8004c8a:	0608      	lsls	r0, r1, #24
 8004c8c:	f57f af70 	bpl.w	8004b70 <_scanf_float+0x70>
 8004c90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c94:	e7f4      	b.n	8004c80 <_scanf_float+0x180>
 8004c96:	2a02      	cmp	r2, #2
 8004c98:	d047      	beq.n	8004d2a <_scanf_float+0x22a>
 8004c9a:	f1bb 0f01 	cmp.w	fp, #1
 8004c9e:	d003      	beq.n	8004ca8 <_scanf_float+0x1a8>
 8004ca0:	f1bb 0f04 	cmp.w	fp, #4
 8004ca4:	f47f af64 	bne.w	8004b70 <_scanf_float+0x70>
 8004ca8:	f10b 0b01 	add.w	fp, fp, #1
 8004cac:	fa5f fb8b 	uxtb.w	fp, fp
 8004cb0:	e7e7      	b.n	8004c82 <_scanf_float+0x182>
 8004cb2:	f1bb 0f03 	cmp.w	fp, #3
 8004cb6:	d0f7      	beq.n	8004ca8 <_scanf_float+0x1a8>
 8004cb8:	f1bb 0f05 	cmp.w	fp, #5
 8004cbc:	e7f2      	b.n	8004ca4 <_scanf_float+0x1a4>
 8004cbe:	f1bb 0f02 	cmp.w	fp, #2
 8004cc2:	f47f af55 	bne.w	8004b70 <_scanf_float+0x70>
 8004cc6:	f04f 0b03 	mov.w	fp, #3
 8004cca:	e7da      	b.n	8004c82 <_scanf_float+0x182>
 8004ccc:	f1bb 0f06 	cmp.w	fp, #6
 8004cd0:	f47f af4e 	bne.w	8004b70 <_scanf_float+0x70>
 8004cd4:	f04f 0b07 	mov.w	fp, #7
 8004cd8:	e7d3      	b.n	8004c82 <_scanf_float+0x182>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	0588      	lsls	r0, r1, #22
 8004cde:	f57f af47 	bpl.w	8004b70 <_scanf_float+0x70>
 8004ce2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004ce6:	6021      	str	r1, [r4, #0]
 8004ce8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004cec:	e7c9      	b.n	8004c82 <_scanf_float+0x182>
 8004cee:	6821      	ldr	r1, [r4, #0]
 8004cf0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004cf4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004cf8:	d006      	beq.n	8004d08 <_scanf_float+0x208>
 8004cfa:	0548      	lsls	r0, r1, #21
 8004cfc:	f57f af38 	bpl.w	8004b70 <_scanf_float+0x70>
 8004d00:	f1b9 0f00 	cmp.w	r9, #0
 8004d04:	f43f af3b 	beq.w	8004b7e <_scanf_float+0x7e>
 8004d08:	0588      	lsls	r0, r1, #22
 8004d0a:	bf58      	it	pl
 8004d0c:	9802      	ldrpl	r0, [sp, #8]
 8004d0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004d12:	bf58      	it	pl
 8004d14:	eba9 0000 	subpl.w	r0, r9, r0
 8004d18:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004d1c:	bf58      	it	pl
 8004d1e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004d22:	6021      	str	r1, [r4, #0]
 8004d24:	f04f 0900 	mov.w	r9, #0
 8004d28:	e7ab      	b.n	8004c82 <_scanf_float+0x182>
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	e7a9      	b.n	8004c82 <_scanf_float+0x182>
 8004d2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d32:	9205      	str	r2, [sp, #20]
 8004d34:	4631      	mov	r1, r6
 8004d36:	4638      	mov	r0, r7
 8004d38:	4798      	blx	r3
 8004d3a:	9a05      	ldr	r2, [sp, #20]
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f43f af04 	beq.w	8004b4a <_scanf_float+0x4a>
 8004d42:	e715      	b.n	8004b70 <_scanf_float+0x70>
 8004d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004d4c:	4632      	mov	r2, r6
 8004d4e:	4638      	mov	r0, r7
 8004d50:	4798      	blx	r3
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	e715      	b.n	8004b86 <_scanf_float+0x86>
 8004d5a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d80a      	bhi.n	8004d78 <_scanf_float+0x278>
 8004d62:	f1bb 0f02 	cmp.w	fp, #2
 8004d66:	d968      	bls.n	8004e3a <_scanf_float+0x33a>
 8004d68:	f1ab 0b03 	sub.w	fp, fp, #3
 8004d6c:	fa5f fb8b 	uxtb.w	fp, fp
 8004d70:	eba5 0b0b 	sub.w	fp, r5, fp
 8004d74:	455d      	cmp	r5, fp
 8004d76:	d14b      	bne.n	8004e10 <_scanf_float+0x310>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	05da      	lsls	r2, r3, #23
 8004d7c:	d51f      	bpl.n	8004dbe <_scanf_float+0x2be>
 8004d7e:	055b      	lsls	r3, r3, #21
 8004d80:	d468      	bmi.n	8004e54 <_scanf_float+0x354>
 8004d82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004d86:	6923      	ldr	r3, [r4, #16]
 8004d88:	2965      	cmp	r1, #101	; 0x65
 8004d8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d8e:	f105 3bff 	add.w	fp, r5, #4294967295
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	d00d      	beq.n	8004db2 <_scanf_float+0x2b2>
 8004d96:	2945      	cmp	r1, #69	; 0x45
 8004d98:	d00b      	beq.n	8004db2 <_scanf_float+0x2b2>
 8004d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d9e:	4632      	mov	r2, r6
 8004da0:	4638      	mov	r0, r7
 8004da2:	4798      	blx	r3
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	f1a5 0b02 	sub.w	fp, r5, #2
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004db6:	4632      	mov	r2, r6
 8004db8:	4638      	mov	r0, r7
 8004dba:	4798      	blx	r3
 8004dbc:	465d      	mov	r5, fp
 8004dbe:	6826      	ldr	r6, [r4, #0]
 8004dc0:	f016 0610 	ands.w	r6, r6, #16
 8004dc4:	d17a      	bne.n	8004ebc <_scanf_float+0x3bc>
 8004dc6:	702e      	strb	r6, [r5, #0]
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd2:	d142      	bne.n	8004e5a <_scanf_float+0x35a>
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	eba9 0303 	sub.w	r3, r9, r3
 8004dda:	425a      	negs	r2, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d149      	bne.n	8004e74 <_scanf_float+0x374>
 8004de0:	2200      	movs	r2, #0
 8004de2:	4641      	mov	r1, r8
 8004de4:	4638      	mov	r0, r7
 8004de6:	f000 ff07 	bl	8005bf8 <_strtod_r>
 8004dea:	6825      	ldr	r5, [r4, #0]
 8004dec:	f8da 3000 	ldr.w	r3, [sl]
 8004df0:	f015 0f02 	tst.w	r5, #2
 8004df4:	f103 0204 	add.w	r2, r3, #4
 8004df8:	ec59 8b10 	vmov	r8, r9, d0
 8004dfc:	f8ca 2000 	str.w	r2, [sl]
 8004e00:	d043      	beq.n	8004e8a <_scanf_float+0x38a>
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	e9c3 8900 	strd	r8, r9, [r3]
 8004e08:	68e3      	ldr	r3, [r4, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60e3      	str	r3, [r4, #12]
 8004e0e:	e6be      	b.n	8004b8e <_scanf_float+0x8e>
 8004e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e18:	4632      	mov	r2, r6
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	4798      	blx	r3
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	6123      	str	r3, [r4, #16]
 8004e24:	e7a6      	b.n	8004d74 <_scanf_float+0x274>
 8004e26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e2a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e2e:	4632      	mov	r2, r6
 8004e30:	4638      	mov	r0, r7
 8004e32:	4798      	blx	r3
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	6123      	str	r3, [r4, #16]
 8004e3a:	4545      	cmp	r5, r8
 8004e3c:	d8f3      	bhi.n	8004e26 <_scanf_float+0x326>
 8004e3e:	e6a5      	b.n	8004b8c <_scanf_float+0x8c>
 8004e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	4798      	blx	r3
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	6123      	str	r3, [r4, #16]
 8004e54:	4545      	cmp	r5, r8
 8004e56:	d8f3      	bhi.n	8004e40 <_scanf_float+0x340>
 8004e58:	e698      	b.n	8004b8c <_scanf_float+0x8c>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0bf      	beq.n	8004de0 <_scanf_float+0x2e0>
 8004e60:	9904      	ldr	r1, [sp, #16]
 8004e62:	230a      	movs	r3, #10
 8004e64:	4632      	mov	r2, r6
 8004e66:	3101      	adds	r1, #1
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f000 ff51 	bl	8005d10 <_strtol_r>
 8004e6e:	9b03      	ldr	r3, [sp, #12]
 8004e70:	9d04      	ldr	r5, [sp, #16]
 8004e72:	1ac2      	subs	r2, r0, r3
 8004e74:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004e78:	429d      	cmp	r5, r3
 8004e7a:	bf28      	it	cs
 8004e7c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004e80:	490f      	ldr	r1, [pc, #60]	; (8004ec0 <_scanf_float+0x3c0>)
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f888 	bl	8004f98 <siprintf>
 8004e88:	e7aa      	b.n	8004de0 <_scanf_float+0x2e0>
 8004e8a:	f015 0504 	ands.w	r5, r5, #4
 8004e8e:	d1b8      	bne.n	8004e02 <_scanf_float+0x302>
 8004e90:	681f      	ldr	r7, [r3, #0]
 8004e92:	ee10 2a10 	vmov	r2, s0
 8004e96:	464b      	mov	r3, r9
 8004e98:	ee10 0a10 	vmov	r0, s0
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	f7fb fe65 	bl	8000b6c <__aeabi_dcmpun>
 8004ea2:	b128      	cbz	r0, 8004eb0 <_scanf_float+0x3b0>
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 f871 	bl	8004f8c <nanf>
 8004eaa:	ed87 0a00 	vstr	s0, [r7]
 8004eae:	e7ab      	b.n	8004e08 <_scanf_float+0x308>
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	f7fb feb8 	bl	8000c28 <__aeabi_d2f>
 8004eb8:	6038      	str	r0, [r7, #0]
 8004eba:	e7a5      	b.n	8004e08 <_scanf_float+0x308>
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	e666      	b.n	8004b8e <_scanf_float+0x8e>
 8004ec0:	0800881c 	.word	0x0800881c

08004ec4 <_puts_r>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	460e      	mov	r6, r1
 8004ec8:	4605      	mov	r5, r0
 8004eca:	b118      	cbz	r0, 8004ed4 <_puts_r+0x10>
 8004ecc:	6983      	ldr	r3, [r0, #24]
 8004ece:	b90b      	cbnz	r3, 8004ed4 <_puts_r+0x10>
 8004ed0:	f001 ff26 	bl	8006d20 <__sinit>
 8004ed4:	69ab      	ldr	r3, [r5, #24]
 8004ed6:	68ac      	ldr	r4, [r5, #8]
 8004ed8:	b913      	cbnz	r3, 8004ee0 <_puts_r+0x1c>
 8004eda:	4628      	mov	r0, r5
 8004edc:	f001 ff20 	bl	8006d20 <__sinit>
 8004ee0:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <_puts_r+0xac>)
 8004ee2:	429c      	cmp	r4, r3
 8004ee4:	d117      	bne.n	8004f16 <_puts_r+0x52>
 8004ee6:	686c      	ldr	r4, [r5, #4]
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	071b      	lsls	r3, r3, #28
 8004eec:	d51d      	bpl.n	8004f2a <_puts_r+0x66>
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	b1db      	cbz	r3, 8004f2a <_puts_r+0x66>
 8004ef2:	3e01      	subs	r6, #1
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004efa:	3b01      	subs	r3, #1
 8004efc:	60a3      	str	r3, [r4, #8]
 8004efe:	b9e9      	cbnz	r1, 8004f3c <_puts_r+0x78>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da2e      	bge.n	8004f62 <_puts_r+0x9e>
 8004f04:	4622      	mov	r2, r4
 8004f06:	210a      	movs	r1, #10
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 ff13 	bl	8005d34 <__swbuf_r>
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d011      	beq.n	8004f36 <_puts_r+0x72>
 8004f12:	200a      	movs	r0, #10
 8004f14:	e011      	b.n	8004f3a <_puts_r+0x76>
 8004f16:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <_puts_r+0xb0>)
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	d101      	bne.n	8004f20 <_puts_r+0x5c>
 8004f1c:	68ac      	ldr	r4, [r5, #8]
 8004f1e:	e7e3      	b.n	8004ee8 <_puts_r+0x24>
 8004f20:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <_puts_r+0xb4>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	bf08      	it	eq
 8004f26:	68ec      	ldreq	r4, [r5, #12]
 8004f28:	e7de      	b.n	8004ee8 <_puts_r+0x24>
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 ff53 	bl	8005dd8 <__swsetup_r>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d0dd      	beq.n	8004ef2 <_puts_r+0x2e>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da04      	bge.n	8004f4a <_puts_r+0x86>
 8004f40:	69a2      	ldr	r2, [r4, #24]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	dc06      	bgt.n	8004f54 <_puts_r+0x90>
 8004f46:	290a      	cmp	r1, #10
 8004f48:	d004      	beq.n	8004f54 <_puts_r+0x90>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	6022      	str	r2, [r4, #0]
 8004f50:	7019      	strb	r1, [r3, #0]
 8004f52:	e7cf      	b.n	8004ef4 <_puts_r+0x30>
 8004f54:	4622      	mov	r2, r4
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 feec 	bl	8005d34 <__swbuf_r>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d1c9      	bne.n	8004ef4 <_puts_r+0x30>
 8004f60:	e7e9      	b.n	8004f36 <_puts_r+0x72>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	200a      	movs	r0, #10
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	7018      	strb	r0, [r3, #0]
 8004f6c:	e7e5      	b.n	8004f3a <_puts_r+0x76>
 8004f6e:	bf00      	nop
 8004f70:	080088a8 	.word	0x080088a8
 8004f74:	080088c8 	.word	0x080088c8
 8004f78:	08008888 	.word	0x08008888

08004f7c <puts>:
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <puts+0xc>)
 8004f7e:	4601      	mov	r1, r0
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	f7ff bf9f 	b.w	8004ec4 <_puts_r>
 8004f86:	bf00      	nop
 8004f88:	2000000c 	.word	0x2000000c

08004f8c <nanf>:
 8004f8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004f94 <nanf+0x8>
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	7fc00000 	.word	0x7fc00000

08004f98 <siprintf>:
 8004f98:	b40e      	push	{r1, r2, r3}
 8004f9a:	b500      	push	{lr}
 8004f9c:	b09c      	sub	sp, #112	; 0x70
 8004f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8004fa0:	9002      	str	r0, [sp, #8]
 8004fa2:	9006      	str	r0, [sp, #24]
 8004fa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fa8:	4809      	ldr	r0, [pc, #36]	; (8004fd0 <siprintf+0x38>)
 8004faa:	9107      	str	r1, [sp, #28]
 8004fac:	9104      	str	r1, [sp, #16]
 8004fae:	4909      	ldr	r1, [pc, #36]	; (8004fd4 <siprintf+0x3c>)
 8004fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fb4:	9105      	str	r1, [sp, #20]
 8004fb6:	6800      	ldr	r0, [r0, #0]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	a902      	add	r1, sp, #8
 8004fbc:	f003 f80c 	bl	8007fd8 <_svfiprintf_r>
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	b01c      	add	sp, #112	; 0x70
 8004fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fcc:	b003      	add	sp, #12
 8004fce:	4770      	bx	lr
 8004fd0:	2000000c 	.word	0x2000000c
 8004fd4:	ffff0208 	.word	0xffff0208

08004fd8 <sulp>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	460d      	mov	r5, r1
 8004fde:	ec45 4b10 	vmov	d0, r4, r5
 8004fe2:	4616      	mov	r6, r2
 8004fe4:	f002 fdb4 	bl	8007b50 <__ulp>
 8004fe8:	ec51 0b10 	vmov	r0, r1, d0
 8004fec:	b17e      	cbz	r6, 800500e <sulp+0x36>
 8004fee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dd09      	ble.n	800500e <sulp+0x36>
 8004ffa:	051b      	lsls	r3, r3, #20
 8004ffc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005000:	2400      	movs	r4, #0
 8005002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	f7fb fb15 	bl	8000638 <__aeabi_dmul>
 800500e:	bd70      	pop	{r4, r5, r6, pc}

08005010 <_strtod_l>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	461f      	mov	r7, r3
 8005016:	b0a1      	sub	sp, #132	; 0x84
 8005018:	2300      	movs	r3, #0
 800501a:	4681      	mov	r9, r0
 800501c:	4638      	mov	r0, r7
 800501e:	460e      	mov	r6, r1
 8005020:	9217      	str	r2, [sp, #92]	; 0x5c
 8005022:	931c      	str	r3, [sp, #112]	; 0x70
 8005024:	f002 fa2f 	bl	8007486 <__localeconv_l>
 8005028:	4680      	mov	r8, r0
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	f7fb f8f0 	bl	8000210 <strlen>
 8005030:	f04f 0a00 	mov.w	sl, #0
 8005034:	4604      	mov	r4, r0
 8005036:	f04f 0b00 	mov.w	fp, #0
 800503a:	961b      	str	r6, [sp, #108]	; 0x6c
 800503c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	2a0d      	cmp	r2, #13
 8005042:	d832      	bhi.n	80050aa <_strtod_l+0x9a>
 8005044:	2a09      	cmp	r2, #9
 8005046:	d236      	bcs.n	80050b6 <_strtod_l+0xa6>
 8005048:	2a00      	cmp	r2, #0
 800504a:	d03e      	beq.n	80050ca <_strtod_l+0xba>
 800504c:	2300      	movs	r3, #0
 800504e:	930d      	str	r3, [sp, #52]	; 0x34
 8005050:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005052:	782b      	ldrb	r3, [r5, #0]
 8005054:	2b30      	cmp	r3, #48	; 0x30
 8005056:	f040 80ac 	bne.w	80051b2 <_strtod_l+0x1a2>
 800505a:	786b      	ldrb	r3, [r5, #1]
 800505c:	2b58      	cmp	r3, #88	; 0x58
 800505e:	d001      	beq.n	8005064 <_strtod_l+0x54>
 8005060:	2b78      	cmp	r3, #120	; 0x78
 8005062:	d167      	bne.n	8005134 <_strtod_l+0x124>
 8005064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	ab1c      	add	r3, sp, #112	; 0x70
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	9702      	str	r7, [sp, #8]
 800506e:	ab1d      	add	r3, sp, #116	; 0x74
 8005070:	4a88      	ldr	r2, [pc, #544]	; (8005294 <_strtod_l+0x284>)
 8005072:	a91b      	add	r1, sp, #108	; 0x6c
 8005074:	4648      	mov	r0, r9
 8005076:	f001 ff2c 	bl	8006ed2 <__gethex>
 800507a:	f010 0407 	ands.w	r4, r0, #7
 800507e:	4606      	mov	r6, r0
 8005080:	d005      	beq.n	800508e <_strtod_l+0x7e>
 8005082:	2c06      	cmp	r4, #6
 8005084:	d12b      	bne.n	80050de <_strtod_l+0xce>
 8005086:	3501      	adds	r5, #1
 8005088:	2300      	movs	r3, #0
 800508a:	951b      	str	r5, [sp, #108]	; 0x6c
 800508c:	930d      	str	r3, [sp, #52]	; 0x34
 800508e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 859a 	bne.w	8005bca <_strtod_l+0xbba>
 8005096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005098:	b1e3      	cbz	r3, 80050d4 <_strtod_l+0xc4>
 800509a:	4652      	mov	r2, sl
 800509c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80050a0:	ec43 2b10 	vmov	d0, r2, r3
 80050a4:	b021      	add	sp, #132	; 0x84
 80050a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050aa:	2a2b      	cmp	r2, #43	; 0x2b
 80050ac:	d015      	beq.n	80050da <_strtod_l+0xca>
 80050ae:	2a2d      	cmp	r2, #45	; 0x2d
 80050b0:	d004      	beq.n	80050bc <_strtod_l+0xac>
 80050b2:	2a20      	cmp	r2, #32
 80050b4:	d1ca      	bne.n	800504c <_strtod_l+0x3c>
 80050b6:	3301      	adds	r3, #1
 80050b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80050ba:	e7bf      	b.n	800503c <_strtod_l+0x2c>
 80050bc:	2201      	movs	r2, #1
 80050be:	920d      	str	r2, [sp, #52]	; 0x34
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1c2      	bne.n	8005050 <_strtod_l+0x40>
 80050ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 8579 	bne.w	8005bc6 <_strtod_l+0xbb6>
 80050d4:	4652      	mov	r2, sl
 80050d6:	465b      	mov	r3, fp
 80050d8:	e7e2      	b.n	80050a0 <_strtod_l+0x90>
 80050da:	2200      	movs	r2, #0
 80050dc:	e7ef      	b.n	80050be <_strtod_l+0xae>
 80050de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050e0:	b13a      	cbz	r2, 80050f2 <_strtod_l+0xe2>
 80050e2:	2135      	movs	r1, #53	; 0x35
 80050e4:	a81e      	add	r0, sp, #120	; 0x78
 80050e6:	f002 fe2b 	bl	8007d40 <__copybits>
 80050ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050ec:	4648      	mov	r0, r9
 80050ee:	f002 fa98 	bl	8007622 <_Bfree>
 80050f2:	3c01      	subs	r4, #1
 80050f4:	2c04      	cmp	r4, #4
 80050f6:	d806      	bhi.n	8005106 <_strtod_l+0xf6>
 80050f8:	e8df f004 	tbb	[pc, r4]
 80050fc:	1714030a 	.word	0x1714030a
 8005100:	0a          	.byte	0x0a
 8005101:	00          	.byte	0x00
 8005102:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005106:	0730      	lsls	r0, r6, #28
 8005108:	d5c1      	bpl.n	800508e <_strtod_l+0x7e>
 800510a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800510e:	e7be      	b.n	800508e <_strtod_l+0x7e>
 8005110:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005114:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005116:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800511a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800511e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005122:	e7f0      	b.n	8005106 <_strtod_l+0xf6>
 8005124:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005298 <_strtod_l+0x288>
 8005128:	e7ed      	b.n	8005106 <_strtod_l+0xf6>
 800512a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800512e:	f04f 3aff 	mov.w	sl, #4294967295
 8005132:	e7e8      	b.n	8005106 <_strtod_l+0xf6>
 8005134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	921b      	str	r2, [sp, #108]	; 0x6c
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	d0f9      	beq.n	8005134 <_strtod_l+0x124>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0a4      	beq.n	800508e <_strtod_l+0x7e>
 8005144:	2301      	movs	r3, #1
 8005146:	2500      	movs	r5, #0
 8005148:	9306      	str	r3, [sp, #24]
 800514a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800514c:	9308      	str	r3, [sp, #32]
 800514e:	9507      	str	r5, [sp, #28]
 8005150:	9505      	str	r5, [sp, #20]
 8005152:	220a      	movs	r2, #10
 8005154:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005156:	7807      	ldrb	r7, [r0, #0]
 8005158:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800515c:	b2d9      	uxtb	r1, r3
 800515e:	2909      	cmp	r1, #9
 8005160:	d929      	bls.n	80051b6 <_strtod_l+0x1a6>
 8005162:	4622      	mov	r2, r4
 8005164:	f8d8 1000 	ldr.w	r1, [r8]
 8005168:	f003 f881 	bl	800826e <strncmp>
 800516c:	2800      	cmp	r0, #0
 800516e:	d031      	beq.n	80051d4 <_strtod_l+0x1c4>
 8005170:	2000      	movs	r0, #0
 8005172:	9c05      	ldr	r4, [sp, #20]
 8005174:	9004      	str	r0, [sp, #16]
 8005176:	463b      	mov	r3, r7
 8005178:	4602      	mov	r2, r0
 800517a:	2b65      	cmp	r3, #101	; 0x65
 800517c:	d001      	beq.n	8005182 <_strtod_l+0x172>
 800517e:	2b45      	cmp	r3, #69	; 0x45
 8005180:	d114      	bne.n	80051ac <_strtod_l+0x19c>
 8005182:	b924      	cbnz	r4, 800518e <_strtod_l+0x17e>
 8005184:	b910      	cbnz	r0, 800518c <_strtod_l+0x17c>
 8005186:	9b06      	ldr	r3, [sp, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d09e      	beq.n	80050ca <_strtod_l+0xba>
 800518c:	2400      	movs	r4, #0
 800518e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005190:	1c73      	adds	r3, r6, #1
 8005192:	931b      	str	r3, [sp, #108]	; 0x6c
 8005194:	7873      	ldrb	r3, [r6, #1]
 8005196:	2b2b      	cmp	r3, #43	; 0x2b
 8005198:	d078      	beq.n	800528c <_strtod_l+0x27c>
 800519a:	2b2d      	cmp	r3, #45	; 0x2d
 800519c:	d070      	beq.n	8005280 <_strtod_l+0x270>
 800519e:	f04f 0c00 	mov.w	ip, #0
 80051a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80051a6:	2f09      	cmp	r7, #9
 80051a8:	d97c      	bls.n	80052a4 <_strtod_l+0x294>
 80051aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80051ac:	f04f 0e00 	mov.w	lr, #0
 80051b0:	e09a      	b.n	80052e8 <_strtod_l+0x2d8>
 80051b2:	2300      	movs	r3, #0
 80051b4:	e7c7      	b.n	8005146 <_strtod_l+0x136>
 80051b6:	9905      	ldr	r1, [sp, #20]
 80051b8:	2908      	cmp	r1, #8
 80051ba:	bfdd      	ittte	le
 80051bc:	9907      	ldrle	r1, [sp, #28]
 80051be:	fb02 3301 	mlale	r3, r2, r1, r3
 80051c2:	9307      	strle	r3, [sp, #28]
 80051c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80051c8:	9b05      	ldr	r3, [sp, #20]
 80051ca:	3001      	adds	r0, #1
 80051cc:	3301      	adds	r3, #1
 80051ce:	9305      	str	r3, [sp, #20]
 80051d0:	901b      	str	r0, [sp, #108]	; 0x6c
 80051d2:	e7bf      	b.n	8005154 <_strtod_l+0x144>
 80051d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051d6:	191a      	adds	r2, r3, r4
 80051d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80051da:	9a05      	ldr	r2, [sp, #20]
 80051dc:	5d1b      	ldrb	r3, [r3, r4]
 80051de:	2a00      	cmp	r2, #0
 80051e0:	d037      	beq.n	8005252 <_strtod_l+0x242>
 80051e2:	9c05      	ldr	r4, [sp, #20]
 80051e4:	4602      	mov	r2, r0
 80051e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80051ea:	2909      	cmp	r1, #9
 80051ec:	d913      	bls.n	8005216 <_strtod_l+0x206>
 80051ee:	2101      	movs	r1, #1
 80051f0:	9104      	str	r1, [sp, #16]
 80051f2:	e7c2      	b.n	800517a <_strtod_l+0x16a>
 80051f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	3001      	adds	r0, #1
 80051fe:	2b30      	cmp	r3, #48	; 0x30
 8005200:	d0f8      	beq.n	80051f4 <_strtod_l+0x1e4>
 8005202:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005206:	2a08      	cmp	r2, #8
 8005208:	f200 84e4 	bhi.w	8005bd4 <_strtod_l+0xbc4>
 800520c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800520e:	9208      	str	r2, [sp, #32]
 8005210:	4602      	mov	r2, r0
 8005212:	2000      	movs	r0, #0
 8005214:	4604      	mov	r4, r0
 8005216:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800521a:	f100 0101 	add.w	r1, r0, #1
 800521e:	d012      	beq.n	8005246 <_strtod_l+0x236>
 8005220:	440a      	add	r2, r1
 8005222:	eb00 0c04 	add.w	ip, r0, r4
 8005226:	4621      	mov	r1, r4
 8005228:	270a      	movs	r7, #10
 800522a:	458c      	cmp	ip, r1
 800522c:	d113      	bne.n	8005256 <_strtod_l+0x246>
 800522e:	1821      	adds	r1, r4, r0
 8005230:	2908      	cmp	r1, #8
 8005232:	f104 0401 	add.w	r4, r4, #1
 8005236:	4404      	add	r4, r0
 8005238:	dc19      	bgt.n	800526e <_strtod_l+0x25e>
 800523a:	9b07      	ldr	r3, [sp, #28]
 800523c:	210a      	movs	r1, #10
 800523e:	fb01 e303 	mla	r3, r1, r3, lr
 8005242:	9307      	str	r3, [sp, #28]
 8005244:	2100      	movs	r1, #0
 8005246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005248:	1c58      	adds	r0, r3, #1
 800524a:	901b      	str	r0, [sp, #108]	; 0x6c
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	4608      	mov	r0, r1
 8005250:	e7c9      	b.n	80051e6 <_strtod_l+0x1d6>
 8005252:	9805      	ldr	r0, [sp, #20]
 8005254:	e7d3      	b.n	80051fe <_strtod_l+0x1ee>
 8005256:	2908      	cmp	r1, #8
 8005258:	f101 0101 	add.w	r1, r1, #1
 800525c:	dc03      	bgt.n	8005266 <_strtod_l+0x256>
 800525e:	9b07      	ldr	r3, [sp, #28]
 8005260:	437b      	muls	r3, r7
 8005262:	9307      	str	r3, [sp, #28]
 8005264:	e7e1      	b.n	800522a <_strtod_l+0x21a>
 8005266:	2910      	cmp	r1, #16
 8005268:	bfd8      	it	le
 800526a:	437d      	mulle	r5, r7
 800526c:	e7dd      	b.n	800522a <_strtod_l+0x21a>
 800526e:	2c10      	cmp	r4, #16
 8005270:	bfdc      	itt	le
 8005272:	210a      	movle	r1, #10
 8005274:	fb01 e505 	mlale	r5, r1, r5, lr
 8005278:	e7e4      	b.n	8005244 <_strtod_l+0x234>
 800527a:	2301      	movs	r3, #1
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	e781      	b.n	8005184 <_strtod_l+0x174>
 8005280:	f04f 0c01 	mov.w	ip, #1
 8005284:	1cb3      	adds	r3, r6, #2
 8005286:	931b      	str	r3, [sp, #108]	; 0x6c
 8005288:	78b3      	ldrb	r3, [r6, #2]
 800528a:	e78a      	b.n	80051a2 <_strtod_l+0x192>
 800528c:	f04f 0c00 	mov.w	ip, #0
 8005290:	e7f8      	b.n	8005284 <_strtod_l+0x274>
 8005292:	bf00      	nop
 8005294:	08008824 	.word	0x08008824
 8005298:	7ff00000 	.word	0x7ff00000
 800529c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800529e:	1c5f      	adds	r7, r3, #1
 80052a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b30      	cmp	r3, #48	; 0x30
 80052a6:	d0f9      	beq.n	800529c <_strtod_l+0x28c>
 80052a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80052ac:	2f08      	cmp	r7, #8
 80052ae:	f63f af7d 	bhi.w	80051ac <_strtod_l+0x19c>
 80052b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80052b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052b8:	930a      	str	r3, [sp, #40]	; 0x28
 80052ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052bc:	1c5f      	adds	r7, r3, #1
 80052be:	971b      	str	r7, [sp, #108]	; 0x6c
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80052c6:	f1b8 0f09 	cmp.w	r8, #9
 80052ca:	d937      	bls.n	800533c <_strtod_l+0x32c>
 80052cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052ce:	1a7f      	subs	r7, r7, r1
 80052d0:	2f08      	cmp	r7, #8
 80052d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80052d6:	dc37      	bgt.n	8005348 <_strtod_l+0x338>
 80052d8:	45be      	cmp	lr, r7
 80052da:	bfa8      	it	ge
 80052dc:	46be      	movge	lr, r7
 80052de:	f1bc 0f00 	cmp.w	ip, #0
 80052e2:	d001      	beq.n	80052e8 <_strtod_l+0x2d8>
 80052e4:	f1ce 0e00 	rsb	lr, lr, #0
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d151      	bne.n	8005390 <_strtod_l+0x380>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f47f aece 	bne.w	800508e <_strtod_l+0x7e>
 80052f2:	9a06      	ldr	r2, [sp, #24]
 80052f4:	2a00      	cmp	r2, #0
 80052f6:	f47f aeca 	bne.w	800508e <_strtod_l+0x7e>
 80052fa:	9a04      	ldr	r2, [sp, #16]
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	f47f aee4 	bne.w	80050ca <_strtod_l+0xba>
 8005302:	2b4e      	cmp	r3, #78	; 0x4e
 8005304:	d027      	beq.n	8005356 <_strtod_l+0x346>
 8005306:	dc21      	bgt.n	800534c <_strtod_l+0x33c>
 8005308:	2b49      	cmp	r3, #73	; 0x49
 800530a:	f47f aede 	bne.w	80050ca <_strtod_l+0xba>
 800530e:	49a0      	ldr	r1, [pc, #640]	; (8005590 <_strtod_l+0x580>)
 8005310:	a81b      	add	r0, sp, #108	; 0x6c
 8005312:	f002 f811 	bl	8007338 <__match>
 8005316:	2800      	cmp	r0, #0
 8005318:	f43f aed7 	beq.w	80050ca <_strtod_l+0xba>
 800531c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800531e:	499d      	ldr	r1, [pc, #628]	; (8005594 <_strtod_l+0x584>)
 8005320:	3b01      	subs	r3, #1
 8005322:	a81b      	add	r0, sp, #108	; 0x6c
 8005324:	931b      	str	r3, [sp, #108]	; 0x6c
 8005326:	f002 f807 	bl	8007338 <__match>
 800532a:	b910      	cbnz	r0, 8005332 <_strtod_l+0x322>
 800532c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800532e:	3301      	adds	r3, #1
 8005330:	931b      	str	r3, [sp, #108]	; 0x6c
 8005332:	f8df b274 	ldr.w	fp, [pc, #628]	; 80055a8 <_strtod_l+0x598>
 8005336:	f04f 0a00 	mov.w	sl, #0
 800533a:	e6a8      	b.n	800508e <_strtod_l+0x7e>
 800533c:	210a      	movs	r1, #10
 800533e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005342:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005346:	e7b8      	b.n	80052ba <_strtod_l+0x2aa>
 8005348:	46be      	mov	lr, r7
 800534a:	e7c8      	b.n	80052de <_strtod_l+0x2ce>
 800534c:	2b69      	cmp	r3, #105	; 0x69
 800534e:	d0de      	beq.n	800530e <_strtod_l+0x2fe>
 8005350:	2b6e      	cmp	r3, #110	; 0x6e
 8005352:	f47f aeba 	bne.w	80050ca <_strtod_l+0xba>
 8005356:	4990      	ldr	r1, [pc, #576]	; (8005598 <_strtod_l+0x588>)
 8005358:	a81b      	add	r0, sp, #108	; 0x6c
 800535a:	f001 ffed 	bl	8007338 <__match>
 800535e:	2800      	cmp	r0, #0
 8005360:	f43f aeb3 	beq.w	80050ca <_strtod_l+0xba>
 8005364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b28      	cmp	r3, #40	; 0x28
 800536a:	d10e      	bne.n	800538a <_strtod_l+0x37a>
 800536c:	aa1e      	add	r2, sp, #120	; 0x78
 800536e:	498b      	ldr	r1, [pc, #556]	; (800559c <_strtod_l+0x58c>)
 8005370:	a81b      	add	r0, sp, #108	; 0x6c
 8005372:	f001 fff5 	bl	8007360 <__hexnan>
 8005376:	2805      	cmp	r0, #5
 8005378:	d107      	bne.n	800538a <_strtod_l+0x37a>
 800537a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800537c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005380:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005384:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005388:	e681      	b.n	800508e <_strtod_l+0x7e>
 800538a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80055b0 <_strtod_l+0x5a0>
 800538e:	e7d2      	b.n	8005336 <_strtod_l+0x326>
 8005390:	ebae 0302 	sub.w	r3, lr, r2
 8005394:	9306      	str	r3, [sp, #24]
 8005396:	9b05      	ldr	r3, [sp, #20]
 8005398:	9807      	ldr	r0, [sp, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf08      	it	eq
 800539e:	4623      	moveq	r3, r4
 80053a0:	2c10      	cmp	r4, #16
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	46a0      	mov	r8, r4
 80053a6:	bfa8      	it	ge
 80053a8:	f04f 0810 	movge.w	r8, #16
 80053ac:	f7fb f8ca 	bl	8000544 <__aeabi_ui2d>
 80053b0:	2c09      	cmp	r4, #9
 80053b2:	4682      	mov	sl, r0
 80053b4:	468b      	mov	fp, r1
 80053b6:	dc13      	bgt.n	80053e0 <_strtod_l+0x3d0>
 80053b8:	9b06      	ldr	r3, [sp, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f43f ae67 	beq.w	800508e <_strtod_l+0x7e>
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	dd7a      	ble.n	80054ba <_strtod_l+0x4aa>
 80053c4:	2b16      	cmp	r3, #22
 80053c6:	dc61      	bgt.n	800548c <_strtod_l+0x47c>
 80053c8:	4a75      	ldr	r2, [pc, #468]	; (80055a0 <_strtod_l+0x590>)
 80053ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80053ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80053d2:	4652      	mov	r2, sl
 80053d4:	465b      	mov	r3, fp
 80053d6:	f7fb f92f 	bl	8000638 <__aeabi_dmul>
 80053da:	4682      	mov	sl, r0
 80053dc:	468b      	mov	fp, r1
 80053de:	e656      	b.n	800508e <_strtod_l+0x7e>
 80053e0:	4b6f      	ldr	r3, [pc, #444]	; (80055a0 <_strtod_l+0x590>)
 80053e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80053e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80053ea:	f7fb f925 	bl	8000638 <__aeabi_dmul>
 80053ee:	4606      	mov	r6, r0
 80053f0:	4628      	mov	r0, r5
 80053f2:	460f      	mov	r7, r1
 80053f4:	f7fb f8a6 	bl	8000544 <__aeabi_ui2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fa ff64 	bl	80002cc <__adddf3>
 8005404:	2c0f      	cmp	r4, #15
 8005406:	4682      	mov	sl, r0
 8005408:	468b      	mov	fp, r1
 800540a:	ddd5      	ble.n	80053b8 <_strtod_l+0x3a8>
 800540c:	9b06      	ldr	r3, [sp, #24]
 800540e:	eba4 0808 	sub.w	r8, r4, r8
 8005412:	4498      	add	r8, r3
 8005414:	f1b8 0f00 	cmp.w	r8, #0
 8005418:	f340 8096 	ble.w	8005548 <_strtod_l+0x538>
 800541c:	f018 030f 	ands.w	r3, r8, #15
 8005420:	d00a      	beq.n	8005438 <_strtod_l+0x428>
 8005422:	495f      	ldr	r1, [pc, #380]	; (80055a0 <_strtod_l+0x590>)
 8005424:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005428:	4652      	mov	r2, sl
 800542a:	465b      	mov	r3, fp
 800542c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005430:	f7fb f902 	bl	8000638 <__aeabi_dmul>
 8005434:	4682      	mov	sl, r0
 8005436:	468b      	mov	fp, r1
 8005438:	f038 080f 	bics.w	r8, r8, #15
 800543c:	d073      	beq.n	8005526 <_strtod_l+0x516>
 800543e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005442:	dd47      	ble.n	80054d4 <_strtod_l+0x4c4>
 8005444:	2400      	movs	r4, #0
 8005446:	46a0      	mov	r8, r4
 8005448:	9407      	str	r4, [sp, #28]
 800544a:	9405      	str	r4, [sp, #20]
 800544c:	2322      	movs	r3, #34	; 0x22
 800544e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80055a8 <_strtod_l+0x598>
 8005452:	f8c9 3000 	str.w	r3, [r9]
 8005456:	f04f 0a00 	mov.w	sl, #0
 800545a:	9b07      	ldr	r3, [sp, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f43f ae16 	beq.w	800508e <_strtod_l+0x7e>
 8005462:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005464:	4648      	mov	r0, r9
 8005466:	f002 f8dc 	bl	8007622 <_Bfree>
 800546a:	9905      	ldr	r1, [sp, #20]
 800546c:	4648      	mov	r0, r9
 800546e:	f002 f8d8 	bl	8007622 <_Bfree>
 8005472:	4641      	mov	r1, r8
 8005474:	4648      	mov	r0, r9
 8005476:	f002 f8d4 	bl	8007622 <_Bfree>
 800547a:	9907      	ldr	r1, [sp, #28]
 800547c:	4648      	mov	r0, r9
 800547e:	f002 f8d0 	bl	8007622 <_Bfree>
 8005482:	4621      	mov	r1, r4
 8005484:	4648      	mov	r0, r9
 8005486:	f002 f8cc 	bl	8007622 <_Bfree>
 800548a:	e600      	b.n	800508e <_strtod_l+0x7e>
 800548c:	9a06      	ldr	r2, [sp, #24]
 800548e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005492:	4293      	cmp	r3, r2
 8005494:	dbba      	blt.n	800540c <_strtod_l+0x3fc>
 8005496:	4d42      	ldr	r5, [pc, #264]	; (80055a0 <_strtod_l+0x590>)
 8005498:	f1c4 040f 	rsb	r4, r4, #15
 800549c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80054a0:	4652      	mov	r2, sl
 80054a2:	465b      	mov	r3, fp
 80054a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a8:	f7fb f8c6 	bl	8000638 <__aeabi_dmul>
 80054ac:	9b06      	ldr	r3, [sp, #24]
 80054ae:	1b1c      	subs	r4, r3, r4
 80054b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80054b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054b8:	e78d      	b.n	80053d6 <_strtod_l+0x3c6>
 80054ba:	f113 0f16 	cmn.w	r3, #22
 80054be:	dba5      	blt.n	800540c <_strtod_l+0x3fc>
 80054c0:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <_strtod_l+0x590>)
 80054c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80054c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80054ca:	4650      	mov	r0, sl
 80054cc:	4659      	mov	r1, fp
 80054ce:	f7fb f9dd 	bl	800088c <__aeabi_ddiv>
 80054d2:	e782      	b.n	80053da <_strtod_l+0x3ca>
 80054d4:	2300      	movs	r3, #0
 80054d6:	4e33      	ldr	r6, [pc, #204]	; (80055a4 <_strtod_l+0x594>)
 80054d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80054dc:	4650      	mov	r0, sl
 80054de:	4659      	mov	r1, fp
 80054e0:	461d      	mov	r5, r3
 80054e2:	f1b8 0f01 	cmp.w	r8, #1
 80054e6:	dc21      	bgt.n	800552c <_strtod_l+0x51c>
 80054e8:	b10b      	cbz	r3, 80054ee <_strtod_l+0x4de>
 80054ea:	4682      	mov	sl, r0
 80054ec:	468b      	mov	fp, r1
 80054ee:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <_strtod_l+0x594>)
 80054f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80054f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80054f8:	4652      	mov	r2, sl
 80054fa:	465b      	mov	r3, fp
 80054fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005500:	f7fb f89a 	bl	8000638 <__aeabi_dmul>
 8005504:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <_strtod_l+0x598>)
 8005506:	460a      	mov	r2, r1
 8005508:	400b      	ands	r3, r1
 800550a:	4928      	ldr	r1, [pc, #160]	; (80055ac <_strtod_l+0x59c>)
 800550c:	428b      	cmp	r3, r1
 800550e:	4682      	mov	sl, r0
 8005510:	d898      	bhi.n	8005444 <_strtod_l+0x434>
 8005512:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005516:	428b      	cmp	r3, r1
 8005518:	bf86      	itte	hi
 800551a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80055b4 <_strtod_l+0x5a4>
 800551e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005522:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005526:	2300      	movs	r3, #0
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	e077      	b.n	800561c <_strtod_l+0x60c>
 800552c:	f018 0f01 	tst.w	r8, #1
 8005530:	d006      	beq.n	8005540 <_strtod_l+0x530>
 8005532:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fb f87d 	bl	8000638 <__aeabi_dmul>
 800553e:	2301      	movs	r3, #1
 8005540:	3501      	adds	r5, #1
 8005542:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005546:	e7cc      	b.n	80054e2 <_strtod_l+0x4d2>
 8005548:	d0ed      	beq.n	8005526 <_strtod_l+0x516>
 800554a:	f1c8 0800 	rsb	r8, r8, #0
 800554e:	f018 020f 	ands.w	r2, r8, #15
 8005552:	d00a      	beq.n	800556a <_strtod_l+0x55a>
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <_strtod_l+0x590>)
 8005556:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800555a:	4650      	mov	r0, sl
 800555c:	4659      	mov	r1, fp
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fb f993 	bl	800088c <__aeabi_ddiv>
 8005566:	4682      	mov	sl, r0
 8005568:	468b      	mov	fp, r1
 800556a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800556e:	d0da      	beq.n	8005526 <_strtod_l+0x516>
 8005570:	f1b8 0f1f 	cmp.w	r8, #31
 8005574:	dd20      	ble.n	80055b8 <_strtod_l+0x5a8>
 8005576:	2400      	movs	r4, #0
 8005578:	46a0      	mov	r8, r4
 800557a:	9407      	str	r4, [sp, #28]
 800557c:	9405      	str	r4, [sp, #20]
 800557e:	2322      	movs	r3, #34	; 0x22
 8005580:	f04f 0a00 	mov.w	sl, #0
 8005584:	f04f 0b00 	mov.w	fp, #0
 8005588:	f8c9 3000 	str.w	r3, [r9]
 800558c:	e765      	b.n	800545a <_strtod_l+0x44a>
 800558e:	bf00      	nop
 8005590:	080087ed 	.word	0x080087ed
 8005594:	0800887b 	.word	0x0800887b
 8005598:	080087f5 	.word	0x080087f5
 800559c:	08008838 	.word	0x08008838
 80055a0:	08008920 	.word	0x08008920
 80055a4:	080088f8 	.word	0x080088f8
 80055a8:	7ff00000 	.word	0x7ff00000
 80055ac:	7ca00000 	.word	0x7ca00000
 80055b0:	fff80000 	.word	0xfff80000
 80055b4:	7fefffff 	.word	0x7fefffff
 80055b8:	f018 0310 	ands.w	r3, r8, #16
 80055bc:	bf18      	it	ne
 80055be:	236a      	movne	r3, #106	; 0x6a
 80055c0:	4da0      	ldr	r5, [pc, #640]	; (8005844 <_strtod_l+0x834>)
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	4650      	mov	r0, sl
 80055c6:	4659      	mov	r1, fp
 80055c8:	2300      	movs	r3, #0
 80055ca:	f1b8 0f00 	cmp.w	r8, #0
 80055ce:	f300 810a 	bgt.w	80057e6 <_strtod_l+0x7d6>
 80055d2:	b10b      	cbz	r3, 80055d8 <_strtod_l+0x5c8>
 80055d4:	4682      	mov	sl, r0
 80055d6:	468b      	mov	fp, r1
 80055d8:	9b04      	ldr	r3, [sp, #16]
 80055da:	b1bb      	cbz	r3, 800560c <_strtod_l+0x5fc>
 80055dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80055e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	4659      	mov	r1, fp
 80055e8:	dd10      	ble.n	800560c <_strtod_l+0x5fc>
 80055ea:	2b1f      	cmp	r3, #31
 80055ec:	f340 8107 	ble.w	80057fe <_strtod_l+0x7ee>
 80055f0:	2b34      	cmp	r3, #52	; 0x34
 80055f2:	bfde      	ittt	le
 80055f4:	3b20      	suble	r3, #32
 80055f6:	f04f 32ff 	movle.w	r2, #4294967295
 80055fa:	fa02 f303 	lslle.w	r3, r2, r3
 80055fe:	f04f 0a00 	mov.w	sl, #0
 8005602:	bfcc      	ite	gt
 8005604:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005608:	ea03 0b01 	andle.w	fp, r3, r1
 800560c:	2200      	movs	r2, #0
 800560e:	2300      	movs	r3, #0
 8005610:	4650      	mov	r0, sl
 8005612:	4659      	mov	r1, fp
 8005614:	f7fb fa78 	bl	8000b08 <__aeabi_dcmpeq>
 8005618:	2800      	cmp	r0, #0
 800561a:	d1ac      	bne.n	8005576 <_strtod_l+0x566>
 800561c:	9b07      	ldr	r3, [sp, #28]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	9a05      	ldr	r2, [sp, #20]
 8005622:	9908      	ldr	r1, [sp, #32]
 8005624:	4623      	mov	r3, r4
 8005626:	4648      	mov	r0, r9
 8005628:	f002 f84d 	bl	80076c6 <__s2b>
 800562c:	9007      	str	r0, [sp, #28]
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f af08 	beq.w	8005444 <_strtod_l+0x434>
 8005634:	9a06      	ldr	r2, [sp, #24]
 8005636:	9b06      	ldr	r3, [sp, #24]
 8005638:	2a00      	cmp	r2, #0
 800563a:	f1c3 0300 	rsb	r3, r3, #0
 800563e:	bfa8      	it	ge
 8005640:	2300      	movge	r3, #0
 8005642:	930e      	str	r3, [sp, #56]	; 0x38
 8005644:	2400      	movs	r4, #0
 8005646:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800564a:	9316      	str	r3, [sp, #88]	; 0x58
 800564c:	46a0      	mov	r8, r4
 800564e:	9b07      	ldr	r3, [sp, #28]
 8005650:	4648      	mov	r0, r9
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	f001 ffb1 	bl	80075ba <_Balloc>
 8005658:	9005      	str	r0, [sp, #20]
 800565a:	2800      	cmp	r0, #0
 800565c:	f43f aef6 	beq.w	800544c <_strtod_l+0x43c>
 8005660:	9b07      	ldr	r3, [sp, #28]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	3202      	adds	r2, #2
 8005666:	f103 010c 	add.w	r1, r3, #12
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	300c      	adds	r0, #12
 800566e:	f001 ff99 	bl	80075a4 <memcpy>
 8005672:	aa1e      	add	r2, sp, #120	; 0x78
 8005674:	a91d      	add	r1, sp, #116	; 0x74
 8005676:	ec4b ab10 	vmov	d0, sl, fp
 800567a:	4648      	mov	r0, r9
 800567c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005680:	f002 fadc 	bl	8007c3c <__d2b>
 8005684:	901c      	str	r0, [sp, #112]	; 0x70
 8005686:	2800      	cmp	r0, #0
 8005688:	f43f aee0 	beq.w	800544c <_strtod_l+0x43c>
 800568c:	2101      	movs	r1, #1
 800568e:	4648      	mov	r0, r9
 8005690:	f002 f8a5 	bl	80077de <__i2b>
 8005694:	4680      	mov	r8, r0
 8005696:	2800      	cmp	r0, #0
 8005698:	f43f aed8 	beq.w	800544c <_strtod_l+0x43c>
 800569c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800569e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	bfab      	itete	ge
 80056a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80056a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80056a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80056aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80056ac:	bfac      	ite	ge
 80056ae:	18f7      	addge	r7, r6, r3
 80056b0:	1b9d      	sublt	r5, r3, r6
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	1af6      	subs	r6, r6, r3
 80056b6:	4416      	add	r6, r2
 80056b8:	4b63      	ldr	r3, [pc, #396]	; (8005848 <_strtod_l+0x838>)
 80056ba:	3e01      	subs	r6, #1
 80056bc:	429e      	cmp	r6, r3
 80056be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80056c2:	f280 80af 	bge.w	8005824 <_strtod_l+0x814>
 80056c6:	1b9b      	subs	r3, r3, r6
 80056c8:	2b1f      	cmp	r3, #31
 80056ca:	eba2 0203 	sub.w	r2, r2, r3
 80056ce:	f04f 0101 	mov.w	r1, #1
 80056d2:	f300 809b 	bgt.w	800580c <_strtod_l+0x7fc>
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	930f      	str	r3, [sp, #60]	; 0x3c
 80056dc:	2300      	movs	r3, #0
 80056de:	930a      	str	r3, [sp, #40]	; 0x28
 80056e0:	18be      	adds	r6, r7, r2
 80056e2:	9b04      	ldr	r3, [sp, #16]
 80056e4:	42b7      	cmp	r7, r6
 80056e6:	4415      	add	r5, r2
 80056e8:	441d      	add	r5, r3
 80056ea:	463b      	mov	r3, r7
 80056ec:	bfa8      	it	ge
 80056ee:	4633      	movge	r3, r6
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	bfa8      	it	ge
 80056f4:	462b      	movge	r3, r5
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfc2      	ittt	gt
 80056fa:	1af6      	subgt	r6, r6, r3
 80056fc:	1aed      	subgt	r5, r5, r3
 80056fe:	1aff      	subgt	r7, r7, r3
 8005700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005702:	b1bb      	cbz	r3, 8005734 <_strtod_l+0x724>
 8005704:	4641      	mov	r1, r8
 8005706:	461a      	mov	r2, r3
 8005708:	4648      	mov	r0, r9
 800570a:	f002 f907 	bl	800791c <__pow5mult>
 800570e:	4680      	mov	r8, r0
 8005710:	2800      	cmp	r0, #0
 8005712:	f43f ae9b 	beq.w	800544c <_strtod_l+0x43c>
 8005716:	4601      	mov	r1, r0
 8005718:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800571a:	4648      	mov	r0, r9
 800571c:	f002 f868 	bl	80077f0 <__multiply>
 8005720:	900c      	str	r0, [sp, #48]	; 0x30
 8005722:	2800      	cmp	r0, #0
 8005724:	f43f ae92 	beq.w	800544c <_strtod_l+0x43c>
 8005728:	991c      	ldr	r1, [sp, #112]	; 0x70
 800572a:	4648      	mov	r0, r9
 800572c:	f001 ff79 	bl	8007622 <_Bfree>
 8005730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005732:	931c      	str	r3, [sp, #112]	; 0x70
 8005734:	2e00      	cmp	r6, #0
 8005736:	dc7a      	bgt.n	800582e <_strtod_l+0x81e>
 8005738:	9b06      	ldr	r3, [sp, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	dd08      	ble.n	8005750 <_strtod_l+0x740>
 800573e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005740:	9905      	ldr	r1, [sp, #20]
 8005742:	4648      	mov	r0, r9
 8005744:	f002 f8ea 	bl	800791c <__pow5mult>
 8005748:	9005      	str	r0, [sp, #20]
 800574a:	2800      	cmp	r0, #0
 800574c:	f43f ae7e 	beq.w	800544c <_strtod_l+0x43c>
 8005750:	2d00      	cmp	r5, #0
 8005752:	dd08      	ble.n	8005766 <_strtod_l+0x756>
 8005754:	462a      	mov	r2, r5
 8005756:	9905      	ldr	r1, [sp, #20]
 8005758:	4648      	mov	r0, r9
 800575a:	f002 f92d 	bl	80079b8 <__lshift>
 800575e:	9005      	str	r0, [sp, #20]
 8005760:	2800      	cmp	r0, #0
 8005762:	f43f ae73 	beq.w	800544c <_strtod_l+0x43c>
 8005766:	2f00      	cmp	r7, #0
 8005768:	dd08      	ble.n	800577c <_strtod_l+0x76c>
 800576a:	4641      	mov	r1, r8
 800576c:	463a      	mov	r2, r7
 800576e:	4648      	mov	r0, r9
 8005770:	f002 f922 	bl	80079b8 <__lshift>
 8005774:	4680      	mov	r8, r0
 8005776:	2800      	cmp	r0, #0
 8005778:	f43f ae68 	beq.w	800544c <_strtod_l+0x43c>
 800577c:	9a05      	ldr	r2, [sp, #20]
 800577e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005780:	4648      	mov	r0, r9
 8005782:	f002 f987 	bl	8007a94 <__mdiff>
 8005786:	4604      	mov	r4, r0
 8005788:	2800      	cmp	r0, #0
 800578a:	f43f ae5f 	beq.w	800544c <_strtod_l+0x43c>
 800578e:	68c3      	ldr	r3, [r0, #12]
 8005790:	930c      	str	r3, [sp, #48]	; 0x30
 8005792:	2300      	movs	r3, #0
 8005794:	60c3      	str	r3, [r0, #12]
 8005796:	4641      	mov	r1, r8
 8005798:	f002 f962 	bl	8007a60 <__mcmp>
 800579c:	2800      	cmp	r0, #0
 800579e:	da55      	bge.n	800584c <_strtod_l+0x83c>
 80057a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057a2:	b9e3      	cbnz	r3, 80057de <_strtod_l+0x7ce>
 80057a4:	f1ba 0f00 	cmp.w	sl, #0
 80057a8:	d119      	bne.n	80057de <_strtod_l+0x7ce>
 80057aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057ae:	b9b3      	cbnz	r3, 80057de <_strtod_l+0x7ce>
 80057b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057b4:	0d1b      	lsrs	r3, r3, #20
 80057b6:	051b      	lsls	r3, r3, #20
 80057b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80057bc:	d90f      	bls.n	80057de <_strtod_l+0x7ce>
 80057be:	6963      	ldr	r3, [r4, #20]
 80057c0:	b913      	cbnz	r3, 80057c8 <_strtod_l+0x7b8>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	dd0a      	ble.n	80057de <_strtod_l+0x7ce>
 80057c8:	4621      	mov	r1, r4
 80057ca:	2201      	movs	r2, #1
 80057cc:	4648      	mov	r0, r9
 80057ce:	f002 f8f3 	bl	80079b8 <__lshift>
 80057d2:	4641      	mov	r1, r8
 80057d4:	4604      	mov	r4, r0
 80057d6:	f002 f943 	bl	8007a60 <__mcmp>
 80057da:	2800      	cmp	r0, #0
 80057dc:	dc67      	bgt.n	80058ae <_strtod_l+0x89e>
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d171      	bne.n	80058c8 <_strtod_l+0x8b8>
 80057e4:	e63d      	b.n	8005462 <_strtod_l+0x452>
 80057e6:	f018 0f01 	tst.w	r8, #1
 80057ea:	d004      	beq.n	80057f6 <_strtod_l+0x7e6>
 80057ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057f0:	f7fa ff22 	bl	8000638 <__aeabi_dmul>
 80057f4:	2301      	movs	r3, #1
 80057f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80057fa:	3508      	adds	r5, #8
 80057fc:	e6e5      	b.n	80055ca <_strtod_l+0x5ba>
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	ea03 0a0a 	and.w	sl, r3, sl
 800580a:	e6ff      	b.n	800560c <_strtod_l+0x5fc>
 800580c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005810:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005814:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005818:	36e2      	adds	r6, #226	; 0xe2
 800581a:	fa01 f306 	lsl.w	r3, r1, r6
 800581e:	930a      	str	r3, [sp, #40]	; 0x28
 8005820:	910f      	str	r1, [sp, #60]	; 0x3c
 8005822:	e75d      	b.n	80056e0 <_strtod_l+0x6d0>
 8005824:	2300      	movs	r3, #0
 8005826:	930a      	str	r3, [sp, #40]	; 0x28
 8005828:	2301      	movs	r3, #1
 800582a:	930f      	str	r3, [sp, #60]	; 0x3c
 800582c:	e758      	b.n	80056e0 <_strtod_l+0x6d0>
 800582e:	4632      	mov	r2, r6
 8005830:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005832:	4648      	mov	r0, r9
 8005834:	f002 f8c0 	bl	80079b8 <__lshift>
 8005838:	901c      	str	r0, [sp, #112]	; 0x70
 800583a:	2800      	cmp	r0, #0
 800583c:	f47f af7c 	bne.w	8005738 <_strtod_l+0x728>
 8005840:	e604      	b.n	800544c <_strtod_l+0x43c>
 8005842:	bf00      	nop
 8005844:	08008850 	.word	0x08008850
 8005848:	fffffc02 	.word	0xfffffc02
 800584c:	465d      	mov	r5, fp
 800584e:	f040 8086 	bne.w	800595e <_strtod_l+0x94e>
 8005852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005858:	b32a      	cbz	r2, 80058a6 <_strtod_l+0x896>
 800585a:	4aaf      	ldr	r2, [pc, #700]	; (8005b18 <_strtod_l+0xb08>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d153      	bne.n	8005908 <_strtod_l+0x8f8>
 8005860:	9b04      	ldr	r3, [sp, #16]
 8005862:	4650      	mov	r0, sl
 8005864:	b1d3      	cbz	r3, 800589c <_strtod_l+0x88c>
 8005866:	4aad      	ldr	r2, [pc, #692]	; (8005b1c <_strtod_l+0xb0c>)
 8005868:	402a      	ands	r2, r5
 800586a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800586e:	f04f 31ff 	mov.w	r1, #4294967295
 8005872:	d816      	bhi.n	80058a2 <_strtod_l+0x892>
 8005874:	0d12      	lsrs	r2, r2, #20
 8005876:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	4298      	cmp	r0, r3
 8005880:	d142      	bne.n	8005908 <_strtod_l+0x8f8>
 8005882:	4ba7      	ldr	r3, [pc, #668]	; (8005b20 <_strtod_l+0xb10>)
 8005884:	429d      	cmp	r5, r3
 8005886:	d102      	bne.n	800588e <_strtod_l+0x87e>
 8005888:	3001      	adds	r0, #1
 800588a:	f43f addf 	beq.w	800544c <_strtod_l+0x43c>
 800588e:	4ba3      	ldr	r3, [pc, #652]	; (8005b1c <_strtod_l+0xb0c>)
 8005890:	402b      	ands	r3, r5
 8005892:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005896:	f04f 0a00 	mov.w	sl, #0
 800589a:	e7a0      	b.n	80057de <_strtod_l+0x7ce>
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	e7ed      	b.n	800587e <_strtod_l+0x86e>
 80058a2:	460b      	mov	r3, r1
 80058a4:	e7eb      	b.n	800587e <_strtod_l+0x86e>
 80058a6:	bb7b      	cbnz	r3, 8005908 <_strtod_l+0x8f8>
 80058a8:	f1ba 0f00 	cmp.w	sl, #0
 80058ac:	d12c      	bne.n	8005908 <_strtod_l+0x8f8>
 80058ae:	9904      	ldr	r1, [sp, #16]
 80058b0:	4a9a      	ldr	r2, [pc, #616]	; (8005b1c <_strtod_l+0xb0c>)
 80058b2:	465b      	mov	r3, fp
 80058b4:	b1f1      	cbz	r1, 80058f4 <_strtod_l+0x8e4>
 80058b6:	ea02 010b 	and.w	r1, r2, fp
 80058ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80058be:	dc19      	bgt.n	80058f4 <_strtod_l+0x8e4>
 80058c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80058c4:	f77f ae5b 	ble.w	800557e <_strtod_l+0x56e>
 80058c8:	4a96      	ldr	r2, [pc, #600]	; (8005b24 <_strtod_l+0xb14>)
 80058ca:	2300      	movs	r3, #0
 80058cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80058d0:	4650      	mov	r0, sl
 80058d2:	4659      	mov	r1, fp
 80058d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80058d8:	f7fa feae 	bl	8000638 <__aeabi_dmul>
 80058dc:	4682      	mov	sl, r0
 80058de:	468b      	mov	fp, r1
 80058e0:	2900      	cmp	r1, #0
 80058e2:	f47f adbe 	bne.w	8005462 <_strtod_l+0x452>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f47f adbb 	bne.w	8005462 <_strtod_l+0x452>
 80058ec:	2322      	movs	r3, #34	; 0x22
 80058ee:	f8c9 3000 	str.w	r3, [r9]
 80058f2:	e5b6      	b.n	8005462 <_strtod_l+0x452>
 80058f4:	4013      	ands	r3, r2
 80058f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80058fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80058fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005902:	f04f 3aff 	mov.w	sl, #4294967295
 8005906:	e76a      	b.n	80057de <_strtod_l+0x7ce>
 8005908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590a:	b193      	cbz	r3, 8005932 <_strtod_l+0x922>
 800590c:	422b      	tst	r3, r5
 800590e:	f43f af66 	beq.w	80057de <_strtod_l+0x7ce>
 8005912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005914:	9a04      	ldr	r2, [sp, #16]
 8005916:	4650      	mov	r0, sl
 8005918:	4659      	mov	r1, fp
 800591a:	b173      	cbz	r3, 800593a <_strtod_l+0x92a>
 800591c:	f7ff fb5c 	bl	8004fd8 <sulp>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005928:	f7fa fcd0 	bl	80002cc <__adddf3>
 800592c:	4682      	mov	sl, r0
 800592e:	468b      	mov	fp, r1
 8005930:	e755      	b.n	80057de <_strtod_l+0x7ce>
 8005932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005934:	ea13 0f0a 	tst.w	r3, sl
 8005938:	e7e9      	b.n	800590e <_strtod_l+0x8fe>
 800593a:	f7ff fb4d 	bl	8004fd8 <sulp>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005946:	f7fa fcbf 	bl	80002c8 <__aeabi_dsub>
 800594a:	2200      	movs	r2, #0
 800594c:	2300      	movs	r3, #0
 800594e:	4682      	mov	sl, r0
 8005950:	468b      	mov	fp, r1
 8005952:	f7fb f8d9 	bl	8000b08 <__aeabi_dcmpeq>
 8005956:	2800      	cmp	r0, #0
 8005958:	f47f ae11 	bne.w	800557e <_strtod_l+0x56e>
 800595c:	e73f      	b.n	80057de <_strtod_l+0x7ce>
 800595e:	4641      	mov	r1, r8
 8005960:	4620      	mov	r0, r4
 8005962:	f002 f9ba 	bl	8007cda <__ratio>
 8005966:	ec57 6b10 	vmov	r6, r7, d0
 800596a:	2200      	movs	r2, #0
 800596c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005970:	ee10 0a10 	vmov	r0, s0
 8005974:	4639      	mov	r1, r7
 8005976:	f7fb f8db 	bl	8000b30 <__aeabi_dcmple>
 800597a:	2800      	cmp	r0, #0
 800597c:	d077      	beq.n	8005a6e <_strtod_l+0xa5e>
 800597e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005980:	2b00      	cmp	r3, #0
 8005982:	d04a      	beq.n	8005a1a <_strtod_l+0xa0a>
 8005984:	4b68      	ldr	r3, [pc, #416]	; (8005b28 <_strtod_l+0xb18>)
 8005986:	2200      	movs	r2, #0
 8005988:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800598c:	4f66      	ldr	r7, [pc, #408]	; (8005b28 <_strtod_l+0xb18>)
 800598e:	2600      	movs	r6, #0
 8005990:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <_strtod_l+0xb0c>)
 8005992:	402b      	ands	r3, r5
 8005994:	930f      	str	r3, [sp, #60]	; 0x3c
 8005996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005998:	4b64      	ldr	r3, [pc, #400]	; (8005b2c <_strtod_l+0xb1c>)
 800599a:	429a      	cmp	r2, r3
 800599c:	f040 80ce 	bne.w	8005b3c <_strtod_l+0xb2c>
 80059a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80059ac:	ec4b ab10 	vmov	d0, sl, fp
 80059b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80059b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059b8:	f002 f8ca 	bl	8007b50 <__ulp>
 80059bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059c0:	ec53 2b10 	vmov	r2, r3, d0
 80059c4:	f7fa fe38 	bl	8000638 <__aeabi_dmul>
 80059c8:	4652      	mov	r2, sl
 80059ca:	465b      	mov	r3, fp
 80059cc:	f7fa fc7e 	bl	80002cc <__adddf3>
 80059d0:	460b      	mov	r3, r1
 80059d2:	4952      	ldr	r1, [pc, #328]	; (8005b1c <_strtod_l+0xb0c>)
 80059d4:	4a56      	ldr	r2, [pc, #344]	; (8005b30 <_strtod_l+0xb20>)
 80059d6:	4019      	ands	r1, r3
 80059d8:	4291      	cmp	r1, r2
 80059da:	4682      	mov	sl, r0
 80059dc:	d95b      	bls.n	8005a96 <_strtod_l+0xa86>
 80059de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d103      	bne.n	80059f0 <_strtod_l+0x9e0>
 80059e8:	9b08      	ldr	r3, [sp, #32]
 80059ea:	3301      	adds	r3, #1
 80059ec:	f43f ad2e 	beq.w	800544c <_strtod_l+0x43c>
 80059f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005b20 <_strtod_l+0xb10>
 80059f4:	f04f 3aff 	mov.w	sl, #4294967295
 80059f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059fa:	4648      	mov	r0, r9
 80059fc:	f001 fe11 	bl	8007622 <_Bfree>
 8005a00:	9905      	ldr	r1, [sp, #20]
 8005a02:	4648      	mov	r0, r9
 8005a04:	f001 fe0d 	bl	8007622 <_Bfree>
 8005a08:	4641      	mov	r1, r8
 8005a0a:	4648      	mov	r0, r9
 8005a0c:	f001 fe09 	bl	8007622 <_Bfree>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4648      	mov	r0, r9
 8005a14:	f001 fe05 	bl	8007622 <_Bfree>
 8005a18:	e619      	b.n	800564e <_strtod_l+0x63e>
 8005a1a:	f1ba 0f00 	cmp.w	sl, #0
 8005a1e:	d11a      	bne.n	8005a56 <_strtod_l+0xa46>
 8005a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a24:	b9eb      	cbnz	r3, 8005a62 <_strtod_l+0xa52>
 8005a26:	2200      	movs	r2, #0
 8005a28:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <_strtod_l+0xb18>)
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	f7fb f875 	bl	8000b1c <__aeabi_dcmplt>
 8005a32:	b9c8      	cbnz	r0, 8005a68 <_strtod_l+0xa58>
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4b3e      	ldr	r3, [pc, #248]	; (8005b34 <_strtod_l+0xb24>)
 8005a3c:	f7fa fdfc 	bl	8000638 <__aeabi_dmul>
 8005a40:	4606      	mov	r6, r0
 8005a42:	460f      	mov	r7, r1
 8005a44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005a48:	9618      	str	r6, [sp, #96]	; 0x60
 8005a4a:	9319      	str	r3, [sp, #100]	; 0x64
 8005a4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005a50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a54:	e79c      	b.n	8005990 <_strtod_l+0x980>
 8005a56:	f1ba 0f01 	cmp.w	sl, #1
 8005a5a:	d102      	bne.n	8005a62 <_strtod_l+0xa52>
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	f43f ad8e 	beq.w	800557e <_strtod_l+0x56e>
 8005a62:	2200      	movs	r2, #0
 8005a64:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <_strtod_l+0xb28>)
 8005a66:	e78f      	b.n	8005988 <_strtod_l+0x978>
 8005a68:	2600      	movs	r6, #0
 8005a6a:	4f32      	ldr	r7, [pc, #200]	; (8005b34 <_strtod_l+0xb24>)
 8005a6c:	e7ea      	b.n	8005a44 <_strtod_l+0xa34>
 8005a6e:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <_strtod_l+0xb24>)
 8005a70:	4630      	mov	r0, r6
 8005a72:	4639      	mov	r1, r7
 8005a74:	2200      	movs	r2, #0
 8005a76:	f7fa fddf 	bl	8000638 <__aeabi_dmul>
 8005a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	b933      	cbnz	r3, 8005a90 <_strtod_l+0xa80>
 8005a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a86:	9010      	str	r0, [sp, #64]	; 0x40
 8005a88:	9311      	str	r3, [sp, #68]	; 0x44
 8005a8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a8e:	e7df      	b.n	8005a50 <_strtod_l+0xa40>
 8005a90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005a94:	e7f9      	b.n	8005a8a <_strtod_l+0xa7a>
 8005a96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005a9a:	9b04      	ldr	r3, [sp, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ab      	bne.n	80059f8 <_strtod_l+0x9e8>
 8005aa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005aa4:	0d1b      	lsrs	r3, r3, #20
 8005aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aa8:	051b      	lsls	r3, r3, #20
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	465d      	mov	r5, fp
 8005aae:	d1a3      	bne.n	80059f8 <_strtod_l+0x9e8>
 8005ab0:	4639      	mov	r1, r7
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7fb f870 	bl	8000b98 <__aeabi_d2iz>
 8005ab8:	f7fa fd54 	bl	8000564 <__aeabi_i2d>
 8005abc:	460b      	mov	r3, r1
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7fa fc00 	bl	80002c8 <__aeabi_dsub>
 8005ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	b933      	cbnz	r3, 8005ade <_strtod_l+0xace>
 8005ad0:	f1ba 0f00 	cmp.w	sl, #0
 8005ad4:	d103      	bne.n	8005ade <_strtod_l+0xace>
 8005ad6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	d06d      	beq.n	8005bba <_strtod_l+0xbaa>
 8005ade:	a30a      	add	r3, pc, #40	; (adr r3, 8005b08 <_strtod_l+0xaf8>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fb f818 	bl	8000b1c <__aeabi_dcmplt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f47f acb8 	bne.w	8005462 <_strtod_l+0x452>
 8005af2:	a307      	add	r3, pc, #28	; (adr r3, 8005b10 <_strtod_l+0xb00>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	4630      	mov	r0, r6
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fb f82c 	bl	8000b58 <__aeabi_dcmpgt>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f43f af79 	beq.w	80059f8 <_strtod_l+0x9e8>
 8005b06:	e4ac      	b.n	8005462 <_strtod_l+0x452>
 8005b08:	94a03595 	.word	0x94a03595
 8005b0c:	3fdfffff 	.word	0x3fdfffff
 8005b10:	35afe535 	.word	0x35afe535
 8005b14:	3fe00000 	.word	0x3fe00000
 8005b18:	000fffff 	.word	0x000fffff
 8005b1c:	7ff00000 	.word	0x7ff00000
 8005b20:	7fefffff 	.word	0x7fefffff
 8005b24:	39500000 	.word	0x39500000
 8005b28:	3ff00000 	.word	0x3ff00000
 8005b2c:	7fe00000 	.word	0x7fe00000
 8005b30:	7c9fffff 	.word	0x7c9fffff
 8005b34:	3fe00000 	.word	0x3fe00000
 8005b38:	bff00000 	.word	0xbff00000
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	b333      	cbz	r3, 8005b8e <_strtod_l+0xb7e>
 8005b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b46:	d822      	bhi.n	8005b8e <_strtod_l+0xb7e>
 8005b48:	a327      	add	r3, pc, #156	; (adr r3, 8005be8 <_strtod_l+0xbd8>)
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	4630      	mov	r0, r6
 8005b50:	4639      	mov	r1, r7
 8005b52:	f7fa ffed 	bl	8000b30 <__aeabi_dcmple>
 8005b56:	b1a0      	cbz	r0, 8005b82 <_strtod_l+0xb72>
 8005b58:	4639      	mov	r1, r7
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7fb f844 	bl	8000be8 <__aeabi_d2uiz>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	bf08      	it	eq
 8005b64:	2001      	moveq	r0, #1
 8005b66:	f7fa fced 	bl	8000544 <__aeabi_ui2d>
 8005b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	460f      	mov	r7, r1
 8005b70:	bb03      	cbnz	r3, 8005bb4 <_strtod_l+0xba4>
 8005b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b76:	9012      	str	r0, [sp, #72]	; 0x48
 8005b78:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005b7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005b92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005b96:	f001 ffdb 	bl	8007b50 <__ulp>
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	ec53 2b10 	vmov	r2, r3, d0
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	f7fa fd49 	bl	8000638 <__aeabi_dmul>
 8005ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005baa:	f7fa fb8f 	bl	80002cc <__adddf3>
 8005bae:	4682      	mov	sl, r0
 8005bb0:	468b      	mov	fp, r1
 8005bb2:	e772      	b.n	8005a9a <_strtod_l+0xa8a>
 8005bb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005bb8:	e7df      	b.n	8005b7a <_strtod_l+0xb6a>
 8005bba:	a30d      	add	r3, pc, #52	; (adr r3, 8005bf0 <_strtod_l+0xbe0>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f7fa ffac 	bl	8000b1c <__aeabi_dcmplt>
 8005bc4:	e79c      	b.n	8005b00 <_strtod_l+0xaf0>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8005bca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	f7ff ba61 	b.w	8005096 <_strtod_l+0x86>
 8005bd4:	2b65      	cmp	r3, #101	; 0x65
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f43f ab4e 	beq.w	800527a <_strtod_l+0x26a>
 8005bde:	2101      	movs	r1, #1
 8005be0:	4614      	mov	r4, r2
 8005be2:	9104      	str	r1, [sp, #16]
 8005be4:	f7ff bacb 	b.w	800517e <_strtod_l+0x16e>
 8005be8:	ffc00000 	.word	0xffc00000
 8005bec:	41dfffff 	.word	0x41dfffff
 8005bf0:	94a03595 	.word	0x94a03595
 8005bf4:	3fcfffff 	.word	0x3fcfffff

08005bf8 <_strtod_r>:
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <_strtod_r+0x18>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	b410      	push	{r4}
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	4c04      	ldr	r4, [pc, #16]	; (8005c14 <_strtod_r+0x1c>)
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf08      	it	eq
 8005c06:	4623      	moveq	r3, r4
 8005c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c0c:	f7ff ba00 	b.w	8005010 <_strtod_l>
 8005c10:	2000000c 	.word	0x2000000c
 8005c14:	20000070 	.word	0x20000070

08005c18 <_strtol_l.isra.0>:
 8005c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	4689      	mov	r9, r1
 8005c20:	4692      	mov	sl, r2
 8005c22:	461e      	mov	r6, r3
 8005c24:	460f      	mov	r7, r1
 8005c26:	463d      	mov	r5, r7
 8005c28:	9808      	ldr	r0, [sp, #32]
 8005c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c2e:	f001 fc27 	bl	8007480 <__locale_ctype_ptr_l>
 8005c32:	4420      	add	r0, r4
 8005c34:	7843      	ldrb	r3, [r0, #1]
 8005c36:	f013 0308 	ands.w	r3, r3, #8
 8005c3a:	d132      	bne.n	8005ca2 <_strtol_l.isra.0+0x8a>
 8005c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8005c3e:	d132      	bne.n	8005ca6 <_strtol_l.isra.0+0x8e>
 8005c40:	787c      	ldrb	r4, [r7, #1]
 8005c42:	1cbd      	adds	r5, r7, #2
 8005c44:	2201      	movs	r2, #1
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	d05d      	beq.n	8005d06 <_strtol_l.isra.0+0xee>
 8005c4a:	2e10      	cmp	r6, #16
 8005c4c:	d109      	bne.n	8005c62 <_strtol_l.isra.0+0x4a>
 8005c4e:	2c30      	cmp	r4, #48	; 0x30
 8005c50:	d107      	bne.n	8005c62 <_strtol_l.isra.0+0x4a>
 8005c52:	782b      	ldrb	r3, [r5, #0]
 8005c54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c58:	2b58      	cmp	r3, #88	; 0x58
 8005c5a:	d14f      	bne.n	8005cfc <_strtol_l.isra.0+0xe4>
 8005c5c:	786c      	ldrb	r4, [r5, #1]
 8005c5e:	2610      	movs	r6, #16
 8005c60:	3502      	adds	r5, #2
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	bf14      	ite	ne
 8005c66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005c6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005c6e:	2700      	movs	r7, #0
 8005c70:	fbb1 fcf6 	udiv	ip, r1, r6
 8005c74:	4638      	mov	r0, r7
 8005c76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005c7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d817      	bhi.n	8005cb2 <_strtol_l.isra.0+0x9a>
 8005c82:	461c      	mov	r4, r3
 8005c84:	42a6      	cmp	r6, r4
 8005c86:	dd23      	ble.n	8005cd0 <_strtol_l.isra.0+0xb8>
 8005c88:	1c7b      	adds	r3, r7, #1
 8005c8a:	d007      	beq.n	8005c9c <_strtol_l.isra.0+0x84>
 8005c8c:	4584      	cmp	ip, r0
 8005c8e:	d31c      	bcc.n	8005cca <_strtol_l.isra.0+0xb2>
 8005c90:	d101      	bne.n	8005c96 <_strtol_l.isra.0+0x7e>
 8005c92:	45a6      	cmp	lr, r4
 8005c94:	db19      	blt.n	8005cca <_strtol_l.isra.0+0xb2>
 8005c96:	fb00 4006 	mla	r0, r0, r6, r4
 8005c9a:	2701      	movs	r7, #1
 8005c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ca0:	e7eb      	b.n	8005c7a <_strtol_l.isra.0+0x62>
 8005ca2:	462f      	mov	r7, r5
 8005ca4:	e7bf      	b.n	8005c26 <_strtol_l.isra.0+0xe>
 8005ca6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ca8:	bf04      	itt	eq
 8005caa:	1cbd      	addeq	r5, r7, #2
 8005cac:	787c      	ldrbeq	r4, [r7, #1]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	e7c9      	b.n	8005c46 <_strtol_l.isra.0+0x2e>
 8005cb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005cb6:	2b19      	cmp	r3, #25
 8005cb8:	d801      	bhi.n	8005cbe <_strtol_l.isra.0+0xa6>
 8005cba:	3c37      	subs	r4, #55	; 0x37
 8005cbc:	e7e2      	b.n	8005c84 <_strtol_l.isra.0+0x6c>
 8005cbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005cc2:	2b19      	cmp	r3, #25
 8005cc4:	d804      	bhi.n	8005cd0 <_strtol_l.isra.0+0xb8>
 8005cc6:	3c57      	subs	r4, #87	; 0x57
 8005cc8:	e7dc      	b.n	8005c84 <_strtol_l.isra.0+0x6c>
 8005cca:	f04f 37ff 	mov.w	r7, #4294967295
 8005cce:	e7e5      	b.n	8005c9c <_strtol_l.isra.0+0x84>
 8005cd0:	1c7b      	adds	r3, r7, #1
 8005cd2:	d108      	bne.n	8005ce6 <_strtol_l.isra.0+0xce>
 8005cd4:	2322      	movs	r3, #34	; 0x22
 8005cd6:	f8c8 3000 	str.w	r3, [r8]
 8005cda:	4608      	mov	r0, r1
 8005cdc:	f1ba 0f00 	cmp.w	sl, #0
 8005ce0:	d107      	bne.n	8005cf2 <_strtol_l.isra.0+0xda>
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	b102      	cbz	r2, 8005cea <_strtol_l.isra.0+0xd2>
 8005ce8:	4240      	negs	r0, r0
 8005cea:	f1ba 0f00 	cmp.w	sl, #0
 8005cee:	d0f8      	beq.n	8005ce2 <_strtol_l.isra.0+0xca>
 8005cf0:	b10f      	cbz	r7, 8005cf6 <_strtol_l.isra.0+0xde>
 8005cf2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005cf6:	f8ca 9000 	str.w	r9, [sl]
 8005cfa:	e7f2      	b.n	8005ce2 <_strtol_l.isra.0+0xca>
 8005cfc:	2430      	movs	r4, #48	; 0x30
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	d1af      	bne.n	8005c62 <_strtol_l.isra.0+0x4a>
 8005d02:	2608      	movs	r6, #8
 8005d04:	e7ad      	b.n	8005c62 <_strtol_l.isra.0+0x4a>
 8005d06:	2c30      	cmp	r4, #48	; 0x30
 8005d08:	d0a3      	beq.n	8005c52 <_strtol_l.isra.0+0x3a>
 8005d0a:	260a      	movs	r6, #10
 8005d0c:	e7a9      	b.n	8005c62 <_strtol_l.isra.0+0x4a>
	...

08005d10 <_strtol_r>:
 8005d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d12:	4c06      	ldr	r4, [pc, #24]	; (8005d2c <_strtol_r+0x1c>)
 8005d14:	4d06      	ldr	r5, [pc, #24]	; (8005d30 <_strtol_r+0x20>)
 8005d16:	6824      	ldr	r4, [r4, #0]
 8005d18:	6a24      	ldr	r4, [r4, #32]
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	bf08      	it	eq
 8005d1e:	462c      	moveq	r4, r5
 8005d20:	9400      	str	r4, [sp, #0]
 8005d22:	f7ff ff79 	bl	8005c18 <_strtol_l.isra.0>
 8005d26:	b003      	add	sp, #12
 8005d28:	bd30      	pop	{r4, r5, pc}
 8005d2a:	bf00      	nop
 8005d2c:	2000000c 	.word	0x2000000c
 8005d30:	20000070 	.word	0x20000070

08005d34 <__swbuf_r>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	460e      	mov	r6, r1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	b118      	cbz	r0, 8005d46 <__swbuf_r+0x12>
 8005d3e:	6983      	ldr	r3, [r0, #24]
 8005d40:	b90b      	cbnz	r3, 8005d46 <__swbuf_r+0x12>
 8005d42:	f000 ffed 	bl	8006d20 <__sinit>
 8005d46:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <__swbuf_r+0x98>)
 8005d48:	429c      	cmp	r4, r3
 8005d4a:	d12a      	bne.n	8005da2 <__swbuf_r+0x6e>
 8005d4c:	686c      	ldr	r4, [r5, #4]
 8005d4e:	69a3      	ldr	r3, [r4, #24]
 8005d50:	60a3      	str	r3, [r4, #8]
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	071a      	lsls	r2, r3, #28
 8005d56:	d52e      	bpl.n	8005db6 <__swbuf_r+0x82>
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	b363      	cbz	r3, 8005db6 <__swbuf_r+0x82>
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	1ac0      	subs	r0, r0, r3
 8005d62:	6963      	ldr	r3, [r4, #20]
 8005d64:	b2f6      	uxtb	r6, r6
 8005d66:	4283      	cmp	r3, r0
 8005d68:	4637      	mov	r7, r6
 8005d6a:	dc04      	bgt.n	8005d76 <__swbuf_r+0x42>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 ff6c 	bl	8006c4c <_fflush_r>
 8005d74:	bb28      	cbnz	r0, 8005dc2 <__swbuf_r+0x8e>
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	60a3      	str	r3, [r4, #8]
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	6022      	str	r2, [r4, #0]
 8005d82:	701e      	strb	r6, [r3, #0]
 8005d84:	6963      	ldr	r3, [r4, #20]
 8005d86:	3001      	adds	r0, #1
 8005d88:	4283      	cmp	r3, r0
 8005d8a:	d004      	beq.n	8005d96 <__swbuf_r+0x62>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	07db      	lsls	r3, r3, #31
 8005d90:	d519      	bpl.n	8005dc6 <__swbuf_r+0x92>
 8005d92:	2e0a      	cmp	r6, #10
 8005d94:	d117      	bne.n	8005dc6 <__swbuf_r+0x92>
 8005d96:	4621      	mov	r1, r4
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f000 ff57 	bl	8006c4c <_fflush_r>
 8005d9e:	b190      	cbz	r0, 8005dc6 <__swbuf_r+0x92>
 8005da0:	e00f      	b.n	8005dc2 <__swbuf_r+0x8e>
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <__swbuf_r+0x9c>)
 8005da4:	429c      	cmp	r4, r3
 8005da6:	d101      	bne.n	8005dac <__swbuf_r+0x78>
 8005da8:	68ac      	ldr	r4, [r5, #8]
 8005daa:	e7d0      	b.n	8005d4e <__swbuf_r+0x1a>
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <__swbuf_r+0xa0>)
 8005dae:	429c      	cmp	r4, r3
 8005db0:	bf08      	it	eq
 8005db2:	68ec      	ldreq	r4, [r5, #12]
 8005db4:	e7cb      	b.n	8005d4e <__swbuf_r+0x1a>
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f80d 	bl	8005dd8 <__swsetup_r>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0cc      	beq.n	8005d5c <__swbuf_r+0x28>
 8005dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	080088a8 	.word	0x080088a8
 8005dd0:	080088c8 	.word	0x080088c8
 8005dd4:	08008888 	.word	0x08008888

08005dd8 <__swsetup_r>:
 8005dd8:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <__swsetup_r+0xcc>)
 8005dda:	b570      	push	{r4, r5, r6, lr}
 8005ddc:	681d      	ldr	r5, [r3, #0]
 8005dde:	4606      	mov	r6, r0
 8005de0:	460c      	mov	r4, r1
 8005de2:	b125      	cbz	r5, 8005dee <__swsetup_r+0x16>
 8005de4:	69ab      	ldr	r3, [r5, #24]
 8005de6:	b913      	cbnz	r3, 8005dee <__swsetup_r+0x16>
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 ff99 	bl	8006d20 <__sinit>
 8005dee:	4b2e      	ldr	r3, [pc, #184]	; (8005ea8 <__swsetup_r+0xd0>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	d10f      	bne.n	8005e14 <__swsetup_r+0x3c>
 8005df4:	686c      	ldr	r4, [r5, #4]
 8005df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	0715      	lsls	r5, r2, #28
 8005dfe:	d42c      	bmi.n	8005e5a <__swsetup_r+0x82>
 8005e00:	06d0      	lsls	r0, r2, #27
 8005e02:	d411      	bmi.n	8005e28 <__swsetup_r+0x50>
 8005e04:	2209      	movs	r2, #9
 8005e06:	6032      	str	r2, [r6, #0]
 8005e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e0c:	81a3      	strh	r3, [r4, #12]
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	e03e      	b.n	8005e92 <__swsetup_r+0xba>
 8005e14:	4b25      	ldr	r3, [pc, #148]	; (8005eac <__swsetup_r+0xd4>)
 8005e16:	429c      	cmp	r4, r3
 8005e18:	d101      	bne.n	8005e1e <__swsetup_r+0x46>
 8005e1a:	68ac      	ldr	r4, [r5, #8]
 8005e1c:	e7eb      	b.n	8005df6 <__swsetup_r+0x1e>
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <__swsetup_r+0xd8>)
 8005e20:	429c      	cmp	r4, r3
 8005e22:	bf08      	it	eq
 8005e24:	68ec      	ldreq	r4, [r5, #12]
 8005e26:	e7e6      	b.n	8005df6 <__swsetup_r+0x1e>
 8005e28:	0751      	lsls	r1, r2, #29
 8005e2a:	d512      	bpl.n	8005e52 <__swsetup_r+0x7a>
 8005e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e2e:	b141      	cbz	r1, 8005e42 <__swsetup_r+0x6a>
 8005e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e34:	4299      	cmp	r1, r3
 8005e36:	d002      	beq.n	8005e3e <__swsetup_r+0x66>
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f001 ffcb 	bl	8007dd4 <_free_r>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6363      	str	r3, [r4, #52]	; 0x34
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6063      	str	r3, [r4, #4]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f043 0308 	orr.w	r3, r3, #8
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	b94b      	cbnz	r3, 8005e72 <__swsetup_r+0x9a>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e68:	d003      	beq.n	8005e72 <__swsetup_r+0x9a>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f001 fb3f 	bl	80074f0 <__smakebuf_r>
 8005e72:	89a2      	ldrh	r2, [r4, #12]
 8005e74:	f012 0301 	ands.w	r3, r2, #1
 8005e78:	d00c      	beq.n	8005e94 <__swsetup_r+0xbc>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6963      	ldr	r3, [r4, #20]
 8005e80:	425b      	negs	r3, r3
 8005e82:	61a3      	str	r3, [r4, #24]
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b953      	cbnz	r3, 8005e9e <__swsetup_r+0xc6>
 8005e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005e90:	d1ba      	bne.n	8005e08 <__swsetup_r+0x30>
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	0792      	lsls	r2, r2, #30
 8005e96:	bf58      	it	pl
 8005e98:	6963      	ldrpl	r3, [r4, #20]
 8005e9a:	60a3      	str	r3, [r4, #8]
 8005e9c:	e7f2      	b.n	8005e84 <__swsetup_r+0xac>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e7f7      	b.n	8005e92 <__swsetup_r+0xba>
 8005ea2:	bf00      	nop
 8005ea4:	2000000c 	.word	0x2000000c
 8005ea8:	080088a8 	.word	0x080088a8
 8005eac:	080088c8 	.word	0x080088c8
 8005eb0:	08008888 	.word	0x08008888

08005eb4 <quorem>:
 8005eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb8:	6903      	ldr	r3, [r0, #16]
 8005eba:	690c      	ldr	r4, [r1, #16]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	f2c0 8082 	blt.w	8005fc8 <quorem+0x114>
 8005ec4:	3c01      	subs	r4, #1
 8005ec6:	f101 0714 	add.w	r7, r1, #20
 8005eca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005ece:	f100 0614 	add.w	r6, r0, #20
 8005ed2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005ed6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005eda:	eb06 030c 	add.w	r3, r6, ip
 8005ede:	3501      	adds	r5, #1
 8005ee0:	eb07 090c 	add.w	r9, r7, ip
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	fbb0 f5f5 	udiv	r5, r0, r5
 8005eea:	b395      	cbz	r5, 8005f52 <quorem+0x9e>
 8005eec:	f04f 0a00 	mov.w	sl, #0
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	46b6      	mov	lr, r6
 8005ef4:	46d3      	mov	fp, sl
 8005ef6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005efa:	b293      	uxth	r3, r2
 8005efc:	fb05 a303 	mla	r3, r5, r3, sl
 8005f00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ebab 0303 	sub.w	r3, fp, r3
 8005f0a:	0c12      	lsrs	r2, r2, #16
 8005f0c:	f8de b000 	ldr.w	fp, [lr]
 8005f10:	fb05 a202 	mla	r2, r5, r2, sl
 8005f14:	fa13 f38b 	uxtah	r3, r3, fp
 8005f18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f1c:	fa1f fb82 	uxth.w	fp, r2
 8005f20:	f8de 2000 	ldr.w	r2, [lr]
 8005f24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f32:	4581      	cmp	r9, r0
 8005f34:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f38:	f84e 3b04 	str.w	r3, [lr], #4
 8005f3c:	d2db      	bcs.n	8005ef6 <quorem+0x42>
 8005f3e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005f42:	b933      	cbnz	r3, 8005f52 <quorem+0x9e>
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	3b04      	subs	r3, #4
 8005f48:	429e      	cmp	r6, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	d330      	bcc.n	8005fb0 <quorem+0xfc>
 8005f4e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f52:	4640      	mov	r0, r8
 8005f54:	f001 fd84 	bl	8007a60 <__mcmp>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	db25      	blt.n	8005fa8 <quorem+0xf4>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f04f 0c00 	mov.w	ip, #0
 8005f64:	f857 2b04 	ldr.w	r2, [r7], #4
 8005f68:	f8d0 e000 	ldr.w	lr, [r0]
 8005f6c:	b293      	uxth	r3, r2
 8005f6e:	ebac 0303 	sub.w	r3, ip, r3
 8005f72:	0c12      	lsrs	r2, r2, #16
 8005f74:	fa13 f38e 	uxtah	r3, r3, lr
 8005f78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f86:	45b9      	cmp	r9, r7
 8005f88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f8c:	f840 3b04 	str.w	r3, [r0], #4
 8005f90:	d2e8      	bcs.n	8005f64 <quorem+0xb0>
 8005f92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f9a:	b92a      	cbnz	r2, 8005fa8 <quorem+0xf4>
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	429e      	cmp	r6, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	d30b      	bcc.n	8005fbc <quorem+0x108>
 8005fa4:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fa8:	4628      	mov	r0, r5
 8005faa:	b003      	add	sp, #12
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	3b04      	subs	r3, #4
 8005fb4:	2a00      	cmp	r2, #0
 8005fb6:	d1ca      	bne.n	8005f4e <quorem+0x9a>
 8005fb8:	3c01      	subs	r4, #1
 8005fba:	e7c5      	b.n	8005f48 <quorem+0x94>
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	d1ef      	bne.n	8005fa4 <quorem+0xf0>
 8005fc4:	3c01      	subs	r4, #1
 8005fc6:	e7ea      	b.n	8005f9e <quorem+0xea>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e7ee      	b.n	8005faa <quorem+0xf6>
 8005fcc:	0000      	movs	r0, r0
	...

08005fd0 <_dtoa_r>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	ec57 6b10 	vmov	r6, r7, d0
 8005fd8:	b097      	sub	sp, #92	; 0x5c
 8005fda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fdc:	9106      	str	r1, [sp, #24]
 8005fde:	4604      	mov	r4, r0
 8005fe0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8005fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fe8:	e9cd 6700 	strd	r6, r7, [sp]
 8005fec:	b93d      	cbnz	r5, 8005ffe <_dtoa_r+0x2e>
 8005fee:	2010      	movs	r0, #16
 8005ff0:	f001 fabe 	bl	8007570 <malloc>
 8005ff4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ff6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ffa:	6005      	str	r5, [r0, #0]
 8005ffc:	60c5      	str	r5, [r0, #12]
 8005ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	b151      	cbz	r1, 800601a <_dtoa_r+0x4a>
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	604a      	str	r2, [r1, #4]
 8006008:	2301      	movs	r3, #1
 800600a:	4093      	lsls	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
 800600e:	4620      	mov	r0, r4
 8006010:	f001 fb07 	bl	8007622 <_Bfree>
 8006014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	1e3b      	subs	r3, r7, #0
 800601c:	bfbb      	ittet	lt
 800601e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006022:	9301      	strlt	r3, [sp, #4]
 8006024:	2300      	movge	r3, #0
 8006026:	2201      	movlt	r2, #1
 8006028:	bfac      	ite	ge
 800602a:	f8c8 3000 	strge.w	r3, [r8]
 800602e:	f8c8 2000 	strlt.w	r2, [r8]
 8006032:	4baf      	ldr	r3, [pc, #700]	; (80062f0 <_dtoa_r+0x320>)
 8006034:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006038:	ea33 0308 	bics.w	r3, r3, r8
 800603c:	d114      	bne.n	8006068 <_dtoa_r+0x98>
 800603e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006040:	f242 730f 	movw	r3, #9999	; 0x270f
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	9b00      	ldr	r3, [sp, #0]
 8006048:	b923      	cbnz	r3, 8006054 <_dtoa_r+0x84>
 800604a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800604e:	2800      	cmp	r0, #0
 8006050:	f000 8542 	beq.w	8006ad8 <_dtoa_r+0xb08>
 8006054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006056:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006304 <_dtoa_r+0x334>
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 8544 	beq.w	8006ae8 <_dtoa_r+0xb18>
 8006060:	f10b 0303 	add.w	r3, fp, #3
 8006064:	f000 bd3e 	b.w	8006ae4 <_dtoa_r+0xb14>
 8006068:	e9dd 6700 	ldrd	r6, r7, [sp]
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	4630      	mov	r0, r6
 8006072:	4639      	mov	r1, r7
 8006074:	f7fa fd48 	bl	8000b08 <__aeabi_dcmpeq>
 8006078:	4681      	mov	r9, r0
 800607a:	b168      	cbz	r0, 8006098 <_dtoa_r+0xc8>
 800607c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800607e:	2301      	movs	r3, #1
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8524 	beq.w	8006ad2 <_dtoa_r+0xb02>
 800608a:	4b9a      	ldr	r3, [pc, #616]	; (80062f4 <_dtoa_r+0x324>)
 800608c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800608e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	f000 bd28 	b.w	8006ae8 <_dtoa_r+0xb18>
 8006098:	aa14      	add	r2, sp, #80	; 0x50
 800609a:	a915      	add	r1, sp, #84	; 0x54
 800609c:	ec47 6b10 	vmov	d0, r6, r7
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 fdcb 	bl	8007c3c <__d2b>
 80060a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060aa:	9004      	str	r0, [sp, #16]
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	d07c      	beq.n	80061aa <_dtoa_r+0x1da>
 80060b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80060b8:	46b2      	mov	sl, r6
 80060ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80060be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80060c6:	2200      	movs	r2, #0
 80060c8:	4b8b      	ldr	r3, [pc, #556]	; (80062f8 <_dtoa_r+0x328>)
 80060ca:	4650      	mov	r0, sl
 80060cc:	4659      	mov	r1, fp
 80060ce:	f7fa f8fb 	bl	80002c8 <__aeabi_dsub>
 80060d2:	a381      	add	r3, pc, #516	; (adr r3, 80062d8 <_dtoa_r+0x308>)
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f7fa faae 	bl	8000638 <__aeabi_dmul>
 80060dc:	a380      	add	r3, pc, #512	; (adr r3, 80062e0 <_dtoa_r+0x310>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa f8f3 	bl	80002cc <__adddf3>
 80060e6:	4606      	mov	r6, r0
 80060e8:	4628      	mov	r0, r5
 80060ea:	460f      	mov	r7, r1
 80060ec:	f7fa fa3a 	bl	8000564 <__aeabi_i2d>
 80060f0:	a37d      	add	r3, pc, #500	; (adr r3, 80062e8 <_dtoa_r+0x318>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fa9f 	bl	8000638 <__aeabi_dmul>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4630      	mov	r0, r6
 8006100:	4639      	mov	r1, r7
 8006102:	f7fa f8e3 	bl	80002cc <__adddf3>
 8006106:	4606      	mov	r6, r0
 8006108:	460f      	mov	r7, r1
 800610a:	f7fa fd45 	bl	8000b98 <__aeabi_d2iz>
 800610e:	2200      	movs	r2, #0
 8006110:	4682      	mov	sl, r0
 8006112:	2300      	movs	r3, #0
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa fd00 	bl	8000b1c <__aeabi_dcmplt>
 800611c:	b148      	cbz	r0, 8006132 <_dtoa_r+0x162>
 800611e:	4650      	mov	r0, sl
 8006120:	f7fa fa20 	bl	8000564 <__aeabi_i2d>
 8006124:	4632      	mov	r2, r6
 8006126:	463b      	mov	r3, r7
 8006128:	f7fa fcee 	bl	8000b08 <__aeabi_dcmpeq>
 800612c:	b908      	cbnz	r0, 8006132 <_dtoa_r+0x162>
 800612e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006132:	f1ba 0f16 	cmp.w	sl, #22
 8006136:	d859      	bhi.n	80061ec <_dtoa_r+0x21c>
 8006138:	4970      	ldr	r1, [pc, #448]	; (80062fc <_dtoa_r+0x32c>)
 800613a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800613e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006146:	f7fa fd07 	bl	8000b58 <__aeabi_dcmpgt>
 800614a:	2800      	cmp	r0, #0
 800614c:	d050      	beq.n	80061f0 <_dtoa_r+0x220>
 800614e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006152:	2300      	movs	r3, #0
 8006154:	930f      	str	r3, [sp, #60]	; 0x3c
 8006156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006158:	1b5d      	subs	r5, r3, r5
 800615a:	f1b5 0801 	subs.w	r8, r5, #1
 800615e:	bf49      	itett	mi
 8006160:	f1c5 0301 	rsbmi	r3, r5, #1
 8006164:	2300      	movpl	r3, #0
 8006166:	9305      	strmi	r3, [sp, #20]
 8006168:	f04f 0800 	movmi.w	r8, #0
 800616c:	bf58      	it	pl
 800616e:	9305      	strpl	r3, [sp, #20]
 8006170:	f1ba 0f00 	cmp.w	sl, #0
 8006174:	db3e      	blt.n	80061f4 <_dtoa_r+0x224>
 8006176:	2300      	movs	r3, #0
 8006178:	44d0      	add	r8, sl
 800617a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	9b06      	ldr	r3, [sp, #24]
 8006182:	2b09      	cmp	r3, #9
 8006184:	f200 8090 	bhi.w	80062a8 <_dtoa_r+0x2d8>
 8006188:	2b05      	cmp	r3, #5
 800618a:	bfc4      	itt	gt
 800618c:	3b04      	subgt	r3, #4
 800618e:	9306      	strgt	r3, [sp, #24]
 8006190:	9b06      	ldr	r3, [sp, #24]
 8006192:	f1a3 0302 	sub.w	r3, r3, #2
 8006196:	bfcc      	ite	gt
 8006198:	2500      	movgt	r5, #0
 800619a:	2501      	movle	r5, #1
 800619c:	2b03      	cmp	r3, #3
 800619e:	f200 808f 	bhi.w	80062c0 <_dtoa_r+0x2f0>
 80061a2:	e8df f003 	tbb	[pc, r3]
 80061a6:	7f7d      	.short	0x7f7d
 80061a8:	7131      	.short	0x7131
 80061aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80061ae:	441d      	add	r5, r3
 80061b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80061b4:	2820      	cmp	r0, #32
 80061b6:	dd13      	ble.n	80061e0 <_dtoa_r+0x210>
 80061b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80061bc:	9b00      	ldr	r3, [sp, #0]
 80061be:	fa08 f800 	lsl.w	r8, r8, r0
 80061c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80061c6:	fa23 f000 	lsr.w	r0, r3, r0
 80061ca:	ea48 0000 	orr.w	r0, r8, r0
 80061ce:	f7fa f9b9 	bl	8000544 <__aeabi_ui2d>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4682      	mov	sl, r0
 80061d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80061da:	3d01      	subs	r5, #1
 80061dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80061de:	e772      	b.n	80060c6 <_dtoa_r+0xf6>
 80061e0:	9b00      	ldr	r3, [sp, #0]
 80061e2:	f1c0 0020 	rsb	r0, r0, #32
 80061e6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ea:	e7f0      	b.n	80061ce <_dtoa_r+0x1fe>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7b1      	b.n	8006154 <_dtoa_r+0x184>
 80061f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80061f2:	e7b0      	b.n	8006156 <_dtoa_r+0x186>
 80061f4:	9b05      	ldr	r3, [sp, #20]
 80061f6:	eba3 030a 	sub.w	r3, r3, sl
 80061fa:	9305      	str	r3, [sp, #20]
 80061fc:	f1ca 0300 	rsb	r3, sl, #0
 8006200:	9307      	str	r3, [sp, #28]
 8006202:	2300      	movs	r3, #0
 8006204:	930e      	str	r3, [sp, #56]	; 0x38
 8006206:	e7bb      	b.n	8006180 <_dtoa_r+0x1b0>
 8006208:	2301      	movs	r3, #1
 800620a:	930a      	str	r3, [sp, #40]	; 0x28
 800620c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800620e:	2b00      	cmp	r3, #0
 8006210:	dd59      	ble.n	80062c6 <_dtoa_r+0x2f6>
 8006212:	9302      	str	r3, [sp, #8]
 8006214:	4699      	mov	r9, r3
 8006216:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006218:	2200      	movs	r2, #0
 800621a:	6072      	str	r2, [r6, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	f102 0014 	add.w	r0, r2, #20
 8006222:	4298      	cmp	r0, r3
 8006224:	6871      	ldr	r1, [r6, #4]
 8006226:	d953      	bls.n	80062d0 <_dtoa_r+0x300>
 8006228:	4620      	mov	r0, r4
 800622a:	f001 f9c6 	bl	80075ba <_Balloc>
 800622e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006230:	6030      	str	r0, [r6, #0]
 8006232:	f1b9 0f0e 	cmp.w	r9, #14
 8006236:	f8d3 b000 	ldr.w	fp, [r3]
 800623a:	f200 80e6 	bhi.w	800640a <_dtoa_r+0x43a>
 800623e:	2d00      	cmp	r5, #0
 8006240:	f000 80e3 	beq.w	800640a <_dtoa_r+0x43a>
 8006244:	ed9d 7b00 	vldr	d7, [sp]
 8006248:	f1ba 0f00 	cmp.w	sl, #0
 800624c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006250:	dd74      	ble.n	800633c <_dtoa_r+0x36c>
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <_dtoa_r+0x32c>)
 8006254:	f00a 030f 	and.w	r3, sl, #15
 8006258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800625c:	ed93 7b00 	vldr	d7, [r3]
 8006260:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006264:	06f0      	lsls	r0, r6, #27
 8006266:	ed8d 7b08 	vstr	d7, [sp, #32]
 800626a:	d565      	bpl.n	8006338 <_dtoa_r+0x368>
 800626c:	4b24      	ldr	r3, [pc, #144]	; (8006300 <_dtoa_r+0x330>)
 800626e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006272:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006276:	f7fa fb09 	bl	800088c <__aeabi_ddiv>
 800627a:	e9cd 0100 	strd	r0, r1, [sp]
 800627e:	f006 060f 	and.w	r6, r6, #15
 8006282:	2503      	movs	r5, #3
 8006284:	4f1e      	ldr	r7, [pc, #120]	; (8006300 <_dtoa_r+0x330>)
 8006286:	e04c      	b.n	8006322 <_dtoa_r+0x352>
 8006288:	2301      	movs	r3, #1
 800628a:	930a      	str	r3, [sp, #40]	; 0x28
 800628c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800628e:	4453      	add	r3, sl
 8006290:	f103 0901 	add.w	r9, r3, #1
 8006294:	9302      	str	r3, [sp, #8]
 8006296:	464b      	mov	r3, r9
 8006298:	2b01      	cmp	r3, #1
 800629a:	bfb8      	it	lt
 800629c:	2301      	movlt	r3, #1
 800629e:	e7ba      	b.n	8006216 <_dtoa_r+0x246>
 80062a0:	2300      	movs	r3, #0
 80062a2:	e7b2      	b.n	800620a <_dtoa_r+0x23a>
 80062a4:	2300      	movs	r3, #0
 80062a6:	e7f0      	b.n	800628a <_dtoa_r+0x2ba>
 80062a8:	2501      	movs	r5, #1
 80062aa:	2300      	movs	r3, #0
 80062ac:	9306      	str	r3, [sp, #24]
 80062ae:	950a      	str	r5, [sp, #40]	; 0x28
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295
 80062b4:	9302      	str	r3, [sp, #8]
 80062b6:	4699      	mov	r9, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	2312      	movs	r3, #18
 80062bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80062be:	e7aa      	b.n	8006216 <_dtoa_r+0x246>
 80062c0:	2301      	movs	r3, #1
 80062c2:	930a      	str	r3, [sp, #40]	; 0x28
 80062c4:	e7f4      	b.n	80062b0 <_dtoa_r+0x2e0>
 80062c6:	2301      	movs	r3, #1
 80062c8:	9302      	str	r3, [sp, #8]
 80062ca:	4699      	mov	r9, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	e7f5      	b.n	80062bc <_dtoa_r+0x2ec>
 80062d0:	3101      	adds	r1, #1
 80062d2:	6071      	str	r1, [r6, #4]
 80062d4:	0052      	lsls	r2, r2, #1
 80062d6:	e7a2      	b.n	800621e <_dtoa_r+0x24e>
 80062d8:	636f4361 	.word	0x636f4361
 80062dc:	3fd287a7 	.word	0x3fd287a7
 80062e0:	8b60c8b3 	.word	0x8b60c8b3
 80062e4:	3fc68a28 	.word	0x3fc68a28
 80062e8:	509f79fb 	.word	0x509f79fb
 80062ec:	3fd34413 	.word	0x3fd34413
 80062f0:	7ff00000 	.word	0x7ff00000
 80062f4:	080087f9 	.word	0x080087f9
 80062f8:	3ff80000 	.word	0x3ff80000
 80062fc:	08008920 	.word	0x08008920
 8006300:	080088f8 	.word	0x080088f8
 8006304:	08008881 	.word	0x08008881
 8006308:	07f1      	lsls	r1, r6, #31
 800630a:	d508      	bpl.n	800631e <_dtoa_r+0x34e>
 800630c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006314:	f7fa f990 	bl	8000638 <__aeabi_dmul>
 8006318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800631c:	3501      	adds	r5, #1
 800631e:	1076      	asrs	r6, r6, #1
 8006320:	3708      	adds	r7, #8
 8006322:	2e00      	cmp	r6, #0
 8006324:	d1f0      	bne.n	8006308 <_dtoa_r+0x338>
 8006326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800632a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800632e:	f7fa faad 	bl	800088c <__aeabi_ddiv>
 8006332:	e9cd 0100 	strd	r0, r1, [sp]
 8006336:	e01a      	b.n	800636e <_dtoa_r+0x39e>
 8006338:	2502      	movs	r5, #2
 800633a:	e7a3      	b.n	8006284 <_dtoa_r+0x2b4>
 800633c:	f000 80a0 	beq.w	8006480 <_dtoa_r+0x4b0>
 8006340:	f1ca 0600 	rsb	r6, sl, #0
 8006344:	4b9f      	ldr	r3, [pc, #636]	; (80065c4 <_dtoa_r+0x5f4>)
 8006346:	4fa0      	ldr	r7, [pc, #640]	; (80065c8 <_dtoa_r+0x5f8>)
 8006348:	f006 020f 	and.w	r2, r6, #15
 800634c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006358:	f7fa f96e 	bl	8000638 <__aeabi_dmul>
 800635c:	e9cd 0100 	strd	r0, r1, [sp]
 8006360:	1136      	asrs	r6, r6, #4
 8006362:	2300      	movs	r3, #0
 8006364:	2502      	movs	r5, #2
 8006366:	2e00      	cmp	r6, #0
 8006368:	d17f      	bne.n	800646a <_dtoa_r+0x49a>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e1      	bne.n	8006332 <_dtoa_r+0x362>
 800636e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 8087 	beq.w	8006484 <_dtoa_r+0x4b4>
 8006376:	e9dd 6700 	ldrd	r6, r7, [sp]
 800637a:	2200      	movs	r2, #0
 800637c:	4b93      	ldr	r3, [pc, #588]	; (80065cc <_dtoa_r+0x5fc>)
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7fa fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	d07c      	beq.n	8006484 <_dtoa_r+0x4b4>
 800638a:	f1b9 0f00 	cmp.w	r9, #0
 800638e:	d079      	beq.n	8006484 <_dtoa_r+0x4b4>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	dd35      	ble.n	8006402 <_dtoa_r+0x432>
 8006396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800639a:	9308      	str	r3, [sp, #32]
 800639c:	4639      	mov	r1, r7
 800639e:	2200      	movs	r2, #0
 80063a0:	4b8b      	ldr	r3, [pc, #556]	; (80065d0 <_dtoa_r+0x600>)
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7fa f948 	bl	8000638 <__aeabi_dmul>
 80063a8:	e9cd 0100 	strd	r0, r1, [sp]
 80063ac:	9f02      	ldr	r7, [sp, #8]
 80063ae:	3501      	adds	r5, #1
 80063b0:	4628      	mov	r0, r5
 80063b2:	f7fa f8d7 	bl	8000564 <__aeabi_i2d>
 80063b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ba:	f7fa f93d 	bl	8000638 <__aeabi_dmul>
 80063be:	2200      	movs	r2, #0
 80063c0:	4b84      	ldr	r3, [pc, #528]	; (80065d4 <_dtoa_r+0x604>)
 80063c2:	f7f9 ff83 	bl	80002cc <__adddf3>
 80063c6:	4605      	mov	r5, r0
 80063c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	d15d      	bne.n	800648c <_dtoa_r+0x4bc>
 80063d0:	2200      	movs	r2, #0
 80063d2:	4b81      	ldr	r3, [pc, #516]	; (80065d8 <_dtoa_r+0x608>)
 80063d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d8:	f7f9 ff76 	bl	80002c8 <__aeabi_dsub>
 80063dc:	462a      	mov	r2, r5
 80063de:	4633      	mov	r3, r6
 80063e0:	e9cd 0100 	strd	r0, r1, [sp]
 80063e4:	f7fa fbb8 	bl	8000b58 <__aeabi_dcmpgt>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	f040 8288 	bne.w	80068fe <_dtoa_r+0x92e>
 80063ee:	462a      	mov	r2, r5
 80063f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f8:	f7fa fb90 	bl	8000b1c <__aeabi_dcmplt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f040 827c 	bne.w	80068fa <_dtoa_r+0x92a>
 8006402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006406:	e9cd 2300 	strd	r2, r3, [sp]
 800640a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800640c:	2b00      	cmp	r3, #0
 800640e:	f2c0 8150 	blt.w	80066b2 <_dtoa_r+0x6e2>
 8006412:	f1ba 0f0e 	cmp.w	sl, #14
 8006416:	f300 814c 	bgt.w	80066b2 <_dtoa_r+0x6e2>
 800641a:	4b6a      	ldr	r3, [pc, #424]	; (80065c4 <_dtoa_r+0x5f4>)
 800641c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006420:	ed93 7b00 	vldr	d7, [r3]
 8006424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800642c:	f280 80d8 	bge.w	80065e0 <_dtoa_r+0x610>
 8006430:	f1b9 0f00 	cmp.w	r9, #0
 8006434:	f300 80d4 	bgt.w	80065e0 <_dtoa_r+0x610>
 8006438:	f040 825e 	bne.w	80068f8 <_dtoa_r+0x928>
 800643c:	2200      	movs	r2, #0
 800643e:	4b66      	ldr	r3, [pc, #408]	; (80065d8 <_dtoa_r+0x608>)
 8006440:	ec51 0b17 	vmov	r0, r1, d7
 8006444:	f7fa f8f8 	bl	8000638 <__aeabi_dmul>
 8006448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800644c:	f7fa fb7a 	bl	8000b44 <__aeabi_dcmpge>
 8006450:	464f      	mov	r7, r9
 8006452:	464e      	mov	r6, r9
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 8234 	bne.w	80068c2 <_dtoa_r+0x8f2>
 800645a:	2331      	movs	r3, #49	; 0x31
 800645c:	f10b 0501 	add.w	r5, fp, #1
 8006460:	f88b 3000 	strb.w	r3, [fp]
 8006464:	f10a 0a01 	add.w	sl, sl, #1
 8006468:	e22f      	b.n	80068ca <_dtoa_r+0x8fa>
 800646a:	07f2      	lsls	r2, r6, #31
 800646c:	d505      	bpl.n	800647a <_dtoa_r+0x4aa>
 800646e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006472:	f7fa f8e1 	bl	8000638 <__aeabi_dmul>
 8006476:	3501      	adds	r5, #1
 8006478:	2301      	movs	r3, #1
 800647a:	1076      	asrs	r6, r6, #1
 800647c:	3708      	adds	r7, #8
 800647e:	e772      	b.n	8006366 <_dtoa_r+0x396>
 8006480:	2502      	movs	r5, #2
 8006482:	e774      	b.n	800636e <_dtoa_r+0x39e>
 8006484:	f8cd a020 	str.w	sl, [sp, #32]
 8006488:	464f      	mov	r7, r9
 800648a:	e791      	b.n	80063b0 <_dtoa_r+0x3e0>
 800648c:	4b4d      	ldr	r3, [pc, #308]	; (80065c4 <_dtoa_r+0x5f4>)
 800648e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006492:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d047      	beq.n	800652c <_dtoa_r+0x55c>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	2000      	movs	r0, #0
 80064a2:	494e      	ldr	r1, [pc, #312]	; (80065dc <_dtoa_r+0x60c>)
 80064a4:	f7fa f9f2 	bl	800088c <__aeabi_ddiv>
 80064a8:	462a      	mov	r2, r5
 80064aa:	4633      	mov	r3, r6
 80064ac:	f7f9 ff0c 	bl	80002c8 <__aeabi_dsub>
 80064b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80064b4:	465d      	mov	r5, fp
 80064b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ba:	f7fa fb6d 	bl	8000b98 <__aeabi_d2iz>
 80064be:	4606      	mov	r6, r0
 80064c0:	f7fa f850 	bl	8000564 <__aeabi_i2d>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064cc:	f7f9 fefc 	bl	80002c8 <__aeabi_dsub>
 80064d0:	3630      	adds	r6, #48	; 0x30
 80064d2:	f805 6b01 	strb.w	r6, [r5], #1
 80064d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064da:	e9cd 0100 	strd	r0, r1, [sp]
 80064de:	f7fa fb1d 	bl	8000b1c <__aeabi_dcmplt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d163      	bne.n	80065ae <_dtoa_r+0x5de>
 80064e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ea:	2000      	movs	r0, #0
 80064ec:	4937      	ldr	r1, [pc, #220]	; (80065cc <_dtoa_r+0x5fc>)
 80064ee:	f7f9 feeb 	bl	80002c8 <__aeabi_dsub>
 80064f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064f6:	f7fa fb11 	bl	8000b1c <__aeabi_dcmplt>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	f040 80b7 	bne.w	800666e <_dtoa_r+0x69e>
 8006500:	eba5 030b 	sub.w	r3, r5, fp
 8006504:	429f      	cmp	r7, r3
 8006506:	f77f af7c 	ble.w	8006402 <_dtoa_r+0x432>
 800650a:	2200      	movs	r2, #0
 800650c:	4b30      	ldr	r3, [pc, #192]	; (80065d0 <_dtoa_r+0x600>)
 800650e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006512:	f7fa f891 	bl	8000638 <__aeabi_dmul>
 8006516:	2200      	movs	r2, #0
 8006518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800651c:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <_dtoa_r+0x600>)
 800651e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006522:	f7fa f889 	bl	8000638 <__aeabi_dmul>
 8006526:	e9cd 0100 	strd	r0, r1, [sp]
 800652a:	e7c4      	b.n	80064b6 <_dtoa_r+0x4e6>
 800652c:	462a      	mov	r2, r5
 800652e:	4633      	mov	r3, r6
 8006530:	f7fa f882 	bl	8000638 <__aeabi_dmul>
 8006534:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006538:	eb0b 0507 	add.w	r5, fp, r7
 800653c:	465e      	mov	r6, fp
 800653e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006542:	f7fa fb29 	bl	8000b98 <__aeabi_d2iz>
 8006546:	4607      	mov	r7, r0
 8006548:	f7fa f80c 	bl	8000564 <__aeabi_i2d>
 800654c:	3730      	adds	r7, #48	; 0x30
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006556:	f7f9 feb7 	bl	80002c8 <__aeabi_dsub>
 800655a:	f806 7b01 	strb.w	r7, [r6], #1
 800655e:	42ae      	cmp	r6, r5
 8006560:	e9cd 0100 	strd	r0, r1, [sp]
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	d126      	bne.n	80065b8 <_dtoa_r+0x5e8>
 800656a:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <_dtoa_r+0x60c>)
 800656c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006570:	f7f9 feac 	bl	80002cc <__adddf3>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800657c:	f7fa faec 	bl	8000b58 <__aeabi_dcmpgt>
 8006580:	2800      	cmp	r0, #0
 8006582:	d174      	bne.n	800666e <_dtoa_r+0x69e>
 8006584:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006588:	2000      	movs	r0, #0
 800658a:	4914      	ldr	r1, [pc, #80]	; (80065dc <_dtoa_r+0x60c>)
 800658c:	f7f9 fe9c 	bl	80002c8 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006598:	f7fa fac0 	bl	8000b1c <__aeabi_dcmplt>
 800659c:	2800      	cmp	r0, #0
 800659e:	f43f af30 	beq.w	8006402 <_dtoa_r+0x432>
 80065a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065a6:	2b30      	cmp	r3, #48	; 0x30
 80065a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80065ac:	d002      	beq.n	80065b4 <_dtoa_r+0x5e4>
 80065ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80065b2:	e04a      	b.n	800664a <_dtoa_r+0x67a>
 80065b4:	4615      	mov	r5, r2
 80065b6:	e7f4      	b.n	80065a2 <_dtoa_r+0x5d2>
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <_dtoa_r+0x600>)
 80065ba:	f7fa f83d 	bl	8000638 <__aeabi_dmul>
 80065be:	e9cd 0100 	strd	r0, r1, [sp]
 80065c2:	e7bc      	b.n	800653e <_dtoa_r+0x56e>
 80065c4:	08008920 	.word	0x08008920
 80065c8:	080088f8 	.word	0x080088f8
 80065cc:	3ff00000 	.word	0x3ff00000
 80065d0:	40240000 	.word	0x40240000
 80065d4:	401c0000 	.word	0x401c0000
 80065d8:	40140000 	.word	0x40140000
 80065dc:	3fe00000 	.word	0x3fe00000
 80065e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80065e4:	465d      	mov	r5, fp
 80065e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ea:	4630      	mov	r0, r6
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7fa f94d 	bl	800088c <__aeabi_ddiv>
 80065f2:	f7fa fad1 	bl	8000b98 <__aeabi_d2iz>
 80065f6:	4680      	mov	r8, r0
 80065f8:	f7f9 ffb4 	bl	8000564 <__aeabi_i2d>
 80065fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006600:	f7fa f81a 	bl	8000638 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006610:	f7f9 fe5a 	bl	80002c8 <__aeabi_dsub>
 8006614:	f805 6b01 	strb.w	r6, [r5], #1
 8006618:	eba5 060b 	sub.w	r6, r5, fp
 800661c:	45b1      	cmp	r9, r6
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	d139      	bne.n	8006698 <_dtoa_r+0x6c8>
 8006624:	f7f9 fe52 	bl	80002cc <__adddf3>
 8006628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	f7fa fa92 	bl	8000b58 <__aeabi_dcmpgt>
 8006634:	b9c8      	cbnz	r0, 800666a <_dtoa_r+0x69a>
 8006636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800663a:	4630      	mov	r0, r6
 800663c:	4639      	mov	r1, r7
 800663e:	f7fa fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8006642:	b110      	cbz	r0, 800664a <_dtoa_r+0x67a>
 8006644:	f018 0f01 	tst.w	r8, #1
 8006648:	d10f      	bne.n	800666a <_dtoa_r+0x69a>
 800664a:	9904      	ldr	r1, [sp, #16]
 800664c:	4620      	mov	r0, r4
 800664e:	f000 ffe8 	bl	8007622 <_Bfree>
 8006652:	2300      	movs	r3, #0
 8006654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006656:	702b      	strb	r3, [r5, #0]
 8006658:	f10a 0301 	add.w	r3, sl, #1
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8241 	beq.w	8006ae8 <_dtoa_r+0xb18>
 8006666:	601d      	str	r5, [r3, #0]
 8006668:	e23e      	b.n	8006ae8 <_dtoa_r+0xb18>
 800666a:	f8cd a020 	str.w	sl, [sp, #32]
 800666e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006672:	2a39      	cmp	r2, #57	; 0x39
 8006674:	f105 33ff 	add.w	r3, r5, #4294967295
 8006678:	d108      	bne.n	800668c <_dtoa_r+0x6bc>
 800667a:	459b      	cmp	fp, r3
 800667c:	d10a      	bne.n	8006694 <_dtoa_r+0x6c4>
 800667e:	9b08      	ldr	r3, [sp, #32]
 8006680:	3301      	adds	r3, #1
 8006682:	9308      	str	r3, [sp, #32]
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	f88b 3000 	strb.w	r3, [fp]
 800668a:	465b      	mov	r3, fp
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	3201      	adds	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e78c      	b.n	80065ae <_dtoa_r+0x5de>
 8006694:	461d      	mov	r5, r3
 8006696:	e7ea      	b.n	800666e <_dtoa_r+0x69e>
 8006698:	2200      	movs	r2, #0
 800669a:	4b9b      	ldr	r3, [pc, #620]	; (8006908 <_dtoa_r+0x938>)
 800669c:	f7f9 ffcc 	bl	8000638 <__aeabi_dmul>
 80066a0:	2200      	movs	r2, #0
 80066a2:	2300      	movs	r3, #0
 80066a4:	4606      	mov	r6, r0
 80066a6:	460f      	mov	r7, r1
 80066a8:	f7fa fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d09a      	beq.n	80065e6 <_dtoa_r+0x616>
 80066b0:	e7cb      	b.n	800664a <_dtoa_r+0x67a>
 80066b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	f000 808b 	beq.w	80067d0 <_dtoa_r+0x800>
 80066ba:	9a06      	ldr	r2, [sp, #24]
 80066bc:	2a01      	cmp	r2, #1
 80066be:	dc6e      	bgt.n	800679e <_dtoa_r+0x7ce>
 80066c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d067      	beq.n	8006796 <_dtoa_r+0x7c6>
 80066c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066ca:	9f07      	ldr	r7, [sp, #28]
 80066cc:	9d05      	ldr	r5, [sp, #20]
 80066ce:	9a05      	ldr	r2, [sp, #20]
 80066d0:	2101      	movs	r1, #1
 80066d2:	441a      	add	r2, r3
 80066d4:	4620      	mov	r0, r4
 80066d6:	9205      	str	r2, [sp, #20]
 80066d8:	4498      	add	r8, r3
 80066da:	f001 f880 	bl	80077de <__i2b>
 80066de:	4606      	mov	r6, r0
 80066e0:	2d00      	cmp	r5, #0
 80066e2:	dd0c      	ble.n	80066fe <_dtoa_r+0x72e>
 80066e4:	f1b8 0f00 	cmp.w	r8, #0
 80066e8:	dd09      	ble.n	80066fe <_dtoa_r+0x72e>
 80066ea:	4545      	cmp	r5, r8
 80066ec:	9a05      	ldr	r2, [sp, #20]
 80066ee:	462b      	mov	r3, r5
 80066f0:	bfa8      	it	ge
 80066f2:	4643      	movge	r3, r8
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	9205      	str	r2, [sp, #20]
 80066f8:	1aed      	subs	r5, r5, r3
 80066fa:	eba8 0803 	sub.w	r8, r8, r3
 80066fe:	9b07      	ldr	r3, [sp, #28]
 8006700:	b1eb      	cbz	r3, 800673e <_dtoa_r+0x76e>
 8006702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d067      	beq.n	80067d8 <_dtoa_r+0x808>
 8006708:	b18f      	cbz	r7, 800672e <_dtoa_r+0x75e>
 800670a:	4631      	mov	r1, r6
 800670c:	463a      	mov	r2, r7
 800670e:	4620      	mov	r0, r4
 8006710:	f001 f904 	bl	800791c <__pow5mult>
 8006714:	9a04      	ldr	r2, [sp, #16]
 8006716:	4601      	mov	r1, r0
 8006718:	4606      	mov	r6, r0
 800671a:	4620      	mov	r0, r4
 800671c:	f001 f868 	bl	80077f0 <__multiply>
 8006720:	9904      	ldr	r1, [sp, #16]
 8006722:	9008      	str	r0, [sp, #32]
 8006724:	4620      	mov	r0, r4
 8006726:	f000 ff7c 	bl	8007622 <_Bfree>
 800672a:	9b08      	ldr	r3, [sp, #32]
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	9b07      	ldr	r3, [sp, #28]
 8006730:	1bda      	subs	r2, r3, r7
 8006732:	d004      	beq.n	800673e <_dtoa_r+0x76e>
 8006734:	9904      	ldr	r1, [sp, #16]
 8006736:	4620      	mov	r0, r4
 8006738:	f001 f8f0 	bl	800791c <__pow5mult>
 800673c:	9004      	str	r0, [sp, #16]
 800673e:	2101      	movs	r1, #1
 8006740:	4620      	mov	r0, r4
 8006742:	f001 f84c 	bl	80077de <__i2b>
 8006746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006748:	4607      	mov	r7, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 81d0 	beq.w	8006af0 <_dtoa_r+0xb20>
 8006750:	461a      	mov	r2, r3
 8006752:	4601      	mov	r1, r0
 8006754:	4620      	mov	r0, r4
 8006756:	f001 f8e1 	bl	800791c <__pow5mult>
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	2b01      	cmp	r3, #1
 800675e:	4607      	mov	r7, r0
 8006760:	dc40      	bgt.n	80067e4 <_dtoa_r+0x814>
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d139      	bne.n	80067dc <_dtoa_r+0x80c>
 8006768:	9b01      	ldr	r3, [sp, #4]
 800676a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800676e:	2b00      	cmp	r3, #0
 8006770:	d136      	bne.n	80067e0 <_dtoa_r+0x810>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006778:	0d1b      	lsrs	r3, r3, #20
 800677a:	051b      	lsls	r3, r3, #20
 800677c:	b12b      	cbz	r3, 800678a <_dtoa_r+0x7ba>
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	3301      	adds	r3, #1
 8006782:	9305      	str	r3, [sp, #20]
 8006784:	f108 0801 	add.w	r8, r8, #1
 8006788:	2301      	movs	r3, #1
 800678a:	9307      	str	r3, [sp, #28]
 800678c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800678e:	2b00      	cmp	r3, #0
 8006790:	d12a      	bne.n	80067e8 <_dtoa_r+0x818>
 8006792:	2001      	movs	r0, #1
 8006794:	e030      	b.n	80067f8 <_dtoa_r+0x828>
 8006796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006798:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800679c:	e795      	b.n	80066ca <_dtoa_r+0x6fa>
 800679e:	9b07      	ldr	r3, [sp, #28]
 80067a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80067a4:	42bb      	cmp	r3, r7
 80067a6:	bfbf      	itttt	lt
 80067a8:	9b07      	ldrlt	r3, [sp, #28]
 80067aa:	9707      	strlt	r7, [sp, #28]
 80067ac:	1afa      	sublt	r2, r7, r3
 80067ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80067b0:	bfbb      	ittet	lt
 80067b2:	189b      	addlt	r3, r3, r2
 80067b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80067b6:	1bdf      	subge	r7, r3, r7
 80067b8:	2700      	movlt	r7, #0
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	bfb5      	itete	lt
 80067c0:	9b05      	ldrlt	r3, [sp, #20]
 80067c2:	9d05      	ldrge	r5, [sp, #20]
 80067c4:	eba3 0509 	sublt.w	r5, r3, r9
 80067c8:	464b      	movge	r3, r9
 80067ca:	bfb8      	it	lt
 80067cc:	2300      	movlt	r3, #0
 80067ce:	e77e      	b.n	80066ce <_dtoa_r+0x6fe>
 80067d0:	9f07      	ldr	r7, [sp, #28]
 80067d2:	9d05      	ldr	r5, [sp, #20]
 80067d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80067d6:	e783      	b.n	80066e0 <_dtoa_r+0x710>
 80067d8:	9a07      	ldr	r2, [sp, #28]
 80067da:	e7ab      	b.n	8006734 <_dtoa_r+0x764>
 80067dc:	2300      	movs	r3, #0
 80067de:	e7d4      	b.n	800678a <_dtoa_r+0x7ba>
 80067e0:	9b00      	ldr	r3, [sp, #0]
 80067e2:	e7d2      	b.n	800678a <_dtoa_r+0x7ba>
 80067e4:	2300      	movs	r3, #0
 80067e6:	9307      	str	r3, [sp, #28]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80067ee:	6918      	ldr	r0, [r3, #16]
 80067f0:	f000 ffa7 	bl	8007742 <__hi0bits>
 80067f4:	f1c0 0020 	rsb	r0, r0, #32
 80067f8:	4440      	add	r0, r8
 80067fa:	f010 001f 	ands.w	r0, r0, #31
 80067fe:	d047      	beq.n	8006890 <_dtoa_r+0x8c0>
 8006800:	f1c0 0320 	rsb	r3, r0, #32
 8006804:	2b04      	cmp	r3, #4
 8006806:	dd3b      	ble.n	8006880 <_dtoa_r+0x8b0>
 8006808:	9b05      	ldr	r3, [sp, #20]
 800680a:	f1c0 001c 	rsb	r0, r0, #28
 800680e:	4403      	add	r3, r0
 8006810:	9305      	str	r3, [sp, #20]
 8006812:	4405      	add	r5, r0
 8006814:	4480      	add	r8, r0
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dd05      	ble.n	8006828 <_dtoa_r+0x858>
 800681c:	461a      	mov	r2, r3
 800681e:	9904      	ldr	r1, [sp, #16]
 8006820:	4620      	mov	r0, r4
 8006822:	f001 f8c9 	bl	80079b8 <__lshift>
 8006826:	9004      	str	r0, [sp, #16]
 8006828:	f1b8 0f00 	cmp.w	r8, #0
 800682c:	dd05      	ble.n	800683a <_dtoa_r+0x86a>
 800682e:	4639      	mov	r1, r7
 8006830:	4642      	mov	r2, r8
 8006832:	4620      	mov	r0, r4
 8006834:	f001 f8c0 	bl	80079b8 <__lshift>
 8006838:	4607      	mov	r7, r0
 800683a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800683c:	b353      	cbz	r3, 8006894 <_dtoa_r+0x8c4>
 800683e:	4639      	mov	r1, r7
 8006840:	9804      	ldr	r0, [sp, #16]
 8006842:	f001 f90d 	bl	8007a60 <__mcmp>
 8006846:	2800      	cmp	r0, #0
 8006848:	da24      	bge.n	8006894 <_dtoa_r+0x8c4>
 800684a:	2300      	movs	r3, #0
 800684c:	220a      	movs	r2, #10
 800684e:	9904      	ldr	r1, [sp, #16]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fefd 	bl	8007650 <__multadd>
 8006856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006858:	9004      	str	r0, [sp, #16]
 800685a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 814d 	beq.w	8006afe <_dtoa_r+0xb2e>
 8006864:	2300      	movs	r3, #0
 8006866:	4631      	mov	r1, r6
 8006868:	220a      	movs	r2, #10
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fef0 	bl	8007650 <__multadd>
 8006870:	9b02      	ldr	r3, [sp, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	4606      	mov	r6, r0
 8006876:	dc4f      	bgt.n	8006918 <_dtoa_r+0x948>
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	2b02      	cmp	r3, #2
 800687c:	dd4c      	ble.n	8006918 <_dtoa_r+0x948>
 800687e:	e011      	b.n	80068a4 <_dtoa_r+0x8d4>
 8006880:	d0c9      	beq.n	8006816 <_dtoa_r+0x846>
 8006882:	9a05      	ldr	r2, [sp, #20]
 8006884:	331c      	adds	r3, #28
 8006886:	441a      	add	r2, r3
 8006888:	9205      	str	r2, [sp, #20]
 800688a:	441d      	add	r5, r3
 800688c:	4498      	add	r8, r3
 800688e:	e7c2      	b.n	8006816 <_dtoa_r+0x846>
 8006890:	4603      	mov	r3, r0
 8006892:	e7f6      	b.n	8006882 <_dtoa_r+0x8b2>
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	dc38      	bgt.n	800690c <_dtoa_r+0x93c>
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	2b02      	cmp	r3, #2
 800689e:	dd35      	ble.n	800690c <_dtoa_r+0x93c>
 80068a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80068a4:	9b02      	ldr	r3, [sp, #8]
 80068a6:	b963      	cbnz	r3, 80068c2 <_dtoa_r+0x8f2>
 80068a8:	4639      	mov	r1, r7
 80068aa:	2205      	movs	r2, #5
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 fecf 	bl	8007650 <__multadd>
 80068b2:	4601      	mov	r1, r0
 80068b4:	4607      	mov	r7, r0
 80068b6:	9804      	ldr	r0, [sp, #16]
 80068b8:	f001 f8d2 	bl	8007a60 <__mcmp>
 80068bc:	2800      	cmp	r0, #0
 80068be:	f73f adcc 	bgt.w	800645a <_dtoa_r+0x48a>
 80068c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c4:	465d      	mov	r5, fp
 80068c6:	ea6f 0a03 	mvn.w	sl, r3
 80068ca:	f04f 0900 	mov.w	r9, #0
 80068ce:	4639      	mov	r1, r7
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fea6 	bl	8007622 <_Bfree>
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	f43f aeb7 	beq.w	800664a <_dtoa_r+0x67a>
 80068dc:	f1b9 0f00 	cmp.w	r9, #0
 80068e0:	d005      	beq.n	80068ee <_dtoa_r+0x91e>
 80068e2:	45b1      	cmp	r9, r6
 80068e4:	d003      	beq.n	80068ee <_dtoa_r+0x91e>
 80068e6:	4649      	mov	r1, r9
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fe9a 	bl	8007622 <_Bfree>
 80068ee:	4631      	mov	r1, r6
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fe96 	bl	8007622 <_Bfree>
 80068f6:	e6a8      	b.n	800664a <_dtoa_r+0x67a>
 80068f8:	2700      	movs	r7, #0
 80068fa:	463e      	mov	r6, r7
 80068fc:	e7e1      	b.n	80068c2 <_dtoa_r+0x8f2>
 80068fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006902:	463e      	mov	r6, r7
 8006904:	e5a9      	b.n	800645a <_dtoa_r+0x48a>
 8006906:	bf00      	nop
 8006908:	40240000 	.word	0x40240000
 800690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80fa 	beq.w	8006b0c <_dtoa_r+0xb3c>
 8006918:	2d00      	cmp	r5, #0
 800691a:	dd05      	ble.n	8006928 <_dtoa_r+0x958>
 800691c:	4631      	mov	r1, r6
 800691e:	462a      	mov	r2, r5
 8006920:	4620      	mov	r0, r4
 8006922:	f001 f849 	bl	80079b8 <__lshift>
 8006926:	4606      	mov	r6, r0
 8006928:	9b07      	ldr	r3, [sp, #28]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d04c      	beq.n	80069c8 <_dtoa_r+0x9f8>
 800692e:	6871      	ldr	r1, [r6, #4]
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fe42 	bl	80075ba <_Balloc>
 8006936:	6932      	ldr	r2, [r6, #16]
 8006938:	3202      	adds	r2, #2
 800693a:	4605      	mov	r5, r0
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	f106 010c 	add.w	r1, r6, #12
 8006942:	300c      	adds	r0, #12
 8006944:	f000 fe2e 	bl	80075a4 <memcpy>
 8006948:	2201      	movs	r2, #1
 800694a:	4629      	mov	r1, r5
 800694c:	4620      	mov	r0, r4
 800694e:	f001 f833 	bl	80079b8 <__lshift>
 8006952:	9b00      	ldr	r3, [sp, #0]
 8006954:	f8cd b014 	str.w	fp, [sp, #20]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	46b1      	mov	r9, r6
 800695e:	9307      	str	r3, [sp, #28]
 8006960:	4606      	mov	r6, r0
 8006962:	4639      	mov	r1, r7
 8006964:	9804      	ldr	r0, [sp, #16]
 8006966:	f7ff faa5 	bl	8005eb4 <quorem>
 800696a:	4649      	mov	r1, r9
 800696c:	4605      	mov	r5, r0
 800696e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006972:	9804      	ldr	r0, [sp, #16]
 8006974:	f001 f874 	bl	8007a60 <__mcmp>
 8006978:	4632      	mov	r2, r6
 800697a:	9000      	str	r0, [sp, #0]
 800697c:	4639      	mov	r1, r7
 800697e:	4620      	mov	r0, r4
 8006980:	f001 f888 	bl	8007a94 <__mdiff>
 8006984:	68c3      	ldr	r3, [r0, #12]
 8006986:	4602      	mov	r2, r0
 8006988:	bb03      	cbnz	r3, 80069cc <_dtoa_r+0x9fc>
 800698a:	4601      	mov	r1, r0
 800698c:	9008      	str	r0, [sp, #32]
 800698e:	9804      	ldr	r0, [sp, #16]
 8006990:	f001 f866 	bl	8007a60 <__mcmp>
 8006994:	9a08      	ldr	r2, [sp, #32]
 8006996:	4603      	mov	r3, r0
 8006998:	4611      	mov	r1, r2
 800699a:	4620      	mov	r0, r4
 800699c:	9308      	str	r3, [sp, #32]
 800699e:	f000 fe40 	bl	8007622 <_Bfree>
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	b9a3      	cbnz	r3, 80069d0 <_dtoa_r+0xa00>
 80069a6:	9a06      	ldr	r2, [sp, #24]
 80069a8:	b992      	cbnz	r2, 80069d0 <_dtoa_r+0xa00>
 80069aa:	9a07      	ldr	r2, [sp, #28]
 80069ac:	b982      	cbnz	r2, 80069d0 <_dtoa_r+0xa00>
 80069ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069b2:	d029      	beq.n	8006a08 <_dtoa_r+0xa38>
 80069b4:	9b00      	ldr	r3, [sp, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	dd01      	ble.n	80069be <_dtoa_r+0x9ee>
 80069ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	1c5d      	adds	r5, r3, #1
 80069c2:	f883 8000 	strb.w	r8, [r3]
 80069c6:	e782      	b.n	80068ce <_dtoa_r+0x8fe>
 80069c8:	4630      	mov	r0, r6
 80069ca:	e7c2      	b.n	8006952 <_dtoa_r+0x982>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e7e3      	b.n	8006998 <_dtoa_r+0x9c8>
 80069d0:	9a00      	ldr	r2, [sp, #0]
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	db04      	blt.n	80069e0 <_dtoa_r+0xa10>
 80069d6:	d125      	bne.n	8006a24 <_dtoa_r+0xa54>
 80069d8:	9a06      	ldr	r2, [sp, #24]
 80069da:	bb1a      	cbnz	r2, 8006a24 <_dtoa_r+0xa54>
 80069dc:	9a07      	ldr	r2, [sp, #28]
 80069de:	bb0a      	cbnz	r2, 8006a24 <_dtoa_r+0xa54>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	ddec      	ble.n	80069be <_dtoa_r+0x9ee>
 80069e4:	2201      	movs	r2, #1
 80069e6:	9904      	ldr	r1, [sp, #16]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 ffe5 	bl	80079b8 <__lshift>
 80069ee:	4639      	mov	r1, r7
 80069f0:	9004      	str	r0, [sp, #16]
 80069f2:	f001 f835 	bl	8007a60 <__mcmp>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	dc03      	bgt.n	8006a02 <_dtoa_r+0xa32>
 80069fa:	d1e0      	bne.n	80069be <_dtoa_r+0x9ee>
 80069fc:	f018 0f01 	tst.w	r8, #1
 8006a00:	d0dd      	beq.n	80069be <_dtoa_r+0x9ee>
 8006a02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a06:	d1d8      	bne.n	80069ba <_dtoa_r+0x9ea>
 8006a08:	9b05      	ldr	r3, [sp, #20]
 8006a0a:	9a05      	ldr	r2, [sp, #20]
 8006a0c:	1c5d      	adds	r5, r3, #1
 8006a0e:	2339      	movs	r3, #57	; 0x39
 8006a10:	7013      	strb	r3, [r2, #0]
 8006a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a16:	2b39      	cmp	r3, #57	; 0x39
 8006a18:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a1c:	d04f      	beq.n	8006abe <_dtoa_r+0xaee>
 8006a1e:	3301      	adds	r3, #1
 8006a20:	7013      	strb	r3, [r2, #0]
 8006a22:	e754      	b.n	80068ce <_dtoa_r+0x8fe>
 8006a24:	9a05      	ldr	r2, [sp, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f102 0501 	add.w	r5, r2, #1
 8006a2c:	dd06      	ble.n	8006a3c <_dtoa_r+0xa6c>
 8006a2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a32:	d0e9      	beq.n	8006a08 <_dtoa_r+0xa38>
 8006a34:	f108 0801 	add.w	r8, r8, #1
 8006a38:	9b05      	ldr	r3, [sp, #20]
 8006a3a:	e7c2      	b.n	80069c2 <_dtoa_r+0x9f2>
 8006a3c:	9a02      	ldr	r2, [sp, #8]
 8006a3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006a42:	eba5 030b 	sub.w	r3, r5, fp
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d021      	beq.n	8006a8e <_dtoa_r+0xabe>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	220a      	movs	r2, #10
 8006a4e:	9904      	ldr	r1, [sp, #16]
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fdfd 	bl	8007650 <__multadd>
 8006a56:	45b1      	cmp	r9, r6
 8006a58:	9004      	str	r0, [sp, #16]
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	f04f 020a 	mov.w	r2, #10
 8006a62:	4649      	mov	r1, r9
 8006a64:	4620      	mov	r0, r4
 8006a66:	d105      	bne.n	8006a74 <_dtoa_r+0xaa4>
 8006a68:	f000 fdf2 	bl	8007650 <__multadd>
 8006a6c:	4681      	mov	r9, r0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	9505      	str	r5, [sp, #20]
 8006a72:	e776      	b.n	8006962 <_dtoa_r+0x992>
 8006a74:	f000 fdec 	bl	8007650 <__multadd>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4681      	mov	r9, r0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	220a      	movs	r2, #10
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fde5 	bl	8007650 <__multadd>
 8006a86:	4606      	mov	r6, r0
 8006a88:	e7f2      	b.n	8006a70 <_dtoa_r+0xaa0>
 8006a8a:	f04f 0900 	mov.w	r9, #0
 8006a8e:	2201      	movs	r2, #1
 8006a90:	9904      	ldr	r1, [sp, #16]
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 ff90 	bl	80079b8 <__lshift>
 8006a98:	4639      	mov	r1, r7
 8006a9a:	9004      	str	r0, [sp, #16]
 8006a9c:	f000 ffe0 	bl	8007a60 <__mcmp>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	dcb6      	bgt.n	8006a12 <_dtoa_r+0xa42>
 8006aa4:	d102      	bne.n	8006aac <_dtoa_r+0xadc>
 8006aa6:	f018 0f01 	tst.w	r8, #1
 8006aaa:	d1b2      	bne.n	8006a12 <_dtoa_r+0xa42>
 8006aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ab0:	2b30      	cmp	r3, #48	; 0x30
 8006ab2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ab6:	f47f af0a 	bne.w	80068ce <_dtoa_r+0x8fe>
 8006aba:	4615      	mov	r5, r2
 8006abc:	e7f6      	b.n	8006aac <_dtoa_r+0xadc>
 8006abe:	4593      	cmp	fp, r2
 8006ac0:	d105      	bne.n	8006ace <_dtoa_r+0xafe>
 8006ac2:	2331      	movs	r3, #49	; 0x31
 8006ac4:	f10a 0a01 	add.w	sl, sl, #1
 8006ac8:	f88b 3000 	strb.w	r3, [fp]
 8006acc:	e6ff      	b.n	80068ce <_dtoa_r+0x8fe>
 8006ace:	4615      	mov	r5, r2
 8006ad0:	e79f      	b.n	8006a12 <_dtoa_r+0xa42>
 8006ad2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006b38 <_dtoa_r+0xb68>
 8006ad6:	e007      	b.n	8006ae8 <_dtoa_r+0xb18>
 8006ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ada:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006b3c <_dtoa_r+0xb6c>
 8006ade:	b11b      	cbz	r3, 8006ae8 <_dtoa_r+0xb18>
 8006ae0:	f10b 0308 	add.w	r3, fp, #8
 8006ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4658      	mov	r0, fp
 8006aea:	b017      	add	sp, #92	; 0x5c
 8006aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	f77f ae35 	ble.w	8006762 <_dtoa_r+0x792>
 8006af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006afa:	9307      	str	r3, [sp, #28]
 8006afc:	e649      	b.n	8006792 <_dtoa_r+0x7c2>
 8006afe:	9b02      	ldr	r3, [sp, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc03      	bgt.n	8006b0c <_dtoa_r+0xb3c>
 8006b04:	9b06      	ldr	r3, [sp, #24]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	f73f aecc 	bgt.w	80068a4 <_dtoa_r+0x8d4>
 8006b0c:	465d      	mov	r5, fp
 8006b0e:	4639      	mov	r1, r7
 8006b10:	9804      	ldr	r0, [sp, #16]
 8006b12:	f7ff f9cf 	bl	8005eb4 <quorem>
 8006b16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b1a:	f805 8b01 	strb.w	r8, [r5], #1
 8006b1e:	9a02      	ldr	r2, [sp, #8]
 8006b20:	eba5 030b 	sub.w	r3, r5, fp
 8006b24:	429a      	cmp	r2, r3
 8006b26:	ddb0      	ble.n	8006a8a <_dtoa_r+0xaba>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	220a      	movs	r2, #10
 8006b2c:	9904      	ldr	r1, [sp, #16]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 fd8e 	bl	8007650 <__multadd>
 8006b34:	9004      	str	r0, [sp, #16]
 8006b36:	e7ea      	b.n	8006b0e <_dtoa_r+0xb3e>
 8006b38:	080087f8 	.word	0x080087f8
 8006b3c:	08008878 	.word	0x08008878

08006b40 <__sflush_r>:
 8006b40:	898a      	ldrh	r2, [r1, #12]
 8006b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	4605      	mov	r5, r0
 8006b48:	0710      	lsls	r0, r2, #28
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	d458      	bmi.n	8006c00 <__sflush_r+0xc0>
 8006b4e:	684b      	ldr	r3, [r1, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dc05      	bgt.n	8006b60 <__sflush_r+0x20>
 8006b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc02      	bgt.n	8006b60 <__sflush_r+0x20>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	d0f9      	beq.n	8006b5a <__sflush_r+0x1a>
 8006b66:	2300      	movs	r3, #0
 8006b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b6c:	682f      	ldr	r7, [r5, #0]
 8006b6e:	6a21      	ldr	r1, [r4, #32]
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	d032      	beq.n	8006bda <__sflush_r+0x9a>
 8006b74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	075a      	lsls	r2, r3, #29
 8006b7a:	d505      	bpl.n	8006b88 <__sflush_r+0x48>
 8006b7c:	6863      	ldr	r3, [r4, #4]
 8006b7e:	1ac0      	subs	r0, r0, r3
 8006b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b82:	b10b      	cbz	r3, 8006b88 <__sflush_r+0x48>
 8006b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b86:	1ac0      	subs	r0, r0, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8e:	6a21      	ldr	r1, [r4, #32]
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b0      	blx	r6
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	d106      	bne.n	8006ba8 <__sflush_r+0x68>
 8006b9a:	6829      	ldr	r1, [r5, #0]
 8006b9c:	291d      	cmp	r1, #29
 8006b9e:	d848      	bhi.n	8006c32 <__sflush_r+0xf2>
 8006ba0:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <__sflush_r+0x108>)
 8006ba2:	40ca      	lsrs	r2, r1
 8006ba4:	07d6      	lsls	r6, r2, #31
 8006ba6:	d544      	bpl.n	8006c32 <__sflush_r+0xf2>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	6062      	str	r2, [r4, #4]
 8006bac:	04d9      	lsls	r1, r3, #19
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	d504      	bpl.n	8006bbe <__sflush_r+0x7e>
 8006bb4:	1c42      	adds	r2, r0, #1
 8006bb6:	d101      	bne.n	8006bbc <__sflush_r+0x7c>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b903      	cbnz	r3, 8006bbe <__sflush_r+0x7e>
 8006bbc:	6560      	str	r0, [r4, #84]	; 0x54
 8006bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bc0:	602f      	str	r7, [r5, #0]
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d0c9      	beq.n	8006b5a <__sflush_r+0x1a>
 8006bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	d002      	beq.n	8006bd4 <__sflush_r+0x94>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f001 f900 	bl	8007dd4 <_free_r>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	6360      	str	r0, [r4, #52]	; 0x34
 8006bd8:	e7c0      	b.n	8006b5c <__sflush_r+0x1c>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b0      	blx	r6
 8006be0:	1c41      	adds	r1, r0, #1
 8006be2:	d1c8      	bne.n	8006b76 <__sflush_r+0x36>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0c5      	beq.n	8006b76 <__sflush_r+0x36>
 8006bea:	2b1d      	cmp	r3, #29
 8006bec:	d001      	beq.n	8006bf2 <__sflush_r+0xb2>
 8006bee:	2b16      	cmp	r3, #22
 8006bf0:	d101      	bne.n	8006bf6 <__sflush_r+0xb6>
 8006bf2:	602f      	str	r7, [r5, #0]
 8006bf4:	e7b1      	b.n	8006b5a <__sflush_r+0x1a>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	e7ad      	b.n	8006b5c <__sflush_r+0x1c>
 8006c00:	690f      	ldr	r7, [r1, #16]
 8006c02:	2f00      	cmp	r7, #0
 8006c04:	d0a9      	beq.n	8006b5a <__sflush_r+0x1a>
 8006c06:	0793      	lsls	r3, r2, #30
 8006c08:	680e      	ldr	r6, [r1, #0]
 8006c0a:	bf08      	it	eq
 8006c0c:	694b      	ldreq	r3, [r1, #20]
 8006c0e:	600f      	str	r7, [r1, #0]
 8006c10:	bf18      	it	ne
 8006c12:	2300      	movne	r3, #0
 8006c14:	eba6 0807 	sub.w	r8, r6, r7
 8006c18:	608b      	str	r3, [r1, #8]
 8006c1a:	f1b8 0f00 	cmp.w	r8, #0
 8006c1e:	dd9c      	ble.n	8006b5a <__sflush_r+0x1a>
 8006c20:	4643      	mov	r3, r8
 8006c22:	463a      	mov	r2, r7
 8006c24:	6a21      	ldr	r1, [r4, #32]
 8006c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b0      	blx	r6
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	dc06      	bgt.n	8006c3e <__sflush_r+0xfe>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	e78e      	b.n	8006b5c <__sflush_r+0x1c>
 8006c3e:	4407      	add	r7, r0
 8006c40:	eba8 0800 	sub.w	r8, r8, r0
 8006c44:	e7e9      	b.n	8006c1a <__sflush_r+0xda>
 8006c46:	bf00      	nop
 8006c48:	20400001 	.word	0x20400001

08006c4c <_fflush_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	690b      	ldr	r3, [r1, #16]
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b1db      	cbz	r3, 8006c8e <_fflush_r+0x42>
 8006c56:	b118      	cbz	r0, 8006c60 <_fflush_r+0x14>
 8006c58:	6983      	ldr	r3, [r0, #24]
 8006c5a:	b90b      	cbnz	r3, 8006c60 <_fflush_r+0x14>
 8006c5c:	f000 f860 	bl	8006d20 <__sinit>
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <_fflush_r+0x48>)
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d109      	bne.n	8006c7a <_fflush_r+0x2e>
 8006c66:	686c      	ldr	r4, [r5, #4]
 8006c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6c:	b17b      	cbz	r3, 8006c8e <_fflush_r+0x42>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c76:	f7ff bf63 	b.w	8006b40 <__sflush_r>
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <_fflush_r+0x4c>)
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d101      	bne.n	8006c84 <_fflush_r+0x38>
 8006c80:	68ac      	ldr	r4, [r5, #8]
 8006c82:	e7f1      	b.n	8006c68 <_fflush_r+0x1c>
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <_fflush_r+0x50>)
 8006c86:	429c      	cmp	r4, r3
 8006c88:	bf08      	it	eq
 8006c8a:	68ec      	ldreq	r4, [r5, #12]
 8006c8c:	e7ec      	b.n	8006c68 <_fflush_r+0x1c>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	bd38      	pop	{r3, r4, r5, pc}
 8006c92:	bf00      	nop
 8006c94:	080088a8 	.word	0x080088a8
 8006c98:	080088c8 	.word	0x080088c8
 8006c9c:	08008888 	.word	0x08008888

08006ca0 <std>:
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	b510      	push	{r4, lr}
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8006caa:	6083      	str	r3, [r0, #8]
 8006cac:	8181      	strh	r1, [r0, #12]
 8006cae:	6643      	str	r3, [r0, #100]	; 0x64
 8006cb0:	81c2      	strh	r2, [r0, #14]
 8006cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cb6:	6183      	str	r3, [r0, #24]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	2208      	movs	r2, #8
 8006cbc:	305c      	adds	r0, #92	; 0x5c
 8006cbe:	f7fd fabb 	bl	8004238 <memset>
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <std+0x38>)
 8006cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <std+0x3c>)
 8006cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <std+0x40>)
 8006ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <std+0x44>)
 8006cd0:	6224      	str	r4, [r4, #32]
 8006cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	bf00      	nop
 8006cd8:	080081e9 	.word	0x080081e9
 8006cdc:	0800820b 	.word	0x0800820b
 8006ce0:	08008243 	.word	0x08008243
 8006ce4:	08008267 	.word	0x08008267

08006ce8 <_cleanup_r>:
 8006ce8:	4901      	ldr	r1, [pc, #4]	; (8006cf0 <_cleanup_r+0x8>)
 8006cea:	f000 b885 	b.w	8006df8 <_fwalk_reent>
 8006cee:	bf00      	nop
 8006cf0:	08006c4d 	.word	0x08006c4d

08006cf4 <__sfmoreglue>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	1e4a      	subs	r2, r1, #1
 8006cf8:	2568      	movs	r5, #104	; 0x68
 8006cfa:	4355      	muls	r5, r2
 8006cfc:	460e      	mov	r6, r1
 8006cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d02:	f001 f8b5 	bl	8007e70 <_malloc_r>
 8006d06:	4604      	mov	r4, r0
 8006d08:	b140      	cbz	r0, 8006d1c <__sfmoreglue+0x28>
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d10:	300c      	adds	r0, #12
 8006d12:	60a0      	str	r0, [r4, #8]
 8006d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d18:	f7fd fa8e 	bl	8004238 <memset>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}

08006d20 <__sinit>:
 8006d20:	6983      	ldr	r3, [r0, #24]
 8006d22:	b510      	push	{r4, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	bb33      	cbnz	r3, 8006d76 <__sinit+0x56>
 8006d28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d2c:	6503      	str	r3, [r0, #80]	; 0x50
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <__sinit+0x58>)
 8006d30:	4a12      	ldr	r2, [pc, #72]	; (8006d7c <__sinit+0x5c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6282      	str	r2, [r0, #40]	; 0x28
 8006d36:	4298      	cmp	r0, r3
 8006d38:	bf04      	itt	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	6183      	streq	r3, [r0, #24]
 8006d3e:	f000 f81f 	bl	8006d80 <__sfp>
 8006d42:	6060      	str	r0, [r4, #4]
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 f81b 	bl	8006d80 <__sfp>
 8006d4a:	60a0      	str	r0, [r4, #8]
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f817 	bl	8006d80 <__sfp>
 8006d52:	2200      	movs	r2, #0
 8006d54:	60e0      	str	r0, [r4, #12]
 8006d56:	2104      	movs	r1, #4
 8006d58:	6860      	ldr	r0, [r4, #4]
 8006d5a:	f7ff ffa1 	bl	8006ca0 <std>
 8006d5e:	2201      	movs	r2, #1
 8006d60:	2109      	movs	r1, #9
 8006d62:	68a0      	ldr	r0, [r4, #8]
 8006d64:	f7ff ff9c 	bl	8006ca0 <std>
 8006d68:	2202      	movs	r2, #2
 8006d6a:	2112      	movs	r1, #18
 8006d6c:	68e0      	ldr	r0, [r4, #12]
 8006d6e:	f7ff ff97 	bl	8006ca0 <std>
 8006d72:	2301      	movs	r3, #1
 8006d74:	61a3      	str	r3, [r4, #24]
 8006d76:	bd10      	pop	{r4, pc}
 8006d78:	080087e4 	.word	0x080087e4
 8006d7c:	08006ce9 	.word	0x08006ce9

08006d80 <__sfp>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <__sfp+0x70>)
 8006d84:	681e      	ldr	r6, [r3, #0]
 8006d86:	69b3      	ldr	r3, [r6, #24]
 8006d88:	4607      	mov	r7, r0
 8006d8a:	b913      	cbnz	r3, 8006d92 <__sfp+0x12>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff ffc7 	bl	8006d20 <__sinit>
 8006d92:	3648      	adds	r6, #72	; 0x48
 8006d94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	d503      	bpl.n	8006da4 <__sfp+0x24>
 8006d9c:	6833      	ldr	r3, [r6, #0]
 8006d9e:	b133      	cbz	r3, 8006dae <__sfp+0x2e>
 8006da0:	6836      	ldr	r6, [r6, #0]
 8006da2:	e7f7      	b.n	8006d94 <__sfp+0x14>
 8006da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006da8:	b16d      	cbz	r5, 8006dc6 <__sfp+0x46>
 8006daa:	3468      	adds	r4, #104	; 0x68
 8006dac:	e7f4      	b.n	8006d98 <__sfp+0x18>
 8006dae:	2104      	movs	r1, #4
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff9f 	bl	8006cf4 <__sfmoreglue>
 8006db6:	6030      	str	r0, [r6, #0]
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d1f1      	bne.n	8006da0 <__sfp+0x20>
 8006dbc:	230c      	movs	r3, #12
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <__sfp+0x74>)
 8006dc8:	6665      	str	r5, [r4, #100]	; 0x64
 8006dca:	e9c4 5500 	strd	r5, r5, [r4]
 8006dce:	60a5      	str	r5, [r4, #8]
 8006dd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006dd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006de0:	f7fd fa2a 	bl	8004238 <memset>
 8006de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dec:	e7e9      	b.n	8006dc2 <__sfp+0x42>
 8006dee:	bf00      	nop
 8006df0:	080087e4 	.word	0x080087e4
 8006df4:	ffff0001 	.word	0xffff0001

08006df8 <_fwalk_reent>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	4689      	mov	r9, r1
 8006e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e04:	2600      	movs	r6, #0
 8006e06:	b914      	cbnz	r4, 8006e0e <_fwalk_reent+0x16>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006e12:	3f01      	subs	r7, #1
 8006e14:	d501      	bpl.n	8006e1a <_fwalk_reent+0x22>
 8006e16:	6824      	ldr	r4, [r4, #0]
 8006e18:	e7f5      	b.n	8006e06 <_fwalk_reent+0xe>
 8006e1a:	89ab      	ldrh	r3, [r5, #12]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d907      	bls.n	8006e30 <_fwalk_reent+0x38>
 8006e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e24:	3301      	adds	r3, #1
 8006e26:	d003      	beq.n	8006e30 <_fwalk_reent+0x38>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	47c8      	blx	r9
 8006e2e:	4306      	orrs	r6, r0
 8006e30:	3568      	adds	r5, #104	; 0x68
 8006e32:	e7ee      	b.n	8006e12 <_fwalk_reent+0x1a>

08006e34 <rshift>:
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	6906      	ldr	r6, [r0, #16]
 8006e38:	114b      	asrs	r3, r1, #5
 8006e3a:	429e      	cmp	r6, r3
 8006e3c:	f100 0414 	add.w	r4, r0, #20
 8006e40:	dd30      	ble.n	8006ea4 <rshift+0x70>
 8006e42:	f011 011f 	ands.w	r1, r1, #31
 8006e46:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006e4a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006e4e:	d108      	bne.n	8006e62 <rshift+0x2e>
 8006e50:	4621      	mov	r1, r4
 8006e52:	42b2      	cmp	r2, r6
 8006e54:	460b      	mov	r3, r1
 8006e56:	d211      	bcs.n	8006e7c <rshift+0x48>
 8006e58:	f852 3b04 	ldr.w	r3, [r2], #4
 8006e5c:	f841 3b04 	str.w	r3, [r1], #4
 8006e60:	e7f7      	b.n	8006e52 <rshift+0x1e>
 8006e62:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006e66:	f1c1 0c20 	rsb	ip, r1, #32
 8006e6a:	40cd      	lsrs	r5, r1
 8006e6c:	3204      	adds	r2, #4
 8006e6e:	4623      	mov	r3, r4
 8006e70:	42b2      	cmp	r2, r6
 8006e72:	4617      	mov	r7, r2
 8006e74:	d30c      	bcc.n	8006e90 <rshift+0x5c>
 8006e76:	601d      	str	r5, [r3, #0]
 8006e78:	b105      	cbz	r5, 8006e7c <rshift+0x48>
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	1b1a      	subs	r2, r3, r4
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e84:	bf08      	it	eq
 8006e86:	2300      	moveq	r3, #0
 8006e88:	6102      	str	r2, [r0, #16]
 8006e8a:	bf08      	it	eq
 8006e8c:	6143      	streq	r3, [r0, #20]
 8006e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e90:	683f      	ldr	r7, [r7, #0]
 8006e92:	fa07 f70c 	lsl.w	r7, r7, ip
 8006e96:	433d      	orrs	r5, r7
 8006e98:	f843 5b04 	str.w	r5, [r3], #4
 8006e9c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006ea0:	40cd      	lsrs	r5, r1
 8006ea2:	e7e5      	b.n	8006e70 <rshift+0x3c>
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	e7e9      	b.n	8006e7c <rshift+0x48>

08006ea8 <__hexdig_fun>:
 8006ea8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	d802      	bhi.n	8006eb6 <__hexdig_fun+0xe>
 8006eb0:	3820      	subs	r0, #32
 8006eb2:	b2c0      	uxtb	r0, r0
 8006eb4:	4770      	bx	lr
 8006eb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d801      	bhi.n	8006ec2 <__hexdig_fun+0x1a>
 8006ebe:	3847      	subs	r0, #71	; 0x47
 8006ec0:	e7f7      	b.n	8006eb2 <__hexdig_fun+0xa>
 8006ec2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d801      	bhi.n	8006ece <__hexdig_fun+0x26>
 8006eca:	3827      	subs	r0, #39	; 0x27
 8006ecc:	e7f1      	b.n	8006eb2 <__hexdig_fun+0xa>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	4770      	bx	lr

08006ed2 <__gethex>:
 8006ed2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed6:	b08b      	sub	sp, #44	; 0x2c
 8006ed8:	468a      	mov	sl, r1
 8006eda:	9002      	str	r0, [sp, #8]
 8006edc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006ede:	9306      	str	r3, [sp, #24]
 8006ee0:	4690      	mov	r8, r2
 8006ee2:	f000 fad0 	bl	8007486 <__localeconv_l>
 8006ee6:	6803      	ldr	r3, [r0, #0]
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7f9 f990 	bl	8000210 <strlen>
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	9001      	str	r0, [sp, #4]
 8006ef4:	4403      	add	r3, r0
 8006ef6:	f04f 0b00 	mov.w	fp, #0
 8006efa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006efe:	9307      	str	r3, [sp, #28]
 8006f00:	f8da 3000 	ldr.w	r3, [sl]
 8006f04:	3302      	adds	r3, #2
 8006f06:	461f      	mov	r7, r3
 8006f08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f0c:	2830      	cmp	r0, #48	; 0x30
 8006f0e:	d06c      	beq.n	8006fea <__gethex+0x118>
 8006f10:	f7ff ffca 	bl	8006ea8 <__hexdig_fun>
 8006f14:	4604      	mov	r4, r0
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d16a      	bne.n	8006ff0 <__gethex+0x11e>
 8006f1a:	9a01      	ldr	r2, [sp, #4]
 8006f1c:	9903      	ldr	r1, [sp, #12]
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f001 f9a5 	bl	800826e <strncmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d166      	bne.n	8006ff6 <__gethex+0x124>
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	5cf8      	ldrb	r0, [r7, r3]
 8006f2c:	18fe      	adds	r6, r7, r3
 8006f2e:	f7ff ffbb 	bl	8006ea8 <__hexdig_fun>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d062      	beq.n	8006ffc <__gethex+0x12a>
 8006f36:	4633      	mov	r3, r6
 8006f38:	7818      	ldrb	r0, [r3, #0]
 8006f3a:	2830      	cmp	r0, #48	; 0x30
 8006f3c:	461f      	mov	r7, r3
 8006f3e:	f103 0301 	add.w	r3, r3, #1
 8006f42:	d0f9      	beq.n	8006f38 <__gethex+0x66>
 8006f44:	f7ff ffb0 	bl	8006ea8 <__hexdig_fun>
 8006f48:	fab0 f580 	clz	r5, r0
 8006f4c:	096d      	lsrs	r5, r5, #5
 8006f4e:	4634      	mov	r4, r6
 8006f50:	f04f 0b01 	mov.w	fp, #1
 8006f54:	463a      	mov	r2, r7
 8006f56:	4616      	mov	r6, r2
 8006f58:	3201      	adds	r2, #1
 8006f5a:	7830      	ldrb	r0, [r6, #0]
 8006f5c:	f7ff ffa4 	bl	8006ea8 <__hexdig_fun>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d1f8      	bne.n	8006f56 <__gethex+0x84>
 8006f64:	9a01      	ldr	r2, [sp, #4]
 8006f66:	9903      	ldr	r1, [sp, #12]
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f001 f980 	bl	800826e <strncmp>
 8006f6e:	b950      	cbnz	r0, 8006f86 <__gethex+0xb4>
 8006f70:	b954      	cbnz	r4, 8006f88 <__gethex+0xb6>
 8006f72:	9b01      	ldr	r3, [sp, #4]
 8006f74:	18f4      	adds	r4, r6, r3
 8006f76:	4622      	mov	r2, r4
 8006f78:	4616      	mov	r6, r2
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	7830      	ldrb	r0, [r6, #0]
 8006f7e:	f7ff ff93 	bl	8006ea8 <__hexdig_fun>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d1f8      	bne.n	8006f78 <__gethex+0xa6>
 8006f86:	b10c      	cbz	r4, 8006f8c <__gethex+0xba>
 8006f88:	1ba4      	subs	r4, r4, r6
 8006f8a:	00a4      	lsls	r4, r4, #2
 8006f8c:	7833      	ldrb	r3, [r6, #0]
 8006f8e:	2b50      	cmp	r3, #80	; 0x50
 8006f90:	d001      	beq.n	8006f96 <__gethex+0xc4>
 8006f92:	2b70      	cmp	r3, #112	; 0x70
 8006f94:	d140      	bne.n	8007018 <__gethex+0x146>
 8006f96:	7873      	ldrb	r3, [r6, #1]
 8006f98:	2b2b      	cmp	r3, #43	; 0x2b
 8006f9a:	d031      	beq.n	8007000 <__gethex+0x12e>
 8006f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8006f9e:	d033      	beq.n	8007008 <__gethex+0x136>
 8006fa0:	1c71      	adds	r1, r6, #1
 8006fa2:	f04f 0900 	mov.w	r9, #0
 8006fa6:	7808      	ldrb	r0, [r1, #0]
 8006fa8:	f7ff ff7e 	bl	8006ea8 <__hexdig_fun>
 8006fac:	1e43      	subs	r3, r0, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b18      	cmp	r3, #24
 8006fb2:	d831      	bhi.n	8007018 <__gethex+0x146>
 8006fb4:	f1a0 0210 	sub.w	r2, r0, #16
 8006fb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006fbc:	f7ff ff74 	bl	8006ea8 <__hexdig_fun>
 8006fc0:	1e43      	subs	r3, r0, #1
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b18      	cmp	r3, #24
 8006fc6:	d922      	bls.n	800700e <__gethex+0x13c>
 8006fc8:	f1b9 0f00 	cmp.w	r9, #0
 8006fcc:	d000      	beq.n	8006fd0 <__gethex+0xfe>
 8006fce:	4252      	negs	r2, r2
 8006fd0:	4414      	add	r4, r2
 8006fd2:	f8ca 1000 	str.w	r1, [sl]
 8006fd6:	b30d      	cbz	r5, 800701c <__gethex+0x14a>
 8006fd8:	f1bb 0f00 	cmp.w	fp, #0
 8006fdc:	bf0c      	ite	eq
 8006fde:	2706      	moveq	r7, #6
 8006fe0:	2700      	movne	r7, #0
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	b00b      	add	sp, #44	; 0x2c
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	f10b 0b01 	add.w	fp, fp, #1
 8006fee:	e78a      	b.n	8006f06 <__gethex+0x34>
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	462c      	mov	r4, r5
 8006ff4:	e7ae      	b.n	8006f54 <__gethex+0x82>
 8006ff6:	463e      	mov	r6, r7
 8006ff8:	2501      	movs	r5, #1
 8006ffa:	e7c7      	b.n	8006f8c <__gethex+0xba>
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	e7fb      	b.n	8006ff8 <__gethex+0x126>
 8007000:	f04f 0900 	mov.w	r9, #0
 8007004:	1cb1      	adds	r1, r6, #2
 8007006:	e7ce      	b.n	8006fa6 <__gethex+0xd4>
 8007008:	f04f 0901 	mov.w	r9, #1
 800700c:	e7fa      	b.n	8007004 <__gethex+0x132>
 800700e:	230a      	movs	r3, #10
 8007010:	fb03 0202 	mla	r2, r3, r2, r0
 8007014:	3a10      	subs	r2, #16
 8007016:	e7cf      	b.n	8006fb8 <__gethex+0xe6>
 8007018:	4631      	mov	r1, r6
 800701a:	e7da      	b.n	8006fd2 <__gethex+0x100>
 800701c:	1bf3      	subs	r3, r6, r7
 800701e:	3b01      	subs	r3, #1
 8007020:	4629      	mov	r1, r5
 8007022:	2b07      	cmp	r3, #7
 8007024:	dc49      	bgt.n	80070ba <__gethex+0x1e8>
 8007026:	9802      	ldr	r0, [sp, #8]
 8007028:	f000 fac7 	bl	80075ba <_Balloc>
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	f100 0914 	add.w	r9, r0, #20
 8007032:	f04f 0b00 	mov.w	fp, #0
 8007036:	f1c3 0301 	rsb	r3, r3, #1
 800703a:	4605      	mov	r5, r0
 800703c:	f8cd 9010 	str.w	r9, [sp, #16]
 8007040:	46da      	mov	sl, fp
 8007042:	9308      	str	r3, [sp, #32]
 8007044:	42b7      	cmp	r7, r6
 8007046:	d33b      	bcc.n	80070c0 <__gethex+0x1ee>
 8007048:	9804      	ldr	r0, [sp, #16]
 800704a:	f840 ab04 	str.w	sl, [r0], #4
 800704e:	eba0 0009 	sub.w	r0, r0, r9
 8007052:	1080      	asrs	r0, r0, #2
 8007054:	6128      	str	r0, [r5, #16]
 8007056:	0147      	lsls	r7, r0, #5
 8007058:	4650      	mov	r0, sl
 800705a:	f000 fb72 	bl	8007742 <__hi0bits>
 800705e:	f8d8 6000 	ldr.w	r6, [r8]
 8007062:	1a3f      	subs	r7, r7, r0
 8007064:	42b7      	cmp	r7, r6
 8007066:	dd64      	ble.n	8007132 <__gethex+0x260>
 8007068:	1bbf      	subs	r7, r7, r6
 800706a:	4639      	mov	r1, r7
 800706c:	4628      	mov	r0, r5
 800706e:	f000 fe81 	bl	8007d74 <__any_on>
 8007072:	4682      	mov	sl, r0
 8007074:	b178      	cbz	r0, 8007096 <__gethex+0x1c4>
 8007076:	1e7b      	subs	r3, r7, #1
 8007078:	1159      	asrs	r1, r3, #5
 800707a:	f003 021f 	and.w	r2, r3, #31
 800707e:	f04f 0a01 	mov.w	sl, #1
 8007082:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007086:	fa0a f202 	lsl.w	r2, sl, r2
 800708a:	420a      	tst	r2, r1
 800708c:	d003      	beq.n	8007096 <__gethex+0x1c4>
 800708e:	4553      	cmp	r3, sl
 8007090:	dc46      	bgt.n	8007120 <__gethex+0x24e>
 8007092:	f04f 0a02 	mov.w	sl, #2
 8007096:	4639      	mov	r1, r7
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff fecb 	bl	8006e34 <rshift>
 800709e:	443c      	add	r4, r7
 80070a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	da52      	bge.n	800714e <__gethex+0x27c>
 80070a8:	4629      	mov	r1, r5
 80070aa:	9802      	ldr	r0, [sp, #8]
 80070ac:	f000 fab9 	bl	8007622 <_Bfree>
 80070b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070b2:	2300      	movs	r3, #0
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	27a3      	movs	r7, #163	; 0xa3
 80070b8:	e793      	b.n	8006fe2 <__gethex+0x110>
 80070ba:	3101      	adds	r1, #1
 80070bc:	105b      	asrs	r3, r3, #1
 80070be:	e7b0      	b.n	8007022 <__gethex+0x150>
 80070c0:	1e73      	subs	r3, r6, #1
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	9a07      	ldr	r2, [sp, #28]
 80070c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d018      	beq.n	8007100 <__gethex+0x22e>
 80070ce:	f1bb 0f20 	cmp.w	fp, #32
 80070d2:	d107      	bne.n	80070e4 <__gethex+0x212>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	f8c3 a000 	str.w	sl, [r3]
 80070da:	3304      	adds	r3, #4
 80070dc:	f04f 0a00 	mov.w	sl, #0
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	46d3      	mov	fp, sl
 80070e4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80070e8:	f7ff fede 	bl	8006ea8 <__hexdig_fun>
 80070ec:	f000 000f 	and.w	r0, r0, #15
 80070f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80070f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80070f8:	f10b 0b04 	add.w	fp, fp, #4
 80070fc:	9b05      	ldr	r3, [sp, #20]
 80070fe:	e00d      	b.n	800711c <__gethex+0x24a>
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	9a08      	ldr	r2, [sp, #32]
 8007104:	4413      	add	r3, r2
 8007106:	42bb      	cmp	r3, r7
 8007108:	d3e1      	bcc.n	80070ce <__gethex+0x1fc>
 800710a:	4618      	mov	r0, r3
 800710c:	9a01      	ldr	r2, [sp, #4]
 800710e:	9903      	ldr	r1, [sp, #12]
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	f001 f8ac 	bl	800826e <strncmp>
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	2800      	cmp	r0, #0
 800711a:	d1d8      	bne.n	80070ce <__gethex+0x1fc>
 800711c:	461e      	mov	r6, r3
 800711e:	e791      	b.n	8007044 <__gethex+0x172>
 8007120:	1eb9      	subs	r1, r7, #2
 8007122:	4628      	mov	r0, r5
 8007124:	f000 fe26 	bl	8007d74 <__any_on>
 8007128:	2800      	cmp	r0, #0
 800712a:	d0b2      	beq.n	8007092 <__gethex+0x1c0>
 800712c:	f04f 0a03 	mov.w	sl, #3
 8007130:	e7b1      	b.n	8007096 <__gethex+0x1c4>
 8007132:	da09      	bge.n	8007148 <__gethex+0x276>
 8007134:	1bf7      	subs	r7, r6, r7
 8007136:	4629      	mov	r1, r5
 8007138:	463a      	mov	r2, r7
 800713a:	9802      	ldr	r0, [sp, #8]
 800713c:	f000 fc3c 	bl	80079b8 <__lshift>
 8007140:	1be4      	subs	r4, r4, r7
 8007142:	4605      	mov	r5, r0
 8007144:	f100 0914 	add.w	r9, r0, #20
 8007148:	f04f 0a00 	mov.w	sl, #0
 800714c:	e7a8      	b.n	80070a0 <__gethex+0x1ce>
 800714e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007152:	42a0      	cmp	r0, r4
 8007154:	dd6a      	ble.n	800722c <__gethex+0x35a>
 8007156:	1b04      	subs	r4, r0, r4
 8007158:	42a6      	cmp	r6, r4
 800715a:	dc2e      	bgt.n	80071ba <__gethex+0x2e8>
 800715c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d022      	beq.n	80071aa <__gethex+0x2d8>
 8007164:	2b03      	cmp	r3, #3
 8007166:	d024      	beq.n	80071b2 <__gethex+0x2e0>
 8007168:	2b01      	cmp	r3, #1
 800716a:	d115      	bne.n	8007198 <__gethex+0x2c6>
 800716c:	42a6      	cmp	r6, r4
 800716e:	d113      	bne.n	8007198 <__gethex+0x2c6>
 8007170:	2e01      	cmp	r6, #1
 8007172:	dc0b      	bgt.n	800718c <__gethex+0x2ba>
 8007174:	9a06      	ldr	r2, [sp, #24]
 8007176:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	2301      	movs	r3, #1
 800717e:	612b      	str	r3, [r5, #16]
 8007180:	f8c9 3000 	str.w	r3, [r9]
 8007184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007186:	2762      	movs	r7, #98	; 0x62
 8007188:	601d      	str	r5, [r3, #0]
 800718a:	e72a      	b.n	8006fe2 <__gethex+0x110>
 800718c:	1e71      	subs	r1, r6, #1
 800718e:	4628      	mov	r0, r5
 8007190:	f000 fdf0 	bl	8007d74 <__any_on>
 8007194:	2800      	cmp	r0, #0
 8007196:	d1ed      	bne.n	8007174 <__gethex+0x2a2>
 8007198:	4629      	mov	r1, r5
 800719a:	9802      	ldr	r0, [sp, #8]
 800719c:	f000 fa41 	bl	8007622 <_Bfree>
 80071a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071a2:	2300      	movs	r3, #0
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	2750      	movs	r7, #80	; 0x50
 80071a8:	e71b      	b.n	8006fe2 <__gethex+0x110>
 80071aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0e1      	beq.n	8007174 <__gethex+0x2a2>
 80071b0:	e7f2      	b.n	8007198 <__gethex+0x2c6>
 80071b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1dd      	bne.n	8007174 <__gethex+0x2a2>
 80071b8:	e7ee      	b.n	8007198 <__gethex+0x2c6>
 80071ba:	1e67      	subs	r7, r4, #1
 80071bc:	f1ba 0f00 	cmp.w	sl, #0
 80071c0:	d131      	bne.n	8007226 <__gethex+0x354>
 80071c2:	b127      	cbz	r7, 80071ce <__gethex+0x2fc>
 80071c4:	4639      	mov	r1, r7
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fdd4 	bl	8007d74 <__any_on>
 80071cc:	4682      	mov	sl, r0
 80071ce:	117a      	asrs	r2, r7, #5
 80071d0:	2301      	movs	r3, #1
 80071d2:	f007 071f 	and.w	r7, r7, #31
 80071d6:	fa03 f707 	lsl.w	r7, r3, r7
 80071da:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80071de:	4621      	mov	r1, r4
 80071e0:	421f      	tst	r7, r3
 80071e2:	4628      	mov	r0, r5
 80071e4:	bf18      	it	ne
 80071e6:	f04a 0a02 	orrne.w	sl, sl, #2
 80071ea:	1b36      	subs	r6, r6, r4
 80071ec:	f7ff fe22 	bl	8006e34 <rshift>
 80071f0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80071f4:	2702      	movs	r7, #2
 80071f6:	f1ba 0f00 	cmp.w	sl, #0
 80071fa:	d048      	beq.n	800728e <__gethex+0x3bc>
 80071fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d015      	beq.n	8007230 <__gethex+0x35e>
 8007204:	2b03      	cmp	r3, #3
 8007206:	d017      	beq.n	8007238 <__gethex+0x366>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d109      	bne.n	8007220 <__gethex+0x34e>
 800720c:	f01a 0f02 	tst.w	sl, #2
 8007210:	d006      	beq.n	8007220 <__gethex+0x34e>
 8007212:	f8d9 3000 	ldr.w	r3, [r9]
 8007216:	ea4a 0a03 	orr.w	sl, sl, r3
 800721a:	f01a 0f01 	tst.w	sl, #1
 800721e:	d10e      	bne.n	800723e <__gethex+0x36c>
 8007220:	f047 0710 	orr.w	r7, r7, #16
 8007224:	e033      	b.n	800728e <__gethex+0x3bc>
 8007226:	f04f 0a01 	mov.w	sl, #1
 800722a:	e7d0      	b.n	80071ce <__gethex+0x2fc>
 800722c:	2701      	movs	r7, #1
 800722e:	e7e2      	b.n	80071f6 <__gethex+0x324>
 8007230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007232:	f1c3 0301 	rsb	r3, r3, #1
 8007236:	9315      	str	r3, [sp, #84]	; 0x54
 8007238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <__gethex+0x34e>
 800723e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007242:	f105 0314 	add.w	r3, r5, #20
 8007246:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800724a:	eb03 010a 	add.w	r1, r3, sl
 800724e:	f04f 0c00 	mov.w	ip, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f853 2b04 	ldr.w	r2, [r3], #4
 8007258:	f1b2 3fff 	cmp.w	r2, #4294967295
 800725c:	d01c      	beq.n	8007298 <__gethex+0x3c6>
 800725e:	3201      	adds	r2, #1
 8007260:	6002      	str	r2, [r0, #0]
 8007262:	2f02      	cmp	r7, #2
 8007264:	f105 0314 	add.w	r3, r5, #20
 8007268:	d138      	bne.n	80072dc <__gethex+0x40a>
 800726a:	f8d8 2000 	ldr.w	r2, [r8]
 800726e:	3a01      	subs	r2, #1
 8007270:	42b2      	cmp	r2, r6
 8007272:	d10a      	bne.n	800728a <__gethex+0x3b8>
 8007274:	1171      	asrs	r1, r6, #5
 8007276:	2201      	movs	r2, #1
 8007278:	f006 061f 	and.w	r6, r6, #31
 800727c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007280:	fa02 f606 	lsl.w	r6, r2, r6
 8007284:	421e      	tst	r6, r3
 8007286:	bf18      	it	ne
 8007288:	4617      	movne	r7, r2
 800728a:	f047 0720 	orr.w	r7, r7, #32
 800728e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007290:	601d      	str	r5, [r3, #0]
 8007292:	9b06      	ldr	r3, [sp, #24]
 8007294:	601c      	str	r4, [r3, #0]
 8007296:	e6a4      	b.n	8006fe2 <__gethex+0x110>
 8007298:	4299      	cmp	r1, r3
 800729a:	f843 cc04 	str.w	ip, [r3, #-4]
 800729e:	d8d8      	bhi.n	8007252 <__gethex+0x380>
 80072a0:	68ab      	ldr	r3, [r5, #8]
 80072a2:	4599      	cmp	r9, r3
 80072a4:	db12      	blt.n	80072cc <__gethex+0x3fa>
 80072a6:	6869      	ldr	r1, [r5, #4]
 80072a8:	9802      	ldr	r0, [sp, #8]
 80072aa:	3101      	adds	r1, #1
 80072ac:	f000 f985 	bl	80075ba <_Balloc>
 80072b0:	692a      	ldr	r2, [r5, #16]
 80072b2:	3202      	adds	r2, #2
 80072b4:	f105 010c 	add.w	r1, r5, #12
 80072b8:	4683      	mov	fp, r0
 80072ba:	0092      	lsls	r2, r2, #2
 80072bc:	300c      	adds	r0, #12
 80072be:	f000 f971 	bl	80075a4 <memcpy>
 80072c2:	4629      	mov	r1, r5
 80072c4:	9802      	ldr	r0, [sp, #8]
 80072c6:	f000 f9ac 	bl	8007622 <_Bfree>
 80072ca:	465d      	mov	r5, fp
 80072cc:	692b      	ldr	r3, [r5, #16]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80072d4:	612a      	str	r2, [r5, #16]
 80072d6:	2201      	movs	r2, #1
 80072d8:	615a      	str	r2, [r3, #20]
 80072da:	e7c2      	b.n	8007262 <__gethex+0x390>
 80072dc:	692a      	ldr	r2, [r5, #16]
 80072de:	454a      	cmp	r2, r9
 80072e0:	dd0b      	ble.n	80072fa <__gethex+0x428>
 80072e2:	2101      	movs	r1, #1
 80072e4:	4628      	mov	r0, r5
 80072e6:	f7ff fda5 	bl	8006e34 <rshift>
 80072ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072ee:	3401      	adds	r4, #1
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	f6ff aed9 	blt.w	80070a8 <__gethex+0x1d6>
 80072f6:	2701      	movs	r7, #1
 80072f8:	e7c7      	b.n	800728a <__gethex+0x3b8>
 80072fa:	f016 061f 	ands.w	r6, r6, #31
 80072fe:	d0fa      	beq.n	80072f6 <__gethex+0x424>
 8007300:	449a      	add	sl, r3
 8007302:	f1c6 0620 	rsb	r6, r6, #32
 8007306:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800730a:	f000 fa1a 	bl	8007742 <__hi0bits>
 800730e:	42b0      	cmp	r0, r6
 8007310:	dbe7      	blt.n	80072e2 <__gethex+0x410>
 8007312:	e7f0      	b.n	80072f6 <__gethex+0x424>

08007314 <L_shift>:
 8007314:	f1c2 0208 	rsb	r2, r2, #8
 8007318:	0092      	lsls	r2, r2, #2
 800731a:	b570      	push	{r4, r5, r6, lr}
 800731c:	f1c2 0620 	rsb	r6, r2, #32
 8007320:	6843      	ldr	r3, [r0, #4]
 8007322:	6804      	ldr	r4, [r0, #0]
 8007324:	fa03 f506 	lsl.w	r5, r3, r6
 8007328:	432c      	orrs	r4, r5
 800732a:	40d3      	lsrs	r3, r2
 800732c:	6004      	str	r4, [r0, #0]
 800732e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007332:	4288      	cmp	r0, r1
 8007334:	d3f4      	bcc.n	8007320 <L_shift+0xc>
 8007336:	bd70      	pop	{r4, r5, r6, pc}

08007338 <__match>:
 8007338:	b530      	push	{r4, r5, lr}
 800733a:	6803      	ldr	r3, [r0, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007342:	b914      	cbnz	r4, 800734a <__match+0x12>
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	2001      	movs	r0, #1
 8007348:	bd30      	pop	{r4, r5, pc}
 800734a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800734e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007352:	2d19      	cmp	r5, #25
 8007354:	bf98      	it	ls
 8007356:	3220      	addls	r2, #32
 8007358:	42a2      	cmp	r2, r4
 800735a:	d0f0      	beq.n	800733e <__match+0x6>
 800735c:	2000      	movs	r0, #0
 800735e:	e7f3      	b.n	8007348 <__match+0x10>

08007360 <__hexnan>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	680b      	ldr	r3, [r1, #0]
 8007366:	6801      	ldr	r1, [r0, #0]
 8007368:	115f      	asrs	r7, r3, #5
 800736a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800736e:	f013 031f 	ands.w	r3, r3, #31
 8007372:	b087      	sub	sp, #28
 8007374:	bf18      	it	ne
 8007376:	3704      	addne	r7, #4
 8007378:	2500      	movs	r5, #0
 800737a:	1f3e      	subs	r6, r7, #4
 800737c:	4682      	mov	sl, r0
 800737e:	4690      	mov	r8, r2
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	f847 5c04 	str.w	r5, [r7, #-4]
 8007386:	46b1      	mov	r9, r6
 8007388:	4634      	mov	r4, r6
 800738a:	9502      	str	r5, [sp, #8]
 800738c:	46ab      	mov	fp, r5
 800738e:	784a      	ldrb	r2, [r1, #1]
 8007390:	1c4b      	adds	r3, r1, #1
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	b342      	cbz	r2, 80073e8 <__hexnan+0x88>
 8007396:	4610      	mov	r0, r2
 8007398:	9105      	str	r1, [sp, #20]
 800739a:	9204      	str	r2, [sp, #16]
 800739c:	f7ff fd84 	bl	8006ea8 <__hexdig_fun>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d143      	bne.n	800742c <__hexnan+0xcc>
 80073a4:	9a04      	ldr	r2, [sp, #16]
 80073a6:	9905      	ldr	r1, [sp, #20]
 80073a8:	2a20      	cmp	r2, #32
 80073aa:	d818      	bhi.n	80073de <__hexnan+0x7e>
 80073ac:	9b02      	ldr	r3, [sp, #8]
 80073ae:	459b      	cmp	fp, r3
 80073b0:	dd13      	ble.n	80073da <__hexnan+0x7a>
 80073b2:	454c      	cmp	r4, r9
 80073b4:	d206      	bcs.n	80073c4 <__hexnan+0x64>
 80073b6:	2d07      	cmp	r5, #7
 80073b8:	dc04      	bgt.n	80073c4 <__hexnan+0x64>
 80073ba:	462a      	mov	r2, r5
 80073bc:	4649      	mov	r1, r9
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ffa8 	bl	8007314 <L_shift>
 80073c4:	4544      	cmp	r4, r8
 80073c6:	d944      	bls.n	8007452 <__hexnan+0xf2>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f1a4 0904 	sub.w	r9, r4, #4
 80073ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80073d2:	f8cd b008 	str.w	fp, [sp, #8]
 80073d6:	464c      	mov	r4, r9
 80073d8:	461d      	mov	r5, r3
 80073da:	9903      	ldr	r1, [sp, #12]
 80073dc:	e7d7      	b.n	800738e <__hexnan+0x2e>
 80073de:	2a29      	cmp	r2, #41	; 0x29
 80073e0:	d14a      	bne.n	8007478 <__hexnan+0x118>
 80073e2:	3102      	adds	r1, #2
 80073e4:	f8ca 1000 	str.w	r1, [sl]
 80073e8:	f1bb 0f00 	cmp.w	fp, #0
 80073ec:	d044      	beq.n	8007478 <__hexnan+0x118>
 80073ee:	454c      	cmp	r4, r9
 80073f0:	d206      	bcs.n	8007400 <__hexnan+0xa0>
 80073f2:	2d07      	cmp	r5, #7
 80073f4:	dc04      	bgt.n	8007400 <__hexnan+0xa0>
 80073f6:	462a      	mov	r2, r5
 80073f8:	4649      	mov	r1, r9
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff ff8a 	bl	8007314 <L_shift>
 8007400:	4544      	cmp	r4, r8
 8007402:	d928      	bls.n	8007456 <__hexnan+0xf6>
 8007404:	4643      	mov	r3, r8
 8007406:	f854 2b04 	ldr.w	r2, [r4], #4
 800740a:	f843 2b04 	str.w	r2, [r3], #4
 800740e:	42a6      	cmp	r6, r4
 8007410:	d2f9      	bcs.n	8007406 <__hexnan+0xa6>
 8007412:	2200      	movs	r2, #0
 8007414:	f843 2b04 	str.w	r2, [r3], #4
 8007418:	429e      	cmp	r6, r3
 800741a:	d2fb      	bcs.n	8007414 <__hexnan+0xb4>
 800741c:	6833      	ldr	r3, [r6, #0]
 800741e:	b91b      	cbnz	r3, 8007428 <__hexnan+0xc8>
 8007420:	4546      	cmp	r6, r8
 8007422:	d127      	bne.n	8007474 <__hexnan+0x114>
 8007424:	2301      	movs	r3, #1
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	2005      	movs	r0, #5
 800742a:	e026      	b.n	800747a <__hexnan+0x11a>
 800742c:	3501      	adds	r5, #1
 800742e:	2d08      	cmp	r5, #8
 8007430:	f10b 0b01 	add.w	fp, fp, #1
 8007434:	dd06      	ble.n	8007444 <__hexnan+0xe4>
 8007436:	4544      	cmp	r4, r8
 8007438:	d9cf      	bls.n	80073da <__hexnan+0x7a>
 800743a:	2300      	movs	r3, #0
 800743c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007440:	2501      	movs	r5, #1
 8007442:	3c04      	subs	r4, #4
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	f000 000f 	and.w	r0, r0, #15
 800744a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800744e:	6020      	str	r0, [r4, #0]
 8007450:	e7c3      	b.n	80073da <__hexnan+0x7a>
 8007452:	2508      	movs	r5, #8
 8007454:	e7c1      	b.n	80073da <__hexnan+0x7a>
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0df      	beq.n	800741c <__hexnan+0xbc>
 800745c:	f04f 32ff 	mov.w	r2, #4294967295
 8007460:	f1c3 0320 	rsb	r3, r3, #32
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800746c:	401a      	ands	r2, r3
 800746e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007472:	e7d3      	b.n	800741c <__hexnan+0xbc>
 8007474:	3e04      	subs	r6, #4
 8007476:	e7d1      	b.n	800741c <__hexnan+0xbc>
 8007478:	2004      	movs	r0, #4
 800747a:	b007      	add	sp, #28
 800747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007480 <__locale_ctype_ptr_l>:
 8007480:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007484:	4770      	bx	lr

08007486 <__localeconv_l>:
 8007486:	30f0      	adds	r0, #240	; 0xf0
 8007488:	4770      	bx	lr
	...

0800748c <_localeconv_r>:
 800748c:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <_localeconv_r+0x14>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6a18      	ldr	r0, [r3, #32]
 8007492:	4b04      	ldr	r3, [pc, #16]	; (80074a4 <_localeconv_r+0x18>)
 8007494:	2800      	cmp	r0, #0
 8007496:	bf08      	it	eq
 8007498:	4618      	moveq	r0, r3
 800749a:	30f0      	adds	r0, #240	; 0xf0
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	2000000c 	.word	0x2000000c
 80074a4:	20000070 	.word	0x20000070

080074a8 <__swhatbuf_r>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	460e      	mov	r6, r1
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	2900      	cmp	r1, #0
 80074b2:	b096      	sub	sp, #88	; 0x58
 80074b4:	4614      	mov	r4, r2
 80074b6:	461d      	mov	r5, r3
 80074b8:	da07      	bge.n	80074ca <__swhatbuf_r+0x22>
 80074ba:	2300      	movs	r3, #0
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	89b3      	ldrh	r3, [r6, #12]
 80074c0:	061a      	lsls	r2, r3, #24
 80074c2:	d410      	bmi.n	80074e6 <__swhatbuf_r+0x3e>
 80074c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c8:	e00e      	b.n	80074e8 <__swhatbuf_r+0x40>
 80074ca:	466a      	mov	r2, sp
 80074cc:	f000 ff10 	bl	80082f0 <_fstat_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	dbf2      	blt.n	80074ba <__swhatbuf_r+0x12>
 80074d4:	9a01      	ldr	r2, [sp, #4]
 80074d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074de:	425a      	negs	r2, r3
 80074e0:	415a      	adcs	r2, r3
 80074e2:	602a      	str	r2, [r5, #0]
 80074e4:	e7ee      	b.n	80074c4 <__swhatbuf_r+0x1c>
 80074e6:	2340      	movs	r3, #64	; 0x40
 80074e8:	2000      	movs	r0, #0
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	b016      	add	sp, #88	; 0x58
 80074ee:	bd70      	pop	{r4, r5, r6, pc}

080074f0 <__smakebuf_r>:
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f4:	079d      	lsls	r5, r3, #30
 80074f6:	4606      	mov	r6, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	d507      	bpl.n	800750c <__smakebuf_r+0x1c>
 80074fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	2301      	movs	r3, #1
 8007506:	6163      	str	r3, [r4, #20]
 8007508:	b002      	add	sp, #8
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	ab01      	add	r3, sp, #4
 800750e:	466a      	mov	r2, sp
 8007510:	f7ff ffca 	bl	80074a8 <__swhatbuf_r>
 8007514:	9900      	ldr	r1, [sp, #0]
 8007516:	4605      	mov	r5, r0
 8007518:	4630      	mov	r0, r6
 800751a:	f000 fca9 	bl	8007e70 <_malloc_r>
 800751e:	b948      	cbnz	r0, 8007534 <__smakebuf_r+0x44>
 8007520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007524:	059a      	lsls	r2, r3, #22
 8007526:	d4ef      	bmi.n	8007508 <__smakebuf_r+0x18>
 8007528:	f023 0303 	bic.w	r3, r3, #3
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	e7e3      	b.n	80074fc <__smakebuf_r+0xc>
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <__smakebuf_r+0x7c>)
 8007536:	62b3      	str	r3, [r6, #40]	; 0x28
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	6020      	str	r0, [r4, #0]
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	6163      	str	r3, [r4, #20]
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	6120      	str	r0, [r4, #16]
 800754a:	b15b      	cbz	r3, 8007564 <__smakebuf_r+0x74>
 800754c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007550:	4630      	mov	r0, r6
 8007552:	f000 fedf 	bl	8008314 <_isatty_r>
 8007556:	b128      	cbz	r0, 8007564 <__smakebuf_r+0x74>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	431d      	orrs	r5, r3
 8007568:	81a5      	strh	r5, [r4, #12]
 800756a:	e7cd      	b.n	8007508 <__smakebuf_r+0x18>
 800756c:	08006ce9 	.word	0x08006ce9

08007570 <malloc>:
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <malloc+0xc>)
 8007572:	4601      	mov	r1, r0
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	f000 bc7b 	b.w	8007e70 <_malloc_r>
 800757a:	bf00      	nop
 800757c:	2000000c 	.word	0x2000000c

08007580 <__ascii_mbtowc>:
 8007580:	b082      	sub	sp, #8
 8007582:	b901      	cbnz	r1, 8007586 <__ascii_mbtowc+0x6>
 8007584:	a901      	add	r1, sp, #4
 8007586:	b142      	cbz	r2, 800759a <__ascii_mbtowc+0x1a>
 8007588:	b14b      	cbz	r3, 800759e <__ascii_mbtowc+0x1e>
 800758a:	7813      	ldrb	r3, [r2, #0]
 800758c:	600b      	str	r3, [r1, #0]
 800758e:	7812      	ldrb	r2, [r2, #0]
 8007590:	1c10      	adds	r0, r2, #0
 8007592:	bf18      	it	ne
 8007594:	2001      	movne	r0, #1
 8007596:	b002      	add	sp, #8
 8007598:	4770      	bx	lr
 800759a:	4610      	mov	r0, r2
 800759c:	e7fb      	b.n	8007596 <__ascii_mbtowc+0x16>
 800759e:	f06f 0001 	mvn.w	r0, #1
 80075a2:	e7f8      	b.n	8007596 <__ascii_mbtowc+0x16>

080075a4 <memcpy>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	1e43      	subs	r3, r0, #1
 80075a8:	440a      	add	r2, r1
 80075aa:	4291      	cmp	r1, r2
 80075ac:	d100      	bne.n	80075b0 <memcpy+0xc>
 80075ae:	bd10      	pop	{r4, pc}
 80075b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075b8:	e7f7      	b.n	80075aa <memcpy+0x6>

080075ba <_Balloc>:
 80075ba:	b570      	push	{r4, r5, r6, lr}
 80075bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075be:	4604      	mov	r4, r0
 80075c0:	460e      	mov	r6, r1
 80075c2:	b93d      	cbnz	r5, 80075d4 <_Balloc+0x1a>
 80075c4:	2010      	movs	r0, #16
 80075c6:	f7ff ffd3 	bl	8007570 <malloc>
 80075ca:	6260      	str	r0, [r4, #36]	; 0x24
 80075cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075d0:	6005      	str	r5, [r0, #0]
 80075d2:	60c5      	str	r5, [r0, #12]
 80075d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075d6:	68eb      	ldr	r3, [r5, #12]
 80075d8:	b183      	cbz	r3, 80075fc <_Balloc+0x42>
 80075da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075e2:	b9b8      	cbnz	r0, 8007614 <_Balloc+0x5a>
 80075e4:	2101      	movs	r1, #1
 80075e6:	fa01 f506 	lsl.w	r5, r1, r6
 80075ea:	1d6a      	adds	r2, r5, #5
 80075ec:	0092      	lsls	r2, r2, #2
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fbe1 	bl	8007db6 <_calloc_r>
 80075f4:	b160      	cbz	r0, 8007610 <_Balloc+0x56>
 80075f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80075fa:	e00e      	b.n	800761a <_Balloc+0x60>
 80075fc:	2221      	movs	r2, #33	; 0x21
 80075fe:	2104      	movs	r1, #4
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fbd8 	bl	8007db6 <_calloc_r>
 8007606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007608:	60e8      	str	r0, [r5, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e4      	bne.n	80075da <_Balloc+0x20>
 8007610:	2000      	movs	r0, #0
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	6802      	ldr	r2, [r0, #0]
 8007616:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800761a:	2300      	movs	r3, #0
 800761c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007620:	e7f7      	b.n	8007612 <_Balloc+0x58>

08007622 <_Bfree>:
 8007622:	b570      	push	{r4, r5, r6, lr}
 8007624:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007626:	4606      	mov	r6, r0
 8007628:	460d      	mov	r5, r1
 800762a:	b93c      	cbnz	r4, 800763c <_Bfree+0x1a>
 800762c:	2010      	movs	r0, #16
 800762e:	f7ff ff9f 	bl	8007570 <malloc>
 8007632:	6270      	str	r0, [r6, #36]	; 0x24
 8007634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007638:	6004      	str	r4, [r0, #0]
 800763a:	60c4      	str	r4, [r0, #12]
 800763c:	b13d      	cbz	r5, 800764e <_Bfree+0x2c>
 800763e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007640:	686a      	ldr	r2, [r5, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007648:	6029      	str	r1, [r5, #0]
 800764a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800764e:	bd70      	pop	{r4, r5, r6, pc}

08007650 <__multadd>:
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	690d      	ldr	r5, [r1, #16]
 8007656:	461f      	mov	r7, r3
 8007658:	4606      	mov	r6, r0
 800765a:	460c      	mov	r4, r1
 800765c:	f101 0c14 	add.w	ip, r1, #20
 8007660:	2300      	movs	r3, #0
 8007662:	f8dc 0000 	ldr.w	r0, [ip]
 8007666:	b281      	uxth	r1, r0
 8007668:	fb02 7101 	mla	r1, r2, r1, r7
 800766c:	0c0f      	lsrs	r7, r1, #16
 800766e:	0c00      	lsrs	r0, r0, #16
 8007670:	fb02 7000 	mla	r0, r2, r0, r7
 8007674:	b289      	uxth	r1, r1
 8007676:	3301      	adds	r3, #1
 8007678:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800767c:	429d      	cmp	r5, r3
 800767e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007682:	f84c 1b04 	str.w	r1, [ip], #4
 8007686:	dcec      	bgt.n	8007662 <__multadd+0x12>
 8007688:	b1d7      	cbz	r7, 80076c0 <__multadd+0x70>
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	42ab      	cmp	r3, r5
 800768e:	dc12      	bgt.n	80076b6 <__multadd+0x66>
 8007690:	6861      	ldr	r1, [r4, #4]
 8007692:	4630      	mov	r0, r6
 8007694:	3101      	adds	r1, #1
 8007696:	f7ff ff90 	bl	80075ba <_Balloc>
 800769a:	6922      	ldr	r2, [r4, #16]
 800769c:	3202      	adds	r2, #2
 800769e:	f104 010c 	add.w	r1, r4, #12
 80076a2:	4680      	mov	r8, r0
 80076a4:	0092      	lsls	r2, r2, #2
 80076a6:	300c      	adds	r0, #12
 80076a8:	f7ff ff7c 	bl	80075a4 <memcpy>
 80076ac:	4621      	mov	r1, r4
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ffb7 	bl	8007622 <_Bfree>
 80076b4:	4644      	mov	r4, r8
 80076b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076ba:	3501      	adds	r5, #1
 80076bc:	615f      	str	r7, [r3, #20]
 80076be:	6125      	str	r5, [r4, #16]
 80076c0:	4620      	mov	r0, r4
 80076c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076c6 <__s2b>:
 80076c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ca:	460c      	mov	r4, r1
 80076cc:	4615      	mov	r5, r2
 80076ce:	461f      	mov	r7, r3
 80076d0:	2209      	movs	r2, #9
 80076d2:	3308      	adds	r3, #8
 80076d4:	4606      	mov	r6, r0
 80076d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80076da:	2100      	movs	r1, #0
 80076dc:	2201      	movs	r2, #1
 80076de:	429a      	cmp	r2, r3
 80076e0:	db20      	blt.n	8007724 <__s2b+0x5e>
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ff69 	bl	80075ba <_Balloc>
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	6143      	str	r3, [r0, #20]
 80076ec:	2d09      	cmp	r5, #9
 80076ee:	f04f 0301 	mov.w	r3, #1
 80076f2:	6103      	str	r3, [r0, #16]
 80076f4:	dd19      	ble.n	800772a <__s2b+0x64>
 80076f6:	f104 0809 	add.w	r8, r4, #9
 80076fa:	46c1      	mov	r9, r8
 80076fc:	442c      	add	r4, r5
 80076fe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007702:	4601      	mov	r1, r0
 8007704:	3b30      	subs	r3, #48	; 0x30
 8007706:	220a      	movs	r2, #10
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff ffa1 	bl	8007650 <__multadd>
 800770e:	45a1      	cmp	r9, r4
 8007710:	d1f5      	bne.n	80076fe <__s2b+0x38>
 8007712:	eb08 0405 	add.w	r4, r8, r5
 8007716:	3c08      	subs	r4, #8
 8007718:	1b2d      	subs	r5, r5, r4
 800771a:	1963      	adds	r3, r4, r5
 800771c:	42bb      	cmp	r3, r7
 800771e:	db07      	blt.n	8007730 <__s2b+0x6a>
 8007720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007724:	0052      	lsls	r2, r2, #1
 8007726:	3101      	adds	r1, #1
 8007728:	e7d9      	b.n	80076de <__s2b+0x18>
 800772a:	340a      	adds	r4, #10
 800772c:	2509      	movs	r5, #9
 800772e:	e7f3      	b.n	8007718 <__s2b+0x52>
 8007730:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007734:	4601      	mov	r1, r0
 8007736:	3b30      	subs	r3, #48	; 0x30
 8007738:	220a      	movs	r2, #10
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ff88 	bl	8007650 <__multadd>
 8007740:	e7eb      	b.n	800771a <__s2b+0x54>

08007742 <__hi0bits>:
 8007742:	0c02      	lsrs	r2, r0, #16
 8007744:	0412      	lsls	r2, r2, #16
 8007746:	4603      	mov	r3, r0
 8007748:	b9b2      	cbnz	r2, 8007778 <__hi0bits+0x36>
 800774a:	0403      	lsls	r3, r0, #16
 800774c:	2010      	movs	r0, #16
 800774e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007752:	bf04      	itt	eq
 8007754:	021b      	lsleq	r3, r3, #8
 8007756:	3008      	addeq	r0, #8
 8007758:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800775c:	bf04      	itt	eq
 800775e:	011b      	lsleq	r3, r3, #4
 8007760:	3004      	addeq	r0, #4
 8007762:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007766:	bf04      	itt	eq
 8007768:	009b      	lsleq	r3, r3, #2
 800776a:	3002      	addeq	r0, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	db06      	blt.n	800777e <__hi0bits+0x3c>
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	d503      	bpl.n	800777c <__hi0bits+0x3a>
 8007774:	3001      	adds	r0, #1
 8007776:	4770      	bx	lr
 8007778:	2000      	movs	r0, #0
 800777a:	e7e8      	b.n	800774e <__hi0bits+0xc>
 800777c:	2020      	movs	r0, #32
 800777e:	4770      	bx	lr

08007780 <__lo0bits>:
 8007780:	6803      	ldr	r3, [r0, #0]
 8007782:	f013 0207 	ands.w	r2, r3, #7
 8007786:	4601      	mov	r1, r0
 8007788:	d00b      	beq.n	80077a2 <__lo0bits+0x22>
 800778a:	07da      	lsls	r2, r3, #31
 800778c:	d423      	bmi.n	80077d6 <__lo0bits+0x56>
 800778e:	0798      	lsls	r0, r3, #30
 8007790:	bf49      	itett	mi
 8007792:	085b      	lsrmi	r3, r3, #1
 8007794:	089b      	lsrpl	r3, r3, #2
 8007796:	2001      	movmi	r0, #1
 8007798:	600b      	strmi	r3, [r1, #0]
 800779a:	bf5c      	itt	pl
 800779c:	600b      	strpl	r3, [r1, #0]
 800779e:	2002      	movpl	r0, #2
 80077a0:	4770      	bx	lr
 80077a2:	b298      	uxth	r0, r3
 80077a4:	b9a8      	cbnz	r0, 80077d2 <__lo0bits+0x52>
 80077a6:	0c1b      	lsrs	r3, r3, #16
 80077a8:	2010      	movs	r0, #16
 80077aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077ae:	bf04      	itt	eq
 80077b0:	0a1b      	lsreq	r3, r3, #8
 80077b2:	3008      	addeq	r0, #8
 80077b4:	071a      	lsls	r2, r3, #28
 80077b6:	bf04      	itt	eq
 80077b8:	091b      	lsreq	r3, r3, #4
 80077ba:	3004      	addeq	r0, #4
 80077bc:	079a      	lsls	r2, r3, #30
 80077be:	bf04      	itt	eq
 80077c0:	089b      	lsreq	r3, r3, #2
 80077c2:	3002      	addeq	r0, #2
 80077c4:	07da      	lsls	r2, r3, #31
 80077c6:	d402      	bmi.n	80077ce <__lo0bits+0x4e>
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	d006      	beq.n	80077da <__lo0bits+0x5a>
 80077cc:	3001      	adds	r0, #1
 80077ce:	600b      	str	r3, [r1, #0]
 80077d0:	4770      	bx	lr
 80077d2:	4610      	mov	r0, r2
 80077d4:	e7e9      	b.n	80077aa <__lo0bits+0x2a>
 80077d6:	2000      	movs	r0, #0
 80077d8:	4770      	bx	lr
 80077da:	2020      	movs	r0, #32
 80077dc:	4770      	bx	lr

080077de <__i2b>:
 80077de:	b510      	push	{r4, lr}
 80077e0:	460c      	mov	r4, r1
 80077e2:	2101      	movs	r1, #1
 80077e4:	f7ff fee9 	bl	80075ba <_Balloc>
 80077e8:	2201      	movs	r2, #1
 80077ea:	6144      	str	r4, [r0, #20]
 80077ec:	6102      	str	r2, [r0, #16]
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <__multiply>:
 80077f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	4614      	mov	r4, r2
 80077f6:	690a      	ldr	r2, [r1, #16]
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	bfb8      	it	lt
 80077fe:	460b      	movlt	r3, r1
 8007800:	4688      	mov	r8, r1
 8007802:	bfbc      	itt	lt
 8007804:	46a0      	movlt	r8, r4
 8007806:	461c      	movlt	r4, r3
 8007808:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800780c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007810:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007818:	eb07 0609 	add.w	r6, r7, r9
 800781c:	42b3      	cmp	r3, r6
 800781e:	bfb8      	it	lt
 8007820:	3101      	addlt	r1, #1
 8007822:	f7ff feca 	bl	80075ba <_Balloc>
 8007826:	f100 0514 	add.w	r5, r0, #20
 800782a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800782e:	462b      	mov	r3, r5
 8007830:	2200      	movs	r2, #0
 8007832:	4573      	cmp	r3, lr
 8007834:	d316      	bcc.n	8007864 <__multiply+0x74>
 8007836:	f104 0214 	add.w	r2, r4, #20
 800783a:	f108 0114 	add.w	r1, r8, #20
 800783e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007842:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	9b00      	ldr	r3, [sp, #0]
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	4293      	cmp	r3, r2
 800784e:	d80c      	bhi.n	800786a <__multiply+0x7a>
 8007850:	2e00      	cmp	r6, #0
 8007852:	dd03      	ble.n	800785c <__multiply+0x6c>
 8007854:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05d      	beq.n	8007918 <__multiply+0x128>
 800785c:	6106      	str	r6, [r0, #16]
 800785e:	b003      	add	sp, #12
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	f843 2b04 	str.w	r2, [r3], #4
 8007868:	e7e3      	b.n	8007832 <__multiply+0x42>
 800786a:	f8b2 b000 	ldrh.w	fp, [r2]
 800786e:	f1bb 0f00 	cmp.w	fp, #0
 8007872:	d023      	beq.n	80078bc <__multiply+0xcc>
 8007874:	4689      	mov	r9, r1
 8007876:	46ac      	mov	ip, r5
 8007878:	f04f 0800 	mov.w	r8, #0
 800787c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007880:	f8dc a000 	ldr.w	sl, [ip]
 8007884:	b2a3      	uxth	r3, r4
 8007886:	fa1f fa8a 	uxth.w	sl, sl
 800788a:	fb0b a303 	mla	r3, fp, r3, sl
 800788e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007892:	f8dc 4000 	ldr.w	r4, [ip]
 8007896:	4443      	add	r3, r8
 8007898:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800789c:	fb0b 840a 	mla	r4, fp, sl, r8
 80078a0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80078a4:	46e2      	mov	sl, ip
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078ac:	454f      	cmp	r7, r9
 80078ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80078b2:	f84a 3b04 	str.w	r3, [sl], #4
 80078b6:	d82b      	bhi.n	8007910 <__multiply+0x120>
 80078b8:	f8cc 8004 	str.w	r8, [ip, #4]
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80078c2:	3204      	adds	r2, #4
 80078c4:	f1ba 0f00 	cmp.w	sl, #0
 80078c8:	d020      	beq.n	800790c <__multiply+0x11c>
 80078ca:	682b      	ldr	r3, [r5, #0]
 80078cc:	4689      	mov	r9, r1
 80078ce:	46a8      	mov	r8, r5
 80078d0:	f04f 0b00 	mov.w	fp, #0
 80078d4:	f8b9 c000 	ldrh.w	ip, [r9]
 80078d8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80078dc:	fb0a 440c 	mla	r4, sl, ip, r4
 80078e0:	445c      	add	r4, fp
 80078e2:	46c4      	mov	ip, r8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078ea:	f84c 3b04 	str.w	r3, [ip], #4
 80078ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80078f2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	fb0a b303 	mla	r3, sl, r3, fp
 80078fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007900:	454f      	cmp	r7, r9
 8007902:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007906:	d805      	bhi.n	8007914 <__multiply+0x124>
 8007908:	f8c8 3004 	str.w	r3, [r8, #4]
 800790c:	3504      	adds	r5, #4
 800790e:	e79b      	b.n	8007848 <__multiply+0x58>
 8007910:	46d4      	mov	ip, sl
 8007912:	e7b3      	b.n	800787c <__multiply+0x8c>
 8007914:	46e0      	mov	r8, ip
 8007916:	e7dd      	b.n	80078d4 <__multiply+0xe4>
 8007918:	3e01      	subs	r6, #1
 800791a:	e799      	b.n	8007850 <__multiply+0x60>

0800791c <__pow5mult>:
 800791c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007920:	4615      	mov	r5, r2
 8007922:	f012 0203 	ands.w	r2, r2, #3
 8007926:	4606      	mov	r6, r0
 8007928:	460f      	mov	r7, r1
 800792a:	d007      	beq.n	800793c <__pow5mult+0x20>
 800792c:	3a01      	subs	r2, #1
 800792e:	4c21      	ldr	r4, [pc, #132]	; (80079b4 <__pow5mult+0x98>)
 8007930:	2300      	movs	r3, #0
 8007932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007936:	f7ff fe8b 	bl	8007650 <__multadd>
 800793a:	4607      	mov	r7, r0
 800793c:	10ad      	asrs	r5, r5, #2
 800793e:	d035      	beq.n	80079ac <__pow5mult+0x90>
 8007940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007942:	b93c      	cbnz	r4, 8007954 <__pow5mult+0x38>
 8007944:	2010      	movs	r0, #16
 8007946:	f7ff fe13 	bl	8007570 <malloc>
 800794a:	6270      	str	r0, [r6, #36]	; 0x24
 800794c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007950:	6004      	str	r4, [r0, #0]
 8007952:	60c4      	str	r4, [r0, #12]
 8007954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800795c:	b94c      	cbnz	r4, 8007972 <__pow5mult+0x56>
 800795e:	f240 2171 	movw	r1, #625	; 0x271
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ff3b 	bl	80077de <__i2b>
 8007968:	2300      	movs	r3, #0
 800796a:	f8c8 0008 	str.w	r0, [r8, #8]
 800796e:	4604      	mov	r4, r0
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	07eb      	lsls	r3, r5, #31
 8007978:	d50a      	bpl.n	8007990 <__pow5mult+0x74>
 800797a:	4639      	mov	r1, r7
 800797c:	4622      	mov	r2, r4
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff36 	bl	80077f0 <__multiply>
 8007984:	4639      	mov	r1, r7
 8007986:	4681      	mov	r9, r0
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff fe4a 	bl	8007622 <_Bfree>
 800798e:	464f      	mov	r7, r9
 8007990:	106d      	asrs	r5, r5, #1
 8007992:	d00b      	beq.n	80079ac <__pow5mult+0x90>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	b938      	cbnz	r0, 80079a8 <__pow5mult+0x8c>
 8007998:	4622      	mov	r2, r4
 800799a:	4621      	mov	r1, r4
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff ff27 	bl	80077f0 <__multiply>
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	f8c0 8000 	str.w	r8, [r0]
 80079a8:	4604      	mov	r4, r0
 80079aa:	e7e4      	b.n	8007976 <__pow5mult+0x5a>
 80079ac:	4638      	mov	r0, r7
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	bf00      	nop
 80079b4:	080089e8 	.word	0x080089e8

080079b8 <__lshift>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	460c      	mov	r4, r1
 80079be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	6849      	ldr	r1, [r1, #4]
 80079c6:	eb0a 0903 	add.w	r9, sl, r3
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	4607      	mov	r7, r0
 80079ce:	4616      	mov	r6, r2
 80079d0:	f109 0501 	add.w	r5, r9, #1
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	db32      	blt.n	8007a3e <__lshift+0x86>
 80079d8:	4638      	mov	r0, r7
 80079da:	f7ff fdee 	bl	80075ba <_Balloc>
 80079de:	2300      	movs	r3, #0
 80079e0:	4680      	mov	r8, r0
 80079e2:	f100 0114 	add.w	r1, r0, #20
 80079e6:	461a      	mov	r2, r3
 80079e8:	4553      	cmp	r3, sl
 80079ea:	db2b      	blt.n	8007a44 <__lshift+0x8c>
 80079ec:	6920      	ldr	r0, [r4, #16]
 80079ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f2:	f104 0314 	add.w	r3, r4, #20
 80079f6:	f016 021f 	ands.w	r2, r6, #31
 80079fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a02:	d025      	beq.n	8007a50 <__lshift+0x98>
 8007a04:	f1c2 0e20 	rsb	lr, r2, #32
 8007a08:	2000      	movs	r0, #0
 8007a0a:	681e      	ldr	r6, [r3, #0]
 8007a0c:	468a      	mov	sl, r1
 8007a0e:	4096      	lsls	r6, r2
 8007a10:	4330      	orrs	r0, r6
 8007a12:	f84a 0b04 	str.w	r0, [sl], #4
 8007a16:	f853 0b04 	ldr.w	r0, [r3], #4
 8007a1a:	459c      	cmp	ip, r3
 8007a1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007a20:	d814      	bhi.n	8007a4c <__lshift+0x94>
 8007a22:	6048      	str	r0, [r1, #4]
 8007a24:	b108      	cbz	r0, 8007a2a <__lshift+0x72>
 8007a26:	f109 0502 	add.w	r5, r9, #2
 8007a2a:	3d01      	subs	r5, #1
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a32:	4621      	mov	r1, r4
 8007a34:	f7ff fdf5 	bl	8007622 <_Bfree>
 8007a38:	4640      	mov	r0, r8
 8007a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3e:	3101      	adds	r1, #1
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	e7c7      	b.n	80079d4 <__lshift+0x1c>
 8007a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	e7cd      	b.n	80079e8 <__lshift+0x30>
 8007a4c:	4651      	mov	r1, sl
 8007a4e:	e7dc      	b.n	8007a0a <__lshift+0x52>
 8007a50:	3904      	subs	r1, #4
 8007a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a56:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a5a:	459c      	cmp	ip, r3
 8007a5c:	d8f9      	bhi.n	8007a52 <__lshift+0x9a>
 8007a5e:	e7e4      	b.n	8007a2a <__lshift+0x72>

08007a60 <__mcmp>:
 8007a60:	6903      	ldr	r3, [r0, #16]
 8007a62:	690a      	ldr	r2, [r1, #16]
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	b530      	push	{r4, r5, lr}
 8007a68:	d10c      	bne.n	8007a84 <__mcmp+0x24>
 8007a6a:	0092      	lsls	r2, r2, #2
 8007a6c:	3014      	adds	r0, #20
 8007a6e:	3114      	adds	r1, #20
 8007a70:	1884      	adds	r4, r0, r2
 8007a72:	4411      	add	r1, r2
 8007a74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a7c:	4295      	cmp	r5, r2
 8007a7e:	d003      	beq.n	8007a88 <__mcmp+0x28>
 8007a80:	d305      	bcc.n	8007a8e <__mcmp+0x2e>
 8007a82:	2301      	movs	r3, #1
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd30      	pop	{r4, r5, pc}
 8007a88:	42a0      	cmp	r0, r4
 8007a8a:	d3f3      	bcc.n	8007a74 <__mcmp+0x14>
 8007a8c:	e7fa      	b.n	8007a84 <__mcmp+0x24>
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	e7f7      	b.n	8007a84 <__mcmp+0x24>

08007a94 <__mdiff>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	460d      	mov	r5, r1
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	f7ff ffdd 	bl	8007a60 <__mcmp>
 8007aa6:	1e06      	subs	r6, r0, #0
 8007aa8:	d108      	bne.n	8007abc <__mdiff+0x28>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4638      	mov	r0, r7
 8007aae:	f7ff fd84 	bl	80075ba <_Balloc>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	bfa4      	itt	ge
 8007abe:	4623      	movge	r3, r4
 8007ac0:	462c      	movge	r4, r5
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	6861      	ldr	r1, [r4, #4]
 8007ac6:	bfa6      	itte	ge
 8007ac8:	461d      	movge	r5, r3
 8007aca:	2600      	movge	r6, #0
 8007acc:	2601      	movlt	r6, #1
 8007ace:	f7ff fd74 	bl	80075ba <_Balloc>
 8007ad2:	692b      	ldr	r3, [r5, #16]
 8007ad4:	60c6      	str	r6, [r0, #12]
 8007ad6:	6926      	ldr	r6, [r4, #16]
 8007ad8:	f105 0914 	add.w	r9, r5, #20
 8007adc:	f104 0214 	add.w	r2, r4, #20
 8007ae0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007ae4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ae8:	f100 0514 	add.w	r5, r0, #20
 8007aec:	f04f 0e00 	mov.w	lr, #0
 8007af0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007af4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007af8:	fa1e f18a 	uxtah	r1, lr, sl
 8007afc:	b2a3      	uxth	r3, r4
 8007afe:	1ac9      	subs	r1, r1, r3
 8007b00:	0c23      	lsrs	r3, r4, #16
 8007b02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007b06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b10:	45c8      	cmp	r8, r9
 8007b12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b16:	4694      	mov	ip, r2
 8007b18:	f845 3b04 	str.w	r3, [r5], #4
 8007b1c:	d8e8      	bhi.n	8007af0 <__mdiff+0x5c>
 8007b1e:	45bc      	cmp	ip, r7
 8007b20:	d304      	bcc.n	8007b2c <__mdiff+0x98>
 8007b22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007b26:	b183      	cbz	r3, 8007b4a <__mdiff+0xb6>
 8007b28:	6106      	str	r6, [r0, #16]
 8007b2a:	e7c5      	b.n	8007ab8 <__mdiff+0x24>
 8007b2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b30:	fa1e f381 	uxtah	r3, lr, r1
 8007b34:	141a      	asrs	r2, r3, #16
 8007b36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007b44:	f845 3b04 	str.w	r3, [r5], #4
 8007b48:	e7e9      	b.n	8007b1e <__mdiff+0x8a>
 8007b4a:	3e01      	subs	r6, #1
 8007b4c:	e7e9      	b.n	8007b22 <__mdiff+0x8e>
	...

08007b50 <__ulp>:
 8007b50:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <__ulp+0x4c>)
 8007b52:	ee10 2a90 	vmov	r2, s1
 8007b56:	401a      	ands	r2, r3
 8007b58:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dd04      	ble.n	8007b6a <__ulp+0x1a>
 8007b60:	2000      	movs	r0, #0
 8007b62:	4619      	mov	r1, r3
 8007b64:	ec41 0b10 	vmov	d0, r0, r1
 8007b68:	4770      	bx	lr
 8007b6a:	425b      	negs	r3, r3
 8007b6c:	151b      	asrs	r3, r3, #20
 8007b6e:	2b13      	cmp	r3, #19
 8007b70:	f04f 0000 	mov.w	r0, #0
 8007b74:	f04f 0100 	mov.w	r1, #0
 8007b78:	dc04      	bgt.n	8007b84 <__ulp+0x34>
 8007b7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b7e:	fa42 f103 	asr.w	r1, r2, r3
 8007b82:	e7ef      	b.n	8007b64 <__ulp+0x14>
 8007b84:	3b14      	subs	r3, #20
 8007b86:	2b1e      	cmp	r3, #30
 8007b88:	f04f 0201 	mov.w	r2, #1
 8007b8c:	bfda      	itte	le
 8007b8e:	f1c3 031f 	rsble	r3, r3, #31
 8007b92:	fa02 f303 	lslle.w	r3, r2, r3
 8007b96:	4613      	movgt	r3, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	e7e3      	b.n	8007b64 <__ulp+0x14>
 8007b9c:	7ff00000 	.word	0x7ff00000

08007ba0 <__b2d>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	6905      	ldr	r5, [r0, #16]
 8007ba4:	f100 0714 	add.w	r7, r0, #20
 8007ba8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007bac:	1f2e      	subs	r6, r5, #4
 8007bae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7ff fdc5 	bl	8007742 <__hi0bits>
 8007bb8:	f1c0 0320 	rsb	r3, r0, #32
 8007bbc:	280a      	cmp	r0, #10
 8007bbe:	600b      	str	r3, [r1, #0]
 8007bc0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007c38 <__b2d+0x98>
 8007bc4:	dc14      	bgt.n	8007bf0 <__b2d+0x50>
 8007bc6:	f1c0 0e0b 	rsb	lr, r0, #11
 8007bca:	fa24 f10e 	lsr.w	r1, r4, lr
 8007bce:	42b7      	cmp	r7, r6
 8007bd0:	ea41 030c 	orr.w	r3, r1, ip
 8007bd4:	bf34      	ite	cc
 8007bd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bda:	2100      	movcs	r1, #0
 8007bdc:	3015      	adds	r0, #21
 8007bde:	fa04 f000 	lsl.w	r0, r4, r0
 8007be2:	fa21 f10e 	lsr.w	r1, r1, lr
 8007be6:	ea40 0201 	orr.w	r2, r0, r1
 8007bea:	ec43 2b10 	vmov	d0, r2, r3
 8007bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf0:	42b7      	cmp	r7, r6
 8007bf2:	bf3a      	itte	cc
 8007bf4:	f1a5 0608 	subcc.w	r6, r5, #8
 8007bf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bfc:	2100      	movcs	r1, #0
 8007bfe:	380b      	subs	r0, #11
 8007c00:	d015      	beq.n	8007c2e <__b2d+0x8e>
 8007c02:	4084      	lsls	r4, r0
 8007c04:	f1c0 0520 	rsb	r5, r0, #32
 8007c08:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007c0c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007c10:	42be      	cmp	r6, r7
 8007c12:	fa21 fc05 	lsr.w	ip, r1, r5
 8007c16:	ea44 030c 	orr.w	r3, r4, ip
 8007c1a:	bf8c      	ite	hi
 8007c1c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007c20:	2400      	movls	r4, #0
 8007c22:	fa01 f000 	lsl.w	r0, r1, r0
 8007c26:	40ec      	lsrs	r4, r5
 8007c28:	ea40 0204 	orr.w	r2, r0, r4
 8007c2c:	e7dd      	b.n	8007bea <__b2d+0x4a>
 8007c2e:	ea44 030c 	orr.w	r3, r4, ip
 8007c32:	460a      	mov	r2, r1
 8007c34:	e7d9      	b.n	8007bea <__b2d+0x4a>
 8007c36:	bf00      	nop
 8007c38:	3ff00000 	.word	0x3ff00000

08007c3c <__d2b>:
 8007c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c40:	460e      	mov	r6, r1
 8007c42:	2101      	movs	r1, #1
 8007c44:	ec59 8b10 	vmov	r8, r9, d0
 8007c48:	4615      	mov	r5, r2
 8007c4a:	f7ff fcb6 	bl	80075ba <_Balloc>
 8007c4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c52:	4607      	mov	r7, r0
 8007c54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c58:	bb34      	cbnz	r4, 8007ca8 <__d2b+0x6c>
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	f1b8 0300 	subs.w	r3, r8, #0
 8007c60:	d027      	beq.n	8007cb2 <__d2b+0x76>
 8007c62:	a802      	add	r0, sp, #8
 8007c64:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007c68:	f7ff fd8a 	bl	8007780 <__lo0bits>
 8007c6c:	9900      	ldr	r1, [sp, #0]
 8007c6e:	b1f0      	cbz	r0, 8007cae <__d2b+0x72>
 8007c70:	9a01      	ldr	r2, [sp, #4]
 8007c72:	f1c0 0320 	rsb	r3, r0, #32
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	40c2      	lsrs	r2, r0
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	9201      	str	r2, [sp, #4]
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bf14      	ite	ne
 8007c8a:	2102      	movne	r1, #2
 8007c8c:	2101      	moveq	r1, #1
 8007c8e:	6139      	str	r1, [r7, #16]
 8007c90:	b1c4      	cbz	r4, 8007cc4 <__d2b+0x88>
 8007c92:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c96:	4404      	add	r4, r0
 8007c98:	6034      	str	r4, [r6, #0]
 8007c9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c9e:	6028      	str	r0, [r5, #0]
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	b003      	add	sp, #12
 8007ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cac:	e7d5      	b.n	8007c5a <__d2b+0x1e>
 8007cae:	6179      	str	r1, [r7, #20]
 8007cb0:	e7e7      	b.n	8007c82 <__d2b+0x46>
 8007cb2:	a801      	add	r0, sp, #4
 8007cb4:	f7ff fd64 	bl	8007780 <__lo0bits>
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6139      	str	r1, [r7, #16]
 8007cc0:	3020      	adds	r0, #32
 8007cc2:	e7e5      	b.n	8007c90 <__d2b+0x54>
 8007cc4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007cc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ccc:	6030      	str	r0, [r6, #0]
 8007cce:	6918      	ldr	r0, [r3, #16]
 8007cd0:	f7ff fd37 	bl	8007742 <__hi0bits>
 8007cd4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007cd8:	e7e1      	b.n	8007c9e <__d2b+0x62>

08007cda <__ratio>:
 8007cda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cde:	4688      	mov	r8, r1
 8007ce0:	4669      	mov	r1, sp
 8007ce2:	4681      	mov	r9, r0
 8007ce4:	f7ff ff5c 	bl	8007ba0 <__b2d>
 8007ce8:	a901      	add	r1, sp, #4
 8007cea:	4640      	mov	r0, r8
 8007cec:	ec57 6b10 	vmov	r6, r7, d0
 8007cf0:	f7ff ff56 	bl	8007ba0 <__b2d>
 8007cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cfc:	eba3 0c02 	sub.w	ip, r3, r2
 8007d00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d0a:	ec5b ab10 	vmov	sl, fp, d0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfce      	itee	gt
 8007d12:	463a      	movgt	r2, r7
 8007d14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d18:	465a      	movle	r2, fp
 8007d1a:	4659      	mov	r1, fp
 8007d1c:	463d      	mov	r5, r7
 8007d1e:	bfd4      	ite	le
 8007d20:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007d24:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007d28:	4630      	mov	r0, r6
 8007d2a:	ee10 2a10 	vmov	r2, s0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 fdab 	bl	800088c <__aeabi_ddiv>
 8007d36:	ec41 0b10 	vmov	d0, r0, r1
 8007d3a:	b003      	add	sp, #12
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d40 <__copybits>:
 8007d40:	3901      	subs	r1, #1
 8007d42:	b510      	push	{r4, lr}
 8007d44:	1149      	asrs	r1, r1, #5
 8007d46:	6914      	ldr	r4, [r2, #16]
 8007d48:	3101      	adds	r1, #1
 8007d4a:	f102 0314 	add.w	r3, r2, #20
 8007d4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	4602      	mov	r2, r0
 8007d5a:	d303      	bcc.n	8007d64 <__copybits+0x24>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	428a      	cmp	r2, r1
 8007d60:	d305      	bcc.n	8007d6e <__copybits+0x2e>
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d68:	f840 2b04 	str.w	r2, [r0], #4
 8007d6c:	e7f3      	b.n	8007d56 <__copybits+0x16>
 8007d6e:	f842 3b04 	str.w	r3, [r2], #4
 8007d72:	e7f4      	b.n	8007d5e <__copybits+0x1e>

08007d74 <__any_on>:
 8007d74:	f100 0214 	add.w	r2, r0, #20
 8007d78:	6900      	ldr	r0, [r0, #16]
 8007d7a:	114b      	asrs	r3, r1, #5
 8007d7c:	4298      	cmp	r0, r3
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	db11      	blt.n	8007da6 <__any_on+0x32>
 8007d82:	dd0a      	ble.n	8007d9a <__any_on+0x26>
 8007d84:	f011 011f 	ands.w	r1, r1, #31
 8007d88:	d007      	beq.n	8007d9a <__any_on+0x26>
 8007d8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d8e:	fa24 f001 	lsr.w	r0, r4, r1
 8007d92:	fa00 f101 	lsl.w	r1, r0, r1
 8007d96:	428c      	cmp	r4, r1
 8007d98:	d10b      	bne.n	8007db2 <__any_on+0x3e>
 8007d9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d803      	bhi.n	8007daa <__any_on+0x36>
 8007da2:	2000      	movs	r0, #0
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	4603      	mov	r3, r0
 8007da8:	e7f7      	b.n	8007d9a <__any_on+0x26>
 8007daa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dae:	2900      	cmp	r1, #0
 8007db0:	d0f5      	beq.n	8007d9e <__any_on+0x2a>
 8007db2:	2001      	movs	r0, #1
 8007db4:	e7f6      	b.n	8007da4 <__any_on+0x30>

08007db6 <_calloc_r>:
 8007db6:	b538      	push	{r3, r4, r5, lr}
 8007db8:	fb02 f401 	mul.w	r4, r2, r1
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f000 f857 	bl	8007e70 <_malloc_r>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	b118      	cbz	r0, 8007dce <_calloc_r+0x18>
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	2100      	movs	r1, #0
 8007dca:	f7fc fa35 	bl	8004238 <memset>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08007dd4 <_free_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	2900      	cmp	r1, #0
 8007dda:	d045      	beq.n	8007e68 <_free_r+0x94>
 8007ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de0:	1f0c      	subs	r4, r1, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfb8      	it	lt
 8007de6:	18e4      	addlt	r4, r4, r3
 8007de8:	f000 facf 	bl	800838a <__malloc_lock>
 8007dec:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <_free_r+0x98>)
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	4610      	mov	r0, r2
 8007df2:	b933      	cbnz	r3, 8007e02 <_free_r+0x2e>
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6014      	str	r4, [r2, #0]
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dfe:	f000 bac5 	b.w	800838c <__malloc_unlock>
 8007e02:	42a3      	cmp	r3, r4
 8007e04:	d90c      	bls.n	8007e20 <_free_r+0x4c>
 8007e06:	6821      	ldr	r1, [r4, #0]
 8007e08:	1862      	adds	r2, r4, r1
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	bf04      	itt	eq
 8007e0e:	681a      	ldreq	r2, [r3, #0]
 8007e10:	685b      	ldreq	r3, [r3, #4]
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	bf04      	itt	eq
 8007e16:	1852      	addeq	r2, r2, r1
 8007e18:	6022      	streq	r2, [r4, #0]
 8007e1a:	6004      	str	r4, [r0, #0]
 8007e1c:	e7ec      	b.n	8007df8 <_free_r+0x24>
 8007e1e:	4613      	mov	r3, r2
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	b10a      	cbz	r2, 8007e28 <_free_r+0x54>
 8007e24:	42a2      	cmp	r2, r4
 8007e26:	d9fa      	bls.n	8007e1e <_free_r+0x4a>
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	1858      	adds	r0, r3, r1
 8007e2c:	42a0      	cmp	r0, r4
 8007e2e:	d10b      	bne.n	8007e48 <_free_r+0x74>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	4401      	add	r1, r0
 8007e34:	1858      	adds	r0, r3, r1
 8007e36:	4282      	cmp	r2, r0
 8007e38:	6019      	str	r1, [r3, #0]
 8007e3a:	d1dd      	bne.n	8007df8 <_free_r+0x24>
 8007e3c:	6810      	ldr	r0, [r2, #0]
 8007e3e:	6852      	ldr	r2, [r2, #4]
 8007e40:	605a      	str	r2, [r3, #4]
 8007e42:	4401      	add	r1, r0
 8007e44:	6019      	str	r1, [r3, #0]
 8007e46:	e7d7      	b.n	8007df8 <_free_r+0x24>
 8007e48:	d902      	bls.n	8007e50 <_free_r+0x7c>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	e7d3      	b.n	8007df8 <_free_r+0x24>
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	1821      	adds	r1, r4, r0
 8007e54:	428a      	cmp	r2, r1
 8007e56:	bf04      	itt	eq
 8007e58:	6811      	ldreq	r1, [r2, #0]
 8007e5a:	6852      	ldreq	r2, [r2, #4]
 8007e5c:	6062      	str	r2, [r4, #4]
 8007e5e:	bf04      	itt	eq
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	605c      	str	r4, [r3, #4]
 8007e66:	e7c7      	b.n	8007df8 <_free_r+0x24>
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000208 	.word	0x20000208

08007e70 <_malloc_r>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	1ccd      	adds	r5, r1, #3
 8007e74:	f025 0503 	bic.w	r5, r5, #3
 8007e78:	3508      	adds	r5, #8
 8007e7a:	2d0c      	cmp	r5, #12
 8007e7c:	bf38      	it	cc
 8007e7e:	250c      	movcc	r5, #12
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	4606      	mov	r6, r0
 8007e84:	db01      	blt.n	8007e8a <_malloc_r+0x1a>
 8007e86:	42a9      	cmp	r1, r5
 8007e88:	d903      	bls.n	8007e92 <_malloc_r+0x22>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	2000      	movs	r0, #0
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	f000 fa7a 	bl	800838a <__malloc_lock>
 8007e96:	4a21      	ldr	r2, [pc, #132]	; (8007f1c <_malloc_r+0xac>)
 8007e98:	6814      	ldr	r4, [r2, #0]
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	b991      	cbnz	r1, 8007ec4 <_malloc_r+0x54>
 8007e9e:	4c20      	ldr	r4, [pc, #128]	; (8007f20 <_malloc_r+0xb0>)
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	b91b      	cbnz	r3, 8007eac <_malloc_r+0x3c>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 f98f 	bl	80081c8 <_sbrk_r>
 8007eaa:	6020      	str	r0, [r4, #0]
 8007eac:	4629      	mov	r1, r5
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f98a 	bl	80081c8 <_sbrk_r>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d124      	bne.n	8007f02 <_malloc_r+0x92>
 8007eb8:	230c      	movs	r3, #12
 8007eba:	6033      	str	r3, [r6, #0]
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f000 fa65 	bl	800838c <__malloc_unlock>
 8007ec2:	e7e4      	b.n	8007e8e <_malloc_r+0x1e>
 8007ec4:	680b      	ldr	r3, [r1, #0]
 8007ec6:	1b5b      	subs	r3, r3, r5
 8007ec8:	d418      	bmi.n	8007efc <_malloc_r+0x8c>
 8007eca:	2b0b      	cmp	r3, #11
 8007ecc:	d90f      	bls.n	8007eee <_malloc_r+0x7e>
 8007ece:	600b      	str	r3, [r1, #0]
 8007ed0:	50cd      	str	r5, [r1, r3]
 8007ed2:	18cc      	adds	r4, r1, r3
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f000 fa59 	bl	800838c <__malloc_unlock>
 8007eda:	f104 000b 	add.w	r0, r4, #11
 8007ede:	1d23      	adds	r3, r4, #4
 8007ee0:	f020 0007 	bic.w	r0, r0, #7
 8007ee4:	1ac3      	subs	r3, r0, r3
 8007ee6:	d0d3      	beq.n	8007e90 <_malloc_r+0x20>
 8007ee8:	425a      	negs	r2, r3
 8007eea:	50e2      	str	r2, [r4, r3]
 8007eec:	e7d0      	b.n	8007e90 <_malloc_r+0x20>
 8007eee:	428c      	cmp	r4, r1
 8007ef0:	684b      	ldr	r3, [r1, #4]
 8007ef2:	bf16      	itet	ne
 8007ef4:	6063      	strne	r3, [r4, #4]
 8007ef6:	6013      	streq	r3, [r2, #0]
 8007ef8:	460c      	movne	r4, r1
 8007efa:	e7eb      	b.n	8007ed4 <_malloc_r+0x64>
 8007efc:	460c      	mov	r4, r1
 8007efe:	6849      	ldr	r1, [r1, #4]
 8007f00:	e7cc      	b.n	8007e9c <_malloc_r+0x2c>
 8007f02:	1cc4      	adds	r4, r0, #3
 8007f04:	f024 0403 	bic.w	r4, r4, #3
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d005      	beq.n	8007f18 <_malloc_r+0xa8>
 8007f0c:	1a21      	subs	r1, r4, r0
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f000 f95a 	bl	80081c8 <_sbrk_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	d0cf      	beq.n	8007eb8 <_malloc_r+0x48>
 8007f18:	6025      	str	r5, [r4, #0]
 8007f1a:	e7db      	b.n	8007ed4 <_malloc_r+0x64>
 8007f1c:	20000208 	.word	0x20000208
 8007f20:	2000020c 	.word	0x2000020c

08007f24 <__ssputs_r>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	688e      	ldr	r6, [r1, #8]
 8007f2a:	429e      	cmp	r6, r3
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4690      	mov	r8, r2
 8007f32:	4699      	mov	r9, r3
 8007f34:	d837      	bhi.n	8007fa6 <__ssputs_r+0x82>
 8007f36:	898a      	ldrh	r2, [r1, #12]
 8007f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f3c:	d031      	beq.n	8007fa2 <__ssputs_r+0x7e>
 8007f3e:	6825      	ldr	r5, [r4, #0]
 8007f40:	6909      	ldr	r1, [r1, #16]
 8007f42:	1a6f      	subs	r7, r5, r1
 8007f44:	6965      	ldr	r5, [r4, #20]
 8007f46:	2302      	movs	r3, #2
 8007f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f50:	f109 0301 	add.w	r3, r9, #1
 8007f54:	443b      	add	r3, r7
 8007f56:	429d      	cmp	r5, r3
 8007f58:	bf38      	it	cc
 8007f5a:	461d      	movcc	r5, r3
 8007f5c:	0553      	lsls	r3, r2, #21
 8007f5e:	d530      	bpl.n	8007fc2 <__ssputs_r+0x9e>
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7ff ff85 	bl	8007e70 <_malloc_r>
 8007f66:	4606      	mov	r6, r0
 8007f68:	b950      	cbnz	r0, 8007f80 <__ssputs_r+0x5c>
 8007f6a:	230c      	movs	r3, #12
 8007f6c:	f8ca 3000 	str.w	r3, [sl]
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f80:	463a      	mov	r2, r7
 8007f82:	6921      	ldr	r1, [r4, #16]
 8007f84:	f7ff fb0e 	bl	80075a4 <memcpy>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6126      	str	r6, [r4, #16]
 8007f96:	6165      	str	r5, [r4, #20]
 8007f98:	443e      	add	r6, r7
 8007f9a:	1bed      	subs	r5, r5, r7
 8007f9c:	6026      	str	r6, [r4, #0]
 8007f9e:	60a5      	str	r5, [r4, #8]
 8007fa0:	464e      	mov	r6, r9
 8007fa2:	454e      	cmp	r6, r9
 8007fa4:	d900      	bls.n	8007fa8 <__ssputs_r+0x84>
 8007fa6:	464e      	mov	r6, r9
 8007fa8:	4632      	mov	r2, r6
 8007faa:	4641      	mov	r1, r8
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	f000 f9d3 	bl	8008358 <memmove>
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	60a3      	str	r3, [r4, #8]
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	441e      	add	r6, r3
 8007fbc:	6026      	str	r6, [r4, #0]
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e7dc      	b.n	8007f7c <__ssputs_r+0x58>
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	f000 f9e3 	bl	800838e <_realloc_r>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1e2      	bne.n	8007f94 <__ssputs_r+0x70>
 8007fce:	6921      	ldr	r1, [r4, #16]
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	f7ff feff 	bl	8007dd4 <_free_r>
 8007fd6:	e7c8      	b.n	8007f6a <__ssputs_r+0x46>

08007fd8 <_svfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	461d      	mov	r5, r3
 8007fde:	898b      	ldrh	r3, [r1, #12]
 8007fe0:	061f      	lsls	r7, r3, #24
 8007fe2:	b09d      	sub	sp, #116	; 0x74
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4616      	mov	r6, r2
 8007fea:	d50f      	bpl.n	800800c <_svfiprintf_r+0x34>
 8007fec:	690b      	ldr	r3, [r1, #16]
 8007fee:	b96b      	cbnz	r3, 800800c <_svfiprintf_r+0x34>
 8007ff0:	2140      	movs	r1, #64	; 0x40
 8007ff2:	f7ff ff3d 	bl	8007e70 <_malloc_r>
 8007ff6:	6020      	str	r0, [r4, #0]
 8007ff8:	6120      	str	r0, [r4, #16]
 8007ffa:	b928      	cbnz	r0, 8008008 <_svfiprintf_r+0x30>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	f8c8 3000 	str.w	r3, [r8]
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	e0c8      	b.n	800819a <_svfiprintf_r+0x1c2>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	2300      	movs	r3, #0
 800800e:	9309      	str	r3, [sp, #36]	; 0x24
 8008010:	2320      	movs	r3, #32
 8008012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008016:	2330      	movs	r3, #48	; 0x30
 8008018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800801c:	9503      	str	r5, [sp, #12]
 800801e:	f04f 0b01 	mov.w	fp, #1
 8008022:	4637      	mov	r7, r6
 8008024:	463d      	mov	r5, r7
 8008026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800802a:	b10b      	cbz	r3, 8008030 <_svfiprintf_r+0x58>
 800802c:	2b25      	cmp	r3, #37	; 0x25
 800802e:	d13e      	bne.n	80080ae <_svfiprintf_r+0xd6>
 8008030:	ebb7 0a06 	subs.w	sl, r7, r6
 8008034:	d00b      	beq.n	800804e <_svfiprintf_r+0x76>
 8008036:	4653      	mov	r3, sl
 8008038:	4632      	mov	r2, r6
 800803a:	4621      	mov	r1, r4
 800803c:	4640      	mov	r0, r8
 800803e:	f7ff ff71 	bl	8007f24 <__ssputs_r>
 8008042:	3001      	adds	r0, #1
 8008044:	f000 80a4 	beq.w	8008190 <_svfiprintf_r+0x1b8>
 8008048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804a:	4453      	add	r3, sl
 800804c:	9309      	str	r3, [sp, #36]	; 0x24
 800804e:	783b      	ldrb	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 809d 	beq.w	8008190 <_svfiprintf_r+0x1b8>
 8008056:	2300      	movs	r3, #0
 8008058:	f04f 32ff 	mov.w	r2, #4294967295
 800805c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008068:	931a      	str	r3, [sp, #104]	; 0x68
 800806a:	462f      	mov	r7, r5
 800806c:	2205      	movs	r2, #5
 800806e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008072:	4850      	ldr	r0, [pc, #320]	; (80081b4 <_svfiprintf_r+0x1dc>)
 8008074:	f7f8 f8d4 	bl	8000220 <memchr>
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	b9d0      	cbnz	r0, 80080b2 <_svfiprintf_r+0xda>
 800807c:	06d9      	lsls	r1, r3, #27
 800807e:	bf44      	itt	mi
 8008080:	2220      	movmi	r2, #32
 8008082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008086:	071a      	lsls	r2, r3, #28
 8008088:	bf44      	itt	mi
 800808a:	222b      	movmi	r2, #43	; 0x2b
 800808c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008090:	782a      	ldrb	r2, [r5, #0]
 8008092:	2a2a      	cmp	r2, #42	; 0x2a
 8008094:	d015      	beq.n	80080c2 <_svfiprintf_r+0xea>
 8008096:	9a07      	ldr	r2, [sp, #28]
 8008098:	462f      	mov	r7, r5
 800809a:	2000      	movs	r0, #0
 800809c:	250a      	movs	r5, #10
 800809e:	4639      	mov	r1, r7
 80080a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a4:	3b30      	subs	r3, #48	; 0x30
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d94d      	bls.n	8008146 <_svfiprintf_r+0x16e>
 80080aa:	b1b8      	cbz	r0, 80080dc <_svfiprintf_r+0x104>
 80080ac:	e00f      	b.n	80080ce <_svfiprintf_r+0xf6>
 80080ae:	462f      	mov	r7, r5
 80080b0:	e7b8      	b.n	8008024 <_svfiprintf_r+0x4c>
 80080b2:	4a40      	ldr	r2, [pc, #256]	; (80081b4 <_svfiprintf_r+0x1dc>)
 80080b4:	1a80      	subs	r0, r0, r2
 80080b6:	fa0b f000 	lsl.w	r0, fp, r0
 80080ba:	4318      	orrs	r0, r3
 80080bc:	9004      	str	r0, [sp, #16]
 80080be:	463d      	mov	r5, r7
 80080c0:	e7d3      	b.n	800806a <_svfiprintf_r+0x92>
 80080c2:	9a03      	ldr	r2, [sp, #12]
 80080c4:	1d11      	adds	r1, r2, #4
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	9103      	str	r1, [sp, #12]
 80080ca:	2a00      	cmp	r2, #0
 80080cc:	db01      	blt.n	80080d2 <_svfiprintf_r+0xfa>
 80080ce:	9207      	str	r2, [sp, #28]
 80080d0:	e004      	b.n	80080dc <_svfiprintf_r+0x104>
 80080d2:	4252      	negs	r2, r2
 80080d4:	f043 0302 	orr.w	r3, r3, #2
 80080d8:	9207      	str	r2, [sp, #28]
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	783b      	ldrb	r3, [r7, #0]
 80080de:	2b2e      	cmp	r3, #46	; 0x2e
 80080e0:	d10c      	bne.n	80080fc <_svfiprintf_r+0x124>
 80080e2:	787b      	ldrb	r3, [r7, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d133      	bne.n	8008150 <_svfiprintf_r+0x178>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	9203      	str	r2, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfb8      	it	lt
 80080f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f8:	3702      	adds	r7, #2
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	4d2e      	ldr	r5, [pc, #184]	; (80081b8 <_svfiprintf_r+0x1e0>)
 80080fe:	7839      	ldrb	r1, [r7, #0]
 8008100:	2203      	movs	r2, #3
 8008102:	4628      	mov	r0, r5
 8008104:	f7f8 f88c 	bl	8000220 <memchr>
 8008108:	b138      	cbz	r0, 800811a <_svfiprintf_r+0x142>
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	1b40      	subs	r0, r0, r5
 800810e:	fa03 f000 	lsl.w	r0, r3, r0
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	4303      	orrs	r3, r0
 8008116:	3701      	adds	r7, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	7839      	ldrb	r1, [r7, #0]
 800811c:	4827      	ldr	r0, [pc, #156]	; (80081bc <_svfiprintf_r+0x1e4>)
 800811e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008122:	2206      	movs	r2, #6
 8008124:	1c7e      	adds	r6, r7, #1
 8008126:	f7f8 f87b 	bl	8000220 <memchr>
 800812a:	2800      	cmp	r0, #0
 800812c:	d038      	beq.n	80081a0 <_svfiprintf_r+0x1c8>
 800812e:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <_svfiprintf_r+0x1e8>)
 8008130:	bb13      	cbnz	r3, 8008178 <_svfiprintf_r+0x1a0>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	3307      	adds	r3, #7
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	3308      	adds	r3, #8
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	444b      	add	r3, r9
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	e76d      	b.n	8008022 <_svfiprintf_r+0x4a>
 8008146:	fb05 3202 	mla	r2, r5, r2, r3
 800814a:	2001      	movs	r0, #1
 800814c:	460f      	mov	r7, r1
 800814e:	e7a6      	b.n	800809e <_svfiprintf_r+0xc6>
 8008150:	2300      	movs	r3, #0
 8008152:	3701      	adds	r7, #1
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	4619      	mov	r1, r3
 8008158:	250a      	movs	r5, #10
 800815a:	4638      	mov	r0, r7
 800815c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008160:	3a30      	subs	r2, #48	; 0x30
 8008162:	2a09      	cmp	r2, #9
 8008164:	d903      	bls.n	800816e <_svfiprintf_r+0x196>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0c8      	beq.n	80080fc <_svfiprintf_r+0x124>
 800816a:	9105      	str	r1, [sp, #20]
 800816c:	e7c6      	b.n	80080fc <_svfiprintf_r+0x124>
 800816e:	fb05 2101 	mla	r1, r5, r1, r2
 8008172:	2301      	movs	r3, #1
 8008174:	4607      	mov	r7, r0
 8008176:	e7f0      	b.n	800815a <_svfiprintf_r+0x182>
 8008178:	ab03      	add	r3, sp, #12
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4622      	mov	r2, r4
 800817e:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <_svfiprintf_r+0x1ec>)
 8008180:	a904      	add	r1, sp, #16
 8008182:	4640      	mov	r0, r8
 8008184:	f7fc f8f4 	bl	8004370 <_printf_float>
 8008188:	f1b0 3fff 	cmp.w	r0, #4294967295
 800818c:	4681      	mov	r9, r0
 800818e:	d1d6      	bne.n	800813e <_svfiprintf_r+0x166>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	065b      	lsls	r3, r3, #25
 8008194:	f53f af35 	bmi.w	8008002 <_svfiprintf_r+0x2a>
 8008198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800819a:	b01d      	add	sp, #116	; 0x74
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4622      	mov	r2, r4
 80081a6:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <_svfiprintf_r+0x1ec>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4640      	mov	r0, r8
 80081ac:	f7fc fb96 	bl	80048dc <_printf_i>
 80081b0:	e7ea      	b.n	8008188 <_svfiprintf_r+0x1b0>
 80081b2:	bf00      	nop
 80081b4:	080089f4 	.word	0x080089f4
 80081b8:	080089fa 	.word	0x080089fa
 80081bc:	080089fe 	.word	0x080089fe
 80081c0:	08004371 	.word	0x08004371
 80081c4:	08007f25 	.word	0x08007f25

080081c8 <_sbrk_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4c06      	ldr	r4, [pc, #24]	; (80081e4 <_sbrk_r+0x1c>)
 80081cc:	2300      	movs	r3, #0
 80081ce:	4605      	mov	r5, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	f7f9 fd66 	bl	8001ca4 <_sbrk>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_sbrk_r+0x1a>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_sbrk_r+0x1a>
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	20000948 	.word	0x20000948

080081e8 <__sread>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	460c      	mov	r4, r1
 80081ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f0:	f000 f8f4 	bl	80083dc <_read_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	bfab      	itete	ge
 80081f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081fa:	89a3      	ldrhlt	r3, [r4, #12]
 80081fc:	181b      	addge	r3, r3, r0
 80081fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008202:	bfac      	ite	ge
 8008204:	6563      	strge	r3, [r4, #84]	; 0x54
 8008206:	81a3      	strhlt	r3, [r4, #12]
 8008208:	bd10      	pop	{r4, pc}

0800820a <__swrite>:
 800820a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820e:	461f      	mov	r7, r3
 8008210:	898b      	ldrh	r3, [r1, #12]
 8008212:	05db      	lsls	r3, r3, #23
 8008214:	4605      	mov	r5, r0
 8008216:	460c      	mov	r4, r1
 8008218:	4616      	mov	r6, r2
 800821a:	d505      	bpl.n	8008228 <__swrite+0x1e>
 800821c:	2302      	movs	r3, #2
 800821e:	2200      	movs	r2, #0
 8008220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008224:	f000 f886 	bl	8008334 <_lseek_r>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	4632      	mov	r2, r6
 8008236:	463b      	mov	r3, r7
 8008238:	4628      	mov	r0, r5
 800823a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800823e:	f000 b835 	b.w	80082ac <_write_r>

08008242 <__sseek>:
 8008242:	b510      	push	{r4, lr}
 8008244:	460c      	mov	r4, r1
 8008246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824a:	f000 f873 	bl	8008334 <_lseek_r>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	bf15      	itete	ne
 8008254:	6560      	strne	r0, [r4, #84]	; 0x54
 8008256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800825a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800825e:	81a3      	strheq	r3, [r4, #12]
 8008260:	bf18      	it	ne
 8008262:	81a3      	strhne	r3, [r4, #12]
 8008264:	bd10      	pop	{r4, pc}

08008266 <__sclose>:
 8008266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826a:	f000 b831 	b.w	80082d0 <_close_r>

0800826e <strncmp>:
 800826e:	b510      	push	{r4, lr}
 8008270:	b16a      	cbz	r2, 800828e <strncmp+0x20>
 8008272:	3901      	subs	r1, #1
 8008274:	1884      	adds	r4, r0, r2
 8008276:	f810 3b01 	ldrb.w	r3, [r0], #1
 800827a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800827e:	4293      	cmp	r3, r2
 8008280:	d103      	bne.n	800828a <strncmp+0x1c>
 8008282:	42a0      	cmp	r0, r4
 8008284:	d001      	beq.n	800828a <strncmp+0x1c>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f5      	bne.n	8008276 <strncmp+0x8>
 800828a:	1a98      	subs	r0, r3, r2
 800828c:	bd10      	pop	{r4, pc}
 800828e:	4610      	mov	r0, r2
 8008290:	e7fc      	b.n	800828c <strncmp+0x1e>

08008292 <__ascii_wctomb>:
 8008292:	b149      	cbz	r1, 80082a8 <__ascii_wctomb+0x16>
 8008294:	2aff      	cmp	r2, #255	; 0xff
 8008296:	bf85      	ittet	hi
 8008298:	238a      	movhi	r3, #138	; 0x8a
 800829a:	6003      	strhi	r3, [r0, #0]
 800829c:	700a      	strbls	r2, [r1, #0]
 800829e:	f04f 30ff 	movhi.w	r0, #4294967295
 80082a2:	bf98      	it	ls
 80082a4:	2001      	movls	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	4608      	mov	r0, r1
 80082aa:	4770      	bx	lr

080082ac <_write_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4c07      	ldr	r4, [pc, #28]	; (80082cc <_write_r+0x20>)
 80082b0:	4605      	mov	r5, r0
 80082b2:	4608      	mov	r0, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f7f9 fcd8 	bl	8001c70 <_write>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_write_r+0x1e>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_write_r+0x1e>
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000948 	.word	0x20000948

080082d0 <_close_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4c06      	ldr	r4, [pc, #24]	; (80082ec <_close_r+0x1c>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4605      	mov	r5, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	f7f9 fcd6 	bl	8001c8c <_close>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_close_r+0x1a>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_close_r+0x1a>
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000948 	.word	0x20000948

080082f0 <_fstat_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4c07      	ldr	r4, [pc, #28]	; (8008310 <_fstat_r+0x20>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4605      	mov	r5, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	4611      	mov	r1, r2
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	f7f9 fcc8 	bl	8001c92 <_fstat>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d102      	bne.n	800830c <_fstat_r+0x1c>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	b103      	cbz	r3, 800830c <_fstat_r+0x1c>
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	bd38      	pop	{r3, r4, r5, pc}
 800830e:	bf00      	nop
 8008310:	20000948 	.word	0x20000948

08008314 <_isatty_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4c06      	ldr	r4, [pc, #24]	; (8008330 <_isatty_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4605      	mov	r5, r0
 800831c:	4608      	mov	r0, r1
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	f7f9 fcbc 	bl	8001c9c <_isatty>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_isatty_r+0x1a>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	b103      	cbz	r3, 800832e <_isatty_r+0x1a>
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000948 	.word	0x20000948

08008334 <_lseek_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4c07      	ldr	r4, [pc, #28]	; (8008354 <_lseek_r+0x20>)
 8008338:	4605      	mov	r5, r0
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	f7f9 fcac 	bl	8001ca0 <_lseek>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_lseek_r+0x1e>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	b103      	cbz	r3, 8008352 <_lseek_r+0x1e>
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	20000948 	.word	0x20000948

08008358 <memmove>:
 8008358:	4288      	cmp	r0, r1
 800835a:	b510      	push	{r4, lr}
 800835c:	eb01 0302 	add.w	r3, r1, r2
 8008360:	d807      	bhi.n	8008372 <memmove+0x1a>
 8008362:	1e42      	subs	r2, r0, #1
 8008364:	4299      	cmp	r1, r3
 8008366:	d00a      	beq.n	800837e <memmove+0x26>
 8008368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008370:	e7f8      	b.n	8008364 <memmove+0xc>
 8008372:	4283      	cmp	r3, r0
 8008374:	d9f5      	bls.n	8008362 <memmove+0xa>
 8008376:	1881      	adds	r1, r0, r2
 8008378:	1ad2      	subs	r2, r2, r3
 800837a:	42d3      	cmn	r3, r2
 800837c:	d100      	bne.n	8008380 <memmove+0x28>
 800837e:	bd10      	pop	{r4, pc}
 8008380:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008384:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008388:	e7f7      	b.n	800837a <memmove+0x22>

0800838a <__malloc_lock>:
 800838a:	4770      	bx	lr

0800838c <__malloc_unlock>:
 800838c:	4770      	bx	lr

0800838e <_realloc_r>:
 800838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008390:	4607      	mov	r7, r0
 8008392:	4614      	mov	r4, r2
 8008394:	460e      	mov	r6, r1
 8008396:	b921      	cbnz	r1, 80083a2 <_realloc_r+0x14>
 8008398:	4611      	mov	r1, r2
 800839a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800839e:	f7ff bd67 	b.w	8007e70 <_malloc_r>
 80083a2:	b922      	cbnz	r2, 80083ae <_realloc_r+0x20>
 80083a4:	f7ff fd16 	bl	8007dd4 <_free_r>
 80083a8:	4625      	mov	r5, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ae:	f000 f827 	bl	8008400 <_malloc_usable_size_r>
 80083b2:	42a0      	cmp	r0, r4
 80083b4:	d20f      	bcs.n	80083d6 <_realloc_r+0x48>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff fd59 	bl	8007e70 <_malloc_r>
 80083be:	4605      	mov	r5, r0
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d0f2      	beq.n	80083aa <_realloc_r+0x1c>
 80083c4:	4631      	mov	r1, r6
 80083c6:	4622      	mov	r2, r4
 80083c8:	f7ff f8ec 	bl	80075a4 <memcpy>
 80083cc:	4631      	mov	r1, r6
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff fd00 	bl	8007dd4 <_free_r>
 80083d4:	e7e9      	b.n	80083aa <_realloc_r+0x1c>
 80083d6:	4635      	mov	r5, r6
 80083d8:	e7e7      	b.n	80083aa <_realloc_r+0x1c>
	...

080083dc <_read_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4c07      	ldr	r4, [pc, #28]	; (80083fc <_read_r+0x20>)
 80083e0:	4605      	mov	r5, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	6022      	str	r2, [r4, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f7f9 fc32 	bl	8001c54 <_read>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_read_r+0x1e>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_read_r+0x1e>
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20000948 	.word	0x20000948

08008400 <_malloc_usable_size_r>:
 8008400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008404:	1f18      	subs	r0, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfbc      	itt	lt
 800840a:	580b      	ldrlt	r3, [r1, r0]
 800840c:	18c0      	addlt	r0, r0, r3
 800840e:	4770      	bx	lr

08008410 <_init>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr

0800841c <_fini>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	bf00      	nop
 8008420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008422:	bc08      	pop	{r3}
 8008424:	469e      	mov	lr, r3
 8008426:	4770      	bx	lr
