
PROFET2_12V_Shield_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800b380  0800b380  0001b380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc94  0800bc94  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc94  0800bc94  0001bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc9c  0800bc9c  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800bca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000264  0800bf08  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  0800bf08  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011db6  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002818  00000000  00000000  0003204a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00034868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b4  00000000  00000000  000366e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e2e  00000000  00000000  0005ad94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2a4  00000000  00000000  0006cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014be66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  0014bebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000264 	.word	0x20000264
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b368 	.word	0x0800b368

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000268 	.word	0x20000268
 800020c:	0800b368 	.word	0x0800b368

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <enableDiag>:
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void enableDiag(char num)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	if (num == '1')
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b31      	cmp	r3, #49	; 0x31
 800103a:	d10c      	bne.n	8001056 <enableDiag+0x2a>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4820      	ldr	r0, [pc, #128]	; (80010c4 <enableDiag+0x98>)
 8001044:	f003 fcc6 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	481e      	ldr	r0, [pc, #120]	; (80010c8 <enableDiag+0x9c>)
 8001050:	f003 fcc0 	bl	80049d4 <HAL_GPIO_WritePin>
 8001054:	e02e      	b.n	80010b4 <enableDiag+0x88>
	}
	else if (num == '2')
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b32      	cmp	r3, #50	; 0x32
 800105a:	d10c      	bne.n	8001076 <enableDiag+0x4a>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <enableDiag+0x98>)
 8001064:	f003 fcb6 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <enableDiag+0x9c>)
 8001070:	f003 fcb0 	bl	80049d4 <HAL_GPIO_WritePin>
 8001074:	e01e      	b.n	80010b4 <enableDiag+0x88>
	}
	else if (num == '3')
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b33      	cmp	r3, #51	; 0x33
 800107a:	d10c      	bne.n	8001096 <enableDiag+0x6a>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <enableDiag+0x98>)
 8001084:	f003 fca6 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <enableDiag+0x9c>)
 8001090:	f003 fca0 	bl	80049d4 <HAL_GPIO_WritePin>
 8001094:	e00e      	b.n	80010b4 <enableDiag+0x88>
	}
	else if (num == '4')
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b34      	cmp	r3, #52	; 0x34
 800109a:	d10b      	bne.n	80010b4 <enableDiag+0x88>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <enableDiag+0x98>)
 80010a4:	f003 fc96 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <enableDiag+0x9c>)
 80010b0:	f003 fc90 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	diagEnb = DIAG_EN;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <enableDiag+0xa0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020000 	.word	0x40020000
 80010cc:	20000080 	.word	0x20000080

080010d0 <disableDiag>:

void disableDiag(char num)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	if (num == '1')
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b31      	cmp	r3, #49	; 0x31
 80010de:	d10c      	bne.n	80010fa <disableDiag+0x2a>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	4820      	ldr	r0, [pc, #128]	; (8001168 <disableDiag+0x98>)
 80010e8:	f003 fc74 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	481e      	ldr	r0, [pc, #120]	; (800116c <disableDiag+0x9c>)
 80010f4:	f003 fc6e 	bl	80049d4 <HAL_GPIO_WritePin>
 80010f8:	e02e      	b.n	8001158 <disableDiag+0x88>
	}
	else if (num == '2')
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b32      	cmp	r3, #50	; 0x32
 80010fe:	d10c      	bne.n	800111a <disableDiag+0x4a>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4818      	ldr	r0, [pc, #96]	; (8001168 <disableDiag+0x98>)
 8001108:	f003 fc64 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <disableDiag+0x9c>)
 8001114:	f003 fc5e 	bl	80049d4 <HAL_GPIO_WritePin>
 8001118:	e01e      	b.n	8001158 <disableDiag+0x88>
	}
	else if (num == '3')
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b33      	cmp	r3, #51	; 0x33
 800111e:	d10c      	bne.n	800113a <disableDiag+0x6a>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <disableDiag+0x98>)
 8001128:	f003 fc54 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <disableDiag+0x9c>)
 8001134:	f003 fc4e 	bl	80049d4 <HAL_GPIO_WritePin>
 8001138:	e00e      	b.n	8001158 <disableDiag+0x88>
	}
	else if (num == '4')
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b34      	cmp	r3, #52	; 0x34
 800113e:	d10b      	bne.n	8001158 <disableDiag+0x88>
	{
		HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001146:	4808      	ldr	r0, [pc, #32]	; (8001168 <disableDiag+0x98>)
 8001148:	f003 fc44 	bl	80049d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <disableDiag+0x9c>)
 8001154:	f003 fc3e 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	diagEnb = DIAG_DIS;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <disableDiag+0xa0>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40020400 	.word	0x40020400
 800116c:	40020000 	.word	0x40020000
 8001170:	20000080 	.word	0x20000080

08001174 <ReadADC>:

void ReadADC(char num)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start(&hadc1);
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <ReadADC+0xb8>)
 8001180:	f001 fd74 	bl	8002c6c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001184:	2164      	movs	r1, #100	; 0x64
 8001186:	4829      	ldr	r0, [pc, #164]	; (800122c <ReadADC+0xb8>)
 8001188:	f001 fe75 	bl	8002e76 <HAL_ADC_PollForConversion>
	Shield.A1_adc_raw_value_Vbb = HAL_ADC_GetValue(&hadc1);    // Vbb raw value
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <ReadADC+0xb8>)
 800118e:	f002 f9a9 	bl	80034e4 <HAL_ADC_GetValue>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <ReadADC+0xbc>)
 8001198:	615a      	str	r2, [r3, #20]
	HAL_ADC_Stop(&hadc1);
 800119a:	4824      	ldr	r0, [pc, #144]	; (800122c <ReadADC+0xb8>)
 800119c:	f001 fe38 	bl	8002e10 <HAL_ADC_Stop>
	 break;
	 }*/

// tsIS(DIAG) <= 3 x (tON_max + tsIS(ON)_max) = 3 x (210µs + 40) = 750µs!
// Vbb, ADC 1,3 READ
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 3);
 80011a0:	2203      	movs	r2, #3
 80011a2:	4924      	ldr	r1, [pc, #144]	; (8001234 <ReadADC+0xc0>)
 80011a4:	4821      	ldr	r0, [pc, #132]	; (800122c <ReadADC+0xb8>)
 80011a6:	f002 f833 	bl	8003210 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 3; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	e008      	b.n	80011c2 <ReadADC+0x4e>
	{
		HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 80011b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b4:	2100      	movs	r1, #0
 80011b6:	4820      	ldr	r0, [pc, #128]	; (8001238 <ReadADC+0xc4>)
 80011b8:	f002 ff2e 	bl	8004018 <HAL_DMA_PollForTransfer>
	for (int i = 0; i < 3; i++)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	ddf3      	ble.n	80011b0 <ReadADC+0x3c>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <ReadADC+0xb8>)
 80011ca:	f002 f931 	bl	8003430 <HAL_ADC_Stop_DMA>
// ADC 1,3 SET Data
	Shield.A2_adc_raw_value_IS_1 = ADC_Value[1]; // read analog value from analog input A2 -> device U1 -> sense IS1
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <ReadADC+0xc0>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <ReadADC+0xbc>)
 80011d6:	619a      	str	r2, [r3, #24]
	Shield.A3_adc_raw_value_IS_3 = ADC_Value[2]; // read analog value from analog input A3 -> device U3 -> sense IS3
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <ReadADC+0xc0>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <ReadADC+0xbc>)
 80011e0:	621a      	str	r2, [r3, #32]
	 HAL_Delay(1); // generously delay of 1ms to give the PROFET+2 time to provide the sense signal
	 break;
	 }
	 */
	/* Vbb, ADC 2,4 READ */
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 3);
 80011e2:	2203      	movs	r2, #3
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <ReadADC+0xc0>)
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <ReadADC+0xb8>)
 80011e8:	f002 f812 	bl	8003210 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 3; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	e008      	b.n	8001204 <ReadADC+0x90>
	{
		HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 80011f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f6:	2100      	movs	r1, #0
 80011f8:	480f      	ldr	r0, [pc, #60]	; (8001238 <ReadADC+0xc4>)
 80011fa:	f002 ff0d 	bl	8004018 <HAL_DMA_PollForTransfer>
	for (int i = 0; i < 3; i++)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3301      	adds	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b02      	cmp	r3, #2
 8001208:	ddf3      	ble.n	80011f2 <ReadADC+0x7e>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <ReadADC+0xb8>)
 800120c:	f002 f910 	bl	8003430 <HAL_ADC_Stop_DMA>
// ADC 2,4 SET Data
	Shield.A2_adc_raw_value_IS_2 = ADC_Value[1]; // read analog value from analog input A2 -> device U2 -> sense IS2
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <ReadADC+0xc0>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <ReadADC+0xbc>)
 8001218:	61da      	str	r2, [r3, #28]
	Shield.A3_adc_raw_value_IS_4 = ADC_Value[2]; // read analog value from analog input A3 -> device U4 -> sense IS4
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <ReadADC+0xc0>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	461a      	mov	r2, r3
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <ReadADC+0xbc>)
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200004a8 	.word	0x200004a8
 8001230:	20000000 	.word	0x20000000
 8001234:	20000498 	.word	0x20000498
 8001238:	200004f0 	.word	0x200004f0

0800123c <readIS>:

float readIS(char num)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	ReadADC(num);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff93 	bl	8001174 <ReadADC>

	// Calculate ADC voltage for analog input A1 -> Vbb
	Shield.A1_Vbb_ADC_Voltage = (float) (Shield.A1_adc_raw_value_Vbb
 800124e:	4b92      	ldr	r3, [pc, #584]	; (8001498 <readIS+0x25c>)
 8001250:	695b      	ldr	r3, [r3, #20]
			/ Shield.max_adc_reading * Shield.adc_reference_voltage); // e.g. 1024/1024*5 -> 5V max
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800125a:	4b8f      	ldr	r3, [pc, #572]	; (8001498 <readIS+0x25c>)
 800125c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001264:	4b8c      	ldr	r3, [pc, #560]	; (8001498 <readIS+0x25c>)
 8001266:	edd3 7a03 	vldr	s15, [r3, #12]
	Shield.A1_Vbb_ADC_Voltage = (float) (Shield.A1_adc_raw_value_Vbb
 800126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126e:	4b8a      	ldr	r3, [pc, #552]	; (8001498 <readIS+0x25c>)
 8001270:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	Shield.A1_Vbb_ADC_Voltage = (Shield.A1_Vbb_ADC_Voltage
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <readIS+0x25c>)
 8001276:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
			- Shield.A1_Vbb_Offset) * Shield.A1_Vbb_Gain; // e.g. (5V - 0V) * 1 = 5V
 800127a:	4b87      	ldr	r3, [pc, #540]	; (8001498 <readIS+0x25c>)
 800127c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001280:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001284:	4b84      	ldr	r3, [pc, #528]	; (8001498 <readIS+0x25c>)
 8001286:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
	Shield.A1_Vbb_ADC_Voltage = (Shield.A1_Vbb_ADC_Voltage
 800128e:	4b82      	ldr	r3, [pc, #520]	; (8001498 <readIS+0x25c>)
 8001290:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	Shield.A1_Vbb_Real_Voltage = (float) ((Shield.A1_Vbb_ADC_Voltage
 8001294:	4b80      	ldr	r3, [pc, #512]	; (8001498 <readIS+0x25c>)
 8001296:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
			* (Shield.Vbb_Resistor_1 + Shield.Vbb_Resistor_2))
 800129a:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <readIS+0x25c>)
 800129c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80012a0:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <readIS+0x25c>)
 80012a2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80012a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012aa:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ Shield.Vbb_Resistor_2); // e.g. (5V *(47k + 10k))/10k = 28.5V max measurable VS
 80012ae:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <readIS+0x25c>)
 80012b0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
	Shield.A1_Vbb_Real_Voltage = (float) ((Shield.A1_Vbb_ADC_Voltage
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	4b77      	ldr	r3, [pc, #476]	; (8001498 <readIS+0x25c>)
 80012ba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	if (num == '1')
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b31      	cmp	r3, #49	; 0x31
 80012c2:	d137      	bne.n	8001334 <readIS+0xf8>
	{
		// Calculate ADC voltage for analog input A2 -> ISense 1
		Shield.Ux_IS_Voltage[0] = Shield.A2_adc_raw_value_IS_1
 80012c4:	4b74      	ldr	r3, [pc, #464]	; (8001498 <readIS+0x25c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
				/ Shield.max_adc_reading * Shield.adc_reference_voltage; // e.g. 1024/1024*5 -> 5V
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d0:	4b71      	ldr	r3, [pc, #452]	; (8001498 <readIS+0x25c>)
 80012d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012da:	4b6f      	ldr	r3, [pc, #444]	; (8001498 <readIS+0x25c>)
 80012dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[0] = Shield.A2_adc_raw_value_IS_1
 80012e4:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <readIS+0x25c>)
 80012e6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		Shield.Ux_IS_Ampere[0] = (float) ((Shield.Ux_IS_Voltage[0]
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <readIS+0x25c>)
 80012ec:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				* Shield.kilis) / 1000); // e.g. (5*22700)/1000 -> 113.5 A max
 80012f0:	4b69      	ldr	r3, [pc, #420]	; (8001498 <readIS+0x25c>)
 80012f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fc:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[0] = (float) ((Shield.Ux_IS_Voltage[0]
 8001300:	eddf 6a66 	vldr	s13, [pc, #408]	; 800149c <readIS+0x260>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	4b63      	ldr	r3, [pc, #396]	; (8001498 <readIS+0x25c>)
 800130a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		Shield.Ux_IS_Ampere[0] = (Shield.Ux_IS_Ampere[0] - Shield.Ampere_Offset)
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <readIS+0x25c>)
 8001310:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001314:	4b60      	ldr	r3, [pc, #384]	; (8001498 <readIS+0x25c>)
 8001316:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800131a:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;             // (113.5 - 0) * 1 = 113.5A
 800131e:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <readIS+0x25c>)
 8001320:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[0] = (Shield.Ux_IS_Ampere[0] - Shield.Ampere_Offset)
 8001328:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <readIS+0x25c>)
 800132a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		return Shield.Ux_IS_Ampere[0];
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <readIS+0x25c>)
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	e18a      	b.n	800164a <readIS+0x40e>
	}
	else if (num == '2')
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b32      	cmp	r3, #50	; 0x32
 8001338:	d137      	bne.n	80013aa <readIS+0x16e>
	{
		// Calculate ADC voltage for analog input A2 -> ISense 2
		Shield.Ux_IS_Voltage[1] = Shield.A2_adc_raw_value_IS_2
 800133a:	4b57      	ldr	r3, [pc, #348]	; (8001498 <readIS+0x25c>)
 800133c:	69db      	ldr	r3, [r3, #28]
				/ Shield.max_adc_reading * Shield.adc_reference_voltage; // e.g. calculation for 10A // e.g. (91/1024)*5 = 0,4443359375
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <readIS+0x25c>)
 8001348:	edd3 7a02 	vldr	s15, [r3, #8]
 800134c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <readIS+0x25c>)
 8001352:	edd3 7a03 	vldr	s15, [r3, #12]
 8001356:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[1] = Shield.A2_adc_raw_value_IS_2
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <readIS+0x25c>)
 800135c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		Shield.Ux_IS_Ampere[1] = (float) ((Shield.Ux_IS_Voltage[1]
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <readIS+0x25c>)
 8001362:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
				* Shield.kilis) / 1000); // e.g. (0,4443359375*22700)/1000 = 10,086 A
 8001366:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <readIS+0x25c>)
 8001368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[1] = (float) ((Shield.Ux_IS_Voltage[1]
 8001376:	eddf 6a49 	vldr	s13, [pc, #292]	; 800149c <readIS+0x260>
 800137a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <readIS+0x25c>)
 8001380:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		Shield.Ux_IS_Ampere[1] = (Shield.Ux_IS_Ampere[1] - Shield.Ampere_Offset)
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <readIS+0x25c>)
 8001386:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <readIS+0x25c>)
 800138c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001390:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;           // e.g. (10,086-0) * 1 = 10,086A
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <readIS+0x25c>)
 8001396:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[1] = (Shield.Ux_IS_Ampere[1] - Shield.Ampere_Offset)
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <readIS+0x25c>)
 80013a0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		return Shield.Ux_IS_Ampere[1];
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <readIS+0x25c>)
 80013a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a8:	e14f      	b.n	800164a <readIS+0x40e>
	}
	else if (num == '3')
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b33      	cmp	r3, #51	; 0x33
 80013ae:	d137      	bne.n	8001420 <readIS+0x1e4>
	{
		// Calculate ADC voltage for analog input A3 -> ISense 3
		Shield.Ux_IS_Voltage[2] = Shield.A3_adc_raw_value_IS_3
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <readIS+0x25c>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
				/ Shield.max_adc_reading * Shield.adc_reference_voltage; // e.g. calculation for 2.2A // e.g. (20/1024)*5 = 0,09765625
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <readIS+0x25c>)
 80013be:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <readIS+0x25c>)
 80013c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[2] = Shield.A3_adc_raw_value_IS_3
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <readIS+0x25c>)
 80013d2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		Shield.Ux_IS_Ampere[2] = (float) ((Shield.Ux_IS_Voltage[2]
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <readIS+0x25c>)
 80013d8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
				* Shield.kilis) / 1000); // (0,09765625*22700)/1000 = 2,216796 A
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <readIS+0x25c>)
 80013de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[2] = (float) ((Shield.Ux_IS_Voltage[2]
 80013ec:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800149c <readIS+0x260>
 80013f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <readIS+0x25c>)
 80013f6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		Shield.Ux_IS_Ampere[2] = (Shield.Ux_IS_Ampere[2] - Shield.Ampere_Offset)
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <readIS+0x25c>)
 80013fc:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <readIS+0x25c>)
 8001402:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001406:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;      // e.g. (2,2167-0) * 1 = 2,2167A
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <readIS+0x25c>)
 800140c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[2] = (Shield.Ux_IS_Ampere[2] - Shield.Ampere_Offset)
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <readIS+0x25c>)
 8001416:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		return Shield.Ux_IS_Ampere[2];
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <readIS+0x25c>)
 800141c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800141e:	e114      	b.n	800164a <readIS+0x40e>
	}
	else if (num == '4')
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b34      	cmp	r3, #52	; 0x34
 8001424:	d13c      	bne.n	80014a0 <readIS+0x264>
	{
		// Calculate ADC voltage for analog input A3 -> ISense 4
		Shield.Ux_IS_Voltage[3] = Shield.A3_adc_raw_value_IS_4
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <readIS+0x25c>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				/ Shield.max_adc_reading * Shield.adc_reference_voltage;
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <readIS+0x25c>)
 8001434:	edd3 7a02 	vldr	s15, [r3, #8]
 8001438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <readIS+0x25c>)
 800143e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[3] = Shield.A3_adc_raw_value_IS_4
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <readIS+0x25c>)
 8001448:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		Shield.Ux_IS_Ampere[3] = (float) ((Shield.Ux_IS_Voltage[3]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <readIS+0x25c>)
 800144e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
				* Shield.kilis) / 1000);
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <readIS+0x25c>)
 8001454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[3] = (float) ((Shield.Ux_IS_Voltage[3]
 8001462:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800149c <readIS+0x260>
 8001466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <readIS+0x25c>)
 800146c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		Shield.Ux_IS_Ampere[3] = (Shield.Ux_IS_Ampere[3] - Shield.Ampere_Offset)
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <readIS+0x25c>)
 8001472:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <readIS+0x25c>)
 8001478:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800147c:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <readIS+0x25c>)
 8001482:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001486:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[3] = (Shield.Ux_IS_Ampere[3] - Shield.Ampere_Offset)
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <readIS+0x25c>)
 800148c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		return Shield.Ux_IS_Ampere[3];
 8001490:	4b01      	ldr	r3, [pc, #4]	; (8001498 <readIS+0x25c>)
 8001492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001494:	e0d9      	b.n	800164a <readIS+0x40e>
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	447a0000 	.word	0x447a0000
	}
	else // ALL
	{
		// Calculate ADC voltage for analog input A2 -> ISense 1
		Shield.Ux_IS_Voltage[0] = Shield.A2_adc_raw_value_IS_1
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <readIS+0x41c>)
 80014a2:	699b      	ldr	r3, [r3, #24]
				/ Shield.max_adc_reading * Shield.adc_reference_voltage; // e.g. 1024/1024*5 -> 5V
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <readIS+0x41c>)
 80014ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80014b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <readIS+0x41c>)
 80014b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[0] = Shield.A2_adc_raw_value_IS_1
 80014c0:	4b65      	ldr	r3, [pc, #404]	; (8001658 <readIS+0x41c>)
 80014c2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		Shield.Ux_IS_Ampere[0] = (float) ((Shield.Ux_IS_Voltage[0]
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <readIS+0x41c>)
 80014c8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				* Shield.kilis) / 1000); // e.g. (5*22700)/1000 -> 113.5 A max
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <readIS+0x41c>)
 80014ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[0] = (float) ((Shield.Ux_IS_Voltage[0]
 80014dc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800165c <readIS+0x420>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <readIS+0x41c>)
 80014e6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		Shield.Ux_IS_Ampere[0] = (Shield.Ux_IS_Ampere[0] - Shield.Ampere_Offset)
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <readIS+0x41c>)
 80014ec:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <readIS+0x41c>)
 80014f2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80014f6:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;             // (113.5 - 0) * 1 = 113.5A
 80014fa:	4b57      	ldr	r3, [pc, #348]	; (8001658 <readIS+0x41c>)
 80014fc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[0] = (Shield.Ux_IS_Ampere[0] - Shield.Ampere_Offset)
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <readIS+0x41c>)
 8001506:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

		// Calculate ADC voltage for analog input A2 -> ISense 2
		Shield.Ux_IS_Voltage[1] = Shield.A2_adc_raw_value_IS_2
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <readIS+0x41c>)
 800150c:	69db      	ldr	r3, [r3, #28]
				/ Shield.max_adc_reading * Shield.adc_reference_voltage; // e.g. calculation for 10A // e.g. (91/1024)*5 = 0,4443359375
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <readIS+0x41c>)
 8001518:	edd3 7a02 	vldr	s15, [r3, #8]
 800151c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001520:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <readIS+0x41c>)
 8001522:	edd3 7a03 	vldr	s15, [r3, #12]
 8001526:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[1] = Shield.A2_adc_raw_value_IS_2
 800152a:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <readIS+0x41c>)
 800152c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		Shield.Ux_IS_Ampere[1] = (float) ((Shield.Ux_IS_Voltage[1]
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <readIS+0x41c>)
 8001532:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
				* Shield.kilis) / 1000); // e.g. (0,4443359375*22700)/1000 = 10,086 A
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <readIS+0x41c>)
 8001538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[1] = (float) ((Shield.Ux_IS_Voltage[1]
 8001546:	eddf 6a45 	vldr	s13, [pc, #276]	; 800165c <readIS+0x420>
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <readIS+0x41c>)
 8001550:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		Shield.Ux_IS_Ampere[1] = (Shield.Ux_IS_Ampere[1] - Shield.Ampere_Offset)
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <readIS+0x41c>)
 8001556:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <readIS+0x41c>)
 800155c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001560:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;           // e.g. (10,086-0) * 1 = 10,086A
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <readIS+0x41c>)
 8001566:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[1] = (Shield.Ux_IS_Ampere[1] - Shield.Ampere_Offset)
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <readIS+0x41c>)
 8001570:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		// Calculate ADC voltage for analog input A3 -> ISense 3
		Shield.Ux_IS_Voltage[2] = Shield.A3_adc_raw_value_IS_3
 8001574:	4b38      	ldr	r3, [pc, #224]	; (8001658 <readIS+0x41c>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
				/ Shield.max_adc_reading * Shield.adc_reference_voltage; // e.g. calculation for 2.2A // e.g. (20/1024)*5 = 0,09765625
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <readIS+0x41c>)
 8001582:	edd3 7a02 	vldr	s15, [r3, #8]
 8001586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <readIS+0x41c>)
 800158c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[2] = Shield.A3_adc_raw_value_IS_3
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <readIS+0x41c>)
 8001596:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		Shield.Ux_IS_Ampere[2] = (float) ((Shield.Ux_IS_Voltage[2]
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <readIS+0x41c>)
 800159c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
				* Shield.kilis) / 1000); // (0,09765625*22700)/1000 = 2,216796 A
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <readIS+0x41c>)
 80015a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ac:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[2] = (float) ((Shield.Ux_IS_Voltage[2]
 80015b0:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800165c <readIS+0x420>
 80015b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <readIS+0x41c>)
 80015ba:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		Shield.Ux_IS_Ampere[2] = (Shield.Ux_IS_Ampere[2] - Shield.Ampere_Offset)
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <readIS+0x41c>)
 80015c0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <readIS+0x41c>)
 80015c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015ca:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;           // e.g. (2,2167-0) * 1 = 2,2167A
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <readIS+0x41c>)
 80015d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[2] = (Shield.Ux_IS_Ampere[2] - Shield.Ampere_Offset)
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <readIS+0x41c>)
 80015da:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		// Calculate ADC voltage for analog input A3 -> ISense 4
		Shield.Ux_IS_Voltage[3] = Shield.A3_adc_raw_value_IS_4
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <readIS+0x41c>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				/ Shield.max_adc_reading * Shield.adc_reference_voltage;
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <readIS+0x41c>)
 80015ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <readIS+0x41c>)
 80015f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Voltage[3] = Shield.A3_adc_raw_value_IS_4
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <readIS+0x41c>)
 8001600:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		Shield.Ux_IS_Ampere[3] = (float) ((Shield.Ux_IS_Voltage[3]
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <readIS+0x41c>)
 8001606:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
				* Shield.kilis) / 1000);
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <readIS+0x41c>)
 800160c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	ee27 7a27 	vmul.f32	s14, s14, s15
		Shield.Ux_IS_Ampere[3] = (float) ((Shield.Ux_IS_Voltage[3]
 800161a:	eddf 6a10 	vldr	s13, [pc, #64]	; 800165c <readIS+0x420>
 800161e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <readIS+0x41c>)
 8001624:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		Shield.Ux_IS_Ampere[3] = (Shield.Ux_IS_Ampere[3] - Shield.Ampere_Offset)
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <readIS+0x41c>)
 800162a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <readIS+0x41c>)
 8001630:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001634:	ee37 7a67 	vsub.f32	s14, s14, s15
				* Shield.Ampere_Gain;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <readIS+0x41c>)
 800163a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
		Shield.Ux_IS_Ampere[3] = (Shield.Ux_IS_Ampere[3] - Shield.Ampere_Offset)
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <readIS+0x41c>)
 8001644:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	}
	//HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);

}
 8001648:	e001      	b.n	800164e <readIS+0x412>
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	447a0000 	.word	0x447a0000

08001660 <diagRead>:

float diagRead(char num)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	uint16_t AnalogDigitalConverterResult = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	81fb      	strh	r3, [r7, #14]
	float amps = 0.0;
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
	//DiagStatus_t diagStatus = NORMAL;
	//DiagEnable_t diagEnb = DIAG_DIS;

	if (diagEnb == DIAG_EN)
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <diagRead+0xc0>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d13d      	bne.n	80016f8 <diagRead+0x98>
	{
		//readIS(num);
		//amps = Shield.Ux_IS_Ampere[n];
		amps = readIS(num);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fddc 	bl	800123c <readIS>
 8001684:	ed87 0a02 	vstr	s0, [r7, #8]

		if (amps > (0.0044 * Shield.kilis))
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7fe ff7d 	bl	8000588 <__aeabi_f2d>
 800168e:	4604      	mov	r4, r0
 8001690:	460d      	mov	r5, r1
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <diagRead+0xc4>)
 8001694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff64 	bl	8000564 <__aeabi_i2d>
 800169c:	a31c      	add	r3, pc, #112	; (adr r3, 8001710 <diagRead+0xb0>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffc9 	bl	8000638 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7ff fa53 	bl	8000b58 <__aeabi_dcmpgt>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <diagRead+0x5e>
		{
			return OVERLOAD;
 80016b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016bc:	e01e      	b.n	80016fc <diagRead+0x9c>
		}
		else if (amps < (0.00002 * Shield.kilis))
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe ff62 	bl	8000588 <__aeabi_f2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <diagRead+0xc4>)
 80016ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff49 	bl	8000564 <__aeabi_i2d>
 80016d2:	a311      	add	r3, pc, #68	; (adr r3, 8001718 <diagRead+0xb8>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7ff fa1a 	bl	8000b1c <__aeabi_dcmplt>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <diagRead+0x92>
		{
			return OPEN_LOAD;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <diagRead+0xc8>)
 80016f0:	e004      	b.n	80016fc <diagRead+0x9c>
		}
		else
		{
			return NORMAL;
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e001      	b.n	80016fc <diagRead+0x9c>
		}
	}

	else
	{
		return NOT_ENABLED;
 80016f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016fc:	ee07 3a90 	vmov	s15, r3
	}

	return diagStatus;

}
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	01a36e2f 	.word	0x01a36e2f
 8001714:	3f7205bc 	.word	0x3f7205bc
 8001718:	88e368f1 	.word	0x88e368f1
 800171c:	3ef4f8b5 	.word	0x3ef4f8b5
 8001720:	20000080 	.word	0x20000080
 8001724:	20000000 	.word	0x20000000
 8001728:	40a00000 	.word	0x40a00000
 800172c:	00000000 	.word	0x00000000

08001730 <diagnosisOff>:

int diagnosisOff(float CurrentON, float CurrentOFF)
{
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
 800173a:	edc7 0a00 	vstr	s1, [r7]
	if ((CurrentON > (0.0018 * Shield.kilis))
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe ff22 	bl	8000588 <__aeabi_f2d>
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <diagnosisOff+0x128>)
 800174a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff09 	bl	8000564 <__aeabi_i2d>
 8001752:	a33d      	add	r3, pc, #244	; (adr r3, 8001848 <diagnosisOff+0x118>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff6e 	bl	8000638 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7ff f9f8 	bl	8000b58 <__aeabi_dcmpgt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04b      	beq.n	8001806 <diagnosisOff+0xd6>
			&& (CurrentON < (0.0044 * Shield.kilis)))
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe ff0a 	bl	8000588 <__aeabi_f2d>
 8001774:	4604      	mov	r4, r0
 8001776:	460d      	mov	r5, r1
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <diagnosisOff+0x128>)
 800177a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fef1 	bl	8000564 <__aeabi_i2d>
 8001782:	a333      	add	r3, pc, #204	; (adr r3, 8001850 <diagnosisOff+0x120>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff56 	bl	8000638 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4620      	mov	r0, r4
 8001792:	4629      	mov	r1, r5
 8001794:	f7ff f9c2 	bl	8000b1c <__aeabi_dcmplt>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d033      	beq.n	8001806 <diagnosisOff+0xd6>
	{
		if ((CurrentOFF > (0.0018 * Shield.kilis))
 800179e:	6838      	ldr	r0, [r7, #0]
 80017a0:	f7fe fef2 	bl	8000588 <__aeabi_f2d>
 80017a4:	4604      	mov	r4, r0
 80017a6:	460d      	mov	r5, r1
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <diagnosisOff+0x128>)
 80017aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fed9 	bl	8000564 <__aeabi_i2d>
 80017b2:	a325      	add	r3, pc, #148	; (adr r3, 8001848 <diagnosisOff+0x118>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ff3e 	bl	8000638 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7ff f9c8 	bl	8000b58 <__aeabi_dcmpgt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d019      	beq.n	8001802 <diagnosisOff+0xd2>
				&& (CurrentOFF < (0.0044 * Shield.kilis)))
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f7fe feda 	bl	8000588 <__aeabi_f2d>
 80017d4:	4604      	mov	r4, r0
 80017d6:	460d      	mov	r5, r1
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <diagnosisOff+0x128>)
 80017da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fec1 	bl	8000564 <__aeabi_i2d>
 80017e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001850 <diagnosisOff+0x120>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff26 	bl	8000638 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7ff f992 	bl	8000b1c <__aeabi_dcmplt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <diagnosisOff+0xd2>
		{
			return SHORT_TO_VSS;
 80017fe:	2304      	movs	r3, #4
 8001800:	e01c      	b.n	800183c <diagnosisOff+0x10c>
		}
		else
		{
			return OPEN_LOAD;
 8001802:	2305      	movs	r3, #5
 8001804:	e01a      	b.n	800183c <diagnosisOff+0x10c>
		}
	}
	else
	{
		if ((CurrentON > (0.0044 * Shield.kilis)))
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe febe 	bl	8000588 <__aeabi_f2d>
 800180c:	4604      	mov	r4, r0
 800180e:	460d      	mov	r5, r1
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <diagnosisOff+0x128>)
 8001812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fea5 	bl	8000564 <__aeabi_i2d>
 800181a:	a30d      	add	r3, pc, #52	; (adr r3, 8001850 <diagnosisOff+0x120>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe ff0a 	bl	8000638 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7ff f994 	bl	8000b58 <__aeabi_dcmpgt>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <diagnosisOff+0x10a>
		{
			return SHORT_TO_GND;
 8001836:	2302      	movs	r3, #2
 8001838:	e000      	b.n	800183c <diagnosisOff+0x10c>
		}
		else
		{
			return NORMAL;
 800183a:	2300      	movs	r3, #0
		}
	}
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	487fcb92 	.word	0x487fcb92
 800184c:	3f5d7dbf 	.word	0x3f5d7dbf
 8001850:	01a36e2f 	.word	0x01a36e2f
 8001854:	3f7205bc 	.word	0x3f7205bc
 8001858:	20000000 	.word	0x20000000

0800185c <PortStatus>:

void PortStatus(char num)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	DiagStatus_t diagStatus = NORMAL;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]

	switch (num)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	3b31      	subs	r3, #49	; 0x31
 800186e:	2b03      	cmp	r3, #3
 8001870:	f200 814a 	bhi.w	8001b08 <PortStatus+0x2ac>
 8001874:	a201      	add	r2, pc, #4	; (adr r2, 800187c <PortStatus+0x20>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001935 	.word	0x08001935
 8001884:	080019d1 	.word	0x080019d1
 8001888:	08001a6d 	.word	0x08001a6d
	{
	case '1':
		enableDiag(num);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fbcc 	bl	800102c <enableDiag>
		if ((IN1_GPIO_Port->IDR & IN1_Pin ? 0 : 1) == 1)
 8001894:	4ba1      	ldr	r3, [pc, #644]	; (8001b1c <PortStatus+0x2c0>)
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10c      	bne.n	80018ba <PortStatus+0x5e>
		{
			diagStatus = diagRead(num);
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fedc 	bl	8001660 <diagRead>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b0:	edc7 7a00 	vstr	s15, [r7]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e037      	b.n	800192a <PortStatus+0xce>
		}
		else
		{
			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c0:	4897      	ldr	r0, [pc, #604]	; (8001b20 <PortStatus+0x2c4>)
 80018c2:	f003 f887 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f001 f968 	bl	8002b9c <HAL_Delay>
			CurrentON = readIS(num);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fcb4 	bl	800123c <readIS>
 80018d4:	eef0 7a40 	vmov.f32	s15, s0
 80018d8:	4b92      	ldr	r3, [pc, #584]	; (8001b24 <PortStatus+0x2c8>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
			HAL_Delay(1);
 80018de:	2001      	movs	r0, #1
 80018e0:	f001 f95c 	bl	8002b9c <HAL_Delay>

			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ea:	488d      	ldr	r0, [pc, #564]	; (8001b20 <PortStatus+0x2c4>)
 80018ec:	f003 f872 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f001 f953 	bl	8002b9c <HAL_Delay>
			CurrentOFF = readIS(num);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fc9f 	bl	800123c <readIS>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4b89      	ldr	r3, [pc, #548]	; (8001b28 <PortStatus+0x2cc>)
 8001904:	edc3 7a00 	vstr	s15, [r3]
			HAL_Delay(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f001 f947 	bl	8002b9c <HAL_Delay>

			diagStatus = diagnosisOff(CurrentON, CurrentOFF);
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <PortStatus+0x2c8>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <PortStatus+0x2cc>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	eef0 0a47 	vmov.f32	s1, s14
 800191e:	eeb0 0a67 	vmov.f32	s0, s15
 8001922:	f7ff ff05 	bl	8001730 <diagnosisOff>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
		}
		disableDiag(num);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbcf 	bl	80010d0 <disableDiag>
		break;
 8001932:	e0ee      	b.n	8001b12 <PortStatus+0x2b6>
	case '2':
		enableDiag(num);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb78 	bl	800102c <enableDiag>
		if ((IN1_GPIO_Port->IDR & IN2_Pin ? 0 : 1) == 1)
 800193c:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <PortStatus+0x2c0>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10c      	bne.n	8001962 <PortStatus+0x106>
		{
			diagStatus = diagRead(num);
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe88 	bl	8001660 <diagRead>
 8001950:	eef0 7a40 	vmov.f32	s15, s0
 8001954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001958:	edc7 7a00 	vstr	s15, [r7]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e031      	b.n	80019c6 <PortStatus+0x16a>
		}
		else
		{
			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001968:	486d      	ldr	r0, [pc, #436]	; (8001b20 <PortStatus+0x2c4>)
 800196a:	f003 f833 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f001 f914 	bl	8002b9c <HAL_Delay>
			CurrentON = readIS(num);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fc60 	bl	800123c <readIS>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
 8001980:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <PortStatus+0x2c8>)
 8001982:	edc3 7a00 	vstr	s15, [r3]

			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198c:	4864      	ldr	r0, [pc, #400]	; (8001b20 <PortStatus+0x2c4>)
 800198e:	f003 f821 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 f902 	bl	8002b9c <HAL_Delay>
			CurrentOFF = readIS(num);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc4e 	bl	800123c <readIS>
 80019a0:	eef0 7a40 	vmov.f32	s15, s0
 80019a4:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <PortStatus+0x2cc>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]

			diagStatus = diagnosisOff(CurrentON, CurrentOFF);
 80019aa:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <PortStatus+0x2c8>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <PortStatus+0x2cc>)
 80019b2:	ed93 7a00 	vldr	s14, [r3]
 80019b6:	eef0 0a47 	vmov.f32	s1, s14
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f7ff feb7 	bl	8001730 <diagnosisOff>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
		}
		disableDiag(num);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fb81 	bl	80010d0 <disableDiag>
		break;
 80019ce:	e0a0      	b.n	8001b12 <PortStatus+0x2b6>
	case '3':
		enableDiag(num);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fb2a 	bl	800102c <enableDiag>
		if ((IN1_GPIO_Port->IDR & IN3_Pin ? 0 : 1) == 1)
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <PortStatus+0x2c0>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <PortStatus+0x1a2>
		{
			diagStatus = diagRead(num);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe3a 	bl	8001660 <diagRead>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	edc7 7a00 	vstr	s15, [r7]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e031      	b.n	8001a62 <PortStatus+0x206>
		}
		else
		{
			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a04:	4846      	ldr	r0, [pc, #280]	; (8001b20 <PortStatus+0x2c4>)
 8001a06:	f002 ffe5 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f001 f8c6 	bl	8002b9c <HAL_Delay>
			CurrentON = readIS(num);
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fc12 	bl	800123c <readIS>
 8001a18:	eef0 7a40 	vmov.f32	s15, s0
 8001a1c:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <PortStatus+0x2c8>)
 8001a1e:	edc3 7a00 	vstr	s15, [r3]

			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a28:	483d      	ldr	r0, [pc, #244]	; (8001b20 <PortStatus+0x2c4>)
 8001a2a:	f002 ffd3 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f001 f8b4 	bl	8002b9c <HAL_Delay>
			CurrentOFF = readIS(num);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fc00 	bl	800123c <readIS>
 8001a3c:	eef0 7a40 	vmov.f32	s15, s0
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <PortStatus+0x2cc>)
 8001a42:	edc3 7a00 	vstr	s15, [r3]

			diagStatus = diagnosisOff(CurrentON, CurrentOFF);
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <PortStatus+0x2c8>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <PortStatus+0x2cc>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	eef0 0a47 	vmov.f32	s1, s14
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	f7ff fe69 	bl	8001730 <diagnosisOff>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
		}
		disableDiag(num);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb33 	bl	80010d0 <disableDiag>
		break;
 8001a6a:	e052      	b.n	8001b12 <PortStatus+0x2b6>
	case '4':
		enableDiag(num);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fadc 	bl	800102c <enableDiag>
		if ((IN1_GPIO_Port->IDR & IN4_Pin ? 0 : 1) == 1)
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <PortStatus+0x2c0>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10c      	bne.n	8001a9a <PortStatus+0x23e>
		{
			diagStatus = diagRead(num);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fdec 	bl	8001660 <diagRead>
 8001a88:	eef0 7a40 	vmov.f32	s15, s0
 8001a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a90:	edc7 7a00 	vstr	s15, [r7]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e031      	b.n	8001afe <PortStatus+0x2a2>
		}
		else
		{
			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa0:	481f      	ldr	r0, [pc, #124]	; (8001b20 <PortStatus+0x2c4>)
 8001aa2:	f002 ff97 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f001 f878 	bl	8002b9c <HAL_Delay>
			CurrentON = readIS(num);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fbc4 	bl	800123c <readIS>
 8001ab4:	eef0 7a40 	vmov.f32	s15, s0
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <PortStatus+0x2c8>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]

			HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac4:	4816      	ldr	r0, [pc, #88]	; (8001b20 <PortStatus+0x2c4>)
 8001ac6:	f002 ff85 	bl	80049d4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f001 f866 	bl	8002b9c <HAL_Delay>
			CurrentOFF = readIS(num);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fbb2 	bl	800123c <readIS>
 8001ad8:	eef0 7a40 	vmov.f32	s15, s0
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <PortStatus+0x2cc>)
 8001ade:	edc3 7a00 	vstr	s15, [r3]

			diagStatus = diagnosisOff(CurrentON, CurrentOFF);
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <PortStatus+0x2c8>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <PortStatus+0x2cc>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	eef0 0a47 	vmov.f32	s1, s14
 8001af2:	eeb0 0a67 	vmov.f32	s0, s15
 8001af6:	f7ff fe1b 	bl	8001730 <diagnosisOff>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
		}
		disableDiag(num);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fae5 	bl	80010d0 <disableDiag>
		break;
 8001b06:	e004      	b.n	8001b12 <PortStatus+0x2b6>
	default:
		readIS(num);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb96 	bl	800123c <readIS>
		break;
 8001b10:	bf00      	nop
	}

}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	2000028c 	.word	0x2000028c
 8001b28:	20000290 	.word	0x20000290

08001b2c <WriteShieldLED>:

void WriteShieldLED(uint8_t _LED1, uint8_t _LED2, uint8_t _LED3, uint8_t _LED4,
		ArduinoShield *Shield)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71bb      	strb	r3, [r7, #6]
 8001b42:	460b      	mov	r3, r1
 8001b44:	717b      	strb	r3, [r7, #5]
 8001b46:	4613      	mov	r3, r2
 8001b48:	713b      	strb	r3, [r7, #4]
	if (_LED1 == 0)
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <WriteShieldLED+0x30>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2120      	movs	r1, #32
 8001b54:	4821      	ldr	r0, [pc, #132]	; (8001bdc <WriteShieldLED+0xb0>)
 8001b56:	f002 ff3d 	bl	80049d4 <HAL_GPIO_WritePin>
 8001b5a:	e004      	b.n	8001b66 <WriteShieldLED+0x3a>
	}
	else
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2120      	movs	r1, #32
 8001b60:	481e      	ldr	r0, [pc, #120]	; (8001bdc <WriteShieldLED+0xb0>)
 8001b62:	f002 ff37 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	if (_LED2 == 0)
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <WriteShieldLED+0x4c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2110      	movs	r1, #16
 8001b70:	481a      	ldr	r0, [pc, #104]	; (8001bdc <WriteShieldLED+0xb0>)
 8001b72:	f002 ff2f 	bl	80049d4 <HAL_GPIO_WritePin>
 8001b76:	e004      	b.n	8001b82 <WriteShieldLED+0x56>
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4817      	ldr	r0, [pc, #92]	; (8001bdc <WriteShieldLED+0xb0>)
 8001b7e:	f002 ff29 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	if (_LED3 == 0)
 8001b82:	797b      	ldrb	r3, [r7, #5]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <WriteShieldLED+0x68>
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	4814      	ldr	r0, [pc, #80]	; (8001be0 <WriteShieldLED+0xb4>)
 8001b8e:	f002 ff21 	bl	80049d4 <HAL_GPIO_WritePin>
 8001b92:	e004      	b.n	8001b9e <WriteShieldLED+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2140      	movs	r1, #64	; 0x40
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <WriteShieldLED+0xb4>)
 8001b9a:	f002 ff1b 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	if (_LED4 == 0)
 8001b9e:	793b      	ldrb	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <WriteShieldLED+0x84>
	{
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <WriteShieldLED+0xb4>)
 8001baa:	f002 ff13 	bl	80049d4 <HAL_GPIO_WritePin>
 8001bae:	e004      	b.n	8001bba <WriteShieldLED+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <WriteShieldLED+0xb4>)
 8001bb6:	f002 ff0d 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	Shield->status_LED1 = _LED1;   // remember LED1 status
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	711a      	strb	r2, [r3, #4]
	Shield->status_LED2 = _LED2;   // remember LED" status
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	79ba      	ldrb	r2, [r7, #6]
 8001bc4:	715a      	strb	r2, [r3, #5]
	Shield->status_LED3 = _LED3;   // remember LED3 status
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	797a      	ldrb	r2, [r7, #5]
 8001bca:	719a      	strb	r2, [r3, #6]
	Shield->status_LED4 = _LED4;   // remember LED4 status
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	793a      	ldrb	r2, [r7, #4]
 8001bd0:	71da      	strb	r2, [r3, #7]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020000 	.word	0x40020000

08001be4 <WriteShieldIN>:

void WriteShieldIN(uint8_t _In1, uint8_t _In2, uint8_t _In3, uint8_t _In4,
		ArduinoShield *Shield)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71bb      	strb	r3, [r7, #6]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	717b      	strb	r3, [r7, #5]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	713b      	strb	r3, [r7, #4]
	if (_In1 == 0)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <WriteShieldIN+0x30>
	{
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	4821      	ldr	r0, [pc, #132]	; (8001c94 <WriteShieldIN+0xb0>)
 8001c0e:	f002 fee1 	bl	80049d4 <HAL_GPIO_WritePin>
 8001c12:	e004      	b.n	8001c1e <WriteShieldIN+0x3a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	481e      	ldr	r0, [pc, #120]	; (8001c94 <WriteShieldIN+0xb0>)
 8001c1a:	f002 fedb 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	if (_In2 == 0)
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <WriteShieldIN+0x4c>
	{
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2140      	movs	r1, #64	; 0x40
 8001c28:	481b      	ldr	r0, [pc, #108]	; (8001c98 <WriteShieldIN+0xb4>)
 8001c2a:	f002 fed3 	bl	80049d4 <HAL_GPIO_WritePin>
 8001c2e:	e004      	b.n	8001c3a <WriteShieldIN+0x56>
	}
	else
	{
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <WriteShieldIN+0xb4>)
 8001c36:	f002 fecd 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	if (_In3 == 0)
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <WriteShieldIN+0x68>
	{
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	4815      	ldr	r0, [pc, #84]	; (8001c9c <WriteShieldIN+0xb8>)
 8001c46:	f002 fec5 	bl	80049d4 <HAL_GPIO_WritePin>
 8001c4a:	e004      	b.n	8001c56 <WriteShieldIN+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	4812      	ldr	r0, [pc, #72]	; (8001c9c <WriteShieldIN+0xb8>)
 8001c52:	f002 febf 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	if (_In4 == 0)
 8001c56:	793b      	ldrb	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <WriteShieldIN+0x84>
	{
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2108      	movs	r1, #8
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <WriteShieldIN+0xb4>)
 8001c62:	f002 feb7 	bl	80049d4 <HAL_GPIO_WritePin>
 8001c66:	e004      	b.n	8001c72 <WriteShieldIN+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2108      	movs	r1, #8
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <WriteShieldIN+0xb4>)
 8001c6e:	f002 feb1 	bl	80049d4 <HAL_GPIO_WritePin>
	}
	Shield->status_In_U1 = _In1; // remember PROFET U1 output status
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	79fa      	ldrb	r2, [r7, #7]
 8001c76:	701a      	strb	r2, [r3, #0]
	Shield->status_In_U2 = _In2; // remember PROFET U2 output status
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	79ba      	ldrb	r2, [r7, #6]
 8001c7c:	705a      	strb	r2, [r3, #1]
	Shield->status_In_U3 = _In3; // remember PROFET U3 output status
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	797a      	ldrb	r2, [r7, #5]
 8001c82:	709a      	strb	r2, [r3, #2]
	Shield->status_In_U4 = _In4; // remember PROFET U4 output status
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	793a      	ldrb	r2, [r7, #4]
 8001c88:	70da      	strb	r2, [r3, #3]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <PrintStatus>:

void PrintStatus()
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af06      	add	r7, sp, #24
	sprintf(UBuf,
			"===================================================================================================\r\n"
					"OUT1: %d\tOUT2: %d\tOUT3: %d\tOUT4: %d\t\tLED1: %d\tLED2: %d\tLED3: %d\tLED4: %d\t\r\n"
					"----------------------------------------------------------------------------------------------------\r\n",
			Shield.status_In_U1, Shield.status_In_U2, Shield.status_In_U3,
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <PrintStatus+0x6c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
	sprintf(UBuf,
 8001caa:	461e      	mov	r6, r3
			Shield.status_In_U1, Shield.status_In_U2, Shield.status_In_U3,
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <PrintStatus+0x6c>)
 8001cae:	785b      	ldrb	r3, [r3, #1]
	sprintf(UBuf,
 8001cb0:	469c      	mov	ip, r3
			Shield.status_In_U1, Shield.status_In_U2, Shield.status_In_U3,
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <PrintStatus+0x6c>)
 8001cb4:	789b      	ldrb	r3, [r3, #2]
	sprintf(UBuf,
 8001cb6:	461a      	mov	r2, r3
			Shield.status_In_U4, Shield.status_LED1, Shield.status_LED2,
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <PrintStatus+0x6c>)
 8001cba:	78db      	ldrb	r3, [r3, #3]
	sprintf(UBuf,
 8001cbc:	4619      	mov	r1, r3
			Shield.status_In_U4, Shield.status_LED1, Shield.status_LED2,
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <PrintStatus+0x6c>)
 8001cc0:	791b      	ldrb	r3, [r3, #4]
	sprintf(UBuf,
 8001cc2:	4618      	mov	r0, r3
			Shield.status_In_U4, Shield.status_LED1, Shield.status_LED2,
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <PrintStatus+0x6c>)
 8001cc6:	795b      	ldrb	r3, [r3, #5]
	sprintf(UBuf,
 8001cc8:	461c      	mov	r4, r3
			Shield.status_LED3, Shield.status_LED4);
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <PrintStatus+0x6c>)
 8001ccc:	799b      	ldrb	r3, [r3, #6]
	sprintf(UBuf,
 8001cce:	461d      	mov	r5, r3
			Shield.status_LED3, Shield.status_LED4);
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <PrintStatus+0x6c>)
 8001cd2:	79db      	ldrb	r3, [r3, #7]
	sprintf(UBuf,
 8001cd4:	9305      	str	r3, [sp, #20]
 8001cd6:	9504      	str	r5, [sp, #16]
 8001cd8:	9403      	str	r4, [sp, #12]
 8001cda:	9002      	str	r0, [sp, #8]
 8001cdc:	9101      	str	r1, [sp, #4]
 8001cde:	9200      	str	r2, [sp, #0]
 8001ce0:	4663      	mov	r3, ip
 8001ce2:	4632      	mov	r2, r6
 8001ce4:	490a      	ldr	r1, [pc, #40]	; (8001d10 <PrintStatus+0x70>)
 8001ce6:	480b      	ldr	r0, [pc, #44]	; (8001d14 <PrintStatus+0x74>)
 8001ce8:	f005 fd9a 	bl	8007820 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UBuf, strlen(UBuf), 1000);
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <PrintStatus+0x74>)
 8001cee:	f7fe fa8f 	bl	8000210 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	4906      	ldr	r1, [pc, #24]	; (8001d14 <PrintStatus+0x74>)
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <PrintStatus+0x78>)
 8001cfe:	f003 ffaa 	bl	8005c56 <HAL_UART_Transmit>
}
 8001d02:	bf00      	nop
 8001d04:	3704      	adds	r7, #4
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	0800b380 	.word	0x0800b380
 8001d14:	200002a0 	.word	0x200002a0
 8001d18:	2000099c 	.word	0x2000099c

08001d1c <PrintADC>:

void PrintADC()
{
 8001d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d20:	b0ad      	sub	sp, #180	; 0xb4
 8001d22:	af1c      	add	r7, sp, #112	; 0x70
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d24:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <PrintADC+0x128>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c

			"Out 4 - ADC raw value : %d\t"
			"ADC-Voltage (0-3.3V) : %f\t"
			"Sense current OUT 4 : %f\r\n\r\n"

	, Shield.A1_adc_raw_value_Vbb, Shield.A1_Vbb_ADC_Voltage,
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <PrintADC+0x128>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc2a 	bl	8000588 <__aeabi_f2d>
 8001d34:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			Shield.A1_Vbb_Real_Voltage,
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <PrintADC+0x128>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc23 	bl	8000588 <__aeabi_f2d>
 8001d42:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001d46:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <PrintADC+0x128>)
 8001d48:	6999      	ldr	r1, [r3, #24]
 8001d4a:	63b9      	str	r1, [r7, #56]	; 0x38

			Shield.A2_adc_raw_value_IS_1, Shield.Ux_IS_Voltage[0],
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <PrintADC+0x128>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc19 	bl	8000588 <__aeabi_f2d>
 8001d56:	e9c7 0108 	strd	r0, r1, [r7, #32]
			Shield.Ux_IS_Ampere[0],
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <PrintADC+0x128>)
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc12 	bl	8000588 <__aeabi_f2d>
 8001d64:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <PrintADC+0x128>)
 8001d6a:	69dc      	ldr	r4, [r3, #28]
 8001d6c:	617c      	str	r4, [r7, #20]

			Shield.A2_adc_raw_value_IS_2, Shield.Ux_IS_Voltage[1],
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <PrintADC+0x128>)
 8001d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fc08 	bl	8000588 <__aeabi_f2d>
 8001d78:	e9c7 0102 	strd	r0, r1, [r7, #8]
			Shield.Ux_IS_Ampere[1],
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <PrintADC+0x128>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc01 	bl	8000588 <__aeabi_f2d>
 8001d86:	e9c7 0100 	strd	r0, r1, [r7]
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <PrintADC+0x128>)
 8001d8c:	6a1d      	ldr	r5, [r3, #32]
 8001d8e:	613d      	str	r5, [r7, #16]

			Shield.A3_adc_raw_value_IS_3, Shield.Ux_IS_Voltage[2],
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <PrintADC+0x128>)
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbf7 	bl	8000588 <__aeabi_f2d>
 8001d9a:	4682      	mov	sl, r0
 8001d9c:	468b      	mov	fp, r1
			Shield.Ux_IS_Ampere[2],
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <PrintADC+0x128>)
 8001da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbf0 	bl	8000588 <__aeabi_f2d>
 8001da8:	4680      	mov	r8, r0
 8001daa:	4689      	mov	r9, r1
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <PrintADC+0x128>)
 8001dae:	6a5e      	ldr	r6, [r3, #36]	; 0x24

			Shield.A3_adc_raw_value_IS_4, Shield.Ux_IS_Voltage[3],
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <PrintADC+0x128>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbe7 	bl	8000588 <__aeabi_f2d>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	460d      	mov	r5, r1
			Shield.Ux_IS_Ampere[3]);
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <PrintADC+0x128>)
 8001dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	sprintf(UBuf, "Vbb - ADC raw value : %d\t"
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8001dd0:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001dd4:	9616      	str	r6, [sp, #88]	; 0x58
 8001dd6:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8001dda:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8001dde:	693d      	ldr	r5, [r7, #16]
 8001de0:	9510      	str	r5, [sp, #64]	; 0x40
 8001de2:	ed97 7b00 	vldr	d7, [r7]
 8001de6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001dea:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001df2:	697c      	ldr	r4, [r7, #20]
 8001df4:	940a      	str	r4, [sp, #40]	; 0x28
 8001df6:	ed97 7b06 	vldr	d7, [r7, #24]
 8001dfa:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001dfe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e02:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e08:	9104      	str	r1, [sp, #16]
 8001e0a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001e0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001e12:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001e16:	ed8d 7b00 	vstr	d7, [sp]
 8001e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e1c:	490a      	ldr	r1, [pc, #40]	; (8001e48 <PrintADC+0x12c>)
 8001e1e:	480b      	ldr	r0, [pc, #44]	; (8001e4c <PrintADC+0x130>)
 8001e20:	f005 fcfe 	bl	8007820 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UBuf, strlen(UBuf), 1000);
 8001e24:	4809      	ldr	r0, [pc, #36]	; (8001e4c <PrintADC+0x130>)
 8001e26:	f7fe f9f3 	bl	8000210 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	4906      	ldr	r1, [pc, #24]	; (8001e4c <PrintADC+0x130>)
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <PrintADC+0x134>)
 8001e36:	f003 ff0e 	bl	8005c56 <HAL_UART_Transmit>
}
 8001e3a:	bf00      	nop
 8001e3c:	3744      	adds	r7, #68	; 0x44
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	0800b498 	.word	0x0800b498
 8001e4c:	200002a0 	.word	0x200002a0
 8001e50:	2000099c 	.word	0x2000099c

08001e54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		tcnt++;
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e70:	701a      	strb	r2, [r3, #0]
	}
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40001000 	.word	0x40001000
 8001e84:	20000289 	.word	0x20000289

08001e88 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d11e      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(&huart2, &tmpbuf, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4912      	ldr	r1, [pc, #72]	; (8001ee8 <HAL_UART_RxCpltCallback+0x60>)
 8001ea0:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <HAL_UART_RxCpltCallback+0x5c>)
 8001ea2:	f004 f80c 	bl	8005ebe <HAL_UART_Receive_IT>
		buf[bufTail] = huart->pRxBuffPtr[0];
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_UART_RxCpltCallback+0x64>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	7811      	ldrb	r1, [r2, #0]
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_UART_RxCpltCallback+0x68>)
 8001eb2:	54d1      	strb	r1, [r2, r3]
		bufTail++;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_UART_RxCpltCallback+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_UART_RxCpltCallback+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]
		bufTail %= 200;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_UART_RxCpltCallback+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_UART_RxCpltCallback+0x6c>)
 8001ec4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ec8:	1199      	asrs	r1, r3, #6
 8001eca:	17d3      	asrs	r3, r2, #31
 8001ecc:	1acb      	subs	r3, r1, r3
 8001ece:	21c8      	movs	r1, #200	; 0xc8
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <HAL_UART_RxCpltCallback+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]
	}
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000099c 	.word	0x2000099c
 8001ee8:	20000494 	.word	0x20000494
 8001eec:	20000284 	.word	0x20000284
 8001ef0:	2000059c 	.word	0x2000059c
 8001ef4:	51eb851f 	.word	0x51eb851f

08001ef8 <__io_putchar>:
int __io_putchar(int ch)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	uint8_t *tr = (uint8_t*) &ch;
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &tr[0], 1, -1);
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	2201      	movs	r2, #1
 8001f0a:	68f9      	ldr	r1, [r7, #12]
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <__io_putchar+0x24>)
 8001f0e:	f003 fea2 	bl	8005c56 <HAL_UART_Transmit>
	return ch;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000099c 	.word	0x2000099c

08001f20 <__io_getchar>:
int __io_getchar()
{
 8001f20:	b490      	push	{r4, r7}
 8001f22:	af00      	add	r7, sp, #0
	register int ret;

	__retry: if (bufHead != bufTail)
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <__io_getchar+0x4c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <__io_getchar+0x50>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d0f9      	beq.n	8001f24 <__io_getchar+0x4>
	{
		ret = buf[bufHead];
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <__io_getchar+0x4c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <__io_getchar+0x54>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	461c      	mov	r4, r3
		if (ret == '\r')
 8001f3a:	2c0d      	cmp	r4, #13
 8001f3c:	d100      	bne.n	8001f40 <__io_getchar+0x20>
		{
			ret = '\n';
 8001f3e:	240a      	movs	r4, #10
		}
		bufHead++;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <__io_getchar+0x4c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <__io_getchar+0x4c>)
 8001f48:	6013      	str	r3, [r2, #0]
		bufHead %= MAX_BUFLEN;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <__io_getchar+0x4c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	425a      	negs	r2, r3
 8001f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f54:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001f58:	bf58      	it	pl
 8001f5a:	4253      	negpl	r3, r2
 8001f5c:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <__io_getchar+0x4c>)
 8001f5e:	6013      	str	r3, [r2, #0]
	}
	else
	{
		goto __retry;
	}
	return ret;
 8001f60:	4623      	mov	r3, r4
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc90      	pop	{r4, r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000280 	.word	0x20000280
 8001f70:	20000284 	.word	0x20000284
 8001f74:	2000059c 	.word	0x2000059c

08001f78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f7e:	f000 fd9b 	bl	8002ab8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f82:	f000 f8f5 	bl	8002170 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f86:	f000 fa55 	bl	8002434 <MX_GPIO_Init>
	MX_DMA_Init();
 8001f8a:	f000 fa33 	bl	80023f4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001f8e:	f000 fa07 	bl	80023a0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001f92:	f000 f95f 	bl	8002254 <MX_ADC1_Init>
	MX_TIM6_Init();
 8001f96:	f000 f9cd 	bl	8002334 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8001f9a:	4866      	ldr	r0, [pc, #408]	; (8002134 <main+0x1bc>)
 8001f9c:	f003 fb3e 	bl	800561c <HAL_TIM_Base_Start_IT>
	WriteShieldIN(0, 0, 0, 0, &Shield);
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <main+0x1c0>)
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fe1a 	bl	8001be4 <WriteShieldIN>
	WriteShieldLED(0, 0, 0, 0, &Shield);
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <main+0x1c0>)
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fdb6 	bl	8001b2c <WriteShieldLED>

	printf("-----------------------------------------------------\r\n");
 8001fc0:	485e      	ldr	r0, [pc, #376]	; (800213c <main+0x1c4>)
 8001fc2:	f005 fc1f 	bl	8007804 <puts>
	printf(" Infineon PROFET+2 12V Arduino Shield HW Rev 5.0     \r\n");
 8001fc6:	485e      	ldr	r0, [pc, #376]	; (8002140 <main+0x1c8>)
 8001fc8:	f005 fc1c 	bl	8007804 <puts>
	printf(" Software Version 1.00                SW Button3     \r\n");
 8001fcc:	485d      	ldr	r0, [pc, #372]	; (8002144 <main+0x1cc>)
 8001fce:	f005 fc19 	bl	8007804 <puts>
	printf(" PROFET+2 BTS7002-1EPP                               \r\n");
 8001fd2:	485d      	ldr	r0, [pc, #372]	; (8002148 <main+0x1d0>)
 8001fd4:	f005 fc16 	bl	8007804 <puts>
	printf(" PROFET+2 BTS7004-1EPP                               \r\n");
 8001fd8:	485c      	ldr	r0, [pc, #368]	; (800214c <main+0x1d4>)
 8001fda:	f005 fc13 	bl	8007804 <puts>
	printf(" PROFET+2 BTS7006-1EPP                               \r\n");
 8001fde:	485c      	ldr	r0, [pc, #368]	; (8002150 <main+0x1d8>)
 8001fe0:	f005 fc10 	bl	8007804 <puts>
	printf(" PROFET+2 BTS7008-1EPP                     2019-10-29\r\n");
 8001fe4:	485b      	ldr	r0, [pc, #364]	; (8002154 <main+0x1dc>)
 8001fe6:	f005 fc0d 	bl	8007804 <puts>
	printf("-----------------------------------------------------\r\n");
 8001fea:	4854      	ldr	r0, [pc, #336]	; (800213c <main+0x1c4>)
 8001fec:	f005 fc0a 	bl	8007804 <puts>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4958      	ldr	r1, [pc, #352]	; (8002158 <main+0x1e0>)
 8001ff6:	4859      	ldr	r0, [pc, #356]	; (800215c <main+0x1e4>)
 8001ff8:	f003 febf 	bl	8005d7a <HAL_UART_Receive>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <main+0x1e8>)
 8002002:	701a      	strb	r2, [r3, #0]
		if (rcvStat2 == HAL_OK)
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <main+0x1e8>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d17c      	bne.n	8002106 <main+0x18e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*) "TX UART2 : ", 11, 1000);
 800200c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002010:	220b      	movs	r2, #11
 8002012:	4954      	ldr	r1, [pc, #336]	; (8002164 <main+0x1ec>)
 8002014:	4851      	ldr	r0, [pc, #324]	; (800215c <main+0x1e4>)
 8002016:	f003 fe1e 	bl	8005c56 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &received2, 1, 1000);
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	2201      	movs	r2, #1
 8002020:	494d      	ldr	r1, [pc, #308]	; (8002158 <main+0x1e0>)
 8002022:	484e      	ldr	r0, [pc, #312]	; (800215c <main+0x1e4>)
 8002024:	f003 fe17 	bl	8005c56 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n\r\n", 4, 1000);
 8002028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202c:	2204      	movs	r2, #4
 800202e:	494e      	ldr	r1, [pc, #312]	; (8002168 <main+0x1f0>)
 8002030:	484a      	ldr	r0, [pc, #296]	; (800215c <main+0x1e4>)
 8002032:	f003 fe10 	bl	8005c56 <HAL_UART_Transmit>
			switch (received2)
 8002036:	4b48      	ldr	r3, [pc, #288]	; (8002158 <main+0x1e0>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	3b30      	subs	r3, #48	; 0x30
 800203c:	2b04      	cmp	r3, #4
 800203e:	d864      	bhi.n	800210a <main+0x192>
 8002040:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <main+0xd0>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	0800205d 	.word	0x0800205d
 800204c:	0800207f 	.word	0x0800207f
 8002050:	080020a1 	.word	0x080020a1
 8002054:	080020c3 	.word	0x080020c3
 8002058:	080020e5 	.word	0x080020e5
// switch the outputs based on the button counter
			{
			case '0':  // switch all outputs an LEDs on the Arduino Shield OFF
				WriteShieldLED(0, 0, 0, 0, &Shield);
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <main+0x1c0>)
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fd60 	bl	8001b2c <WriteShieldLED>
				WriteShieldIN(0, 0, 0, 0, &Shield);
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <main+0x1c0>)
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2300      	movs	r3, #0
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff fdb4 	bl	8001be4 <WriteShieldIN>
				break;
 800207c:	e046      	b.n	800210c <main+0x194>
			case '1':  // switch OUT1 and LED1 ON
				WriteShieldLED(1, 0, 0, 0, &Shield);
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <main+0x1c0>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff fd4f 	bl	8001b2c <WriteShieldLED>
				WriteShieldIN(1, 0, 0, 0, &Shield);
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <main+0x1c0>)
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff fda3 	bl	8001be4 <WriteShieldIN>
				break;
 800209e:	e035      	b.n	800210c <main+0x194>
			case '2':  // switch OUT2 and LED2 ON
				WriteShieldLED(0, 1, 0, 0, &Shield);
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <main+0x1c0>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2300      	movs	r3, #0
 80020a6:	2200      	movs	r2, #0
 80020a8:	2101      	movs	r1, #1
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fd3e 	bl	8001b2c <WriteShieldLED>
				WriteShieldIN(0, 1, 0, 0, &Shield);
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <main+0x1c0>)
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2300      	movs	r3, #0
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff fd92 	bl	8001be4 <WriteShieldIN>
				break;
 80020c0:	e024      	b.n	800210c <main+0x194>
			case '3':  // switch OUT3 and LED3 ON
				WriteShieldLED(0, 0, 1, 0, &Shield);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <main+0x1c0>)
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	2201      	movs	r2, #1
 80020ca:	2100      	movs	r1, #0
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff fd2d 	bl	8001b2c <WriteShieldLED>
				WriteShieldIN(0, 0, 1, 0, &Shield);
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <main+0x1c0>)
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	2201      	movs	r2, #1
 80020da:	2100      	movs	r1, #0
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fd81 	bl	8001be4 <WriteShieldIN>
				break;
 80020e2:	e013      	b.n	800210c <main+0x194>
			case '4':  // switch OUT4 and LED4 ON
				WriteShieldLED(0, 0, 0, 1, &Shield);
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <main+0x1c0>)
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fd1c 	bl	8001b2c <WriteShieldLED>
				WriteShieldIN(0, 0, 0, 1, &Shield);
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <main+0x1c0>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fd70 	bl	8001be4 <WriteShieldIN>
				break;
 8002104:	e002      	b.n	800210c <main+0x194>
			default: // switch all outputs an LEDs on the Arduino Shield OFF

//received2 = 0;
				break;
			}
		}
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <main+0x194>
				break;
 800210a:	bf00      	nop
		if (tcnt >= 30)
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <main+0x1f4>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b1d      	cmp	r3, #29
 8002112:	f67f af6d 	bls.w	8001ff0 <main+0x78>
		{
			PortStatus(received2);
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <main+0x1e0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fb9e 	bl	800185c <PortStatus>
			PrintStatus(&Shield);
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <main+0x1c0>)
 8002122:	f7ff fdbd 	bl	8001ca0 <PrintStatus>
			PrintADC();
 8002126:	f7ff fdf9 	bl	8001d1c <PrintADC>
			tcnt = 0;
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <main+0x1f4>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 8002130:	e75e      	b.n	8001ff0 <main+0x78>
 8002132:	bf00      	nop
 8002134:	20000550 	.word	0x20000550
 8002138:	20000000 	.word	0x20000000
 800213c:	0800b624 	.word	0x0800b624
 8002140:	0800b65c 	.word	0x0800b65c
 8002144:	0800b694 	.word	0x0800b694
 8002148:	0800b6cc 	.word	0x0800b6cc
 800214c:	0800b704 	.word	0x0800b704
 8002150:	0800b73c 	.word	0x0800b73c
 8002154:	0800b774 	.word	0x0800b774
 8002158:	20000288 	.word	0x20000288
 800215c:	2000099c 	.word	0x2000099c
 8002160:	20000598 	.word	0x20000598
 8002164:	0800b7ac 	.word	0x0800b7ac
 8002168:	0800b7b8 	.word	0x0800b7b8
 800216c:	20000289 	.word	0x20000289

08002170 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b094      	sub	sp, #80	; 0x50
 8002174:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	2234      	movs	r2, #52	; 0x34
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fc50 	bl	8006a24 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <SystemClock_Config+0xdc>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <SystemClock_Config+0xdc>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <SystemClock_Config+0xdc>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b0:	2300      	movs	r3, #0
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <SystemClock_Config+0xe0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <SystemClock_Config+0xe0>)
 80021ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <SystemClock_Config+0xe0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d0:	2301      	movs	r3, #1
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021d4:	2310      	movs	r3, #16
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d8:	2302      	movs	r3, #2
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021dc:	2300      	movs	r3, #0
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80021e0:	2308      	movs	r3, #8
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80021e4:	23b4      	movs	r3, #180	; 0xb4
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 ff21 	bl	8005040 <HAL_RCC_OscConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002204:	f000 f9be 	bl	8002584 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002208:	f002 fbfe 	bl	8004a08 <HAL_PWREx_EnableOverDrive>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8002212:	f000 f9b7 	bl	8002584 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002216:	230f      	movs	r3, #15
 8002218:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221a:	2302      	movs	r3, #2
 800221c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002222:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002226:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	2105      	movs	r1, #5
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fc37 	bl	8004aa8 <HAL_RCC_ClockConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8002240:	f000 f9a0 	bl	8002584 <Error_Handler>
	}
}
 8002244:	bf00      	nop
 8002246:	3750      	adds	r7, #80	; 0x50
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000

08002254 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <MX_ADC1_Init+0xd4>)
 8002268:	4a30      	ldr	r2, [pc, #192]	; (800232c <MX_ADC1_Init+0xd8>)
 800226a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800226c:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <MX_ADC1_Init+0xd4>)
 800226e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002272:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <MX_ADC1_Init+0xd4>)
 8002276:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800227a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <MX_ADC1_Init+0xd4>)
 800227e:	2201      	movs	r2, #1
 8002280:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <MX_ADC1_Init+0xd4>)
 8002284:	2201      	movs	r2, #1
 8002286:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <MX_ADC1_Init+0xd4>)
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <MX_ADC1_Init+0xd4>)
 8002292:	2200      	movs	r2, #0
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <MX_ADC1_Init+0xd4>)
 8002298:	4a25      	ldr	r2, [pc, #148]	; (8002330 <MX_ADC1_Init+0xdc>)
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <MX_ADC1_Init+0xd4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <MX_ADC1_Init+0xd4>)
 80022a4:	2203      	movs	r2, #3
 80022a6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <MX_ADC1_Init+0xd4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <MX_ADC1_Init+0xd4>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022b6:	481c      	ldr	r0, [pc, #112]	; (8002328 <MX_ADC1_Init+0xd4>)
 80022b8:	f000 fc94 	bl	8002be4 <HAL_ADC_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_ADC1_Init+0x72>
	{
		Error_Handler();
 80022c2:	f000 f95f 	bl	8002584 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d2:	463b      	mov	r3, r7
 80022d4:	4619      	mov	r1, r3
 80022d6:	4814      	ldr	r0, [pc, #80]	; (8002328 <MX_ADC1_Init+0xd4>)
 80022d8:	f001 f93a 	bl	8003550 <HAL_ADC_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 80022e2:	f000 f94f 	bl	8002584 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80022e6:	2304      	movs	r3, #4
 80022e8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80022ea:	2302      	movs	r3, #2
 80022ec:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	4619      	mov	r1, r3
 80022f2:	480d      	ldr	r0, [pc, #52]	; (8002328 <MX_ADC1_Init+0xd4>)
 80022f4:	f001 f92c 	bl	8003550 <HAL_ADC_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_ADC1_Init+0xae>
	{
		Error_Handler();
 80022fe:	f000 f941 	bl	8002584 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8002302:	2308      	movs	r3, #8
 8002304:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8002306:	2303      	movs	r3, #3
 8002308:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	4619      	mov	r1, r3
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <MX_ADC1_Init+0xd4>)
 8002310:	f001 f91e 	bl	8003550 <HAL_ADC_ConfigChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_ADC1_Init+0xca>
	{
		Error_Handler();
 800231a:	f000 f933 	bl	8002584 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200004a8 	.word	0x200004a8
 800232c:	40012000 	.word	0x40012000
 8002330:	0f000001 	.word	0x0f000001

08002334 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
	{ 0 };

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <MX_TIM6_Init+0x64>)
 8002344:	4a15      	ldr	r2, [pc, #84]	; (800239c <MX_TIM6_Init+0x68>)
 8002346:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 449;
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <MX_TIM6_Init+0x64>)
 800234a:	f240 12c1 	movw	r2, #449	; 0x1c1
 800234e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_TIM6_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 9999;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_TIM6_Init+0x64>)
 8002358:	f242 720f 	movw	r2, #9999	; 0x270f
 800235c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_TIM6_Init+0x64>)
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <MX_TIM6_Init+0x64>)
 8002366:	f003 f909 	bl	800557c <HAL_TIM_Base_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8002370:	f000 f908 	bl	8002584 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800237c:	463b      	mov	r3, r7
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_TIM6_Init+0x64>)
 8002382:	f003 fb8b 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 800238c:	f000 f8fa 	bl	8002584 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000550 	.word	0x20000550
 800239c:	40001000 	.word	0x40001000

080023a0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_USART2_UART_Init+0x50>)
 80023a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART2_UART_Init+0x4c>)
 80023d8:	f003 fbf0 	bl	8005bbc <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80023e2:	f000 f8cf 	bl	8002584 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000099c 	.word	0x2000099c
 80023f0:	40004400 	.word	0x40004400

080023f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_DMA_Init+0x3c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <MX_DMA_Init+0x3c>)
 8002404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_DMA_Init+0x3c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2038      	movs	r0, #56	; 0x38
 800241c:	f001 fc2d 	bl	8003c7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002420:	2038      	movs	r0, #56	; 0x38
 8002422:	f001 fc46 	bl	8003cb2 <HAL_NVIC_EnableIRQ>

}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <MX_GPIO_Init+0x13c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a47      	ldr	r2, [pc, #284]	; (8002570 <MX_GPIO_Init+0x13c>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b45      	ldr	r3, [pc, #276]	; (8002570 <MX_GPIO_Init+0x13c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <MX_GPIO_Init+0x13c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a40      	ldr	r2, [pc, #256]	; (8002570 <MX_GPIO_Init+0x13c>)
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <MX_GPIO_Init+0x13c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <MX_GPIO_Init+0x13c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <MX_GPIO_Init+0x13c>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <MX_GPIO_Init+0x13c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <MX_GPIO_Init+0x13c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a32      	ldr	r2, [pc, #200]	; (8002570 <MX_GPIO_Init+0x13c>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <MX_GPIO_Init+0x13c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80024ba:	2200      	movs	r2, #0
 80024bc:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80024c0:	482c      	ldr	r0, [pc, #176]	; (8002574 <MX_GPIO_Init+0x140>)
 80024c2:	f002 fa87 	bl	80049d4 <HAL_GPIO_WritePin>
	LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin | DEN2_DEN4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80024c6:	2200      	movs	r2, #0
 80024c8:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80024cc:	482a      	ldr	r0, [pc, #168]	; (8002578 <MX_GPIO_Init+0x144>)
 80024ce:	f002 fa81 	bl	80049d4 <HAL_GPIO_WritePin>
	DEN1_DEN3_Pin | IN4_Pin | LED2_Pin | LED1_Pin | IN2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	4829      	ldr	r0, [pc, #164]	; (800257c <MX_GPIO_Init+0x148>)
 80024d8:	f002 fa7c 	bl	80049d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80024dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024e2:	4b27      	ldr	r3, [pc, #156]	; (8002580 <MX_GPIO_Init+0x14c>)
 80024e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4822      	ldr	r0, [pc, #136]	; (800257c <MX_GPIO_Init+0x148>)
 80024f2:	f002 f8db 	bl	80046ac <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 80024f6:	f240 4301 	movw	r3, #1025	; 0x401
 80024fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	481a      	ldr	r0, [pc, #104]	; (8002574 <MX_GPIO_Init+0x140>)
 800250c:	f002 f8ce 	bl	80046ac <HAL_GPIO_Init>

	/*Configure GPIO pins : LED4_Pin LED3_Pin IN3_Pin OLOFF_Pin
	 DEN2_DEN4_Pin */
	GPIO_InitStruct.Pin = LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin
 8002510:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002514:	617b      	str	r3, [r7, #20]
			| DEN2_DEN4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <MX_GPIO_Init+0x140>)
 800252a:	f002 f8bf 	bl	80046ac <HAL_GPIO_Init>

	/*Configure GPIO pins : DEN1_DEN3_Pin IN4_Pin LED2_Pin LED1_Pin
	 IN2_Pin */
	GPIO_InitStruct.Pin = DEN1_DEN3_Pin | IN4_Pin | LED2_Pin | LED1_Pin
 800252e:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8002532:	617b      	str	r3, [r7, #20]
			| IN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <MX_GPIO_Init+0x144>)
 8002548:	f002 f8b0 	bl	80046ac <HAL_GPIO_Init>

	/*Configure GPIO pin : IN1_Pin */
	GPIO_InitStruct.Pin = IN1_Pin;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	2301      	movs	r3, #1
 8002552:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	4806      	ldr	r0, [pc, #24]	; (800257c <MX_GPIO_Init+0x148>)
 8002564:	f002 f8a2 	bl	80046ac <HAL_GPIO_Init>

}
 8002568:	bf00      	nop
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	10210000 	.word	0x10210000

08002584 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
}
 800258a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800258c:	e7fe      	b.n	800258c <Error_Handler+0x8>
	...

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_MspInit+0x4c>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_MspInit+0x4c>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_MspInit+0x4c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025ce:	2007      	movs	r0, #7
 80025d0:	f001 fb48 	bl	8003c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800

080025e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a40      	ldr	r2, [pc, #256]	; (8002700 <HAL_ADC_MspInit+0x120>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d179      	bne.n	80026f6 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a3e      	ldr	r2, [pc, #248]	; (8002704 <HAL_ADC_MspInit+0x124>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a37      	ldr	r2, [pc, #220]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a30      	ldr	r2, [pc, #192]	; (8002704 <HAL_ADC_MspInit+0x124>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <HAL_ADC_MspInit+0x124>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = A1_Vbb_Pin|A2_Isense_1_2_Pin;
 8002656:	2312      	movs	r3, #18
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800265a:	2303      	movs	r3, #3
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4827      	ldr	r0, [pc, #156]	; (8002708 <HAL_ADC_MspInit+0x128>)
 800266a:	f002 f81f 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A3_Isense_3_4_Pin;
 800266e:	2301      	movs	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002672:	2303      	movs	r3, #3
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A3_Isense_3_4_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4822      	ldr	r0, [pc, #136]	; (800270c <HAL_ADC_MspInit+0x12c>)
 8002682:	f002 f813 	bl	80046ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_ADC_MspInit+0x130>)
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_ADC_MspInit+0x134>)
 800268a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800268c:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_ADC_MspInit+0x130>)
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_ADC_MspInit+0x130>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_ADC_MspInit+0x130>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026ca:	4811      	ldr	r0, [pc, #68]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026cc:	f001 fb0c 	bl	8003ce8 <HAL_DMA_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80026d6:	f7ff ff55 	bl	8002584 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
 80026e0:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <HAL_ADC_MspInit+0x130>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2012      	movs	r0, #18
 80026ec:	f001 fac5 	bl	8003c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80026f0:	2012      	movs	r0, #18
 80026f2:	f001 fade 	bl	8003cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40012000 	.word	0x40012000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	200004f0 	.word	0x200004f0
 8002714:	40026410 	.word	0x40026410

08002718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_TIM_Base_MspInit+0x48>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d115      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_TIM_Base_MspInit+0x4c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_TIM_Base_MspInit+0x4c>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_TIM_Base_MspInit+0x4c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	2036      	movs	r0, #54	; 0x36
 800274c:	f001 fa95 	bl	8003c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002750:	2036      	movs	r0, #54	; 0x36
 8002752:	f001 faae 	bl	8003cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40001000 	.word	0x40001000
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_UART_MspInit+0x94>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d133      	bne.n	80027f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_UART_MspInit+0x98>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_UART_MspInit+0x98>)
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_UART_MspInit+0x98>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x98>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_UART_MspInit+0x98>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_UART_MspInit+0x98>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027c2:	230c      	movs	r3, #12
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d2:	2307      	movs	r3, #7
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4809      	ldr	r0, [pc, #36]	; (8002804 <HAL_UART_MspInit+0x9c>)
 80027de:	f001 ff65 	bl	80046ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2026      	movs	r0, #38	; 0x26
 80027e8:	f001 fa47 	bl	8003c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ec:	2026      	movs	r0, #38	; 0x26
 80027ee:	f001 fa60 	bl	8003cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40004400 	.word	0x40004400
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler+0x4>

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <MemManage_Handler+0x4>

0800281a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <BusFault_Handler+0x4>

08002820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <UsageFault_Handler+0x4>

08002826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002854:	f000 f982 	bl	8002b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}

0800285c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <ADC_IRQHandler+0x10>)
 8002862:	f000 fb93 	bl	8002f8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200004a8 	.word	0x200004a8

08002870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <USART2_IRQHandler+0x10>)
 8002876:	f003 fb53 	bl	8005f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000099c 	.word	0x2000099c

08002884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <TIM6_DAC_IRQHandler+0x10>)
 800288a:	f002 ff37 	bl	80056fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000550 	.word	0x20000550

08002898 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <DMA2_Stream0_IRQHandler+0x10>)
 800289e:	f001 fc9b 	bl	80041d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200004f0 	.word	0x200004f0

080028ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
	return 1;
 80028b0:	2301      	movs	r3, #1
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_kill>:

int _kill(int pid, int sig)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028c6:	f004 f883 	bl	80069d0 <__errno>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2216      	movs	r2, #22
 80028ce:	601a      	str	r2, [r3, #0]
	return -1;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_exit>:

void _exit (int status)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ffe7 	bl	80028bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ee:	e7fe      	b.n	80028ee <_exit+0x12>

080028f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e00a      	b.n	8002918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002902:	f7ff fb0d 	bl	8001f20 <__io_getchar>
 8002906:	4601      	mov	r1, r0
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	b2ca      	uxtb	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	dbf0      	blt.n	8002902 <_read+0x12>
	}

return len;
 8002920:	687b      	ldr	r3, [r7, #4]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e009      	b.n	8002950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	60ba      	str	r2, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fad7 	bl	8001ef8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	dbf1      	blt.n	800293c <_write+0x12>
	}
	return len;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_close>:

int _close(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	return -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298a:	605a      	str	r2, [r3, #4]
	return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_isatty>:

int _isatty(int file)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
	return 1;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
	return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <_sbrk+0x5c>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <_sbrk+0x60>)
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <_sbrk+0x64>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <_sbrk+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d207      	bcs.n	8002a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029fc:	f003 ffe8 	bl	80069d0 <__errno>
 8002a00:	4603      	mov	r3, r0
 8002a02:	220c      	movs	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e009      	b.n	8002a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <_sbrk+0x64>)
 8002a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20020000 	.word	0x20020000
 8002a2c:	00000400 	.word	0x00000400
 8002a30:	20000294 	.word	0x20000294
 8002a34:	200009f8 	.word	0x200009f8

08002a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <SystemInit+0x28>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <SystemInit+0x28>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SystemInit+0x28>)
 8002a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a52:	609a      	str	r2, [r3, #8]
#endif
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a6a:	e003      	b.n	8002a74 <LoopCopyDataInit>

08002a6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a72:	3104      	adds	r1, #4

08002a74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a74:	480b      	ldr	r0, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a7c:	d3f6      	bcc.n	8002a6c <CopyDataInit>
  ldr  r2, =_sbss
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a80:	e002      	b.n	8002a88 <LoopFillZerobss>

08002a82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a84:	f842 3b04 	str.w	r3, [r2], #4

08002a88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a8c:	d3f9      	bcc.n	8002a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a8e:	f7ff ffd3 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a92:	f003 ffa3 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7ff fa6f 	bl	8001f78 <main>
  bx  lr    
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002aa0:	0800bca4 	.word	0x0800bca4
  ldr  r0, =_sdata
 8002aa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002aa8:	20000264 	.word	0x20000264
  ldr  r2, =_sbss
 8002aac:	20000264 	.word	0x20000264
  ldr  r3, = _ebss
 8002ab0:	200009f4 	.word	0x200009f4

08002ab4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <CAN1_RX0_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_Init+0x40>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_Init+0x40>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_Init+0x40>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f001 f8bf 	bl	8003c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f000 f808 	bl	8002afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aec:	f7ff fd50 	bl	8002590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_InitTick+0x54>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_InitTick+0x58>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 f8d7 	bl	8003cce <HAL_SYSTICK_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00e      	b.n	8002b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d80a      	bhi.n	8002b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b30:	2200      	movs	r2, #0
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f001 f89f 	bl	8003c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_InitTick+0x5c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000084 	.word	0x20000084
 8002b54:	2000008c 	.word	0x2000008c
 8002b58:	20000088 	.word	0x20000088

08002b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x20>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x24>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_IncTick+0x24>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	2000008c 	.word	0x2000008c
 8002b80:	200009e0 	.word	0x200009e0

08002b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return uwTick;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_GetTick+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200009e0 	.word	0x200009e0

08002b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff ffee 	bl	8002b84 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d005      	beq.n	8002bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_Delay+0x44>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc2:	bf00      	nop
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8f7      	bhi.n	8002bc4 <HAL_Delay+0x28>
  {
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000008c 	.word	0x2000008c

08002be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e033      	b.n	8002c62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fcec 	bl	80025e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c2a:	f023 0302 	bic.w	r3, r3, #2
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fdbc 	bl	80037b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
 8002c52:	e001      	b.n	8002c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Start+0x1a>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e0b2      	b.n	8002dec <HAL_ADC_Start+0x180>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d018      	beq.n	8002cce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cac:	4b52      	ldr	r3, [pc, #328]	; (8002df8 <HAL_ADC_Start+0x18c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_ADC_Start+0x190>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0c9a      	lsrs	r2, r3, #18
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cc0:	e002      	b.n	8002cc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f9      	bne.n	8002cc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d17a      	bne.n	8002dd2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1a:	d106      	bne.n	8002d2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	f023 0206 	bic.w	r2, r3, #6
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	645a      	str	r2, [r3, #68]	; 0x44
 8002d28:	e002      	b.n	8002d30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_ADC_Start+0x194>)
 8002d3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d12a      	bne.n	8002da8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <HAL_ADC_Start+0x198>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d015      	beq.n	8002d88 <HAL_ADC_Start+0x11c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <HAL_ADC_Start+0x19c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_Start+0x106>
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_ADC_Start+0x194>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <HAL_ADC_Start+0x1a0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d136      	bne.n	8002dea <HAL_ADC_Start+0x17e>
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_ADC_Start+0x194>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d130      	bne.n	8002dea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d129      	bne.n	8002dea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	e020      	b.n	8002dea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <HAL_ADC_Start+0x198>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d11b      	bne.n	8002dea <HAL_ADC_Start+0x17e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d114      	bne.n	8002dea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	e00b      	b.n	8002dea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	20000084 	.word	0x20000084
 8002dfc:	431bde83 	.word	0x431bde83
 8002e00:	40012300 	.word	0x40012300
 8002e04:	40012000 	.word	0x40012000
 8002e08:	40012100 	.word	0x40012100
 8002e0c:	40012200 	.word	0x40012200

08002e10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Stop+0x16>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e021      	b.n	8002e6a <HAL_ADC_Stop+0x5a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d113      	bne.n	8002ebc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d10b      	bne.n	8002ebc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e063      	b.n	8002f84 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ebc:	f7ff fe62 	bl	8002b84 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ec2:	e021      	b.n	8002f08 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d01d      	beq.n	8002f08 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_ADC_PollForConversion+0x6c>
 8002ed2:	f7ff fe57 	bl	8002b84 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d212      	bcs.n	8002f08 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d00b      	beq.n	8002f08 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03d      	b.n	8002f84 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d1d6      	bne.n	8002ec4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0212 	mvn.w	r2, #18
 8002f1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d123      	bne.n	8002f82 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11f      	bne.n	8002f82 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d111      	bne.n	8002f82 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d049      	beq.n	8003062 <HAL_ADC_IRQHandler+0xd6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d046      	beq.n	8003062 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d12b      	bne.n	8003052 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d127      	bne.n	8003052 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0220 	bic.w	r2, r2, #32
 800302c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa53 	bl	80034fe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0212 	mvn.w	r2, #18
 8003060:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d057      	beq.n	8003144 <HAL_ADC_IRQHandler+0x1b8>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d054      	beq.n	8003144 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d139      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d12b      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d124      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d119      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fcbb 	bl	8003ab0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 020c 	mvn.w	r2, #12
 8003142:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <HAL_ADC_IRQHandler+0x21a>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d014      	beq.n	80031a6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10d      	bne.n	80031a6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f9c5 	bl	8003526 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0201 	mvn.w	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_ADC_IRQHandler+0x27a>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0220 	mvn.w	r2, #32
 80031f4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f99f 	bl	800353a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0220 	mvn.w	r2, #32
 8003204:	601a      	str	r2, [r3, #0]
  }
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADC_Start_DMA+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0e9      	b.n	8003402 <HAL_ADC_Start_DMA+0x1f2>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d018      	beq.n	8003276 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_ADC_Start_DMA+0x1fc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6d      	ldr	r2, [pc, #436]	; (8003410 <HAL_ADC_Start_DMA+0x200>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9a      	lsrs	r2, r3, #18
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003268:	e002      	b.n	8003270 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3b01      	subs	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f9      	bne.n	800326a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d107      	bne.n	8003296 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003294:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	f040 80a1 	bne.w	80033e8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d106      	bne.n	80032f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f023 0206 	bic.w	r2, r3, #6
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
 80032f2:	e002      	b.n	80032fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_ADC_Start_DMA+0x204>)
 8003304:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_ADC_Start_DMA+0x208>)
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	4a42      	ldr	r2, [pc, #264]	; (800341c <HAL_ADC_Start_DMA+0x20c>)
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	4a41      	ldr	r2, [pc, #260]	; (8003420 <HAL_ADC_Start_DMA+0x210>)
 800331c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003326:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003336:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	334c      	adds	r3, #76	; 0x4c
 8003352:	4619      	mov	r1, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f000 fd74 	bl	8003e44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2b00      	cmp	r3, #0
 8003366:	d12a      	bne.n	80033be <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_ADC_Start_DMA+0x214>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d015      	beq.n	800339e <HAL_ADC_Start_DMA+0x18e>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <HAL_ADC_Start_DMA+0x218>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d105      	bne.n	8003388 <HAL_ADC_Start_DMA+0x178>
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_ADC_Start_DMA+0x204>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_ADC_Start_DMA+0x21c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d136      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_ADC_Start_DMA+0x204>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d130      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d129      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e020      	b.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_ADC_Start_DMA+0x214>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d11b      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	e00b      	b.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000084 	.word	0x20000084
 8003410:	431bde83 	.word	0x431bde83
 8003414:	40012300 	.word	0x40012300
 8003418:	080039ad 	.word	0x080039ad
 800341c:	08003a67 	.word	0x08003a67
 8003420:	08003a83 	.word	0x08003a83
 8003424:	40012000 	.word	0x40012000
 8003428:	40012100 	.word	0x40012100
 800342c:	40012200 	.word	0x40012200

08003430 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_ADC_Stop_DMA+0x1a>
 8003446:	2302      	movs	r3, #2
 8003448:	e048      	b.n	80034dc <HAL_ADC_Stop_DMA+0xac>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d130      	bne.n	80034d2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d10f      	bne.n	80034ae <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fd2e 	bl	8003ef4 <HAL_DMA_Abort>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80034bc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1c>
 8003568:	2302      	movs	r3, #2
 800356a:	e113      	b.n	8003794 <HAL_ADC_ConfigChannel+0x244>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b09      	cmp	r3, #9
 800357a:	d925      	bls.n	80035c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	3b1e      	subs	r3, #30
 8003592:	2207      	movs	r2, #7
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43da      	mvns	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	400a      	ands	r2, r1
 80035a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68d9      	ldr	r1, [r3, #12]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	4603      	mov	r3, r0
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4403      	add	r3, r0
 80035ba:	3b1e      	subs	r3, #30
 80035bc:	409a      	lsls	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	e022      	b.n	800360e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6919      	ldr	r1, [r3, #16]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	2207      	movs	r2, #7
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	400a      	ands	r2, r1
 80035ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6919      	ldr	r1, [r3, #16]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4618      	mov	r0, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4403      	add	r3, r0
 8003604:	409a      	lsls	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d824      	bhi.n	8003660 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	3b05      	subs	r3, #5
 8003628:	221f      	movs	r2, #31
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4618      	mov	r0, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b05      	subs	r3, #5
 8003652:	fa00 f203 	lsl.w	r2, r0, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	635a      	str	r2, [r3, #52]	; 0x34
 800365e:	e04c      	b.n	80036fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d824      	bhi.n	80036b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	3b23      	subs	r3, #35	; 0x23
 800367a:	221f      	movs	r2, #31
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43da      	mvns	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	400a      	ands	r2, r1
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	4618      	mov	r0, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	3b23      	subs	r3, #35	; 0x23
 80036a4:	fa00 f203 	lsl.w	r2, r0, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
 80036b0:	e023      	b.n	80036fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	3b41      	subs	r3, #65	; 0x41
 80036c4:	221f      	movs	r2, #31
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	400a      	ands	r2, r1
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4618      	mov	r0, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	3b41      	subs	r3, #65	; 0x41
 80036ee:	fa00 f203 	lsl.w	r2, r0, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_ADC_ConfigChannel+0x250>)
 80036fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_ADC_ConfigChannel+0x254>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10f      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x1d8>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b12      	cmp	r3, #18
 800370e:	d10b      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <HAL_ADC_ConfigChannel+0x254>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12b      	bne.n	800378a <HAL_ADC_ConfigChannel+0x23a>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_ADC_ConfigChannel+0x258>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x1f4>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b11      	cmp	r3, #17
 8003742:	d122      	bne.n	800378a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <HAL_ADC_ConfigChannel+0x258>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_ADC_ConfigChannel+0x25c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <HAL_ADC_ConfigChannel+0x260>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	0c9a      	lsrs	r2, r3, #18
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800377c:	e002      	b.n	8003784 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	3b01      	subs	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f9      	bne.n	800377e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40012300 	.word	0x40012300
 80037a4:	40012000 	.word	0x40012000
 80037a8:	10000012 	.word	0x10000012
 80037ac:	20000084 	.word	0x20000084
 80037b0:	431bde83 	.word	0x431bde83

080037b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037bc:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <ADC_Init+0x1f0>)
 80037be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	021a      	lsls	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800380c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <ADC_Init+0x1f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800385a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800387c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e00f      	b.n	80038b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0202 	bic.w	r2, r2, #2
 80038c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7e1b      	ldrb	r3, [r3, #24]
 80038cc:	005a      	lsls	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	3b01      	subs	r3, #1
 800390c:	035a      	lsls	r2, r3, #13
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	e007      	b.n	8003928 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003926:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	3b01      	subs	r3, #1
 8003944:	051a      	lsls	r2, r3, #20
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800395c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800396a:	025a      	lsls	r2, r3, #9
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	029a      	lsls	r2, r3, #10
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40012300 	.word	0x40012300
 80039a8:	0f000001 	.word	0x0f000001

080039ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d13c      	bne.n	8003a40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d12b      	bne.n	8003a38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d127      	bne.n	8003a38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d119      	bne.n	8003a38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0220 	bic.w	r2, r2, #32
 8003a12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fd60 	bl	80034fe <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a3e:	e00e      	b.n	8003a5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff fd74 	bl	800353a <HAL_ADC_ErrorCallback>
}
 8003a52:	e004      	b.n	8003a5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fd4c 	bl	8003512 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff fd49 	bl	800353a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	60d3      	str	r3, [r2, #12]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <__NVIC_GetPriorityGrouping+0x18>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 0307 	and.w	r3, r3, #7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	db0b      	blt.n	8003b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	f003 021f 	and.w	r2, r3, #31
 8003b40:	4907      	ldr	r1, [pc, #28]	; (8003b60 <__NVIC_EnableIRQ+0x38>)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2001      	movs	r0, #1
 8003b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000e100 	.word	0xe000e100

08003b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	db0a      	blt.n	8003b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	490c      	ldr	r1, [pc, #48]	; (8003bb0 <__NVIC_SetPriority+0x4c>)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	0112      	lsls	r2, r2, #4
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	440b      	add	r3, r1
 8003b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b8c:	e00a      	b.n	8003ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4908      	ldr	r1, [pc, #32]	; (8003bb4 <__NVIC_SetPriority+0x50>)
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	3b04      	subs	r3, #4
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	761a      	strb	r2, [r3, #24]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000e100 	.word	0xe000e100
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f1c3 0307 	rsb	r3, r3, #7
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	bf28      	it	cs
 8003bd6:	2304      	movcs	r3, #4
 8003bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d902      	bls.n	8003be8 <NVIC_EncodePriority+0x30>
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3b03      	subs	r3, #3
 8003be6:	e000      	b.n	8003bea <NVIC_EncodePriority+0x32>
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bec:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c00:	f04f 31ff 	mov.w	r1, #4294967295
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	43d9      	mvns	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c10:	4313      	orrs	r3, r2
         );
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3724      	adds	r7, #36	; 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c30:	d301      	bcc.n	8003c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00f      	b.n	8003c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <SysTick_Config+0x40>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3e:	210f      	movs	r1, #15
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	f7ff ff8e 	bl	8003b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <SysTick_Config+0x40>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <SysTick_Config+0x40>)
 8003c50:	2207      	movs	r2, #7
 8003c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	e000e010 	.word	0xe000e010

08003c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff29 	bl	8003ac4 <__NVIC_SetPriorityGrouping>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c8c:	f7ff ff3e 	bl	8003b0c <__NVIC_GetPriorityGrouping>
 8003c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	6978      	ldr	r0, [r7, #20]
 8003c98:	f7ff ff8e 	bl	8003bb8 <NVIC_EncodePriority>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff5d 	bl	8003b64 <__NVIC_SetPriority>
}
 8003caa:	bf00      	nop
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff31 	bl	8003b28 <__NVIC_EnableIRQ>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ffa2 	bl	8003c20 <SysTick_Config>
 8003cdc:	4603      	mov	r3, r0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf4:	f7fe ff46 	bl	8002b84 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e099      	b.n	8003e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d24:	e00f      	b.n	8003d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d26:	f7fe ff2d 	bl	8002b84 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d908      	bls.n	8003d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e078      	b.n	8003e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e8      	bne.n	8003d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_DMA_Init+0x158>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	4313      	orrs	r3, r2
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d117      	bne.n	8003e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fbe1 	bl	80045b4 <DMA_CheckFifoParam>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e06:	2301      	movs	r3, #1
 8003e08:	e016      	b.n	8003e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb98 	bl	8004548 <DMA_CalcBaseAndBitshift>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	223f      	movs	r2, #63	; 0x3f
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	f010803f 	.word	0xf010803f

08003e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_DMA_Start_IT+0x26>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e040      	b.n	8003eec <HAL_DMA_Start_IT+0xa8>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d12f      	bne.n	8003ede <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fb2a 	bl	80044ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	223f      	movs	r2, #63	; 0x3f
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0216 	orr.w	r2, r2, #22
 8003eb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e005      	b.n	8003eea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f02:	f7fe fe3f 	bl	8002b84 <HAL_GetTick>
 8003f06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d008      	beq.n	8003f26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e052      	b.n	8003fcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0216 	bic.w	r2, r2, #22
 8003f34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_DMA_Abort+0x62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0208 	bic.w	r2, r2, #8
 8003f64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	e013      	b.n	8003fa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f78:	f7fe fe04 	bl	8002b84 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d90c      	bls.n	8003fa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2203      	movs	r2, #3
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e015      	b.n	8003fcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e4      	bne.n	8003f78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	223f      	movs	r2, #63	; 0x3f
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00c      	b.n	800400c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	460b      	mov	r3, r1
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8004026:	2300      	movs	r3, #0
 8004028:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 800402a:	f7fe fdab 	bl	8002b84 <HAL_GetTick>
 800402e:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d008      	beq.n	800404e <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0bf      	b.n	80041ce <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b2      	b.n	80041ce <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8004068:	7afb      	ldrb	r3, [r7, #11]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	2220      	movs	r2, #32
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	e005      	b.n	8004088 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	2210      	movs	r2, #16
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8004094:	e05a      	b.n	800414c <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d017      	beq.n	80040ce <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_DMA_PollForTransfer+0x9c>
 80040a4:	f7fe fd6e 	bl	8002b84 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d20c      	bcs.n	80040ce <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e07f      	b.n	80041ce <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2208      	movs	r2, #8
 80040da:	409a      	lsls	r2, r3
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	2208      	movs	r2, #8
 80040f6:	409a      	lsls	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2201      	movs	r2, #1
 8004102:	409a      	lsls	r2, r3
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	f043 0202 	orr.w	r2, r3, #2
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	2201      	movs	r2, #1
 800411e:	409a      	lsls	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	2204      	movs	r2, #4
 800412a:	409a      	lsls	r2, r3
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0204 	orr.w	r2, r3, #4
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	2204      	movs	r2, #4
 8004146:	409a      	lsls	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_DMA_PollForTransfer+0x14a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d099      	beq.n	8004096 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	2b00      	cmp	r3, #0
 8004168:	d018      	beq.n	800419c <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d012      	beq.n	800419c <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff febc 	bl	8003ef4 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	2230      	movs	r2, #48	; 0x30
 8004182:	409a      	lsls	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e018      	b.n	80041ce <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800419c:	7afb      	ldrb	r3, [r7, #11]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10e      	bne.n	80041c0 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	2230      	movs	r2, #48	; 0x30
 80041a8:	409a      	lsls	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041be:	e005      	b.n	80041cc <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2210      	movs	r2, #16
 80041c6:	409a      	lsls	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041e4:	4b92      	ldr	r3, [pc, #584]	; (8004430 <HAL_DMA_IRQHandler+0x258>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a92      	ldr	r2, [pc, #584]	; (8004434 <HAL_DMA_IRQHandler+0x25c>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	2208      	movs	r2, #8
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2208      	movs	r2, #8
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d012      	beq.n	800427a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	2201      	movs	r2, #1
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2204      	movs	r2, #4
 8004280:	409a      	lsls	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	2204      	movs	r2, #4
 800429e:	409a      	lsls	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f043 0204 	orr.w	r2, r3, #4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	2210      	movs	r2, #16
 80042b6:	409a      	lsls	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d043      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d03c      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2210      	movs	r2, #16
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d024      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e01f      	b.n	8004348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01b      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
 8004318:	e016      	b.n	8004348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0208 	bic.w	r2, r2, #8
 8004336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2220      	movs	r2, #32
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 808e 	beq.w	8004476 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8086 	beq.w	8004476 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	2220      	movs	r2, #32
 8004370:	409a      	lsls	r2, r3
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b05      	cmp	r3, #5
 8004380:	d136      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0216 	bic.w	r2, r2, #22
 8004390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x1da>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0208 	bic.w	r2, r2, #8
 80043c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	223f      	movs	r2, #63	; 0x3f
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d07d      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
        }
        return;
 80043ee:	e078      	b.n	80044e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01c      	beq.n	8004438 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	2b00      	cmp	r3, #0
 8004412:	d030      	beq.n	8004476 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e02b      	b.n	8004476 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d027      	beq.n	8004476 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
 800442e:	e022      	b.n	8004476 <HAL_DMA_IRQHandler+0x29e>
 8004430:	20000084 	.word	0x20000084
 8004434:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0210 	bic.w	r2, r2, #16
 8004454:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	2b00      	cmp	r3, #0
 800447c:	d032      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2205      	movs	r2, #5
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d307      	bcc.n	80044be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f2      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x2ca>
 80044bc:	e000      	b.n	80044c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	e000      	b.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044e2:	bf00      	nop
    }
  }
}
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop

080044ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004508:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d108      	bne.n	800452c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800452a:	e007      	b.n	800453c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3b10      	subs	r3, #16
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <DMA_CalcBaseAndBitshift+0x64>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004562:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d909      	bls.n	800458a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	1d1a      	adds	r2, r3, #4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	659a      	str	r2, [r3, #88]	; 0x58
 8004588:	e007      	b.n	800459a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	aaaaaaab 	.word	0xaaaaaaab
 80045b0:	0800b7d8 	.word	0x0800b7d8

080045b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11f      	bne.n	800460e <DMA_CheckFifoParam+0x5a>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d856      	bhi.n	8004682 <DMA_CheckFifoParam+0xce>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <DMA_CheckFifoParam+0x28>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	080045ff 	.word	0x080045ff
 80045e4:	080045ed 	.word	0x080045ed
 80045e8:	08004683 	.word	0x08004683
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d046      	beq.n	8004686 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fc:	e043      	b.n	8004686 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004606:	d140      	bne.n	800468a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460c:	e03d      	b.n	800468a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004616:	d121      	bne.n	800465c <DMA_CheckFifoParam+0xa8>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b03      	cmp	r3, #3
 800461c:	d837      	bhi.n	800468e <DMA_CheckFifoParam+0xda>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <DMA_CheckFifoParam+0x70>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004635 	.word	0x08004635
 8004628:	0800463b 	.word	0x0800463b
 800462c:	08004635 	.word	0x08004635
 8004630:	0800464d 	.word	0x0800464d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      break;
 8004638:	e030      	b.n	800469c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d025      	beq.n	8004692 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464a:	e022      	b.n	8004692 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004654:	d11f      	bne.n	8004696 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800465a:	e01c      	b.n	8004696 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d903      	bls.n	800466a <DMA_CheckFifoParam+0xb6>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d003      	beq.n	8004670 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004668:	e018      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
      break;
 800466e:	e015      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	e00b      	b.n	800469a <DMA_CheckFifoParam+0xe6>
      break;
 8004682:	bf00      	nop
 8004684:	e00a      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e008      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e006      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e004      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      break;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      break;   
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <DMA_CheckFifoParam+0xe8>
      break;
 800469a:	bf00      	nop
    }
  } 
  
  return status; 
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e165      	b.n	8004994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 8154 	bne.w	800498e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d017      	beq.n	800479c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80ae 	beq.w	800498e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b5d      	ldr	r3, [pc, #372]	; (80049ac <HAL_GPIO_Init+0x300>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4a5c      	ldr	r2, [pc, #368]	; (80049ac <HAL_GPIO_Init+0x300>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6453      	str	r3, [r2, #68]	; 0x44
 8004842:	4b5a      	ldr	r3, [pc, #360]	; (80049ac <HAL_GPIO_Init+0x300>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484e:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <HAL_GPIO_Init+0x304>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4f      	ldr	r2, [pc, #316]	; (80049b4 <HAL_GPIO_Init+0x308>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d025      	beq.n	80048c6 <HAL_GPIO_Init+0x21a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4e      	ldr	r2, [pc, #312]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01f      	beq.n	80048c2 <HAL_GPIO_Init+0x216>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4d      	ldr	r2, [pc, #308]	; (80049bc <HAL_GPIO_Init+0x310>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <HAL_GPIO_Init+0x212>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4c      	ldr	r2, [pc, #304]	; (80049c0 <HAL_GPIO_Init+0x314>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0x20e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4b      	ldr	r2, [pc, #300]	; (80049c4 <HAL_GPIO_Init+0x318>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00d      	beq.n	80048b6 <HAL_GPIO_Init+0x20a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4a      	ldr	r2, [pc, #296]	; (80049c8 <HAL_GPIO_Init+0x31c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x206>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a49      	ldr	r2, [pc, #292]	; (80049cc <HAL_GPIO_Init+0x320>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_GPIO_Init+0x202>
 80048aa:	2306      	movs	r3, #6
 80048ac:	e00c      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048ae:	2307      	movs	r3, #7
 80048b0:	e00a      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e008      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x21c>
 80048c6:	2300      	movs	r3, #0
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4093      	lsls	r3, r2
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d8:	4935      	ldr	r1, [pc, #212]	; (80049b0 <HAL_GPIO_Init+0x304>)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e6:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <HAL_GPIO_Init+0x324>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490a:	4a31      	ldr	r2, [pc, #196]	; (80049d0 <HAL_GPIO_Init+0x324>)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004910:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004934:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493a:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_GPIO_Init+0x324>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800495e:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_GPIO_Init+0x324>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	f67f ae96 	bls.w	80046c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40013800 	.word	0x40013800
 80049b4:	40020000 	.word	0x40020000
 80049b8:	40020400 	.word	0x40020400
 80049bc:	40020800 	.word	0x40020800
 80049c0:	40020c00 	.word	0x40020c00
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40021400 	.word	0x40021400
 80049cc:	40021800 	.word	0x40021800
 80049d0:	40013c00 	.word	0x40013c00

080049d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
 80049e0:	4613      	mov	r3, r2
 80049e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049f0:	e003      	b.n	80049fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	041a      	lsls	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	619a      	str	r2, [r3, #24]
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x94>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a34:	f7fe f8a6 	bl	8002b84 <HAL_GetTick>
 8004a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a3a:	e009      	b.n	8004a50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a3c:	f7fe f8a2 	bl	8002b84 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a4a:	d901      	bls.n	8004a50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e01f      	b.n	8004a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a64:	f7fe f88e 	bl	8002b84 <HAL_GetTick>
 8004a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a6a:	e009      	b.n	8004a80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a6c:	f7fe f88a 	bl	8002b84 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7a:	d901      	bls.n	8004a80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e007      	b.n	8004a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	420e0040 	.word	0x420e0040
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	420e0044 	.word	0x420e0044

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0cc      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b68      	ldr	r3, [pc, #416]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d90c      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b63      	ldr	r3, [pc, #396]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0b8      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004afc:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a58      	ldr	r2, [pc, #352]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b14:	4b53      	ldr	r3, [pc, #332]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a52      	ldr	r2, [pc, #328]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b20:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	494d      	ldr	r1, [pc, #308]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d044      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d119      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e07f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e06f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e067      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4934      	ldr	r1, [pc, #208]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b98:	f7fd fff4 	bl	8002b84 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd fff0 	bl	8002b84 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e04f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d20c      	bcs.n	8004bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e032      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4916      	ldr	r1, [pc, #88]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	490e      	ldr	r1, [pc, #56]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c2e:	f000 f855 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004c32:	4602      	mov	r2, r0
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	490a      	ldr	r1, [pc, #40]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004c40:	5ccb      	ldrb	r3, [r1, r3]
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd ff54 	bl	8002afc <HAL_InitTick>

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023c00 	.word	0x40023c00
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800b7c0 	.word	0x0800b7c0
 8004c6c:	20000084 	.word	0x20000084
 8004c70:	20000088 	.word	0x20000088

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000084 	.word	0x20000084

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800b7d0 	.word	0x0800b7d0

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800b7d0 	.word	0x0800b7d0

08004cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf8:	4bce      	ldr	r3, [pc, #824]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	f200 818d 	bhi.w	8005020 <HAL_RCC_GetSysClockFreq+0x344>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_RCC_GetSysClockFreq+0x30>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08005021 	.word	0x08005021
 8004d14:	08005021 	.word	0x08005021
 8004d18:	08005021 	.word	0x08005021
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08005021 	.word	0x08005021
 8004d24:	08005021 	.word	0x08005021
 8004d28:	08005021 	.word	0x08005021
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08005021 	.word	0x08005021
 8004d34:	08005021 	.word	0x08005021
 8004d38:	08005021 	.word	0x08005021
 8004d3c:	08004ec1 	.word	0x08004ec1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d40:	4bbd      	ldr	r3, [pc, #756]	; (8005038 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d42:	61bb      	str	r3, [r7, #24]
       break;
 8004d44:	e16f      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d46:	4bbd      	ldr	r3, [pc, #756]	; (800503c <HAL_RCC_GetSysClockFreq+0x360>)
 8004d48:	61bb      	str	r3, [r7, #24]
      break;
 8004d4a:	e16c      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d4c:	4bb9      	ldr	r3, [pc, #740]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d54:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d56:	4bb7      	ldr	r3, [pc, #732]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d053      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d62:	4bb4      	ldr	r3, [pc, #720]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	ea02 0400 	and.w	r4, r2, r0
 8004d7a:	603c      	str	r4, [r7, #0]
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	014b      	lsls	r3, r1, #5
 8004d92:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d96:	0142      	lsls	r2, r0, #5
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	1ac0      	subs	r0, r0, r3
 8004da0:	462b      	mov	r3, r5
 8004da2:	eb61 0103 	sbc.w	r1, r1, r3
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004db4:	0182      	lsls	r2, r0, #6
 8004db6:	1a12      	subs	r2, r2, r0
 8004db8:	eb63 0301 	sbc.w	r3, r3, r1
 8004dbc:	f04f 0000 	mov.w	r0, #0
 8004dc0:	f04f 0100 	mov.w	r1, #0
 8004dc4:	00d9      	lsls	r1, r3, #3
 8004dc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dca:	00d0      	lsls	r0, r2, #3
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	1852      	adds	r2, r2, r1
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb43 0101 	adc.w	r1, r3, r1
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f04f 0000 	mov.w	r0, #0
 8004de0:	f04f 0100 	mov.w	r1, #0
 8004de4:	0259      	lsls	r1, r3, #9
 8004de6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dea:	0250      	lsls	r0, r2, #9
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	f7fb ff64 	bl	8000cc8 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4613      	mov	r3, r2
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	e04c      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0a:	4b8a      	ldr	r3, [pc, #552]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	461a      	mov	r2, r3
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	ea02 0a00 	and.w	sl, r2, r0
 8004e22:	ea03 0b01 	and.w	fp, r3, r1
 8004e26:	4650      	mov	r0, sl
 8004e28:	4659      	mov	r1, fp
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	014b      	lsls	r3, r1, #5
 8004e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e38:	0142      	lsls	r2, r0, #5
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	ebb0 000a 	subs.w	r0, r0, sl
 8004e42:	eb61 010b 	sbc.w	r1, r1, fp
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	018b      	lsls	r3, r1, #6
 8004e50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e54:	0182      	lsls	r2, r0, #6
 8004e56:	1a12      	subs	r2, r2, r0
 8004e58:	eb63 0301 	sbc.w	r3, r3, r1
 8004e5c:	f04f 0000 	mov.w	r0, #0
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	00d9      	lsls	r1, r3, #3
 8004e66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e6a:	00d0      	lsls	r0, r2, #3
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	eb12 020a 	adds.w	r2, r2, sl
 8004e74:	eb43 030b 	adc.w	r3, r3, fp
 8004e78:	f04f 0000 	mov.w	r0, #0
 8004e7c:	f04f 0100 	mov.w	r1, #0
 8004e80:	0299      	lsls	r1, r3, #10
 8004e82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e86:	0290      	lsls	r0, r2, #10
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	f7fb ff16 	bl	8000cc8 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea4:	4b63      	ldr	r3, [pc, #396]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	61bb      	str	r3, [r7, #24]
      break;
 8004ebe:	e0b2      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec0:	4b5c      	ldr	r3, [pc, #368]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eca:	4b5a      	ldr	r3, [pc, #360]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04d      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed6:	4b57      	ldr	r3, [pc, #348]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	461a      	mov	r2, r3
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	ea02 0800 	and.w	r8, r2, r0
 8004eee:	ea03 0901 	and.w	r9, r3, r1
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	014b      	lsls	r3, r1, #5
 8004f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f04:	0142      	lsls	r2, r0, #5
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	ebb0 0008 	subs.w	r0, r0, r8
 8004f0e:	eb61 0109 	sbc.w	r1, r1, r9
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	018b      	lsls	r3, r1, #6
 8004f1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f20:	0182      	lsls	r2, r0, #6
 8004f22:	1a12      	subs	r2, r2, r0
 8004f24:	eb63 0301 	sbc.w	r3, r3, r1
 8004f28:	f04f 0000 	mov.w	r0, #0
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	00d9      	lsls	r1, r3, #3
 8004f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f36:	00d0      	lsls	r0, r2, #3
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	eb12 0208 	adds.w	r2, r2, r8
 8004f40:	eb43 0309 	adc.w	r3, r3, r9
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	0259      	lsls	r1, r3, #9
 8004f4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f52:	0250      	lsls	r0, r2, #9
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	f7fb feb0 	bl	8000cc8 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e04a      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	ea02 0400 	and.w	r4, r2, r0
 8004f8a:	ea03 0501 	and.w	r5, r3, r1
 8004f8e:	4620      	mov	r0, r4
 8004f90:	4629      	mov	r1, r5
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	014b      	lsls	r3, r1, #5
 8004f9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fa0:	0142      	lsls	r2, r0, #5
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	1b00      	subs	r0, r0, r4
 8004fa8:	eb61 0105 	sbc.w	r1, r1, r5
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	018b      	lsls	r3, r1, #6
 8004fb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fba:	0182      	lsls	r2, r0, #6
 8004fbc:	1a12      	subs	r2, r2, r0
 8004fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	00d9      	lsls	r1, r3, #3
 8004fcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fd0:	00d0      	lsls	r0, r2, #3
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	1912      	adds	r2, r2, r4
 8004fd8:	eb45 0303 	adc.w	r3, r5, r3
 8004fdc:	f04f 0000 	mov.w	r0, #0
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	0299      	lsls	r1, r3, #10
 8004fe6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fea:	0290      	lsls	r0, r2, #10
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	f7fb fe64 	bl	8000cc8 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCC_GetSysClockFreq+0x358>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0f1b      	lsrs	r3, r3, #28
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	61bb      	str	r3, [r7, #24]
      break;
 800501e:	e002      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005022:	61bb      	str	r3, [r7, #24]
      break;
 8005024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005026:	69bb      	ldr	r3, [r7, #24]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	00f42400 	.word	0x00f42400
 800503c:	007a1200 	.word	0x007a1200

08005040 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e28d      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8083 	beq.w	8005166 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005060:	4b94      	ldr	r3, [pc, #592]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 030c 	and.w	r3, r3, #12
 8005068:	2b04      	cmp	r3, #4
 800506a:	d019      	beq.n	80050a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800506c:	4b91      	ldr	r3, [pc, #580]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005074:	2b08      	cmp	r3, #8
 8005076:	d106      	bne.n	8005086 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005078:	4b8e      	ldr	r3, [pc, #568]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005084:	d00c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4b8b      	ldr	r3, [pc, #556]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d112      	bne.n	80050b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4b88      	ldr	r3, [pc, #544]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509e:	d10b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	4b84      	ldr	r3, [pc, #528]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05b      	beq.n	8005164 <HAL_RCC_OscConfig+0x124>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d157      	bne.n	8005164 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e25a      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x90>
 80050c2:	4b7c      	ldr	r3, [pc, #496]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a7b      	ldr	r2, [pc, #492]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xcc>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0xb4>
 80050da:	4b76      	ldr	r3, [pc, #472]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a75      	ldr	r2, [pc, #468]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b73      	ldr	r3, [pc, #460]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a72      	ldr	r2, [pc, #456]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xcc>
 80050f4:	4b6f      	ldr	r3, [pc, #444]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6e      	ldr	r2, [pc, #440]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b6c      	ldr	r3, [pc, #432]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6b      	ldr	r2, [pc, #428]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fd fd36 	bl	8002b84 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511c:	f7fd fd32 	bl	8002b84 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e21f      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xdc>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd fd22 	bl	8002b84 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd fd1e 	bl	8002b84 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e20b      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b57      	ldr	r3, [pc, #348]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x104>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d06f      	beq.n	8005252 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005172:	4b50      	ldr	r3, [pc, #320]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d017      	beq.n	80051ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800517e:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005186:	2b08      	cmp	r3, #8
 8005188:	d105      	bne.n	8005196 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800518a:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d11c      	bne.n	80051dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a2:	4b44      	ldr	r3, [pc, #272]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ae:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCC_OscConfig+0x186>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e1d3      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4937      	ldr	r1, [pc, #220]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	e03a      	b.n	8005252 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e4:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCC_OscConfig+0x278>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fd fccb 	bl	8002b84 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fd fcc7 	bl	8002b84 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e1b4      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	4b2b      	ldr	r3, [pc, #172]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4925      	ldr	r1, [pc, #148]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]
 8005224:	e015      	b.n	8005252 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <HAL_RCC_OscConfig+0x278>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fd fcaa 	bl	8002b84 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005234:	f7fd fca6 	bl	8002b84 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e193      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d036      	beq.n	80052cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <HAL_RCC_OscConfig+0x27c>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fd fc8a 	bl	8002b84 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005274:	f7fd fc86 	bl	8002b84 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e173      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x234>
 8005292:	e01b      	b.n	80052cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_OscConfig+0x27c>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529a:	f7fd fc73 	bl	8002b84 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	e00e      	b.n	80052c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a2:	f7fd fc6f 	bl	8002b84 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d907      	bls.n	80052c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e15c      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
 80052b4:	40023800 	.word	0x40023800
 80052b8:	42470000 	.word	0x42470000
 80052bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c0:	4b8a      	ldr	r3, [pc, #552]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80052c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ea      	bne.n	80052a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8097 	beq.w	8005408 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052de:	4b83      	ldr	r3, [pc, #524]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	4b7f      	ldr	r3, [pc, #508]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	4a7e      	ldr	r2, [pc, #504]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6413      	str	r3, [r2, #64]	; 0x40
 80052fa:	4b7c      	ldr	r3, [pc, #496]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	4b79      	ldr	r3, [pc, #484]	; (80054f0 <HAL_RCC_OscConfig+0x4b0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d118      	bne.n	8005348 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005316:	4b76      	ldr	r3, [pc, #472]	; (80054f0 <HAL_RCC_OscConfig+0x4b0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a75      	ldr	r2, [pc, #468]	; (80054f0 <HAL_RCC_OscConfig+0x4b0>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005322:	f7fd fc2f 	bl	8002b84 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532a:	f7fd fc2b 	bl	8002b84 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e118      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533c:	4b6c      	ldr	r3, [pc, #432]	; (80054f0 <HAL_RCC_OscConfig+0x4b0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <HAL_RCC_OscConfig+0x31e>
 8005350:	4b66      	ldr	r3, [pc, #408]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a65      	ldr	r2, [pc, #404]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
 800535c:	e01c      	b.n	8005398 <HAL_RCC_OscConfig+0x358>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b05      	cmp	r3, #5
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0x340>
 8005366:	4b61      	ldr	r3, [pc, #388]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	4a60      	ldr	r2, [pc, #384]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 800536c:	f043 0304 	orr.w	r3, r3, #4
 8005370:	6713      	str	r3, [r2, #112]	; 0x70
 8005372:	4b5e      	ldr	r3, [pc, #376]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	4a5d      	ldr	r2, [pc, #372]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6713      	str	r3, [r2, #112]	; 0x70
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0x358>
 8005380:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	4a59      	ldr	r2, [pc, #356]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	6713      	str	r3, [r2, #112]	; 0x70
 800538c:	4b57      	ldr	r3, [pc, #348]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4a56      	ldr	r2, [pc, #344]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005392:	f023 0304 	bic.w	r3, r3, #4
 8005396:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a0:	f7fd fbf0 	bl	8002b84 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a6:	e00a      	b.n	80053be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a8:	f7fd fbec 	bl	8002b84 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0d7      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053be:	4b4b      	ldr	r3, [pc, #300]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0ee      	beq.n	80053a8 <HAL_RCC_OscConfig+0x368>
 80053ca:	e014      	b.n	80053f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fd fbda 	bl	8002b84 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fd fbd6 	bl	8002b84 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0c1      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ea:	4b40      	ldr	r3, [pc, #256]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ee      	bne.n	80053d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d105      	bne.n	8005408 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fc:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005406:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80ad 	beq.w	800556c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005412:	4b36      	ldr	r3, [pc, #216]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b08      	cmp	r3, #8
 800541c:	d060      	beq.n	80054e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d145      	bne.n	80054b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b33      	ldr	r3, [pc, #204]	; (80054f4 <HAL_RCC_OscConfig+0x4b4>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fd fbaa 	bl	8002b84 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005434:	f7fd fba6 	bl	8002b84 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e093      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	4b29      	ldr	r3, [pc, #164]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	019b      	lsls	r3, r3, #6
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	491b      	ldr	r1, [pc, #108]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 8005480:	4313      	orrs	r3, r2
 8005482:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <HAL_RCC_OscConfig+0x4b4>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fd fb7b 	bl	8002b84 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005492:	f7fd fb77 	bl	8002b84 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e064      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x452>
 80054b0:	e05c      	b.n	800556c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <HAL_RCC_OscConfig+0x4b4>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fd fb64 	bl	8002b84 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c0:	f7fd fb60 	bl	8002b84 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e04d      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_RCC_OscConfig+0x4ac>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x480>
 80054de:	e045      	b.n	800556c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e040      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40007000 	.word	0x40007000
 80054f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054f8:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <HAL_RCC_OscConfig+0x538>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d030      	beq.n	8005568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d129      	bne.n	8005568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d122      	bne.n	8005568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005528:	4013      	ands	r3, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800552e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005530:	4293      	cmp	r3, r2
 8005532:	d119      	bne.n	8005568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	3b01      	subs	r3, #1
 8005542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d10f      	bne.n	8005568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800

0800557c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e041      	b.n	8005612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fd f8b8 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f000 f9ce 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d001      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e04e      	b.n	80056d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d022      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d01d      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1f      	ldr	r2, [pc, #124]	; (80056e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <HAL_TIM_Base_Start_IT+0xd0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x80>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d111      	bne.n	80056c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d010      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	e007      	b.n	80056d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40014000 	.word	0x40014000
 80056f8:	40001800 	.word	0x40001800

080056fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b02      	cmp	r3, #2
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0202 	mvn.w	r2, #2
 8005728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8ee 	bl	8005920 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f8e0 	bl	800590c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8f1 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b04      	cmp	r3, #4
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b04      	cmp	r3, #4
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0204 	mvn.w	r2, #4
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f8c4 	bl	8005920 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8b6 	bl	800590c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8c7 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0208 	mvn.w	r2, #8
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2204      	movs	r2, #4
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f89a 	bl	8005920 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f88c 	bl	800590c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f89d 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b10      	cmp	r3, #16
 800580c:	d122      	bne.n	8005854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d11b      	bne.n	8005854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0210 	mvn.w	r2, #16
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2208      	movs	r2, #8
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f870 	bl	8005920 <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f862 	bl	800590c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f873 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d107      	bne.n	8005880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0201 	mvn.w	r2, #1
 8005878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fc faea 	bl	8001e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b80      	cmp	r3, #128	; 0x80
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005898:	2b80      	cmp	r3, #128	; 0x80
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f97e 	bl	8005ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f838 	bl	8005948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d10e      	bne.n	8005904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d107      	bne.n	8005904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0220 	mvn.w	r2, #32
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f948 	bl	8005b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <TIM_Base_SetConfig+0x114>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597a:	d00f      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3d      	ldr	r2, [pc, #244]	; (8005a74 <TIM_Base_SetConfig+0x118>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3c      	ldr	r2, [pc, #240]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3b      	ldr	r2, [pc, #236]	; (8005a7c <TIM_Base_SetConfig+0x120>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3a      	ldr	r2, [pc, #232]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2f      	ldr	r2, [pc, #188]	; (8005a70 <TIM_Base_SetConfig+0x114>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d027      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2c      	ldr	r2, [pc, #176]	; (8005a74 <TIM_Base_SetConfig+0x118>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d023      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2b      	ldr	r2, [pc, #172]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01f      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <TIM_Base_SetConfig+0x120>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a29      	ldr	r2, [pc, #164]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d017      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <TIM_Base_SetConfig+0x128>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <TIM_Base_SetConfig+0x12c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00f      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <TIM_Base_SetConfig+0x130>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <TIM_Base_SetConfig+0x134>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <TIM_Base_SetConfig+0x138>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a23      	ldr	r2, [pc, #140]	; (8005a98 <TIM_Base_SetConfig+0x13c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <TIM_Base_SetConfig+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_Base_SetConfig+0xf8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d103      	bne.n	8005a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	615a      	str	r2, [r3, #20]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40000400 	.word	0x40000400
 8005a78:	40000800 	.word	0x40000800
 8005a7c:	40000c00 	.word	0x40000c00
 8005a80:	40010400 	.word	0x40010400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800
 8005a90:	40001800 	.word	0x40001800
 8005a94:	40001c00 	.word	0x40001c00
 8005a98:	40002000 	.word	0x40002000

08005a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e05a      	b.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d022      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d01d      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d018      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1a      	ldr	r2, [pc, #104]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10c      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40001800 	.word	0x40001800

08005b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e03f      	b.n	8005c4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fdc0 	bl	8002768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fd1d 	bl	8006640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b08a      	sub	sp, #40	; 0x28
 8005c5a:	af02      	add	r7, sp, #8
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d17c      	bne.n	8005d70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_UART_Transmit+0x2c>
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e075      	b.n	8005d72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_UART_Transmit+0x3e>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e06e      	b.n	8005d72 <HAL_UART_Transmit+0x11c>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	; 0x21
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005caa:	f7fc ff6b 	bl	8002b84 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	d108      	bne.n	8005cd8 <HAL_UART_Transmit+0x82>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e003      	b.n	8005ce0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ce8:	e02a      	b.n	8005d40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2180      	movs	r1, #128	; 0x80
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fadf 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e036      	b.n	8005d72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	e007      	b.n	8005d32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1cf      	bne.n	8005cea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2140      	movs	r1, #64	; 0x40
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 faaf 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e006      	b.n	8005d72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b08a      	sub	sp, #40	; 0x28
 8005d7e:	af02      	add	r7, sp, #8
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	f040 808c 	bne.w	8005eb4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_UART_Receive+0x2e>
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e084      	b.n	8005eb6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Receive+0x40>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e07d      	b.n	8005eb6 <HAL_UART_Receive+0x13c>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2222      	movs	r2, #34	; 0x22
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dd6:	f7fc fed5 	bl	8002b84 <HAL_GetTick>
 8005dda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	88fa      	ldrh	r2, [r7, #6]
 8005de6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df0:	d108      	bne.n	8005e04 <HAL_UART_Receive+0x8a>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e003      	b.n	8005e0c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e14:	e043      	b.n	8005e9e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2120      	movs	r1, #32
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fa49 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e042      	b.n	8005eb6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10c      	bne.n	8005e50 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	3302      	adds	r3, #2
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e01f      	b.n	8005e90 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e58:	d007      	beq.n	8005e6a <HAL_UART_Receive+0xf0>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <HAL_UART_Receive+0xfe>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e008      	b.n	8005e8a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1b6      	bne.n	8005e16 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d11d      	bne.n	8005f14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_UART_Receive_IT+0x26>
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e016      	b.n	8005f16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Receive_IT+0x38>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e00f      	b.n	8005f16 <HAL_UART_Receive_IT+0x58>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	461a      	mov	r2, r3
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fa1e 	bl	800634c <UART_Start_Receive_IT>
 8005f10:	4603      	mov	r3, r0
 8005f12:	e000      	b.n	8005f16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <HAL_UART_IRQHandler+0x52>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fad1 	bl	8006512 <UART_Receive_IT>
      return;
 8005f70:	e17c      	b.n	800626c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80b1 	beq.w	80060dc <HAL_UART_IRQHandler+0x1bc>
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <HAL_UART_IRQHandler+0x70>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a6 	beq.w	80060dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x90>
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_UART_IRQHandler+0xb0>
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0202 	orr.w	r2, r3, #2
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_UART_IRQHandler+0xd0>
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f043 0204 	orr.w	r2, r3, #4
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00f      	beq.n	800601a <HAL_UART_IRQHandler+0xfa>
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_UART_IRQHandler+0xee>
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0208 	orr.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 811f 	beq.w	8006262 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_UART_IRQHandler+0x11e>
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa6a 	bl	8006512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <HAL_UART_IRQHandler+0x146>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d031      	beq.n	80060ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f9aa 	bl	80063c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d123      	bne.n	80060c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006088:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	2b00      	cmp	r3, #0
 8006090:	d013      	beq.n	80060ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	4a77      	ldr	r2, [pc, #476]	; (8006274 <HAL_UART_IRQHandler+0x354>)
 8006098:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fd ff98 	bl	8003fd4 <HAL_DMA_Abort_IT>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060b4:	4610      	mov	r0, r2
 80060b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e00e      	b.n	80060d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f8e6 	bl	800628c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	e00a      	b.n	80060d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f8e2 	bl	800628c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	e006      	b.n	80060d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8de 	bl	800628c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060d6:	e0c4      	b.n	8006262 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	bf00      	nop
    return;
 80060da:	e0c2      	b.n	8006262 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 80a2 	bne.w	800622a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 809c 	beq.w	800622a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8096 	beq.w	800622a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d14f      	bne.n	80061c2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800612c:	8a3b      	ldrh	r3, [r7, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8099 	beq.w	8006266 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006138:	8a3a      	ldrh	r2, [r7, #16]
 800613a:	429a      	cmp	r2, r3
 800613c:	f080 8093 	bcs.w	8006266 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8a3a      	ldrh	r2, [r7, #16]
 8006144:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006150:	d02b      	beq.n	80061aa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006160:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695a      	ldr	r2, [r3, #20]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006180:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0210 	bic.w	r2, r2, #16
 800619e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd fea5 	bl	8003ef4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f870 	bl	80062a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061c0:	e051      	b.n	8006266 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d047      	beq.n	800626a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80061da:	8a7b      	ldrh	r3, [r7, #18]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d044      	beq.n	800626a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061ee:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0210 	bic.w	r2, r2, #16
 800621c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800621e:	8a7b      	ldrh	r3, [r7, #18]
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f83c 	bl	80062a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006228:	e01f      	b.n	800626a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <HAL_UART_IRQHandler+0x326>
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8ff 	bl	8006442 <UART_Transmit_IT>
    return;
 8006244:	e012      	b.n	800626c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <HAL_UART_IRQHandler+0x34c>
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f941 	bl	80064e2 <UART_EndTransmit_IT>
    return;
 8006260:	e004      	b.n	800626c <HAL_UART_IRQHandler+0x34c>
    return;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <HAL_UART_IRQHandler+0x34c>
      return;
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <HAL_UART_IRQHandler+0x34c>
      return;
 800626a:	bf00      	nop
  }
}
 800626c:	3728      	adds	r7, #40	; 0x28
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	0800641b 	.word	0x0800641b

08006278 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	e02c      	b.n	8006324 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d028      	beq.n	8006324 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d8:	f7fc fc54 	bl	8002b84 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d21d      	bcs.n	8006324 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e00f      	b.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4013      	ands	r3, r2
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	bf0c      	ite	eq
 8006334:	2301      	moveq	r3, #1
 8006336:	2300      	movne	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	429a      	cmp	r2, r3
 8006340:	d0c3      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	88fa      	ldrh	r2, [r7, #6]
 800636a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2222      	movs	r2, #34	; 0x22
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006390:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0220 	orr.w	r2, r2, #32
 80063b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d107      	bne.n	8006400 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0210 	bic.w	r2, r2, #16
 80063fe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff ff29 	bl	800628c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b21      	cmp	r3, #33	; 0x21
 8006454:	d13e      	bne.n	80064d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645e:	d114      	bne.n	800648a <UART_Transmit_IT+0x48>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d110      	bne.n	800648a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800647c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	621a      	str	r2, [r3, #32]
 8006488:	e008      	b.n	800649c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	1c59      	adds	r1, r3, #1
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6211      	str	r1, [r2, #32]
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4619      	mov	r1, r3
 80064aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10f      	bne.n	80064d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff feb8 	bl	8006278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b22      	cmp	r3, #34	; 0x22
 8006524:	f040 8087 	bne.w	8006636 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d117      	bne.n	8006562 <UART_Receive_IT+0x50>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d113      	bne.n	8006562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006550:	b29a      	uxth	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
 8006560:	e026      	b.n	80065b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006574:	d007      	beq.n	8006586 <UART_Receive_IT+0x74>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <UART_Receive_IT+0x82>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	e008      	b.n	80065a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d136      	bne.n	8006632 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0220 	bic.w	r2, r2, #32
 80065d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10e      	bne.n	8006622 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0210 	bic.w	r2, r2, #16
 8006612:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fe40 	bl	80062a0 <HAL_UARTEx_RxEventCallback>
 8006620:	e002      	b.n	8006628 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fb fc30 	bl	8001e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e002      	b.n	8006638 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e000      	b.n	8006638 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006636:	2302      	movs	r3, #2
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	b09f      	sub	sp, #124	; 0x7c
 8006646:	af00      	add	r7, sp, #0
 8006648:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006656:	68d9      	ldr	r1, [r3, #12]
 8006658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	ea40 0301 	orr.w	r3, r0, r1
 8006660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	431a      	orrs	r2, r3
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4313      	orrs	r3, r2
 8006678:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006684:	f021 010c 	bic.w	r1, r1, #12
 8006688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668e:	430b      	orrs	r3, r1
 8006690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669e:	6999      	ldr	r1, [r3, #24]
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	ea40 0301 	orr.w	r3, r0, r1
 80066a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4bc5      	ldr	r3, [pc, #788]	; (80069c4 <UART_SetConfig+0x384>)
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d004      	beq.n	80066be <UART_SetConfig+0x7e>
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	4bc3      	ldr	r3, [pc, #780]	; (80069c8 <UART_SetConfig+0x388>)
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d103      	bne.n	80066c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066be:	f7fe faf9 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 80066c2:	6778      	str	r0, [r7, #116]	; 0x74
 80066c4:	e002      	b.n	80066cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066c6:	f7fe fae1 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 80066ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d4:	f040 80b6 	bne.w	8006844 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066da:	461c      	mov	r4, r3
 80066dc:	f04f 0500 	mov.w	r5, #0
 80066e0:	4622      	mov	r2, r4
 80066e2:	462b      	mov	r3, r5
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	6439      	str	r1, [r7, #64]	; 0x40
 80066e8:	415b      	adcs	r3, r3
 80066ea:	647b      	str	r3, [r7, #68]	; 0x44
 80066ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066f0:	1912      	adds	r2, r2, r4
 80066f2:	eb45 0303 	adc.w	r3, r5, r3
 80066f6:	f04f 0000 	mov.w	r0, #0
 80066fa:	f04f 0100 	mov.w	r1, #0
 80066fe:	00d9      	lsls	r1, r3, #3
 8006700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006704:	00d0      	lsls	r0, r2, #3
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	1911      	adds	r1, r2, r4
 800670c:	6639      	str	r1, [r7, #96]	; 0x60
 800670e:	416b      	adcs	r3, r5
 8006710:	667b      	str	r3, [r7, #100]	; 0x64
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	461a      	mov	r2, r3
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	1891      	adds	r1, r2, r2
 800671e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006720:	415b      	adcs	r3, r3
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006728:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800672c:	f7fa facc 	bl	8000cc8 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4ba5      	ldr	r3, [pc, #660]	; (80069cc <UART_SetConfig+0x38c>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011e      	lsls	r6, r3, #4
 800673e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006740:	461c      	mov	r4, r3
 8006742:	f04f 0500 	mov.w	r5, #0
 8006746:	4622      	mov	r2, r4
 8006748:	462b      	mov	r3, r5
 800674a:	1891      	adds	r1, r2, r2
 800674c:	6339      	str	r1, [r7, #48]	; 0x30
 800674e:	415b      	adcs	r3, r3
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
 8006752:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006756:	1912      	adds	r2, r2, r4
 8006758:	eb45 0303 	adc.w	r3, r5, r3
 800675c:	f04f 0000 	mov.w	r0, #0
 8006760:	f04f 0100 	mov.w	r1, #0
 8006764:	00d9      	lsls	r1, r3, #3
 8006766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800676a:	00d0      	lsls	r0, r2, #3
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	1911      	adds	r1, r2, r4
 8006772:	65b9      	str	r1, [r7, #88]	; 0x58
 8006774:	416b      	adcs	r3, r5
 8006776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	1891      	adds	r1, r2, r2
 8006784:	62b9      	str	r1, [r7, #40]	; 0x28
 8006786:	415b      	adcs	r3, r3
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800678e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006792:	f7fa fa99 	bl	8000cc8 <__aeabi_uldivmod>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4b8c      	ldr	r3, [pc, #560]	; (80069cc <UART_SetConfig+0x38c>)
 800679c:	fba3 1302 	umull	r1, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	2164      	movs	r1, #100	; 0x64
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	3332      	adds	r3, #50	; 0x32
 80067ae:	4a87      	ldr	r2, [pc, #540]	; (80069cc <UART_SetConfig+0x38c>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067bc:	441e      	add	r6, r3
 80067be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c0:	4618      	mov	r0, r3
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	1894      	adds	r4, r2, r2
 80067cc:	623c      	str	r4, [r7, #32]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
 80067d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067d6:	1812      	adds	r2, r2, r0
 80067d8:	eb41 0303 	adc.w	r3, r1, r3
 80067dc:	f04f 0400 	mov.w	r4, #0
 80067e0:	f04f 0500 	mov.w	r5, #0
 80067e4:	00dd      	lsls	r5, r3, #3
 80067e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ea:	00d4      	lsls	r4, r2, #3
 80067ec:	4622      	mov	r2, r4
 80067ee:	462b      	mov	r3, r5
 80067f0:	1814      	adds	r4, r2, r0
 80067f2:	653c      	str	r4, [r7, #80]	; 0x50
 80067f4:	414b      	adcs	r3, r1
 80067f6:	657b      	str	r3, [r7, #84]	; 0x54
 80067f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	461a      	mov	r2, r3
 80067fe:	f04f 0300 	mov.w	r3, #0
 8006802:	1891      	adds	r1, r2, r2
 8006804:	61b9      	str	r1, [r7, #24]
 8006806:	415b      	adcs	r3, r3
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800680e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006812:	f7fa fa59 	bl	8000cc8 <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4b6c      	ldr	r3, [pc, #432]	; (80069cc <UART_SetConfig+0x38c>)
 800681c:	fba3 1302 	umull	r1, r3, r3, r2
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	2164      	movs	r1, #100	; 0x64
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	3332      	adds	r3, #50	; 0x32
 800682e:	4a67      	ldr	r2, [pc, #412]	; (80069cc <UART_SetConfig+0x38c>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	f003 0207 	and.w	r2, r3, #7
 800683a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4432      	add	r2, r6
 8006840:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006842:	e0b9      	b.n	80069b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006846:	461c      	mov	r4, r3
 8006848:	f04f 0500 	mov.w	r5, #0
 800684c:	4622      	mov	r2, r4
 800684e:	462b      	mov	r3, r5
 8006850:	1891      	adds	r1, r2, r2
 8006852:	6139      	str	r1, [r7, #16]
 8006854:	415b      	adcs	r3, r3
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800685c:	1912      	adds	r2, r2, r4
 800685e:	eb45 0303 	adc.w	r3, r5, r3
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f04f 0100 	mov.w	r1, #0
 800686a:	00d9      	lsls	r1, r3, #3
 800686c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006870:	00d0      	lsls	r0, r2, #3
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	eb12 0804 	adds.w	r8, r2, r4
 800687a:	eb43 0905 	adc.w	r9, r3, r5
 800687e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4618      	mov	r0, r3
 8006884:	f04f 0100 	mov.w	r1, #0
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	008b      	lsls	r3, r1, #2
 8006892:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006896:	0082      	lsls	r2, r0, #2
 8006898:	4640      	mov	r0, r8
 800689a:	4649      	mov	r1, r9
 800689c:	f7fa fa14 	bl	8000cc8 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b49      	ldr	r3, [pc, #292]	; (80069cc <UART_SetConfig+0x38c>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011e      	lsls	r6, r3, #4
 80068ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b0:	4618      	mov	r0, r3
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	1894      	adds	r4, r2, r2
 80068bc:	60bc      	str	r4, [r7, #8]
 80068be:	415b      	adcs	r3, r3
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c6:	1812      	adds	r2, r2, r0
 80068c8:	eb41 0303 	adc.w	r3, r1, r3
 80068cc:	f04f 0400 	mov.w	r4, #0
 80068d0:	f04f 0500 	mov.w	r5, #0
 80068d4:	00dd      	lsls	r5, r3, #3
 80068d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068da:	00d4      	lsls	r4, r2, #3
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	1814      	adds	r4, r2, r0
 80068e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80068e4:	414b      	adcs	r3, r1
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f04f 0100 	mov.w	r1, #0
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	008b      	lsls	r3, r1, #2
 80068fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006900:	0082      	lsls	r2, r0, #2
 8006902:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006906:	f7fa f9df 	bl	8000cc8 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4b2f      	ldr	r3, [pc, #188]	; (80069cc <UART_SetConfig+0x38c>)
 8006910:	fba3 1302 	umull	r1, r3, r3, r2
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2164      	movs	r1, #100	; 0x64
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	3332      	adds	r3, #50	; 0x32
 8006922:	4a2a      	ldr	r2, [pc, #168]	; (80069cc <UART_SetConfig+0x38c>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800692e:	441e      	add	r6, r3
 8006930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006932:	4618      	mov	r0, r3
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	1894      	adds	r4, r2, r2
 800693e:	603c      	str	r4, [r7, #0]
 8006940:	415b      	adcs	r3, r3
 8006942:	607b      	str	r3, [r7, #4]
 8006944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006948:	1812      	adds	r2, r2, r0
 800694a:	eb41 0303 	adc.w	r3, r1, r3
 800694e:	f04f 0400 	mov.w	r4, #0
 8006952:	f04f 0500 	mov.w	r5, #0
 8006956:	00dd      	lsls	r5, r3, #3
 8006958:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800695c:	00d4      	lsls	r4, r2, #3
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	eb12 0a00 	adds.w	sl, r2, r0
 8006966:	eb43 0b01 	adc.w	fp, r3, r1
 800696a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	4618      	mov	r0, r3
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	008b      	lsls	r3, r1, #2
 800697e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006982:	0082      	lsls	r2, r0, #2
 8006984:	4650      	mov	r0, sl
 8006986:	4659      	mov	r1, fp
 8006988:	f7fa f99e 	bl	8000cc8 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <UART_SetConfig+0x38c>)
 8006992:	fba3 1302 	umull	r1, r3, r3, r2
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2164      	movs	r1, #100	; 0x64
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	3332      	adds	r3, #50	; 0x32
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <UART_SetConfig+0x38c>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4432      	add	r2, r6
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	377c      	adds	r7, #124	; 0x7c
 80069bc:	46bd      	mov	sp, r7
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	bf00      	nop
 80069c4:	40011000 	.word	0x40011000
 80069c8:	40011400 	.word	0x40011400
 80069cc:	51eb851f 	.word	0x51eb851f

080069d0 <__errno>:
 80069d0:	4b01      	ldr	r3, [pc, #4]	; (80069d8 <__errno+0x8>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000090 	.word	0x20000090

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4d0d      	ldr	r5, [pc, #52]	; (8006a14 <__libc_init_array+0x38>)
 80069e0:	4c0d      	ldr	r4, [pc, #52]	; (8006a18 <__libc_init_array+0x3c>)
 80069e2:	1b64      	subs	r4, r4, r5
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	2600      	movs	r6, #0
 80069e8:	42a6      	cmp	r6, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	4d0b      	ldr	r5, [pc, #44]	; (8006a1c <__libc_init_array+0x40>)
 80069ee:	4c0c      	ldr	r4, [pc, #48]	; (8006a20 <__libc_init_array+0x44>)
 80069f0:	f004 fcba 	bl	800b368 <_init>
 80069f4:	1b64      	subs	r4, r4, r5
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	2600      	movs	r6, #0
 80069fa:	42a6      	cmp	r6, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a04:	4798      	blx	r3
 8006a06:	3601      	adds	r6, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0e:	4798      	blx	r3
 8006a10:	3601      	adds	r6, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	0800bc9c 	.word	0x0800bc9c
 8006a18:	0800bc9c 	.word	0x0800bc9c
 8006a1c:	0800bc9c 	.word	0x0800bc9c
 8006a20:	0800bca0 	.word	0x0800bca0

08006a24 <memset>:
 8006a24:	4402      	add	r2, r0
 8006a26:	4603      	mov	r3, r0
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <memset+0xa>
 8006a2c:	4770      	bx	lr
 8006a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a32:	e7f9      	b.n	8006a28 <memset+0x4>

08006a34 <__cvt>:
 8006a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	ec55 4b10 	vmov	r4, r5, d0
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	460e      	mov	r6, r1
 8006a40:	4619      	mov	r1, r3
 8006a42:	462b      	mov	r3, r5
 8006a44:	bfbb      	ittet	lt
 8006a46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a4a:	461d      	movlt	r5, r3
 8006a4c:	2300      	movge	r3, #0
 8006a4e:	232d      	movlt	r3, #45	; 0x2d
 8006a50:	700b      	strb	r3, [r1, #0]
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a58:	4691      	mov	r9, r2
 8006a5a:	f023 0820 	bic.w	r8, r3, #32
 8006a5e:	bfbc      	itt	lt
 8006a60:	4622      	movlt	r2, r4
 8006a62:	4614      	movlt	r4, r2
 8006a64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a68:	d005      	beq.n	8006a76 <__cvt+0x42>
 8006a6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a6e:	d100      	bne.n	8006a72 <__cvt+0x3e>
 8006a70:	3601      	adds	r6, #1
 8006a72:	2102      	movs	r1, #2
 8006a74:	e000      	b.n	8006a78 <__cvt+0x44>
 8006a76:	2103      	movs	r1, #3
 8006a78:	ab03      	add	r3, sp, #12
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	ab02      	add	r3, sp, #8
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	ec45 4b10 	vmov	d0, r4, r5
 8006a84:	4653      	mov	r3, sl
 8006a86:	4632      	mov	r2, r6
 8006a88:	f001 feea 	bl	8008860 <_dtoa_r>
 8006a8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a90:	4607      	mov	r7, r0
 8006a92:	d102      	bne.n	8006a9a <__cvt+0x66>
 8006a94:	f019 0f01 	tst.w	r9, #1
 8006a98:	d022      	beq.n	8006ae0 <__cvt+0xac>
 8006a9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a9e:	eb07 0906 	add.w	r9, r7, r6
 8006aa2:	d110      	bne.n	8006ac6 <__cvt+0x92>
 8006aa4:	783b      	ldrb	r3, [r7, #0]
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	d10a      	bne.n	8006ac0 <__cvt+0x8c>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7fa f829 	bl	8000b08 <__aeabi_dcmpeq>
 8006ab6:	b918      	cbnz	r0, 8006ac0 <__cvt+0x8c>
 8006ab8:	f1c6 0601 	rsb	r6, r6, #1
 8006abc:	f8ca 6000 	str.w	r6, [sl]
 8006ac0:	f8da 3000 	ldr.w	r3, [sl]
 8006ac4:	4499      	add	r9, r3
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7fa f81b 	bl	8000b08 <__aeabi_dcmpeq>
 8006ad2:	b108      	cbz	r0, 8006ad8 <__cvt+0xa4>
 8006ad4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ad8:	2230      	movs	r2, #48	; 0x30
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	454b      	cmp	r3, r9
 8006ade:	d307      	bcc.n	8006af0 <__cvt+0xbc>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae4:	1bdb      	subs	r3, r3, r7
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	b004      	add	sp, #16
 8006aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	9103      	str	r1, [sp, #12]
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e7f0      	b.n	8006ada <__cvt+0xa6>

08006af8 <__exponent>:
 8006af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afa:	4603      	mov	r3, r0
 8006afc:	2900      	cmp	r1, #0
 8006afe:	bfb8      	it	lt
 8006b00:	4249      	neglt	r1, r1
 8006b02:	f803 2b02 	strb.w	r2, [r3], #2
 8006b06:	bfb4      	ite	lt
 8006b08:	222d      	movlt	r2, #45	; 0x2d
 8006b0a:	222b      	movge	r2, #43	; 0x2b
 8006b0c:	2909      	cmp	r1, #9
 8006b0e:	7042      	strb	r2, [r0, #1]
 8006b10:	dd2a      	ble.n	8006b68 <__exponent+0x70>
 8006b12:	f10d 0407 	add.w	r4, sp, #7
 8006b16:	46a4      	mov	ip, r4
 8006b18:	270a      	movs	r7, #10
 8006b1a:	46a6      	mov	lr, r4
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b22:	fb07 1516 	mls	r5, r7, r6, r1
 8006b26:	3530      	adds	r5, #48	; 0x30
 8006b28:	2a63      	cmp	r2, #99	; 0x63
 8006b2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b32:	4631      	mov	r1, r6
 8006b34:	dcf1      	bgt.n	8006b1a <__exponent+0x22>
 8006b36:	3130      	adds	r1, #48	; 0x30
 8006b38:	f1ae 0502 	sub.w	r5, lr, #2
 8006b3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b40:	1c44      	adds	r4, r0, #1
 8006b42:	4629      	mov	r1, r5
 8006b44:	4561      	cmp	r1, ip
 8006b46:	d30a      	bcc.n	8006b5e <__exponent+0x66>
 8006b48:	f10d 0209 	add.w	r2, sp, #9
 8006b4c:	eba2 020e 	sub.w	r2, r2, lr
 8006b50:	4565      	cmp	r5, ip
 8006b52:	bf88      	it	hi
 8006b54:	2200      	movhi	r2, #0
 8006b56:	4413      	add	r3, r2
 8006b58:	1a18      	subs	r0, r3, r0
 8006b5a:	b003      	add	sp, #12
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b66:	e7ed      	b.n	8006b44 <__exponent+0x4c>
 8006b68:	2330      	movs	r3, #48	; 0x30
 8006b6a:	3130      	adds	r1, #48	; 0x30
 8006b6c:	7083      	strb	r3, [r0, #2]
 8006b6e:	70c1      	strb	r1, [r0, #3]
 8006b70:	1d03      	adds	r3, r0, #4
 8006b72:	e7f1      	b.n	8006b58 <__exponent+0x60>

08006b74 <_printf_float>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	ed2d 8b02 	vpush	{d8}
 8006b7c:	b08d      	sub	sp, #52	; 0x34
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b84:	4616      	mov	r6, r2
 8006b86:	461f      	mov	r7, r3
 8006b88:	4605      	mov	r5, r0
 8006b8a:	f003 f97b 	bl	8009e84 <_localeconv_r>
 8006b8e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b92:	4650      	mov	r0, sl
 8006b94:	f7f9 fb3c 	bl	8000210 <strlen>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ba8:	3307      	adds	r3, #7
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	f103 0208 	add.w	r2, r3, #8
 8006bb2:	f8c8 2000 	str.w	r2, [r8]
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bcc:	ee08 0a10 	vmov	s16, r0
 8006bd0:	4b9f      	ldr	r3, [pc, #636]	; (8006e50 <_printf_float+0x2dc>)
 8006bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	f7f9 ffc7 	bl	8000b6c <__aeabi_dcmpun>
 8006bde:	bb88      	cbnz	r0, 8006c44 <_printf_float+0xd0>
 8006be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be4:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <_printf_float+0x2dc>)
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	f7f9 ffa1 	bl	8000b30 <__aeabi_dcmple>
 8006bee:	bb48      	cbnz	r0, 8006c44 <_printf_float+0xd0>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8006bfc:	b110      	cbz	r0, 8006c04 <_printf_float+0x90>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	4b93      	ldr	r3, [pc, #588]	; (8006e54 <_printf_float+0x2e0>)
 8006c06:	4894      	ldr	r0, [pc, #592]	; (8006e58 <_printf_float+0x2e4>)
 8006c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c0c:	bf94      	ite	ls
 8006c0e:	4698      	movls	r8, r3
 8006c10:	4680      	movhi	r8, r0
 8006c12:	2303      	movs	r3, #3
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	f023 0204 	bic.w	r2, r3, #4
 8006c1c:	6022      	str	r2, [r4, #0]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	9700      	str	r7, [sp, #0]
 8006c24:	4633      	mov	r3, r6
 8006c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f9d8 	bl	8006fe0 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f040 8090 	bne.w	8006d56 <_printf_float+0x1e2>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b00d      	add	sp, #52	; 0x34
 8006c3c:	ecbd 8b02 	vpop	{d8}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8006c50:	b140      	cbz	r0, 8006c64 <_printf_float+0xf0>
 8006c52:	464b      	mov	r3, r9
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfbc      	itt	lt
 8006c58:	232d      	movlt	r3, #45	; 0x2d
 8006c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c5e:	487f      	ldr	r0, [pc, #508]	; (8006e5c <_printf_float+0x2e8>)
 8006c60:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <_printf_float+0x2ec>)
 8006c62:	e7d1      	b.n	8006c08 <_printf_float+0x94>
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d13f      	bne.n	8006cf0 <_printf_float+0x17c>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	ab0a      	add	r3, sp, #40	; 0x28
 8006c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c86:	ab09      	add	r3, sp, #36	; 0x24
 8006c88:	ec49 8b10 	vmov	d0, r8, r9
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7ff fecd 	bl	8006a34 <__cvt>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	2b47      	cmp	r3, #71	; 0x47
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	d108      	bne.n	8006cb6 <_printf_float+0x142>
 8006ca4:	1cc8      	adds	r0, r1, #3
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x13a>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	dd41      	ble.n	8006d32 <_printf_float+0x1be>
 8006cae:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cb2:	fa5f fb8b 	uxtb.w	fp, fp
 8006cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cba:	d820      	bhi.n	8006cfe <_printf_float+0x18a>
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	465a      	mov	r2, fp
 8006cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cc6:	f7ff ff17 	bl	8006af8 <__exponent>
 8006cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ccc:	1813      	adds	r3, r2, r0
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	dc02      	bgt.n	8006cdc <_printf_float+0x168>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	07d2      	lsls	r2, r2, #31
 8006cda:	d501      	bpl.n	8006ce0 <_printf_float+0x16c>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d09c      	beq.n	8006c22 <_printf_float+0xae>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cee:	e798      	b.n	8006c22 <_printf_float+0xae>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a47      	cmp	r2, #71	; 0x47
 8006cf4:	d1be      	bne.n	8006c74 <_printf_float+0x100>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1bc      	bne.n	8006c74 <_printf_float+0x100>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7b9      	b.n	8006c72 <_printf_float+0xfe>
 8006cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d02:	d118      	bne.n	8006d36 <_printf_float+0x1c2>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	dd0b      	ble.n	8006d22 <_printf_float+0x1ae>
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	b913      	cbnz	r3, 8006d14 <_printf_float+0x1a0>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d0      	lsls	r0, r2, #31
 8006d12:	d502      	bpl.n	8006d1a <_printf_float+0x1a6>
 8006d14:	3301      	adds	r3, #1
 8006d16:	440b      	add	r3, r1
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	e7de      	b.n	8006ce0 <_printf_float+0x16c>
 8006d22:	b913      	cbnz	r3, 8006d2a <_printf_float+0x1b6>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d501      	bpl.n	8006d2e <_printf_float+0x1ba>
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	e7f4      	b.n	8006d18 <_printf_float+0x1a4>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f2      	b.n	8006d18 <_printf_float+0x1a4>
 8006d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	db05      	blt.n	8006d48 <_printf_float+0x1d4>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6121      	str	r1, [r4, #16]
 8006d40:	07d8      	lsls	r0, r3, #31
 8006d42:	d5ea      	bpl.n	8006d1a <_printf_float+0x1a6>
 8006d44:	1c4b      	adds	r3, r1, #1
 8006d46:	e7e7      	b.n	8006d18 <_printf_float+0x1a4>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	bfd4      	ite	le
 8006d4c:	f1c1 0202 	rsble	r2, r1, #2
 8006d50:	2201      	movgt	r2, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	e7e0      	b.n	8006d18 <_printf_float+0x1a4>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	055a      	lsls	r2, r3, #21
 8006d5a:	d407      	bmi.n	8006d6c <_printf_float+0x1f8>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	d12c      	bne.n	8006dc4 <_printf_float+0x250>
 8006d6a:	e764      	b.n	8006c36 <_printf_float+0xc2>
 8006d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d70:	f240 80e0 	bls.w	8006f34 <_printf_float+0x3c0>
 8006d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f7f9 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d034      	beq.n	8006dee <_printf_float+0x27a>
 8006d84:	4a37      	ldr	r2, [pc, #220]	; (8006e64 <_printf_float+0x2f0>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af51 	beq.w	8006c36 <_printf_float+0xc2>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	db02      	blt.n	8006da2 <_printf_float+0x22e>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07d8      	lsls	r0, r3, #31
 8006da0:	d510      	bpl.n	8006dc4 <_printf_float+0x250>
 8006da2:	ee18 3a10 	vmov	r3, s16
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af41 	beq.w	8006c36 <_printf_float+0xc2>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	f104 091a 	add.w	r9, r4, #26
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	dc09      	bgt.n	8006dd8 <_printf_float+0x264>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	f100 8105 	bmi.w	8006fd6 <_printf_float+0x462>
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	4618      	movlt	r0, r3
 8006dd6:	e730      	b.n	8006c3a <_printf_float+0xc6>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	464a      	mov	r2, r9
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af27 	beq.w	8006c36 <_printf_float+0xc2>
 8006de8:	f108 0801 	add.w	r8, r8, #1
 8006dec:	e7e6      	b.n	8006dbc <_printf_float+0x248>
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc39      	bgt.n	8006e68 <_printf_float+0x2f4>
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <_printf_float+0x2f0>)
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af19 	beq.w	8006c36 <_printf_float+0xc2>
 8006e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <_printf_float+0x29e>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d5d8      	bpl.n	8006dc4 <_printf_float+0x250>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af09 	beq.w	8006c36 <_printf_float+0xc2>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	425b      	negs	r3, r3
 8006e30:	454b      	cmp	r3, r9
 8006e32:	dc01      	bgt.n	8006e38 <_printf_float+0x2c4>
 8006e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e36:	e792      	b.n	8006d5e <_printf_float+0x1ea>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aef7 	beq.w	8006c36 <_printf_float+0xc2>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7ee      	b.n	8006e2c <_printf_float+0x2b8>
 8006e4e:	bf00      	nop
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	0800b7e4 	.word	0x0800b7e4
 8006e58:	0800b7e8 	.word	0x0800b7e8
 8006e5c:	0800b7f0 	.word	0x0800b7f0
 8006e60:	0800b7ec 	.word	0x0800b7ec
 8006e64:	0800b7f4 	.word	0x0800b7f4
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bfa8      	it	ge
 8006e70:	461a      	movge	r2, r3
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	4691      	mov	r9, r2
 8006e76:	dc37      	bgt.n	8006ee8 <_printf_float+0x374>
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e80:	f104 021a 	add.w	r2, r4, #26
 8006e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	eba3 0309 	sub.w	r3, r3, r9
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	dc33      	bgt.n	8006ef8 <_printf_float+0x384>
 8006e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e94:	429a      	cmp	r2, r3
 8006e96:	db3b      	blt.n	8006f10 <_printf_float+0x39c>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07da      	lsls	r2, r3, #31
 8006e9c:	d438      	bmi.n	8006f10 <_printf_float+0x39c>
 8006e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea0:	9b05      	ldr	r3, [sp, #20]
 8006ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	eba2 0901 	sub.w	r9, r2, r1
 8006eaa:	4599      	cmp	r9, r3
 8006eac:	bfa8      	it	ge
 8006eae:	4699      	movge	r9, r3
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	dc35      	bgt.n	8006f22 <_printf_float+0x3ae>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebe:	f104 0a1a 	add.w	sl, r4, #26
 8006ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	eba3 0309 	sub.w	r3, r3, r9
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	f77f af79 	ble.w	8006dc4 <_printf_float+0x250>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aeaa 	beq.w	8006c36 <_printf_float+0xc2>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ec      	b.n	8006ec2 <_printf_float+0x34e>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	4631      	mov	r1, r6
 8006eec:	4642      	mov	r2, r8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d1c0      	bne.n	8006e78 <_printf_float+0x304>
 8006ef6:	e69e      	b.n	8006c36 <_printf_float+0xc2>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f ae97 	beq.w	8006c36 <_printf_float+0xc2>
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e7b9      	b.n	8006e84 <_printf_float+0x310>
 8006f10:	ee18 3a10 	vmov	r3, s16
 8006f14:	4652      	mov	r2, sl
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1be      	bne.n	8006e9e <_printf_float+0x32a>
 8006f20:	e689      	b.n	8006c36 <_printf_float+0xc2>
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	464b      	mov	r3, r9
 8006f26:	4442      	add	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c1      	bne.n	8006eb6 <_printf_float+0x342>
 8006f32:	e680      	b.n	8006c36 <_printf_float+0xc2>
 8006f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	dc01      	bgt.n	8006f3e <_printf_float+0x3ca>
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d538      	bpl.n	8006fb0 <_printf_float+0x43c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4642      	mov	r2, r8
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae74 	beq.w	8006c36 <_printf_float+0xc2>
 8006f4e:	ee18 3a10 	vmov	r3, s16
 8006f52:	4652      	mov	r2, sl
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae6b 	beq.w	8006c36 <_printf_float+0xc2>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f7f9 fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_printf_float+0x432>
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f70:	f108 0201 	add.w	r2, r8, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d10e      	bne.n	8006f9e <_printf_float+0x42a>
 8006f80:	e659      	b.n	8006c36 <_printf_float+0xc2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4652      	mov	r2, sl
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae52 	beq.w	8006c36 <_printf_float+0xc2>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4543      	cmp	r3, r8
 8006f9c:	dcf1      	bgt.n	8006f82 <_printf_float+0x40e>
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa4:	e6dc      	b.n	8006d60 <_printf_float+0x1ec>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 0a1a 	add.w	sl, r4, #26
 8006fae:	e7f2      	b.n	8006f96 <_printf_float+0x422>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	e7df      	b.n	8006f76 <_printf_float+0x402>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	464a      	mov	r2, r9
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae38 	beq.w	8006c36 <_printf_float+0xc2>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fce:	1a5b      	subs	r3, r3, r1
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	dcf0      	bgt.n	8006fb6 <_printf_float+0x442>
 8006fd4:	e6fa      	b.n	8006dcc <_printf_float+0x258>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f104 0919 	add.w	r9, r4, #25
 8006fde:	e7f4      	b.n	8006fca <_printf_float+0x456>

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	4699      	mov	r9, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bfb8      	it	lt
 8006ff4:	4613      	movlt	r3, r2
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	b10a      	cbz	r2, 8007006 <_printf_common+0x26>
 8007002:	3301      	adds	r3, #1
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	0699      	lsls	r1, r3, #26
 800700a:	bf42      	ittt	mi
 800700c:	6833      	ldrmi	r3, [r6, #0]
 800700e:	3302      	addmi	r3, #2
 8007010:	6033      	strmi	r3, [r6, #0]
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	f015 0506 	ands.w	r5, r5, #6
 8007018:	d106      	bne.n	8007028 <_printf_common+0x48>
 800701a:	f104 0a19 	add.w	sl, r4, #25
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6832      	ldr	r2, [r6, #0]
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc26      	bgt.n	8007076 <_printf_common+0x96>
 8007028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800702c:	1e13      	subs	r3, r2, #0
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	bf18      	it	ne
 8007032:	2301      	movne	r3, #1
 8007034:	0692      	lsls	r2, r2, #26
 8007036:	d42b      	bmi.n	8007090 <_printf_common+0xb0>
 8007038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800703c:	4649      	mov	r1, r9
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d01e      	beq.n	8007084 <_printf_common+0xa4>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	68e5      	ldr	r5, [r4, #12]
 800704a:	6832      	ldr	r2, [r6, #0]
 800704c:	f003 0306 	and.w	r3, r3, #6
 8007050:	2b04      	cmp	r3, #4
 8007052:	bf08      	it	eq
 8007054:	1aad      	subeq	r5, r5, r2
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	bf0c      	ite	eq
 800705c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007060:	2500      	movne	r5, #0
 8007062:	4293      	cmp	r3, r2
 8007064:	bfc4      	itt	gt
 8007066:	1a9b      	subgt	r3, r3, r2
 8007068:	18ed      	addgt	r5, r5, r3
 800706a:	2600      	movs	r6, #0
 800706c:	341a      	adds	r4, #26
 800706e:	42b5      	cmp	r5, r6
 8007070:	d11a      	bne.n	80070a8 <_printf_common+0xc8>
 8007072:	2000      	movs	r0, #0
 8007074:	e008      	b.n	8007088 <_printf_common+0xa8>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4649      	mov	r1, r9
 800707c:	4638      	mov	r0, r7
 800707e:	47c0      	blx	r8
 8007080:	3001      	adds	r0, #1
 8007082:	d103      	bne.n	800708c <_printf_common+0xac>
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	3501      	adds	r5, #1
 800708e:	e7c6      	b.n	800701e <_printf_common+0x3e>
 8007090:	18e1      	adds	r1, r4, r3
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	2030      	movs	r0, #48	; 0x30
 8007096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709a:	4422      	add	r2, r4
 800709c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a4:	3302      	adds	r3, #2
 80070a6:	e7c7      	b.n	8007038 <_printf_common+0x58>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4622      	mov	r2, r4
 80070ac:	4649      	mov	r1, r9
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c0      	blx	r8
 80070b2:	3001      	adds	r0, #1
 80070b4:	d0e6      	beq.n	8007084 <_printf_common+0xa4>
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7d9      	b.n	800706e <_printf_common+0x8e>
	...

080070bc <_printf_i>:
 80070bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	460c      	mov	r4, r1
 80070c2:	4691      	mov	r9, r2
 80070c4:	7e27      	ldrb	r7, [r4, #24]
 80070c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070c8:	2f78      	cmp	r7, #120	; 0x78
 80070ca:	4680      	mov	r8, r0
 80070cc:	469a      	mov	sl, r3
 80070ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d2:	d807      	bhi.n	80070e4 <_printf_i+0x28>
 80070d4:	2f62      	cmp	r7, #98	; 0x62
 80070d6:	d80a      	bhi.n	80070ee <_printf_i+0x32>
 80070d8:	2f00      	cmp	r7, #0
 80070da:	f000 80d8 	beq.w	800728e <_printf_i+0x1d2>
 80070de:	2f58      	cmp	r7, #88	; 0x58
 80070e0:	f000 80a3 	beq.w	800722a <_printf_i+0x16e>
 80070e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070ec:	e03a      	b.n	8007164 <_printf_i+0xa8>
 80070ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070f2:	2b15      	cmp	r3, #21
 80070f4:	d8f6      	bhi.n	80070e4 <_printf_i+0x28>
 80070f6:	a001      	add	r0, pc, #4	; (adr r0, 80070fc <_printf_i+0x40>)
 80070f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070fc:	08007155 	.word	0x08007155
 8007100:	08007169 	.word	0x08007169
 8007104:	080070e5 	.word	0x080070e5
 8007108:	080070e5 	.word	0x080070e5
 800710c:	080070e5 	.word	0x080070e5
 8007110:	080070e5 	.word	0x080070e5
 8007114:	08007169 	.word	0x08007169
 8007118:	080070e5 	.word	0x080070e5
 800711c:	080070e5 	.word	0x080070e5
 8007120:	080070e5 	.word	0x080070e5
 8007124:	080070e5 	.word	0x080070e5
 8007128:	08007275 	.word	0x08007275
 800712c:	08007199 	.word	0x08007199
 8007130:	08007257 	.word	0x08007257
 8007134:	080070e5 	.word	0x080070e5
 8007138:	080070e5 	.word	0x080070e5
 800713c:	08007297 	.word	0x08007297
 8007140:	080070e5 	.word	0x080070e5
 8007144:	08007199 	.word	0x08007199
 8007148:	080070e5 	.word	0x080070e5
 800714c:	080070e5 	.word	0x080070e5
 8007150:	0800725f 	.word	0x0800725f
 8007154:	680b      	ldr	r3, [r1, #0]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	600a      	str	r2, [r1, #0]
 800715c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007164:	2301      	movs	r3, #1
 8007166:	e0a3      	b.n	80072b0 <_printf_i+0x1f4>
 8007168:	6825      	ldr	r5, [r4, #0]
 800716a:	6808      	ldr	r0, [r1, #0]
 800716c:	062e      	lsls	r6, r5, #24
 800716e:	f100 0304 	add.w	r3, r0, #4
 8007172:	d50a      	bpl.n	800718a <_printf_i+0xce>
 8007174:	6805      	ldr	r5, [r0, #0]
 8007176:	600b      	str	r3, [r1, #0]
 8007178:	2d00      	cmp	r5, #0
 800717a:	da03      	bge.n	8007184 <_printf_i+0xc8>
 800717c:	232d      	movs	r3, #45	; 0x2d
 800717e:	426d      	negs	r5, r5
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007184:	485e      	ldr	r0, [pc, #376]	; (8007300 <_printf_i+0x244>)
 8007186:	230a      	movs	r3, #10
 8007188:	e019      	b.n	80071be <_printf_i+0x102>
 800718a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800718e:	6805      	ldr	r5, [r0, #0]
 8007190:	600b      	str	r3, [r1, #0]
 8007192:	bf18      	it	ne
 8007194:	b22d      	sxthne	r5, r5
 8007196:	e7ef      	b.n	8007178 <_printf_i+0xbc>
 8007198:	680b      	ldr	r3, [r1, #0]
 800719a:	6825      	ldr	r5, [r4, #0]
 800719c:	1d18      	adds	r0, r3, #4
 800719e:	6008      	str	r0, [r1, #0]
 80071a0:	0628      	lsls	r0, r5, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xec>
 80071a4:	681d      	ldr	r5, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0xf2>
 80071a8:	0669      	lsls	r1, r5, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xe8>
 80071ac:	881d      	ldrh	r5, [r3, #0]
 80071ae:	4854      	ldr	r0, [pc, #336]	; (8007300 <_printf_i+0x244>)
 80071b0:	2f6f      	cmp	r7, #111	; 0x6f
 80071b2:	bf0c      	ite	eq
 80071b4:	2308      	moveq	r3, #8
 80071b6:	230a      	movne	r3, #10
 80071b8:	2100      	movs	r1, #0
 80071ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071be:	6866      	ldr	r6, [r4, #4]
 80071c0:	60a6      	str	r6, [r4, #8]
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	bfa2      	ittt	ge
 80071c6:	6821      	ldrge	r1, [r4, #0]
 80071c8:	f021 0104 	bicge.w	r1, r1, #4
 80071cc:	6021      	strge	r1, [r4, #0]
 80071ce:	b90d      	cbnz	r5, 80071d4 <_printf_i+0x118>
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	d04d      	beq.n	8007270 <_printf_i+0x1b4>
 80071d4:	4616      	mov	r6, r2
 80071d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071da:	fb03 5711 	mls	r7, r3, r1, r5
 80071de:	5dc7      	ldrb	r7, [r0, r7]
 80071e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071e4:	462f      	mov	r7, r5
 80071e6:	42bb      	cmp	r3, r7
 80071e8:	460d      	mov	r5, r1
 80071ea:	d9f4      	bls.n	80071d6 <_printf_i+0x11a>
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d10b      	bne.n	8007208 <_printf_i+0x14c>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07df      	lsls	r7, r3, #31
 80071f4:	d508      	bpl.n	8007208 <_printf_i+0x14c>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4299      	cmp	r1, r3
 80071fc:	bfde      	ittt	le
 80071fe:	2330      	movle	r3, #48	; 0x30
 8007200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007208:	1b92      	subs	r2, r2, r6
 800720a:	6122      	str	r2, [r4, #16]
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	464b      	mov	r3, r9
 8007212:	aa03      	add	r2, sp, #12
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f7ff fee2 	bl	8006fe0 <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	d14c      	bne.n	80072ba <_printf_i+0x1fe>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	b004      	add	sp, #16
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	4835      	ldr	r0, [pc, #212]	; (8007300 <_printf_i+0x244>)
 800722c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	680e      	ldr	r6, [r1, #0]
 8007234:	061f      	lsls	r7, r3, #24
 8007236:	f856 5b04 	ldr.w	r5, [r6], #4
 800723a:	600e      	str	r6, [r1, #0]
 800723c:	d514      	bpl.n	8007268 <_printf_i+0x1ac>
 800723e:	07d9      	lsls	r1, r3, #31
 8007240:	bf44      	itt	mi
 8007242:	f043 0320 	orrmi.w	r3, r3, #32
 8007246:	6023      	strmi	r3, [r4, #0]
 8007248:	b91d      	cbnz	r5, 8007252 <_printf_i+0x196>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f023 0320 	bic.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2310      	movs	r3, #16
 8007254:	e7b0      	b.n	80071b8 <_printf_i+0xfc>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f043 0320 	orr.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	2378      	movs	r3, #120	; 0x78
 8007260:	4828      	ldr	r0, [pc, #160]	; (8007304 <_printf_i+0x248>)
 8007262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007266:	e7e3      	b.n	8007230 <_printf_i+0x174>
 8007268:	065e      	lsls	r6, r3, #25
 800726a:	bf48      	it	mi
 800726c:	b2ad      	uxthmi	r5, r5
 800726e:	e7e6      	b.n	800723e <_printf_i+0x182>
 8007270:	4616      	mov	r6, r2
 8007272:	e7bb      	b.n	80071ec <_printf_i+0x130>
 8007274:	680b      	ldr	r3, [r1, #0]
 8007276:	6826      	ldr	r6, [r4, #0]
 8007278:	6960      	ldr	r0, [r4, #20]
 800727a:	1d1d      	adds	r5, r3, #4
 800727c:	600d      	str	r5, [r1, #0]
 800727e:	0635      	lsls	r5, r6, #24
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	d501      	bpl.n	8007288 <_printf_i+0x1cc>
 8007284:	6018      	str	r0, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0x1d2>
 8007288:	0671      	lsls	r1, r6, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0x1c8>
 800728c:	8018      	strh	r0, [r3, #0]
 800728e:	2300      	movs	r3, #0
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	4616      	mov	r6, r2
 8007294:	e7ba      	b.n	800720c <_printf_i+0x150>
 8007296:	680b      	ldr	r3, [r1, #0]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	600a      	str	r2, [r1, #0]
 800729c:	681e      	ldr	r6, [r3, #0]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7f8 ffbc 	bl	8000220 <memchr>
 80072a8:	b108      	cbz	r0, 80072ae <_printf_i+0x1f2>
 80072aa:	1b80      	subs	r0, r0, r6
 80072ac:	6060      	str	r0, [r4, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b8:	e7a8      	b.n	800720c <_printf_i+0x150>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	4632      	mov	r2, r6
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0ab      	beq.n	8007220 <_printf_i+0x164>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	079b      	lsls	r3, r3, #30
 80072cc:	d413      	bmi.n	80072f6 <_printf_i+0x23a>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	4298      	cmp	r0, r3
 80072d4:	bfb8      	it	lt
 80072d6:	4618      	movlt	r0, r3
 80072d8:	e7a4      	b.n	8007224 <_printf_i+0x168>
 80072da:	2301      	movs	r3, #1
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d09b      	beq.n	8007220 <_printf_i+0x164>
 80072e8:	3501      	adds	r5, #1
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	9903      	ldr	r1, [sp, #12]
 80072ee:	1a5b      	subs	r3, r3, r1
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dcf2      	bgt.n	80072da <_printf_i+0x21e>
 80072f4:	e7eb      	b.n	80072ce <_printf_i+0x212>
 80072f6:	2500      	movs	r5, #0
 80072f8:	f104 0619 	add.w	r6, r4, #25
 80072fc:	e7f5      	b.n	80072ea <_printf_i+0x22e>
 80072fe:	bf00      	nop
 8007300:	0800b7f6 	.word	0x0800b7f6
 8007304:	0800b807 	.word	0x0800b807

08007308 <_scanf_float>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b087      	sub	sp, #28
 800730e:	4617      	mov	r7, r2
 8007310:	9303      	str	r3, [sp, #12]
 8007312:	688b      	ldr	r3, [r1, #8]
 8007314:	1e5a      	subs	r2, r3, #1
 8007316:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800731a:	bf83      	ittte	hi
 800731c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007320:	195b      	addhi	r3, r3, r5
 8007322:	9302      	strhi	r3, [sp, #8]
 8007324:	2300      	movls	r3, #0
 8007326:	bf86      	itte	hi
 8007328:	f240 135d 	movwhi	r3, #349	; 0x15d
 800732c:	608b      	strhi	r3, [r1, #8]
 800732e:	9302      	strls	r3, [sp, #8]
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	468b      	mov	fp, r1
 8007334:	2500      	movs	r5, #0
 8007336:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800733a:	f84b 3b1c 	str.w	r3, [fp], #28
 800733e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007342:	4680      	mov	r8, r0
 8007344:	460c      	mov	r4, r1
 8007346:	465e      	mov	r6, fp
 8007348:	46aa      	mov	sl, r5
 800734a:	46a9      	mov	r9, r5
 800734c:	9501      	str	r5, [sp, #4]
 800734e:	68a2      	ldr	r2, [r4, #8]
 8007350:	b152      	cbz	r2, 8007368 <_scanf_float+0x60>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b4e      	cmp	r3, #78	; 0x4e
 8007358:	d864      	bhi.n	8007424 <_scanf_float+0x11c>
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d83c      	bhi.n	80073d8 <_scanf_float+0xd0>
 800735e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007362:	b2c8      	uxtb	r0, r1
 8007364:	280e      	cmp	r0, #14
 8007366:	d93a      	bls.n	80073de <_scanf_float+0xd6>
 8007368:	f1b9 0f00 	cmp.w	r9, #0
 800736c:	d003      	beq.n	8007376 <_scanf_float+0x6e>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737a:	f1ba 0f01 	cmp.w	sl, #1
 800737e:	f200 8113 	bhi.w	80075a8 <_scanf_float+0x2a0>
 8007382:	455e      	cmp	r6, fp
 8007384:	f200 8105 	bhi.w	8007592 <_scanf_float+0x28a>
 8007388:	2501      	movs	r5, #1
 800738a:	4628      	mov	r0, r5
 800738c:	b007      	add	sp, #28
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007396:	2a0d      	cmp	r2, #13
 8007398:	d8e6      	bhi.n	8007368 <_scanf_float+0x60>
 800739a:	a101      	add	r1, pc, #4	; (adr r1, 80073a0 <_scanf_float+0x98>)
 800739c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073a0:	080074df 	.word	0x080074df
 80073a4:	08007369 	.word	0x08007369
 80073a8:	08007369 	.word	0x08007369
 80073ac:	08007369 	.word	0x08007369
 80073b0:	0800753f 	.word	0x0800753f
 80073b4:	08007517 	.word	0x08007517
 80073b8:	08007369 	.word	0x08007369
 80073bc:	08007369 	.word	0x08007369
 80073c0:	080074ed 	.word	0x080074ed
 80073c4:	08007369 	.word	0x08007369
 80073c8:	08007369 	.word	0x08007369
 80073cc:	08007369 	.word	0x08007369
 80073d0:	08007369 	.word	0x08007369
 80073d4:	080074a5 	.word	0x080074a5
 80073d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073dc:	e7db      	b.n	8007396 <_scanf_float+0x8e>
 80073de:	290e      	cmp	r1, #14
 80073e0:	d8c2      	bhi.n	8007368 <_scanf_float+0x60>
 80073e2:	a001      	add	r0, pc, #4	; (adr r0, 80073e8 <_scanf_float+0xe0>)
 80073e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073e8:	08007497 	.word	0x08007497
 80073ec:	08007369 	.word	0x08007369
 80073f0:	08007497 	.word	0x08007497
 80073f4:	0800752b 	.word	0x0800752b
 80073f8:	08007369 	.word	0x08007369
 80073fc:	08007445 	.word	0x08007445
 8007400:	08007481 	.word	0x08007481
 8007404:	08007481 	.word	0x08007481
 8007408:	08007481 	.word	0x08007481
 800740c:	08007481 	.word	0x08007481
 8007410:	08007481 	.word	0x08007481
 8007414:	08007481 	.word	0x08007481
 8007418:	08007481 	.word	0x08007481
 800741c:	08007481 	.word	0x08007481
 8007420:	08007481 	.word	0x08007481
 8007424:	2b6e      	cmp	r3, #110	; 0x6e
 8007426:	d809      	bhi.n	800743c <_scanf_float+0x134>
 8007428:	2b60      	cmp	r3, #96	; 0x60
 800742a:	d8b2      	bhi.n	8007392 <_scanf_float+0x8a>
 800742c:	2b54      	cmp	r3, #84	; 0x54
 800742e:	d077      	beq.n	8007520 <_scanf_float+0x218>
 8007430:	2b59      	cmp	r3, #89	; 0x59
 8007432:	d199      	bne.n	8007368 <_scanf_float+0x60>
 8007434:	2d07      	cmp	r5, #7
 8007436:	d197      	bne.n	8007368 <_scanf_float+0x60>
 8007438:	2508      	movs	r5, #8
 800743a:	e029      	b.n	8007490 <_scanf_float+0x188>
 800743c:	2b74      	cmp	r3, #116	; 0x74
 800743e:	d06f      	beq.n	8007520 <_scanf_float+0x218>
 8007440:	2b79      	cmp	r3, #121	; 0x79
 8007442:	e7f6      	b.n	8007432 <_scanf_float+0x12a>
 8007444:	6821      	ldr	r1, [r4, #0]
 8007446:	05c8      	lsls	r0, r1, #23
 8007448:	d51a      	bpl.n	8007480 <_scanf_float+0x178>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007450:	6021      	str	r1, [r4, #0]
 8007452:	f109 0901 	add.w	r9, r9, #1
 8007456:	b11b      	cbz	r3, 8007460 <_scanf_float+0x158>
 8007458:	3b01      	subs	r3, #1
 800745a:	3201      	adds	r2, #1
 800745c:	9302      	str	r3, [sp, #8]
 800745e:	60a2      	str	r2, [r4, #8]
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	3b01      	subs	r3, #1
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	3301      	adds	r3, #1
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3b01      	subs	r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	f340 8084 	ble.w	8007580 <_scanf_float+0x278>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	e766      	b.n	800734e <_scanf_float+0x46>
 8007480:	eb1a 0f05 	cmn.w	sl, r5
 8007484:	f47f af70 	bne.w	8007368 <_scanf_float+0x60>
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	f806 3b01 	strb.w	r3, [r6], #1
 8007494:	e7e4      	b.n	8007460 <_scanf_float+0x158>
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	0610      	lsls	r0, r2, #24
 800749a:	f57f af65 	bpl.w	8007368 <_scanf_float+0x60>
 800749e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a2:	e7f4      	b.n	800748e <_scanf_float+0x186>
 80074a4:	f1ba 0f00 	cmp.w	sl, #0
 80074a8:	d10e      	bne.n	80074c8 <_scanf_float+0x1c0>
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	d10e      	bne.n	80074ce <_scanf_float+0x1c6>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074ba:	d108      	bne.n	80074ce <_scanf_float+0x1c6>
 80074bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074c0:	6022      	str	r2, [r4, #0]
 80074c2:	f04f 0a01 	mov.w	sl, #1
 80074c6:	e7e3      	b.n	8007490 <_scanf_float+0x188>
 80074c8:	f1ba 0f02 	cmp.w	sl, #2
 80074cc:	d055      	beq.n	800757a <_scanf_float+0x272>
 80074ce:	2d01      	cmp	r5, #1
 80074d0:	d002      	beq.n	80074d8 <_scanf_float+0x1d0>
 80074d2:	2d04      	cmp	r5, #4
 80074d4:	f47f af48 	bne.w	8007368 <_scanf_float+0x60>
 80074d8:	3501      	adds	r5, #1
 80074da:	b2ed      	uxtb	r5, r5
 80074dc:	e7d8      	b.n	8007490 <_scanf_float+0x188>
 80074de:	f1ba 0f01 	cmp.w	sl, #1
 80074e2:	f47f af41 	bne.w	8007368 <_scanf_float+0x60>
 80074e6:	f04f 0a02 	mov.w	sl, #2
 80074ea:	e7d1      	b.n	8007490 <_scanf_float+0x188>
 80074ec:	b97d      	cbnz	r5, 800750e <_scanf_float+0x206>
 80074ee:	f1b9 0f00 	cmp.w	r9, #0
 80074f2:	f47f af3c 	bne.w	800736e <_scanf_float+0x66>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007500:	f47f af39 	bne.w	8007376 <_scanf_float+0x6e>
 8007504:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	2501      	movs	r5, #1
 800750c:	e7c0      	b.n	8007490 <_scanf_float+0x188>
 800750e:	2d03      	cmp	r5, #3
 8007510:	d0e2      	beq.n	80074d8 <_scanf_float+0x1d0>
 8007512:	2d05      	cmp	r5, #5
 8007514:	e7de      	b.n	80074d4 <_scanf_float+0x1cc>
 8007516:	2d02      	cmp	r5, #2
 8007518:	f47f af26 	bne.w	8007368 <_scanf_float+0x60>
 800751c:	2503      	movs	r5, #3
 800751e:	e7b7      	b.n	8007490 <_scanf_float+0x188>
 8007520:	2d06      	cmp	r5, #6
 8007522:	f47f af21 	bne.w	8007368 <_scanf_float+0x60>
 8007526:	2507      	movs	r5, #7
 8007528:	e7b2      	b.n	8007490 <_scanf_float+0x188>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	0591      	lsls	r1, r2, #22
 800752e:	f57f af1b 	bpl.w	8007368 <_scanf_float+0x60>
 8007532:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	f8cd 9004 	str.w	r9, [sp, #4]
 800753c:	e7a8      	b.n	8007490 <_scanf_float+0x188>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007544:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007548:	d006      	beq.n	8007558 <_scanf_float+0x250>
 800754a:	0550      	lsls	r0, r2, #21
 800754c:	f57f af0c 	bpl.w	8007368 <_scanf_float+0x60>
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	f43f af0f 	beq.w	8007376 <_scanf_float+0x6e>
 8007558:	0591      	lsls	r1, r2, #22
 800755a:	bf58      	it	pl
 800755c:	9901      	ldrpl	r1, [sp, #4]
 800755e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007562:	bf58      	it	pl
 8007564:	eba9 0101 	subpl.w	r1, r9, r1
 8007568:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800756c:	bf58      	it	pl
 800756e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	f04f 0900 	mov.w	r9, #0
 8007578:	e78a      	b.n	8007490 <_scanf_float+0x188>
 800757a:	f04f 0a03 	mov.w	sl, #3
 800757e:	e787      	b.n	8007490 <_scanf_float+0x188>
 8007580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007584:	4639      	mov	r1, r7
 8007586:	4640      	mov	r0, r8
 8007588:	4798      	blx	r3
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f aedf 	beq.w	800734e <_scanf_float+0x46>
 8007590:	e6ea      	b.n	8007368 <_scanf_float+0x60>
 8007592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800759a:	463a      	mov	r2, r7
 800759c:	4640      	mov	r0, r8
 800759e:	4798      	blx	r3
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	e6ec      	b.n	8007382 <_scanf_float+0x7a>
 80075a8:	1e6b      	subs	r3, r5, #1
 80075aa:	2b06      	cmp	r3, #6
 80075ac:	d825      	bhi.n	80075fa <_scanf_float+0x2f2>
 80075ae:	2d02      	cmp	r5, #2
 80075b0:	d836      	bhi.n	8007620 <_scanf_float+0x318>
 80075b2:	455e      	cmp	r6, fp
 80075b4:	f67f aee8 	bls.w	8007388 <_scanf_float+0x80>
 80075b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c0:	463a      	mov	r2, r7
 80075c2:	4640      	mov	r0, r8
 80075c4:	4798      	blx	r3
 80075c6:	6923      	ldr	r3, [r4, #16]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	e7f1      	b.n	80075b2 <_scanf_float+0x2aa>
 80075ce:	9802      	ldr	r0, [sp, #8]
 80075d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075d8:	9002      	str	r0, [sp, #8]
 80075da:	463a      	mov	r2, r7
 80075dc:	4640      	mov	r0, r8
 80075de:	4798      	blx	r3
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ea:	fa5f fa8a 	uxtb.w	sl, sl
 80075ee:	f1ba 0f02 	cmp.w	sl, #2
 80075f2:	d1ec      	bne.n	80075ce <_scanf_float+0x2c6>
 80075f4:	3d03      	subs	r5, #3
 80075f6:	b2ed      	uxtb	r5, r5
 80075f8:	1b76      	subs	r6, r6, r5
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	05da      	lsls	r2, r3, #23
 80075fe:	d52f      	bpl.n	8007660 <_scanf_float+0x358>
 8007600:	055b      	lsls	r3, r3, #21
 8007602:	d510      	bpl.n	8007626 <_scanf_float+0x31e>
 8007604:	455e      	cmp	r6, fp
 8007606:	f67f aebf 	bls.w	8007388 <_scanf_float+0x80>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800760e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007612:	463a      	mov	r2, r7
 8007614:	4640      	mov	r0, r8
 8007616:	4798      	blx	r3
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	3b01      	subs	r3, #1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	e7f1      	b.n	8007604 <_scanf_float+0x2fc>
 8007620:	46aa      	mov	sl, r5
 8007622:	9602      	str	r6, [sp, #8]
 8007624:	e7df      	b.n	80075e6 <_scanf_float+0x2de>
 8007626:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	2965      	cmp	r1, #101	; 0x65
 800762e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007632:	f106 35ff 	add.w	r5, r6, #4294967295
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	d00c      	beq.n	8007654 <_scanf_float+0x34c>
 800763a:	2945      	cmp	r1, #69	; 0x45
 800763c:	d00a      	beq.n	8007654 <_scanf_float+0x34c>
 800763e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007642:	463a      	mov	r2, r7
 8007644:	4640      	mov	r0, r8
 8007646:	4798      	blx	r3
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800764e:	3b01      	subs	r3, #1
 8007650:	1eb5      	subs	r5, r6, #2
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007658:	463a      	mov	r2, r7
 800765a:	4640      	mov	r0, r8
 800765c:	4798      	blx	r3
 800765e:	462e      	mov	r6, r5
 8007660:	6825      	ldr	r5, [r4, #0]
 8007662:	f015 0510 	ands.w	r5, r5, #16
 8007666:	d158      	bne.n	800771a <_scanf_float+0x412>
 8007668:	7035      	strb	r5, [r6, #0]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007674:	d11c      	bne.n	80076b0 <_scanf_float+0x3a8>
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	454b      	cmp	r3, r9
 800767a:	eba3 0209 	sub.w	r2, r3, r9
 800767e:	d124      	bne.n	80076ca <_scanf_float+0x3c2>
 8007680:	2200      	movs	r2, #0
 8007682:	4659      	mov	r1, fp
 8007684:	4640      	mov	r0, r8
 8007686:	f000 ff11 	bl	80084ac <_strtod_r>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	6821      	ldr	r1, [r4, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f011 0f02 	tst.w	r1, #2
 8007694:	ec57 6b10 	vmov	r6, r7, d0
 8007698:	f103 0204 	add.w	r2, r3, #4
 800769c:	d020      	beq.n	80076e0 <_scanf_float+0x3d8>
 800769e:	9903      	ldr	r1, [sp, #12]
 80076a0:	600a      	str	r2, [r1, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	e9c3 6700 	strd	r6, r7, [r3]
 80076a8:	68e3      	ldr	r3, [r4, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60e3      	str	r3, [r4, #12]
 80076ae:	e66c      	b.n	800738a <_scanf_float+0x82>
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0e4      	beq.n	8007680 <_scanf_float+0x378>
 80076b6:	9905      	ldr	r1, [sp, #20]
 80076b8:	230a      	movs	r3, #10
 80076ba:	462a      	mov	r2, r5
 80076bc:	3101      	adds	r1, #1
 80076be:	4640      	mov	r0, r8
 80076c0:	f000 ff7e 	bl	80085c0 <_strtol_r>
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	9e05      	ldr	r6, [sp, #20]
 80076c8:	1ac2      	subs	r2, r0, r3
 80076ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076ce:	429e      	cmp	r6, r3
 80076d0:	bf28      	it	cs
 80076d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076d6:	4912      	ldr	r1, [pc, #72]	; (8007720 <_scanf_float+0x418>)
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 f8a1 	bl	8007820 <siprintf>
 80076de:	e7cf      	b.n	8007680 <_scanf_float+0x378>
 80076e0:	f011 0f04 	tst.w	r1, #4
 80076e4:	9903      	ldr	r1, [sp, #12]
 80076e6:	600a      	str	r2, [r1, #0]
 80076e8:	d1db      	bne.n	80076a2 <_scanf_float+0x39a>
 80076ea:	f8d3 8000 	ldr.w	r8, [r3]
 80076ee:	ee10 2a10 	vmov	r2, s0
 80076f2:	ee10 0a10 	vmov	r0, s0
 80076f6:	463b      	mov	r3, r7
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f9 fa37 	bl	8000b6c <__aeabi_dcmpun>
 80076fe:	b128      	cbz	r0, 800770c <_scanf_float+0x404>
 8007700:	4808      	ldr	r0, [pc, #32]	; (8007724 <_scanf_float+0x41c>)
 8007702:	f000 f887 	bl	8007814 <nanf>
 8007706:	ed88 0a00 	vstr	s0, [r8]
 800770a:	e7cd      	b.n	80076a8 <_scanf_float+0x3a0>
 800770c:	4630      	mov	r0, r6
 800770e:	4639      	mov	r1, r7
 8007710:	f7f9 fa8a 	bl	8000c28 <__aeabi_d2f>
 8007714:	f8c8 0000 	str.w	r0, [r8]
 8007718:	e7c6      	b.n	80076a8 <_scanf_float+0x3a0>
 800771a:	2500      	movs	r5, #0
 800771c:	e635      	b.n	800738a <_scanf_float+0x82>
 800771e:	bf00      	nop
 8007720:	0800b818 	.word	0x0800b818
 8007724:	0800bc90 	.word	0x0800bc90

08007728 <_puts_r>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	460e      	mov	r6, r1
 800772c:	4605      	mov	r5, r0
 800772e:	b118      	cbz	r0, 8007738 <_puts_r+0x10>
 8007730:	6983      	ldr	r3, [r0, #24]
 8007732:	b90b      	cbnz	r3, 8007738 <_puts_r+0x10>
 8007734:	f001 ff9a 	bl	800966c <__sinit>
 8007738:	69ab      	ldr	r3, [r5, #24]
 800773a:	68ac      	ldr	r4, [r5, #8]
 800773c:	b913      	cbnz	r3, 8007744 <_puts_r+0x1c>
 800773e:	4628      	mov	r0, r5
 8007740:	f001 ff94 	bl	800966c <__sinit>
 8007744:	4b2c      	ldr	r3, [pc, #176]	; (80077f8 <_puts_r+0xd0>)
 8007746:	429c      	cmp	r4, r3
 8007748:	d120      	bne.n	800778c <_puts_r+0x64>
 800774a:	686c      	ldr	r4, [r5, #4]
 800774c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800774e:	07db      	lsls	r3, r3, #31
 8007750:	d405      	bmi.n	800775e <_puts_r+0x36>
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	0598      	lsls	r0, r3, #22
 8007756:	d402      	bmi.n	800775e <_puts_r+0x36>
 8007758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775a:	f002 fb98 	bl	8009e8e <__retarget_lock_acquire_recursive>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	0719      	lsls	r1, r3, #28
 8007762:	d51d      	bpl.n	80077a0 <_puts_r+0x78>
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	b1db      	cbz	r3, 80077a0 <_puts_r+0x78>
 8007768:	3e01      	subs	r6, #1
 800776a:	68a3      	ldr	r3, [r4, #8]
 800776c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007770:	3b01      	subs	r3, #1
 8007772:	60a3      	str	r3, [r4, #8]
 8007774:	bb39      	cbnz	r1, 80077c6 <_puts_r+0x9e>
 8007776:	2b00      	cmp	r3, #0
 8007778:	da38      	bge.n	80077ec <_puts_r+0xc4>
 800777a:	4622      	mov	r2, r4
 800777c:	210a      	movs	r1, #10
 800777e:	4628      	mov	r0, r5
 8007780:	f000 ff20 	bl	80085c4 <__swbuf_r>
 8007784:	3001      	adds	r0, #1
 8007786:	d011      	beq.n	80077ac <_puts_r+0x84>
 8007788:	250a      	movs	r5, #10
 800778a:	e011      	b.n	80077b0 <_puts_r+0x88>
 800778c:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <_puts_r+0xd4>)
 800778e:	429c      	cmp	r4, r3
 8007790:	d101      	bne.n	8007796 <_puts_r+0x6e>
 8007792:	68ac      	ldr	r4, [r5, #8]
 8007794:	e7da      	b.n	800774c <_puts_r+0x24>
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <_puts_r+0xd8>)
 8007798:	429c      	cmp	r4, r3
 800779a:	bf08      	it	eq
 800779c:	68ec      	ldreq	r4, [r5, #12]
 800779e:	e7d5      	b.n	800774c <_puts_r+0x24>
 80077a0:	4621      	mov	r1, r4
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 ff60 	bl	8008668 <__swsetup_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d0dd      	beq.n	8007768 <_puts_r+0x40>
 80077ac:	f04f 35ff 	mov.w	r5, #4294967295
 80077b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b2:	07da      	lsls	r2, r3, #31
 80077b4:	d405      	bmi.n	80077c2 <_puts_r+0x9a>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	059b      	lsls	r3, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_puts_r+0x9a>
 80077bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077be:	f002 fb67 	bl	8009e90 <__retarget_lock_release_recursive>
 80077c2:	4628      	mov	r0, r5
 80077c4:	bd70      	pop	{r4, r5, r6, pc}
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da04      	bge.n	80077d4 <_puts_r+0xac>
 80077ca:	69a2      	ldr	r2, [r4, #24]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	dc06      	bgt.n	80077de <_puts_r+0xb6>
 80077d0:	290a      	cmp	r1, #10
 80077d2:	d004      	beq.n	80077de <_puts_r+0xb6>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	6022      	str	r2, [r4, #0]
 80077da:	7019      	strb	r1, [r3, #0]
 80077dc:	e7c5      	b.n	800776a <_puts_r+0x42>
 80077de:	4622      	mov	r2, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	f000 feef 	bl	80085c4 <__swbuf_r>
 80077e6:	3001      	adds	r0, #1
 80077e8:	d1bf      	bne.n	800776a <_puts_r+0x42>
 80077ea:	e7df      	b.n	80077ac <_puts_r+0x84>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	250a      	movs	r5, #10
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	6022      	str	r2, [r4, #0]
 80077f4:	701d      	strb	r5, [r3, #0]
 80077f6:	e7db      	b.n	80077b0 <_puts_r+0x88>
 80077f8:	0800ba28 	.word	0x0800ba28
 80077fc:	0800ba48 	.word	0x0800ba48
 8007800:	0800ba08 	.word	0x0800ba08

08007804 <puts>:
 8007804:	4b02      	ldr	r3, [pc, #8]	; (8007810 <puts+0xc>)
 8007806:	4601      	mov	r1, r0
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	f7ff bf8d 	b.w	8007728 <_puts_r>
 800780e:	bf00      	nop
 8007810:	20000090 	.word	0x20000090

08007814 <nanf>:
 8007814:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800781c <nanf+0x8>
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	7fc00000 	.word	0x7fc00000

08007820 <siprintf>:
 8007820:	b40e      	push	{r1, r2, r3}
 8007822:	b500      	push	{lr}
 8007824:	b09c      	sub	sp, #112	; 0x70
 8007826:	ab1d      	add	r3, sp, #116	; 0x74
 8007828:	9002      	str	r0, [sp, #8]
 800782a:	9006      	str	r0, [sp, #24]
 800782c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007830:	4809      	ldr	r0, [pc, #36]	; (8007858 <siprintf+0x38>)
 8007832:	9107      	str	r1, [sp, #28]
 8007834:	9104      	str	r1, [sp, #16]
 8007836:	4909      	ldr	r1, [pc, #36]	; (800785c <siprintf+0x3c>)
 8007838:	f853 2b04 	ldr.w	r2, [r3], #4
 800783c:	9105      	str	r1, [sp, #20]
 800783e:	6800      	ldr	r0, [r0, #0]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	a902      	add	r1, sp, #8
 8007844:	f003 f982 	bl	800ab4c <_svfiprintf_r>
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	b01c      	add	sp, #112	; 0x70
 8007850:	f85d eb04 	ldr.w	lr, [sp], #4
 8007854:	b003      	add	sp, #12
 8007856:	4770      	bx	lr
 8007858:	20000090 	.word	0x20000090
 800785c:	ffff0208 	.word	0xffff0208

08007860 <sulp>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4604      	mov	r4, r0
 8007864:	460d      	mov	r5, r1
 8007866:	ec45 4b10 	vmov	d0, r4, r5
 800786a:	4616      	mov	r6, r2
 800786c:	f002 ff0a 	bl	800a684 <__ulp>
 8007870:	ec51 0b10 	vmov	r0, r1, d0
 8007874:	b17e      	cbz	r6, 8007896 <sulp+0x36>
 8007876:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800787a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd09      	ble.n	8007896 <sulp+0x36>
 8007882:	051b      	lsls	r3, r3, #20
 8007884:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007888:	2400      	movs	r4, #0
 800788a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	f7f8 fed1 	bl	8000638 <__aeabi_dmul>
 8007896:	bd70      	pop	{r4, r5, r6, pc}

08007898 <_strtod_l>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	b0a3      	sub	sp, #140	; 0x8c
 800789e:	461f      	mov	r7, r3
 80078a0:	2300      	movs	r3, #0
 80078a2:	931e      	str	r3, [sp, #120]	; 0x78
 80078a4:	4ba4      	ldr	r3, [pc, #656]	; (8007b38 <_strtod_l+0x2a0>)
 80078a6:	9219      	str	r2, [sp, #100]	; 0x64
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	9307      	str	r3, [sp, #28]
 80078ac:	4604      	mov	r4, r0
 80078ae:	4618      	mov	r0, r3
 80078b0:	4688      	mov	r8, r1
 80078b2:	f7f8 fcad 	bl	8000210 <strlen>
 80078b6:	f04f 0a00 	mov.w	sl, #0
 80078ba:	4605      	mov	r5, r0
 80078bc:	f04f 0b00 	mov.w	fp, #0
 80078c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80078c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078c6:	781a      	ldrb	r2, [r3, #0]
 80078c8:	2a2b      	cmp	r2, #43	; 0x2b
 80078ca:	d04c      	beq.n	8007966 <_strtod_l+0xce>
 80078cc:	d839      	bhi.n	8007942 <_strtod_l+0xaa>
 80078ce:	2a0d      	cmp	r2, #13
 80078d0:	d832      	bhi.n	8007938 <_strtod_l+0xa0>
 80078d2:	2a08      	cmp	r2, #8
 80078d4:	d832      	bhi.n	800793c <_strtod_l+0xa4>
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	d03c      	beq.n	8007954 <_strtod_l+0xbc>
 80078da:	2300      	movs	r3, #0
 80078dc:	930e      	str	r3, [sp, #56]	; 0x38
 80078de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80078e0:	7833      	ldrb	r3, [r6, #0]
 80078e2:	2b30      	cmp	r3, #48	; 0x30
 80078e4:	f040 80b4 	bne.w	8007a50 <_strtod_l+0x1b8>
 80078e8:	7873      	ldrb	r3, [r6, #1]
 80078ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078ee:	2b58      	cmp	r3, #88	; 0x58
 80078f0:	d16c      	bne.n	80079cc <_strtod_l+0x134>
 80078f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	ab1e      	add	r3, sp, #120	; 0x78
 80078f8:	9702      	str	r7, [sp, #8]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4a8f      	ldr	r2, [pc, #572]	; (8007b3c <_strtod_l+0x2a4>)
 80078fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8007900:	a91d      	add	r1, sp, #116	; 0x74
 8007902:	4620      	mov	r0, r4
 8007904:	f001 ffb6 	bl	8009874 <__gethex>
 8007908:	f010 0707 	ands.w	r7, r0, #7
 800790c:	4605      	mov	r5, r0
 800790e:	d005      	beq.n	800791c <_strtod_l+0x84>
 8007910:	2f06      	cmp	r7, #6
 8007912:	d12a      	bne.n	800796a <_strtod_l+0xd2>
 8007914:	3601      	adds	r6, #1
 8007916:	2300      	movs	r3, #0
 8007918:	961d      	str	r6, [sp, #116]	; 0x74
 800791a:	930e      	str	r3, [sp, #56]	; 0x38
 800791c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800791e:	2b00      	cmp	r3, #0
 8007920:	f040 8596 	bne.w	8008450 <_strtod_l+0xbb8>
 8007924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007926:	b1db      	cbz	r3, 8007960 <_strtod_l+0xc8>
 8007928:	4652      	mov	r2, sl
 800792a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800792e:	ec43 2b10 	vmov	d0, r2, r3
 8007932:	b023      	add	sp, #140	; 0x8c
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	2a20      	cmp	r2, #32
 800793a:	d1ce      	bne.n	80078da <_strtod_l+0x42>
 800793c:	3301      	adds	r3, #1
 800793e:	931d      	str	r3, [sp, #116]	; 0x74
 8007940:	e7c0      	b.n	80078c4 <_strtod_l+0x2c>
 8007942:	2a2d      	cmp	r2, #45	; 0x2d
 8007944:	d1c9      	bne.n	80078da <_strtod_l+0x42>
 8007946:	2201      	movs	r2, #1
 8007948:	920e      	str	r2, [sp, #56]	; 0x38
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	921d      	str	r2, [sp, #116]	; 0x74
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1c4      	bne.n	80078de <_strtod_l+0x46>
 8007954:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007956:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800795a:	2b00      	cmp	r3, #0
 800795c:	f040 8576 	bne.w	800844c <_strtod_l+0xbb4>
 8007960:	4652      	mov	r2, sl
 8007962:	465b      	mov	r3, fp
 8007964:	e7e3      	b.n	800792e <_strtod_l+0x96>
 8007966:	2200      	movs	r2, #0
 8007968:	e7ee      	b.n	8007948 <_strtod_l+0xb0>
 800796a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800796c:	b13a      	cbz	r2, 800797e <_strtod_l+0xe6>
 800796e:	2135      	movs	r1, #53	; 0x35
 8007970:	a820      	add	r0, sp, #128	; 0x80
 8007972:	f002 ff92 	bl	800a89a <__copybits>
 8007976:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007978:	4620      	mov	r0, r4
 800797a:	f002 fb57 	bl	800a02c <_Bfree>
 800797e:	3f01      	subs	r7, #1
 8007980:	2f05      	cmp	r7, #5
 8007982:	d807      	bhi.n	8007994 <_strtod_l+0xfc>
 8007984:	e8df f007 	tbb	[pc, r7]
 8007988:	1d180b0e 	.word	0x1d180b0e
 800798c:	030e      	.short	0x030e
 800798e:	f04f 0b00 	mov.w	fp, #0
 8007992:	46da      	mov	sl, fp
 8007994:	0728      	lsls	r0, r5, #28
 8007996:	d5c1      	bpl.n	800791c <_strtod_l+0x84>
 8007998:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800799c:	e7be      	b.n	800791c <_strtod_l+0x84>
 800799e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80079a2:	e7f7      	b.n	8007994 <_strtod_l+0xfc>
 80079a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80079a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80079aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80079b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079b6:	e7ed      	b.n	8007994 <_strtod_l+0xfc>
 80079b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007b40 <_strtod_l+0x2a8>
 80079bc:	f04f 0a00 	mov.w	sl, #0
 80079c0:	e7e8      	b.n	8007994 <_strtod_l+0xfc>
 80079c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80079c6:	f04f 3aff 	mov.w	sl, #4294967295
 80079ca:	e7e3      	b.n	8007994 <_strtod_l+0xfc>
 80079cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	921d      	str	r2, [sp, #116]	; 0x74
 80079d2:	785b      	ldrb	r3, [r3, #1]
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d0f9      	beq.n	80079cc <_strtod_l+0x134>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d09f      	beq.n	800791c <_strtod_l+0x84>
 80079dc:	2301      	movs	r3, #1
 80079de:	f04f 0900 	mov.w	r9, #0
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079e6:	930a      	str	r3, [sp, #40]	; 0x28
 80079e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80079ec:	464f      	mov	r7, r9
 80079ee:	220a      	movs	r2, #10
 80079f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80079f2:	7806      	ldrb	r6, [r0, #0]
 80079f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079f8:	b2d9      	uxtb	r1, r3
 80079fa:	2909      	cmp	r1, #9
 80079fc:	d92a      	bls.n	8007a54 <_strtod_l+0x1bc>
 80079fe:	9907      	ldr	r1, [sp, #28]
 8007a00:	462a      	mov	r2, r5
 8007a02:	f003 fa00 	bl	800ae06 <strncmp>
 8007a06:	b398      	cbz	r0, 8007a70 <_strtod_l+0x1d8>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	4633      	mov	r3, r6
 8007a0c:	463d      	mov	r5, r7
 8007a0e:	9007      	str	r0, [sp, #28]
 8007a10:	4602      	mov	r2, r0
 8007a12:	2b65      	cmp	r3, #101	; 0x65
 8007a14:	d001      	beq.n	8007a1a <_strtod_l+0x182>
 8007a16:	2b45      	cmp	r3, #69	; 0x45
 8007a18:	d118      	bne.n	8007a4c <_strtod_l+0x1b4>
 8007a1a:	b91d      	cbnz	r5, 8007a24 <_strtod_l+0x18c>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	4303      	orrs	r3, r0
 8007a20:	d098      	beq.n	8007954 <_strtod_l+0xbc>
 8007a22:	2500      	movs	r5, #0
 8007a24:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007a28:	f108 0301 	add.w	r3, r8, #1
 8007a2c:	931d      	str	r3, [sp, #116]	; 0x74
 8007a2e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007a32:	2b2b      	cmp	r3, #43	; 0x2b
 8007a34:	d075      	beq.n	8007b22 <_strtod_l+0x28a>
 8007a36:	2b2d      	cmp	r3, #45	; 0x2d
 8007a38:	d07b      	beq.n	8007b32 <_strtod_l+0x29a>
 8007a3a:	f04f 0c00 	mov.w	ip, #0
 8007a3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007a42:	2909      	cmp	r1, #9
 8007a44:	f240 8082 	bls.w	8007b4c <_strtod_l+0x2b4>
 8007a48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	e09d      	b.n	8007b8c <_strtod_l+0x2f4>
 8007a50:	2300      	movs	r3, #0
 8007a52:	e7c4      	b.n	80079de <_strtod_l+0x146>
 8007a54:	2f08      	cmp	r7, #8
 8007a56:	bfd8      	it	le
 8007a58:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007a5a:	f100 0001 	add.w	r0, r0, #1
 8007a5e:	bfda      	itte	le
 8007a60:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a64:	9309      	strle	r3, [sp, #36]	; 0x24
 8007a66:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	901d      	str	r0, [sp, #116]	; 0x74
 8007a6e:	e7bf      	b.n	80079f0 <_strtod_l+0x158>
 8007a70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a72:	195a      	adds	r2, r3, r5
 8007a74:	921d      	str	r2, [sp, #116]	; 0x74
 8007a76:	5d5b      	ldrb	r3, [r3, r5]
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	d037      	beq.n	8007aec <_strtod_l+0x254>
 8007a7c:	9007      	str	r0, [sp, #28]
 8007a7e:	463d      	mov	r5, r7
 8007a80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007a84:	2a09      	cmp	r2, #9
 8007a86:	d912      	bls.n	8007aae <_strtod_l+0x216>
 8007a88:	2201      	movs	r2, #1
 8007a8a:	e7c2      	b.n	8007a12 <_strtod_l+0x17a>
 8007a8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	921d      	str	r2, [sp, #116]	; 0x74
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	3001      	adds	r0, #1
 8007a96:	2b30      	cmp	r3, #48	; 0x30
 8007a98:	d0f8      	beq.n	8007a8c <_strtod_l+0x1f4>
 8007a9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007a9e:	2a08      	cmp	r2, #8
 8007aa0:	f200 84db 	bhi.w	800845a <_strtod_l+0xbc2>
 8007aa4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007aa6:	9007      	str	r0, [sp, #28]
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8007aac:	4605      	mov	r5, r0
 8007aae:	3b30      	subs	r3, #48	; 0x30
 8007ab0:	f100 0201 	add.w	r2, r0, #1
 8007ab4:	d014      	beq.n	8007ae0 <_strtod_l+0x248>
 8007ab6:	9907      	ldr	r1, [sp, #28]
 8007ab8:	4411      	add	r1, r2
 8007aba:	9107      	str	r1, [sp, #28]
 8007abc:	462a      	mov	r2, r5
 8007abe:	eb00 0e05 	add.w	lr, r0, r5
 8007ac2:	210a      	movs	r1, #10
 8007ac4:	4572      	cmp	r2, lr
 8007ac6:	d113      	bne.n	8007af0 <_strtod_l+0x258>
 8007ac8:	182a      	adds	r2, r5, r0
 8007aca:	2a08      	cmp	r2, #8
 8007acc:	f105 0501 	add.w	r5, r5, #1
 8007ad0:	4405      	add	r5, r0
 8007ad2:	dc1c      	bgt.n	8007b0e <_strtod_l+0x276>
 8007ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	fb02 3301 	mla	r3, r2, r1, r3
 8007adc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ade:	2200      	movs	r2, #0
 8007ae0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ae2:	1c59      	adds	r1, r3, #1
 8007ae4:	911d      	str	r1, [sp, #116]	; 0x74
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	4610      	mov	r0, r2
 8007aea:	e7c9      	b.n	8007a80 <_strtod_l+0x1e8>
 8007aec:	4638      	mov	r0, r7
 8007aee:	e7d2      	b.n	8007a96 <_strtod_l+0x1fe>
 8007af0:	2a08      	cmp	r2, #8
 8007af2:	dc04      	bgt.n	8007afe <_strtod_l+0x266>
 8007af4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007af6:	434e      	muls	r6, r1
 8007af8:	9609      	str	r6, [sp, #36]	; 0x24
 8007afa:	3201      	adds	r2, #1
 8007afc:	e7e2      	b.n	8007ac4 <_strtod_l+0x22c>
 8007afe:	f102 0c01 	add.w	ip, r2, #1
 8007b02:	f1bc 0f10 	cmp.w	ip, #16
 8007b06:	bfd8      	it	le
 8007b08:	fb01 f909 	mulle.w	r9, r1, r9
 8007b0c:	e7f5      	b.n	8007afa <_strtod_l+0x262>
 8007b0e:	2d10      	cmp	r5, #16
 8007b10:	bfdc      	itt	le
 8007b12:	220a      	movle	r2, #10
 8007b14:	fb02 3909 	mlale	r9, r2, r9, r3
 8007b18:	e7e1      	b.n	8007ade <_strtod_l+0x246>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9307      	str	r3, [sp, #28]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	e77c      	b.n	8007a1c <_strtod_l+0x184>
 8007b22:	f04f 0c00 	mov.w	ip, #0
 8007b26:	f108 0302 	add.w	r3, r8, #2
 8007b2a:	931d      	str	r3, [sp, #116]	; 0x74
 8007b2c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007b30:	e785      	b.n	8007a3e <_strtod_l+0x1a6>
 8007b32:	f04f 0c01 	mov.w	ip, #1
 8007b36:	e7f6      	b.n	8007b26 <_strtod_l+0x28e>
 8007b38:	0800bad4 	.word	0x0800bad4
 8007b3c:	0800b820 	.word	0x0800b820
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b46:	1c59      	adds	r1, r3, #1
 8007b48:	911d      	str	r1, [sp, #116]	; 0x74
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b30      	cmp	r3, #48	; 0x30
 8007b4e:	d0f9      	beq.n	8007b44 <_strtod_l+0x2ac>
 8007b50:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007b54:	2908      	cmp	r1, #8
 8007b56:	f63f af79 	bhi.w	8007a4c <_strtod_l+0x1b4>
 8007b5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007b5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b64:	1c59      	adds	r1, r3, #1
 8007b66:	911d      	str	r1, [sp, #116]	; 0x74
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007b6e:	2e09      	cmp	r6, #9
 8007b70:	d937      	bls.n	8007be2 <_strtod_l+0x34a>
 8007b72:	9e08      	ldr	r6, [sp, #32]
 8007b74:	1b89      	subs	r1, r1, r6
 8007b76:	2908      	cmp	r1, #8
 8007b78:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007b7c:	dc02      	bgt.n	8007b84 <_strtod_l+0x2ec>
 8007b7e:	4576      	cmp	r6, lr
 8007b80:	bfa8      	it	ge
 8007b82:	4676      	movge	r6, lr
 8007b84:	f1bc 0f00 	cmp.w	ip, #0
 8007b88:	d000      	beq.n	8007b8c <_strtod_l+0x2f4>
 8007b8a:	4276      	negs	r6, r6
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	d14f      	bne.n	8007c30 <_strtod_l+0x398>
 8007b90:	9904      	ldr	r1, [sp, #16]
 8007b92:	4301      	orrs	r1, r0
 8007b94:	f47f aec2 	bne.w	800791c <_strtod_l+0x84>
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	f47f aedb 	bne.w	8007954 <_strtod_l+0xbc>
 8007b9e:	2b69      	cmp	r3, #105	; 0x69
 8007ba0:	d027      	beq.n	8007bf2 <_strtod_l+0x35a>
 8007ba2:	dc24      	bgt.n	8007bee <_strtod_l+0x356>
 8007ba4:	2b49      	cmp	r3, #73	; 0x49
 8007ba6:	d024      	beq.n	8007bf2 <_strtod_l+0x35a>
 8007ba8:	2b4e      	cmp	r3, #78	; 0x4e
 8007baa:	f47f aed3 	bne.w	8007954 <_strtod_l+0xbc>
 8007bae:	499e      	ldr	r1, [pc, #632]	; (8007e28 <_strtod_l+0x590>)
 8007bb0:	a81d      	add	r0, sp, #116	; 0x74
 8007bb2:	f002 f8b7 	bl	8009d24 <__match>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f43f aecc 	beq.w	8007954 <_strtod_l+0xbc>
 8007bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b28      	cmp	r3, #40	; 0x28
 8007bc2:	d12d      	bne.n	8007c20 <_strtod_l+0x388>
 8007bc4:	4999      	ldr	r1, [pc, #612]	; (8007e2c <_strtod_l+0x594>)
 8007bc6:	aa20      	add	r2, sp, #128	; 0x80
 8007bc8:	a81d      	add	r0, sp, #116	; 0x74
 8007bca:	f002 f8bf 	bl	8009d4c <__hexnan>
 8007bce:	2805      	cmp	r0, #5
 8007bd0:	d126      	bne.n	8007c20 <_strtod_l+0x388>
 8007bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007bd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007bdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007be0:	e69c      	b.n	800791c <_strtod_l+0x84>
 8007be2:	210a      	movs	r1, #10
 8007be4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007be8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007bec:	e7b9      	b.n	8007b62 <_strtod_l+0x2ca>
 8007bee:	2b6e      	cmp	r3, #110	; 0x6e
 8007bf0:	e7db      	b.n	8007baa <_strtod_l+0x312>
 8007bf2:	498f      	ldr	r1, [pc, #572]	; (8007e30 <_strtod_l+0x598>)
 8007bf4:	a81d      	add	r0, sp, #116	; 0x74
 8007bf6:	f002 f895 	bl	8009d24 <__match>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f43f aeaa 	beq.w	8007954 <_strtod_l+0xbc>
 8007c00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c02:	498c      	ldr	r1, [pc, #560]	; (8007e34 <_strtod_l+0x59c>)
 8007c04:	3b01      	subs	r3, #1
 8007c06:	a81d      	add	r0, sp, #116	; 0x74
 8007c08:	931d      	str	r3, [sp, #116]	; 0x74
 8007c0a:	f002 f88b 	bl	8009d24 <__match>
 8007c0e:	b910      	cbnz	r0, 8007c16 <_strtod_l+0x37e>
 8007c10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c12:	3301      	adds	r3, #1
 8007c14:	931d      	str	r3, [sp, #116]	; 0x74
 8007c16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007e44 <_strtod_l+0x5ac>
 8007c1a:	f04f 0a00 	mov.w	sl, #0
 8007c1e:	e67d      	b.n	800791c <_strtod_l+0x84>
 8007c20:	4885      	ldr	r0, [pc, #532]	; (8007e38 <_strtod_l+0x5a0>)
 8007c22:	f003 f895 	bl	800ad50 <nan>
 8007c26:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007c2e:	e675      	b.n	800791c <_strtod_l+0x84>
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c34:	1af3      	subs	r3, r6, r3
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	bf08      	it	eq
 8007c3a:	462f      	moveq	r7, r5
 8007c3c:	2d10      	cmp	r5, #16
 8007c3e:	9308      	str	r3, [sp, #32]
 8007c40:	46a8      	mov	r8, r5
 8007c42:	bfa8      	it	ge
 8007c44:	f04f 0810 	movge.w	r8, #16
 8007c48:	f7f8 fc7c 	bl	8000544 <__aeabi_ui2d>
 8007c4c:	2d09      	cmp	r5, #9
 8007c4e:	4682      	mov	sl, r0
 8007c50:	468b      	mov	fp, r1
 8007c52:	dd13      	ble.n	8007c7c <_strtod_l+0x3e4>
 8007c54:	4b79      	ldr	r3, [pc, #484]	; (8007e3c <_strtod_l+0x5a4>)
 8007c56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c5e:	f7f8 fceb 	bl	8000638 <__aeabi_dmul>
 8007c62:	4682      	mov	sl, r0
 8007c64:	4648      	mov	r0, r9
 8007c66:	468b      	mov	fp, r1
 8007c68:	f7f8 fc6c 	bl	8000544 <__aeabi_ui2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	f7f8 fb2a 	bl	80002cc <__adddf3>
 8007c78:	4682      	mov	sl, r0
 8007c7a:	468b      	mov	fp, r1
 8007c7c:	2d0f      	cmp	r5, #15
 8007c7e:	dc38      	bgt.n	8007cf2 <_strtod_l+0x45a>
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f43f ae4a 	beq.w	800791c <_strtod_l+0x84>
 8007c88:	dd24      	ble.n	8007cd4 <_strtod_l+0x43c>
 8007c8a:	2b16      	cmp	r3, #22
 8007c8c:	dc0b      	bgt.n	8007ca6 <_strtod_l+0x40e>
 8007c8e:	4d6b      	ldr	r5, [pc, #428]	; (8007e3c <_strtod_l+0x5a4>)
 8007c90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007c94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007c98:	4652      	mov	r2, sl
 8007c9a:	465b      	mov	r3, fp
 8007c9c:	f7f8 fccc 	bl	8000638 <__aeabi_dmul>
 8007ca0:	4682      	mov	sl, r0
 8007ca2:	468b      	mov	fp, r1
 8007ca4:	e63a      	b.n	800791c <_strtod_l+0x84>
 8007ca6:	9a08      	ldr	r2, [sp, #32]
 8007ca8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007cac:	4293      	cmp	r3, r2
 8007cae:	db20      	blt.n	8007cf2 <_strtod_l+0x45a>
 8007cb0:	4c62      	ldr	r4, [pc, #392]	; (8007e3c <_strtod_l+0x5a4>)
 8007cb2:	f1c5 050f 	rsb	r5, r5, #15
 8007cb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007cba:	4652      	mov	r2, sl
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc2:	f7f8 fcb9 	bl	8000638 <__aeabi_dmul>
 8007cc6:	9b08      	ldr	r3, [sp, #32]
 8007cc8:	1b5d      	subs	r5, r3, r5
 8007cca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007cce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007cd2:	e7e3      	b.n	8007c9c <_strtod_l+0x404>
 8007cd4:	9b08      	ldr	r3, [sp, #32]
 8007cd6:	3316      	adds	r3, #22
 8007cd8:	db0b      	blt.n	8007cf2 <_strtod_l+0x45a>
 8007cda:	9b07      	ldr	r3, [sp, #28]
 8007cdc:	4a57      	ldr	r2, [pc, #348]	; (8007e3c <_strtod_l+0x5a4>)
 8007cde:	1b9e      	subs	r6, r3, r6
 8007ce0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007ce4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ce8:	4650      	mov	r0, sl
 8007cea:	4659      	mov	r1, fp
 8007cec:	f7f8 fdce 	bl	800088c <__aeabi_ddiv>
 8007cf0:	e7d6      	b.n	8007ca0 <_strtod_l+0x408>
 8007cf2:	9b08      	ldr	r3, [sp, #32]
 8007cf4:	eba5 0808 	sub.w	r8, r5, r8
 8007cf8:	4498      	add	r8, r3
 8007cfa:	f1b8 0f00 	cmp.w	r8, #0
 8007cfe:	dd71      	ble.n	8007de4 <_strtod_l+0x54c>
 8007d00:	f018 030f 	ands.w	r3, r8, #15
 8007d04:	d00a      	beq.n	8007d1c <_strtod_l+0x484>
 8007d06:	494d      	ldr	r1, [pc, #308]	; (8007e3c <_strtod_l+0x5a4>)
 8007d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	465b      	mov	r3, fp
 8007d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d14:	f7f8 fc90 	bl	8000638 <__aeabi_dmul>
 8007d18:	4682      	mov	sl, r0
 8007d1a:	468b      	mov	fp, r1
 8007d1c:	f038 080f 	bics.w	r8, r8, #15
 8007d20:	d04d      	beq.n	8007dbe <_strtod_l+0x526>
 8007d22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d26:	dd22      	ble.n	8007d6e <_strtod_l+0x4d6>
 8007d28:	2500      	movs	r5, #0
 8007d2a:	462e      	mov	r6, r5
 8007d2c:	9509      	str	r5, [sp, #36]	; 0x24
 8007d2e:	9507      	str	r5, [sp, #28]
 8007d30:	2322      	movs	r3, #34	; 0x22
 8007d32:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007e44 <_strtod_l+0x5ac>
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	f04f 0a00 	mov.w	sl, #0
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f43f adec 	beq.w	800791c <_strtod_l+0x84>
 8007d44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d46:	4620      	mov	r0, r4
 8007d48:	f002 f970 	bl	800a02c <_Bfree>
 8007d4c:	9907      	ldr	r1, [sp, #28]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f002 f96c 	bl	800a02c <_Bfree>
 8007d54:	4631      	mov	r1, r6
 8007d56:	4620      	mov	r0, r4
 8007d58:	f002 f968 	bl	800a02c <_Bfree>
 8007d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f002 f964 	bl	800a02c <_Bfree>
 8007d64:	4629      	mov	r1, r5
 8007d66:	4620      	mov	r0, r4
 8007d68:	f002 f960 	bl	800a02c <_Bfree>
 8007d6c:	e5d6      	b.n	800791c <_strtod_l+0x84>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007d74:	4650      	mov	r0, sl
 8007d76:	4659      	mov	r1, fp
 8007d78:	4699      	mov	r9, r3
 8007d7a:	f1b8 0f01 	cmp.w	r8, #1
 8007d7e:	dc21      	bgt.n	8007dc4 <_strtod_l+0x52c>
 8007d80:	b10b      	cbz	r3, 8007d86 <_strtod_l+0x4ee>
 8007d82:	4682      	mov	sl, r0
 8007d84:	468b      	mov	fp, r1
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <_strtod_l+0x5a8>)
 8007d88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007d8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007d90:	4652      	mov	r2, sl
 8007d92:	465b      	mov	r3, fp
 8007d94:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007d98:	f7f8 fc4e 	bl	8000638 <__aeabi_dmul>
 8007d9c:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <_strtod_l+0x5ac>)
 8007d9e:	460a      	mov	r2, r1
 8007da0:	400b      	ands	r3, r1
 8007da2:	4929      	ldr	r1, [pc, #164]	; (8007e48 <_strtod_l+0x5b0>)
 8007da4:	428b      	cmp	r3, r1
 8007da6:	4682      	mov	sl, r0
 8007da8:	d8be      	bhi.n	8007d28 <_strtod_l+0x490>
 8007daa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007dae:	428b      	cmp	r3, r1
 8007db0:	bf86      	itte	hi
 8007db2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007e4c <_strtod_l+0x5b4>
 8007db6:	f04f 3aff 	movhi.w	sl, #4294967295
 8007dba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	e081      	b.n	8007ec8 <_strtod_l+0x630>
 8007dc4:	f018 0f01 	tst.w	r8, #1
 8007dc8:	d007      	beq.n	8007dda <_strtod_l+0x542>
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <_strtod_l+0x5a8>)
 8007dcc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fc30 	bl	8000638 <__aeabi_dmul>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f109 0901 	add.w	r9, r9, #1
 8007dde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007de2:	e7ca      	b.n	8007d7a <_strtod_l+0x4e2>
 8007de4:	d0eb      	beq.n	8007dbe <_strtod_l+0x526>
 8007de6:	f1c8 0800 	rsb	r8, r8, #0
 8007dea:	f018 020f 	ands.w	r2, r8, #15
 8007dee:	d00a      	beq.n	8007e06 <_strtod_l+0x56e>
 8007df0:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <_strtod_l+0x5a4>)
 8007df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df6:	4650      	mov	r0, sl
 8007df8:	4659      	mov	r1, fp
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fd45 	bl	800088c <__aeabi_ddiv>
 8007e02:	4682      	mov	sl, r0
 8007e04:	468b      	mov	fp, r1
 8007e06:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007e0a:	d0d8      	beq.n	8007dbe <_strtod_l+0x526>
 8007e0c:	f1b8 0f1f 	cmp.w	r8, #31
 8007e10:	dd1e      	ble.n	8007e50 <_strtod_l+0x5b8>
 8007e12:	2500      	movs	r5, #0
 8007e14:	462e      	mov	r6, r5
 8007e16:	9509      	str	r5, [sp, #36]	; 0x24
 8007e18:	9507      	str	r5, [sp, #28]
 8007e1a:	2322      	movs	r3, #34	; 0x22
 8007e1c:	f04f 0a00 	mov.w	sl, #0
 8007e20:	f04f 0b00 	mov.w	fp, #0
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	e789      	b.n	8007d3c <_strtod_l+0x4a4>
 8007e28:	0800b7f1 	.word	0x0800b7f1
 8007e2c:	0800b834 	.word	0x0800b834
 8007e30:	0800b7e9 	.word	0x0800b7e9
 8007e34:	0800b974 	.word	0x0800b974
 8007e38:	0800bc90 	.word	0x0800bc90
 8007e3c:	0800bb70 	.word	0x0800bb70
 8007e40:	0800bb48 	.word	0x0800bb48
 8007e44:	7ff00000 	.word	0x7ff00000
 8007e48:	7ca00000 	.word	0x7ca00000
 8007e4c:	7fefffff 	.word	0x7fefffff
 8007e50:	f018 0310 	ands.w	r3, r8, #16
 8007e54:	bf18      	it	ne
 8007e56:	236a      	movne	r3, #106	; 0x6a
 8007e58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008210 <_strtod_l+0x978>
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	2300      	movs	r3, #0
 8007e64:	f018 0f01 	tst.w	r8, #1
 8007e68:	d004      	beq.n	8007e74 <_strtod_l+0x5dc>
 8007e6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e6e:	f7f8 fbe3 	bl	8000638 <__aeabi_dmul>
 8007e72:	2301      	movs	r3, #1
 8007e74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007e78:	f109 0908 	add.w	r9, r9, #8
 8007e7c:	d1f2      	bne.n	8007e64 <_strtod_l+0x5cc>
 8007e7e:	b10b      	cbz	r3, 8007e84 <_strtod_l+0x5ec>
 8007e80:	4682      	mov	sl, r0
 8007e82:	468b      	mov	fp, r1
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	b1bb      	cbz	r3, 8007eb8 <_strtod_l+0x620>
 8007e88:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007e8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	4659      	mov	r1, fp
 8007e94:	dd10      	ble.n	8007eb8 <_strtod_l+0x620>
 8007e96:	2b1f      	cmp	r3, #31
 8007e98:	f340 8128 	ble.w	80080ec <_strtod_l+0x854>
 8007e9c:	2b34      	cmp	r3, #52	; 0x34
 8007e9e:	bfde      	ittt	le
 8007ea0:	3b20      	suble	r3, #32
 8007ea2:	f04f 32ff 	movle.w	r2, #4294967295
 8007ea6:	fa02 f303 	lslle.w	r3, r2, r3
 8007eaa:	f04f 0a00 	mov.w	sl, #0
 8007eae:	bfcc      	ite	gt
 8007eb0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007eb4:	ea03 0b01 	andle.w	fp, r3, r1
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4650      	mov	r0, sl
 8007ebe:	4659      	mov	r1, fp
 8007ec0:	f7f8 fe22 	bl	8000b08 <__aeabi_dcmpeq>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1a4      	bne.n	8007e12 <_strtod_l+0x57a>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ece:	462b      	mov	r3, r5
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f002 f916 	bl	800a104 <__s2b>
 8007ed8:	9009      	str	r0, [sp, #36]	; 0x24
 8007eda:	2800      	cmp	r0, #0
 8007edc:	f43f af24 	beq.w	8007d28 <_strtod_l+0x490>
 8007ee0:	9b07      	ldr	r3, [sp, #28]
 8007ee2:	1b9e      	subs	r6, r3, r6
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfb4      	ite	lt
 8007eea:	4633      	movlt	r3, r6
 8007eec:	2300      	movge	r3, #0
 8007eee:	9310      	str	r3, [sp, #64]	; 0x40
 8007ef0:	9b08      	ldr	r3, [sp, #32]
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ef8:	9318      	str	r3, [sp, #96]	; 0x60
 8007efa:	462e      	mov	r6, r5
 8007efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efe:	4620      	mov	r0, r4
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	f002 f853 	bl	8009fac <_Balloc>
 8007f06:	9007      	str	r0, [sp, #28]
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f af11 	beq.w	8007d30 <_strtod_l+0x498>
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	3202      	adds	r2, #2
 8007f14:	f103 010c 	add.w	r1, r3, #12
 8007f18:	0092      	lsls	r2, r2, #2
 8007f1a:	300c      	adds	r0, #12
 8007f1c:	f002 f838 	bl	8009f90 <memcpy>
 8007f20:	ec4b ab10 	vmov	d0, sl, fp
 8007f24:	aa20      	add	r2, sp, #128	; 0x80
 8007f26:	a91f      	add	r1, sp, #124	; 0x7c
 8007f28:	4620      	mov	r0, r4
 8007f2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007f2e:	f002 fc25 	bl	800a77c <__d2b>
 8007f32:	901e      	str	r0, [sp, #120]	; 0x78
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f43f aefb 	beq.w	8007d30 <_strtod_l+0x498>
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f002 f97b 	bl	800a238 <__i2b>
 8007f42:	4606      	mov	r6, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f43f aef3 	beq.w	8007d30 <_strtod_l+0x498>
 8007f4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f4c:	9904      	ldr	r1, [sp, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfab      	itete	ge
 8007f52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007f54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007f56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007f58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007f5c:	bfac      	ite	ge
 8007f5e:	eb03 0902 	addge.w	r9, r3, r2
 8007f62:	1ad7      	sublt	r7, r2, r3
 8007f64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f66:	eba3 0801 	sub.w	r8, r3, r1
 8007f6a:	4490      	add	r8, r2
 8007f6c:	4ba3      	ldr	r3, [pc, #652]	; (80081fc <_strtod_l+0x964>)
 8007f6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f72:	4598      	cmp	r8, r3
 8007f74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f78:	f280 80cc 	bge.w	8008114 <_strtod_l+0x87c>
 8007f7c:	eba3 0308 	sub.w	r3, r3, r8
 8007f80:	2b1f      	cmp	r3, #31
 8007f82:	eba2 0203 	sub.w	r2, r2, r3
 8007f86:	f04f 0101 	mov.w	r1, #1
 8007f8a:	f300 80b6 	bgt.w	80080fa <_strtod_l+0x862>
 8007f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f92:	9311      	str	r3, [sp, #68]	; 0x44
 8007f94:	2300      	movs	r3, #0
 8007f96:	930c      	str	r3, [sp, #48]	; 0x30
 8007f98:	eb09 0802 	add.w	r8, r9, r2
 8007f9c:	9b04      	ldr	r3, [sp, #16]
 8007f9e:	45c1      	cmp	r9, r8
 8007fa0:	4417      	add	r7, r2
 8007fa2:	441f      	add	r7, r3
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	bfa8      	it	ge
 8007fa8:	4643      	movge	r3, r8
 8007faa:	42bb      	cmp	r3, r7
 8007fac:	bfa8      	it	ge
 8007fae:	463b      	movge	r3, r7
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfc2      	ittt	gt
 8007fb4:	eba8 0803 	subgt.w	r8, r8, r3
 8007fb8:	1aff      	subgt	r7, r7, r3
 8007fba:	eba9 0903 	subgt.w	r9, r9, r3
 8007fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dd17      	ble.n	8007ff4 <_strtod_l+0x75c>
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f002 f9f1 	bl	800a3b0 <__pow5mult>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f43f aead 	beq.w	8007d30 <_strtod_l+0x498>
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f002 f942 	bl	800a264 <__multiply>
 8007fe0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f43f aea4 	beq.w	8007d30 <_strtod_l+0x498>
 8007fe8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007fea:	4620      	mov	r0, r4
 8007fec:	f002 f81e 	bl	800a02c <_Bfree>
 8007ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ff2:	931e      	str	r3, [sp, #120]	; 0x78
 8007ff4:	f1b8 0f00 	cmp.w	r8, #0
 8007ff8:	f300 8091 	bgt.w	800811e <_strtod_l+0x886>
 8007ffc:	9b08      	ldr	r3, [sp, #32]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd08      	ble.n	8008014 <_strtod_l+0x77c>
 8008002:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008004:	9907      	ldr	r1, [sp, #28]
 8008006:	4620      	mov	r0, r4
 8008008:	f002 f9d2 	bl	800a3b0 <__pow5mult>
 800800c:	9007      	str	r0, [sp, #28]
 800800e:	2800      	cmp	r0, #0
 8008010:	f43f ae8e 	beq.w	8007d30 <_strtod_l+0x498>
 8008014:	2f00      	cmp	r7, #0
 8008016:	dd08      	ble.n	800802a <_strtod_l+0x792>
 8008018:	9907      	ldr	r1, [sp, #28]
 800801a:	463a      	mov	r2, r7
 800801c:	4620      	mov	r0, r4
 800801e:	f002 fa21 	bl	800a464 <__lshift>
 8008022:	9007      	str	r0, [sp, #28]
 8008024:	2800      	cmp	r0, #0
 8008026:	f43f ae83 	beq.w	8007d30 <_strtod_l+0x498>
 800802a:	f1b9 0f00 	cmp.w	r9, #0
 800802e:	dd08      	ble.n	8008042 <_strtod_l+0x7aa>
 8008030:	4631      	mov	r1, r6
 8008032:	464a      	mov	r2, r9
 8008034:	4620      	mov	r0, r4
 8008036:	f002 fa15 	bl	800a464 <__lshift>
 800803a:	4606      	mov	r6, r0
 800803c:	2800      	cmp	r0, #0
 800803e:	f43f ae77 	beq.w	8007d30 <_strtod_l+0x498>
 8008042:	9a07      	ldr	r2, [sp, #28]
 8008044:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008046:	4620      	mov	r0, r4
 8008048:	f002 fa94 	bl	800a574 <__mdiff>
 800804c:	4605      	mov	r5, r0
 800804e:	2800      	cmp	r0, #0
 8008050:	f43f ae6e 	beq.w	8007d30 <_strtod_l+0x498>
 8008054:	68c3      	ldr	r3, [r0, #12]
 8008056:	930f      	str	r3, [sp, #60]	; 0x3c
 8008058:	2300      	movs	r3, #0
 800805a:	60c3      	str	r3, [r0, #12]
 800805c:	4631      	mov	r1, r6
 800805e:	f002 fa6d 	bl	800a53c <__mcmp>
 8008062:	2800      	cmp	r0, #0
 8008064:	da65      	bge.n	8008132 <_strtod_l+0x89a>
 8008066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008068:	ea53 030a 	orrs.w	r3, r3, sl
 800806c:	f040 8087 	bne.w	800817e <_strtod_l+0x8e6>
 8008070:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008074:	2b00      	cmp	r3, #0
 8008076:	f040 8082 	bne.w	800817e <_strtod_l+0x8e6>
 800807a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800807e:	0d1b      	lsrs	r3, r3, #20
 8008080:	051b      	lsls	r3, r3, #20
 8008082:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008086:	d97a      	bls.n	800817e <_strtod_l+0x8e6>
 8008088:	696b      	ldr	r3, [r5, #20]
 800808a:	b913      	cbnz	r3, 8008092 <_strtod_l+0x7fa>
 800808c:	692b      	ldr	r3, [r5, #16]
 800808e:	2b01      	cmp	r3, #1
 8008090:	dd75      	ble.n	800817e <_strtod_l+0x8e6>
 8008092:	4629      	mov	r1, r5
 8008094:	2201      	movs	r2, #1
 8008096:	4620      	mov	r0, r4
 8008098:	f002 f9e4 	bl	800a464 <__lshift>
 800809c:	4631      	mov	r1, r6
 800809e:	4605      	mov	r5, r0
 80080a0:	f002 fa4c 	bl	800a53c <__mcmp>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	dd6a      	ble.n	800817e <_strtod_l+0x8e6>
 80080a8:	9904      	ldr	r1, [sp, #16]
 80080aa:	4a55      	ldr	r2, [pc, #340]	; (8008200 <_strtod_l+0x968>)
 80080ac:	465b      	mov	r3, fp
 80080ae:	2900      	cmp	r1, #0
 80080b0:	f000 8085 	beq.w	80081be <_strtod_l+0x926>
 80080b4:	ea02 010b 	and.w	r1, r2, fp
 80080b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080bc:	dc7f      	bgt.n	80081be <_strtod_l+0x926>
 80080be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80080c2:	f77f aeaa 	ble.w	8007e1a <_strtod_l+0x582>
 80080c6:	4a4f      	ldr	r2, [pc, #316]	; (8008204 <_strtod_l+0x96c>)
 80080c8:	2300      	movs	r3, #0
 80080ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80080ce:	4650      	mov	r0, sl
 80080d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80080d4:	4659      	mov	r1, fp
 80080d6:	f7f8 faaf 	bl	8000638 <__aeabi_dmul>
 80080da:	460b      	mov	r3, r1
 80080dc:	4303      	orrs	r3, r0
 80080de:	bf08      	it	eq
 80080e0:	2322      	moveq	r3, #34	; 0x22
 80080e2:	4682      	mov	sl, r0
 80080e4:	468b      	mov	fp, r1
 80080e6:	bf08      	it	eq
 80080e8:	6023      	streq	r3, [r4, #0]
 80080ea:	e62b      	b.n	8007d44 <_strtod_l+0x4ac>
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	ea03 0a0a 	and.w	sl, r3, sl
 80080f8:	e6de      	b.n	8007eb8 <_strtod_l+0x620>
 80080fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80080fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008102:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008106:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800810a:	fa01 f308 	lsl.w	r3, r1, r8
 800810e:	930c      	str	r3, [sp, #48]	; 0x30
 8008110:	9111      	str	r1, [sp, #68]	; 0x44
 8008112:	e741      	b.n	8007f98 <_strtod_l+0x700>
 8008114:	2300      	movs	r3, #0
 8008116:	930c      	str	r3, [sp, #48]	; 0x30
 8008118:	2301      	movs	r3, #1
 800811a:	9311      	str	r3, [sp, #68]	; 0x44
 800811c:	e73c      	b.n	8007f98 <_strtod_l+0x700>
 800811e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008120:	4642      	mov	r2, r8
 8008122:	4620      	mov	r0, r4
 8008124:	f002 f99e 	bl	800a464 <__lshift>
 8008128:	901e      	str	r0, [sp, #120]	; 0x78
 800812a:	2800      	cmp	r0, #0
 800812c:	f47f af66 	bne.w	8007ffc <_strtod_l+0x764>
 8008130:	e5fe      	b.n	8007d30 <_strtod_l+0x498>
 8008132:	465f      	mov	r7, fp
 8008134:	d16e      	bne.n	8008214 <_strtod_l+0x97c>
 8008136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800813c:	b342      	cbz	r2, 8008190 <_strtod_l+0x8f8>
 800813e:	4a32      	ldr	r2, [pc, #200]	; (8008208 <_strtod_l+0x970>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d128      	bne.n	8008196 <_strtod_l+0x8fe>
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	4650      	mov	r0, sl
 8008148:	b1eb      	cbz	r3, 8008186 <_strtod_l+0x8ee>
 800814a:	4a2d      	ldr	r2, [pc, #180]	; (8008200 <_strtod_l+0x968>)
 800814c:	403a      	ands	r2, r7
 800814e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008152:	f04f 31ff 	mov.w	r1, #4294967295
 8008156:	d819      	bhi.n	800818c <_strtod_l+0x8f4>
 8008158:	0d12      	lsrs	r2, r2, #20
 800815a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800815e:	fa01 f303 	lsl.w	r3, r1, r3
 8008162:	4298      	cmp	r0, r3
 8008164:	d117      	bne.n	8008196 <_strtod_l+0x8fe>
 8008166:	4b29      	ldr	r3, [pc, #164]	; (800820c <_strtod_l+0x974>)
 8008168:	429f      	cmp	r7, r3
 800816a:	d102      	bne.n	8008172 <_strtod_l+0x8da>
 800816c:	3001      	adds	r0, #1
 800816e:	f43f addf 	beq.w	8007d30 <_strtod_l+0x498>
 8008172:	4b23      	ldr	r3, [pc, #140]	; (8008200 <_strtod_l+0x968>)
 8008174:	403b      	ands	r3, r7
 8008176:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800817a:	f04f 0a00 	mov.w	sl, #0
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1a0      	bne.n	80080c6 <_strtod_l+0x82e>
 8008184:	e5de      	b.n	8007d44 <_strtod_l+0x4ac>
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
 800818a:	e7ea      	b.n	8008162 <_strtod_l+0x8ca>
 800818c:	460b      	mov	r3, r1
 800818e:	e7e8      	b.n	8008162 <_strtod_l+0x8ca>
 8008190:	ea53 030a 	orrs.w	r3, r3, sl
 8008194:	d088      	beq.n	80080a8 <_strtod_l+0x810>
 8008196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008198:	b1db      	cbz	r3, 80081d2 <_strtod_l+0x93a>
 800819a:	423b      	tst	r3, r7
 800819c:	d0ef      	beq.n	800817e <_strtod_l+0x8e6>
 800819e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	4650      	mov	r0, sl
 80081a4:	4659      	mov	r1, fp
 80081a6:	b1c3      	cbz	r3, 80081da <_strtod_l+0x942>
 80081a8:	f7ff fb5a 	bl	8007860 <sulp>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081b4:	f7f8 f88a 	bl	80002cc <__adddf3>
 80081b8:	4682      	mov	sl, r0
 80081ba:	468b      	mov	fp, r1
 80081bc:	e7df      	b.n	800817e <_strtod_l+0x8e6>
 80081be:	4013      	ands	r3, r2
 80081c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80081c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081cc:	f04f 3aff 	mov.w	sl, #4294967295
 80081d0:	e7d5      	b.n	800817e <_strtod_l+0x8e6>
 80081d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081d4:	ea13 0f0a 	tst.w	r3, sl
 80081d8:	e7e0      	b.n	800819c <_strtod_l+0x904>
 80081da:	f7ff fb41 	bl	8007860 <sulp>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081e6:	f7f8 f86f 	bl	80002c8 <__aeabi_dsub>
 80081ea:	2200      	movs	r2, #0
 80081ec:	2300      	movs	r3, #0
 80081ee:	4682      	mov	sl, r0
 80081f0:	468b      	mov	fp, r1
 80081f2:	f7f8 fc89 	bl	8000b08 <__aeabi_dcmpeq>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d0c1      	beq.n	800817e <_strtod_l+0x8e6>
 80081fa:	e60e      	b.n	8007e1a <_strtod_l+0x582>
 80081fc:	fffffc02 	.word	0xfffffc02
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	39500000 	.word	0x39500000
 8008208:	000fffff 	.word	0x000fffff
 800820c:	7fefffff 	.word	0x7fefffff
 8008210:	0800b848 	.word	0x0800b848
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	f002 fb0c 	bl	800a834 <__ratio>
 800821c:	ec59 8b10 	vmov	r8, r9, d0
 8008220:	ee10 0a10 	vmov	r0, s0
 8008224:	2200      	movs	r2, #0
 8008226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800822a:	4649      	mov	r1, r9
 800822c:	f7f8 fc80 	bl	8000b30 <__aeabi_dcmple>
 8008230:	2800      	cmp	r0, #0
 8008232:	d07c      	beq.n	800832e <_strtod_l+0xa96>
 8008234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d04c      	beq.n	80082d4 <_strtod_l+0xa3c>
 800823a:	4b95      	ldr	r3, [pc, #596]	; (8008490 <_strtod_l+0xbf8>)
 800823c:	2200      	movs	r2, #0
 800823e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008242:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008490 <_strtod_l+0xbf8>
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	4b92      	ldr	r3, [pc, #584]	; (8008494 <_strtod_l+0xbfc>)
 800824c:	403b      	ands	r3, r7
 800824e:	9311      	str	r3, [sp, #68]	; 0x44
 8008250:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008252:	4b91      	ldr	r3, [pc, #580]	; (8008498 <_strtod_l+0xc00>)
 8008254:	429a      	cmp	r2, r3
 8008256:	f040 80b2 	bne.w	80083be <_strtod_l+0xb26>
 800825a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800825e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008262:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008266:	ec4b ab10 	vmov	d0, sl, fp
 800826a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800826e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008272:	f002 fa07 	bl	800a684 <__ulp>
 8008276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800827a:	ec53 2b10 	vmov	r2, r3, d0
 800827e:	f7f8 f9db 	bl	8000638 <__aeabi_dmul>
 8008282:	4652      	mov	r2, sl
 8008284:	465b      	mov	r3, fp
 8008286:	f7f8 f821 	bl	80002cc <__adddf3>
 800828a:	460b      	mov	r3, r1
 800828c:	4981      	ldr	r1, [pc, #516]	; (8008494 <_strtod_l+0xbfc>)
 800828e:	4a83      	ldr	r2, [pc, #524]	; (800849c <_strtod_l+0xc04>)
 8008290:	4019      	ands	r1, r3
 8008292:	4291      	cmp	r1, r2
 8008294:	4682      	mov	sl, r0
 8008296:	d95e      	bls.n	8008356 <_strtod_l+0xabe>
 8008298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800829e:	4293      	cmp	r3, r2
 80082a0:	d103      	bne.n	80082aa <_strtod_l+0xa12>
 80082a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a4:	3301      	adds	r3, #1
 80082a6:	f43f ad43 	beq.w	8007d30 <_strtod_l+0x498>
 80082aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80084a8 <_strtod_l+0xc10>
 80082ae:	f04f 3aff 	mov.w	sl, #4294967295
 80082b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80082b4:	4620      	mov	r0, r4
 80082b6:	f001 feb9 	bl	800a02c <_Bfree>
 80082ba:	9907      	ldr	r1, [sp, #28]
 80082bc:	4620      	mov	r0, r4
 80082be:	f001 feb5 	bl	800a02c <_Bfree>
 80082c2:	4631      	mov	r1, r6
 80082c4:	4620      	mov	r0, r4
 80082c6:	f001 feb1 	bl	800a02c <_Bfree>
 80082ca:	4629      	mov	r1, r5
 80082cc:	4620      	mov	r0, r4
 80082ce:	f001 fead 	bl	800a02c <_Bfree>
 80082d2:	e613      	b.n	8007efc <_strtod_l+0x664>
 80082d4:	f1ba 0f00 	cmp.w	sl, #0
 80082d8:	d11b      	bne.n	8008312 <_strtod_l+0xa7a>
 80082da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082de:	b9f3      	cbnz	r3, 800831e <_strtod_l+0xa86>
 80082e0:	4b6b      	ldr	r3, [pc, #428]	; (8008490 <_strtod_l+0xbf8>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f8 fc18 	bl	8000b1c <__aeabi_dcmplt>
 80082ec:	b9d0      	cbnz	r0, 8008324 <_strtod_l+0xa8c>
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	4b6b      	ldr	r3, [pc, #428]	; (80084a0 <_strtod_l+0xc08>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	f7f8 f99f 	bl	8000638 <__aeabi_dmul>
 80082fa:	4680      	mov	r8, r0
 80082fc:	4689      	mov	r9, r1
 80082fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008302:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008306:	931b      	str	r3, [sp, #108]	; 0x6c
 8008308:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800830c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008310:	e79b      	b.n	800824a <_strtod_l+0x9b2>
 8008312:	f1ba 0f01 	cmp.w	sl, #1
 8008316:	d102      	bne.n	800831e <_strtod_l+0xa86>
 8008318:	2f00      	cmp	r7, #0
 800831a:	f43f ad7e 	beq.w	8007e1a <_strtod_l+0x582>
 800831e:	4b61      	ldr	r3, [pc, #388]	; (80084a4 <_strtod_l+0xc0c>)
 8008320:	2200      	movs	r2, #0
 8008322:	e78c      	b.n	800823e <_strtod_l+0x9a6>
 8008324:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80084a0 <_strtod_l+0xc08>
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	e7e7      	b.n	80082fe <_strtod_l+0xa66>
 800832e:	4b5c      	ldr	r3, [pc, #368]	; (80084a0 <_strtod_l+0xc08>)
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	2200      	movs	r2, #0
 8008336:	f7f8 f97f 	bl	8000638 <__aeabi_dmul>
 800833a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800833c:	4680      	mov	r8, r0
 800833e:	4689      	mov	r9, r1
 8008340:	b933      	cbnz	r3, 8008350 <_strtod_l+0xab8>
 8008342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008346:	9012      	str	r0, [sp, #72]	; 0x48
 8008348:	9313      	str	r3, [sp, #76]	; 0x4c
 800834a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800834e:	e7dd      	b.n	800830c <_strtod_l+0xa74>
 8008350:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008354:	e7f9      	b.n	800834a <_strtod_l+0xab2>
 8008356:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1a8      	bne.n	80082b2 <_strtod_l+0xa1a>
 8008360:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008364:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008366:	0d1b      	lsrs	r3, r3, #20
 8008368:	051b      	lsls	r3, r3, #20
 800836a:	429a      	cmp	r2, r3
 800836c:	d1a1      	bne.n	80082b2 <_strtod_l+0xa1a>
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f8 fcc1 	bl	8000cf8 <__aeabi_d2lz>
 8008376:	f7f8 f931 	bl	80005dc <__aeabi_l2d>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f7 ffa1 	bl	80002c8 <__aeabi_dsub>
 8008386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800838c:	ea43 030a 	orr.w	r3, r3, sl
 8008390:	4313      	orrs	r3, r2
 8008392:	4680      	mov	r8, r0
 8008394:	4689      	mov	r9, r1
 8008396:	d053      	beq.n	8008440 <_strtod_l+0xba8>
 8008398:	a335      	add	r3, pc, #212	; (adr r3, 8008470 <_strtod_l+0xbd8>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f7f8 fbbd 	bl	8000b1c <__aeabi_dcmplt>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f47f acce 	bne.w	8007d44 <_strtod_l+0x4ac>
 80083a8:	a333      	add	r3, pc, #204	; (adr r3, 8008478 <_strtod_l+0xbe0>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f8 fbd1 	bl	8000b58 <__aeabi_dcmpgt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f43f af7b 	beq.w	80082b2 <_strtod_l+0xa1a>
 80083bc:	e4c2      	b.n	8007d44 <_strtod_l+0x4ac>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	b333      	cbz	r3, 8008410 <_strtod_l+0xb78>
 80083c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083c8:	d822      	bhi.n	8008410 <_strtod_l+0xb78>
 80083ca:	a32d      	add	r3, pc, #180	; (adr r3, 8008480 <_strtod_l+0xbe8>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	f7f8 fbac 	bl	8000b30 <__aeabi_dcmple>
 80083d8:	b1a0      	cbz	r0, 8008404 <_strtod_l+0xb6c>
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	f7f8 fc03 	bl	8000be8 <__aeabi_d2uiz>
 80083e2:	2801      	cmp	r0, #1
 80083e4:	bf38      	it	cc
 80083e6:	2001      	movcc	r0, #1
 80083e8:	f7f8 f8ac 	bl	8000544 <__aeabi_ui2d>
 80083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	bb13      	cbnz	r3, 800843a <_strtod_l+0xba2>
 80083f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083f8:	9014      	str	r0, [sp, #80]	; 0x50
 80083fa:	9315      	str	r3, [sp, #84]	; 0x54
 80083fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008400:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008406:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008408:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	930d      	str	r3, [sp, #52]	; 0x34
 8008410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008414:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008418:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800841c:	f002 f932 	bl	800a684 <__ulp>
 8008420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008424:	ec53 2b10 	vmov	r2, r3, d0
 8008428:	f7f8 f906 	bl	8000638 <__aeabi_dmul>
 800842c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008430:	f7f7 ff4c 	bl	80002cc <__adddf3>
 8008434:	4682      	mov	sl, r0
 8008436:	468b      	mov	fp, r1
 8008438:	e78f      	b.n	800835a <_strtod_l+0xac2>
 800843a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800843e:	e7dd      	b.n	80083fc <_strtod_l+0xb64>
 8008440:	a311      	add	r3, pc, #68	; (adr r3, 8008488 <_strtod_l+0xbf0>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f8 fb69 	bl	8000b1c <__aeabi_dcmplt>
 800844a:	e7b4      	b.n	80083b6 <_strtod_l+0xb1e>
 800844c:	2300      	movs	r3, #0
 800844e:	930e      	str	r3, [sp, #56]	; 0x38
 8008450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008452:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	f7ff ba65 	b.w	8007924 <_strtod_l+0x8c>
 800845a:	2b65      	cmp	r3, #101	; 0x65
 800845c:	f43f ab5d 	beq.w	8007b1a <_strtod_l+0x282>
 8008460:	2b45      	cmp	r3, #69	; 0x45
 8008462:	f43f ab5a 	beq.w	8007b1a <_strtod_l+0x282>
 8008466:	2201      	movs	r2, #1
 8008468:	f7ff bb92 	b.w	8007b90 <_strtod_l+0x2f8>
 800846c:	f3af 8000 	nop.w
 8008470:	94a03595 	.word	0x94a03595
 8008474:	3fdfffff 	.word	0x3fdfffff
 8008478:	35afe535 	.word	0x35afe535
 800847c:	3fe00000 	.word	0x3fe00000
 8008480:	ffc00000 	.word	0xffc00000
 8008484:	41dfffff 	.word	0x41dfffff
 8008488:	94a03595 	.word	0x94a03595
 800848c:	3fcfffff 	.word	0x3fcfffff
 8008490:	3ff00000 	.word	0x3ff00000
 8008494:	7ff00000 	.word	0x7ff00000
 8008498:	7fe00000 	.word	0x7fe00000
 800849c:	7c9fffff 	.word	0x7c9fffff
 80084a0:	3fe00000 	.word	0x3fe00000
 80084a4:	bff00000 	.word	0xbff00000
 80084a8:	7fefffff 	.word	0x7fefffff

080084ac <_strtod_r>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	; (80084b4 <_strtod_r+0x8>)
 80084ae:	f7ff b9f3 	b.w	8007898 <_strtod_l>
 80084b2:	bf00      	nop
 80084b4:	200000f8 	.word	0x200000f8

080084b8 <_strtol_l.isra.0>:
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084be:	d001      	beq.n	80084c4 <_strtol_l.isra.0+0xc>
 80084c0:	2b24      	cmp	r3, #36	; 0x24
 80084c2:	d906      	bls.n	80084d2 <_strtol_l.isra.0+0x1a>
 80084c4:	f7fe fa84 	bl	80069d0 <__errno>
 80084c8:	2316      	movs	r3, #22
 80084ca:	6003      	str	r3, [r0, #0]
 80084cc:	2000      	movs	r0, #0
 80084ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d2:	4f3a      	ldr	r7, [pc, #232]	; (80085bc <_strtol_l.isra.0+0x104>)
 80084d4:	468e      	mov	lr, r1
 80084d6:	4676      	mov	r6, lr
 80084d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084dc:	5de5      	ldrb	r5, [r4, r7]
 80084de:	f015 0508 	ands.w	r5, r5, #8
 80084e2:	d1f8      	bne.n	80084d6 <_strtol_l.isra.0+0x1e>
 80084e4:	2c2d      	cmp	r4, #45	; 0x2d
 80084e6:	d134      	bne.n	8008552 <_strtol_l.isra.0+0x9a>
 80084e8:	f89e 4000 	ldrb.w	r4, [lr]
 80084ec:	f04f 0801 	mov.w	r8, #1
 80084f0:	f106 0e02 	add.w	lr, r6, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d05c      	beq.n	80085b2 <_strtol_l.isra.0+0xfa>
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d10c      	bne.n	8008516 <_strtol_l.isra.0+0x5e>
 80084fc:	2c30      	cmp	r4, #48	; 0x30
 80084fe:	d10a      	bne.n	8008516 <_strtol_l.isra.0+0x5e>
 8008500:	f89e 4000 	ldrb.w	r4, [lr]
 8008504:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008508:	2c58      	cmp	r4, #88	; 0x58
 800850a:	d14d      	bne.n	80085a8 <_strtol_l.isra.0+0xf0>
 800850c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008510:	2310      	movs	r3, #16
 8008512:	f10e 0e02 	add.w	lr, lr, #2
 8008516:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800851a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800851e:	2600      	movs	r6, #0
 8008520:	fbbc f9f3 	udiv	r9, ip, r3
 8008524:	4635      	mov	r5, r6
 8008526:	fb03 ca19 	mls	sl, r3, r9, ip
 800852a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800852e:	2f09      	cmp	r7, #9
 8008530:	d818      	bhi.n	8008564 <_strtol_l.isra.0+0xac>
 8008532:	463c      	mov	r4, r7
 8008534:	42a3      	cmp	r3, r4
 8008536:	dd24      	ble.n	8008582 <_strtol_l.isra.0+0xca>
 8008538:	2e00      	cmp	r6, #0
 800853a:	db1f      	blt.n	800857c <_strtol_l.isra.0+0xc4>
 800853c:	45a9      	cmp	r9, r5
 800853e:	d31d      	bcc.n	800857c <_strtol_l.isra.0+0xc4>
 8008540:	d101      	bne.n	8008546 <_strtol_l.isra.0+0x8e>
 8008542:	45a2      	cmp	sl, r4
 8008544:	db1a      	blt.n	800857c <_strtol_l.isra.0+0xc4>
 8008546:	fb05 4503 	mla	r5, r5, r3, r4
 800854a:	2601      	movs	r6, #1
 800854c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008550:	e7eb      	b.n	800852a <_strtol_l.isra.0+0x72>
 8008552:	2c2b      	cmp	r4, #43	; 0x2b
 8008554:	bf08      	it	eq
 8008556:	f89e 4000 	ldrbeq.w	r4, [lr]
 800855a:	46a8      	mov	r8, r5
 800855c:	bf08      	it	eq
 800855e:	f106 0e02 	addeq.w	lr, r6, #2
 8008562:	e7c7      	b.n	80084f4 <_strtol_l.isra.0+0x3c>
 8008564:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008568:	2f19      	cmp	r7, #25
 800856a:	d801      	bhi.n	8008570 <_strtol_l.isra.0+0xb8>
 800856c:	3c37      	subs	r4, #55	; 0x37
 800856e:	e7e1      	b.n	8008534 <_strtol_l.isra.0+0x7c>
 8008570:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008574:	2f19      	cmp	r7, #25
 8008576:	d804      	bhi.n	8008582 <_strtol_l.isra.0+0xca>
 8008578:	3c57      	subs	r4, #87	; 0x57
 800857a:	e7db      	b.n	8008534 <_strtol_l.isra.0+0x7c>
 800857c:	f04f 36ff 	mov.w	r6, #4294967295
 8008580:	e7e4      	b.n	800854c <_strtol_l.isra.0+0x94>
 8008582:	2e00      	cmp	r6, #0
 8008584:	da05      	bge.n	8008592 <_strtol_l.isra.0+0xda>
 8008586:	2322      	movs	r3, #34	; 0x22
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	4665      	mov	r5, ip
 800858c:	b942      	cbnz	r2, 80085a0 <_strtol_l.isra.0+0xe8>
 800858e:	4628      	mov	r0, r5
 8008590:	e79d      	b.n	80084ce <_strtol_l.isra.0+0x16>
 8008592:	f1b8 0f00 	cmp.w	r8, #0
 8008596:	d000      	beq.n	800859a <_strtol_l.isra.0+0xe2>
 8008598:	426d      	negs	r5, r5
 800859a:	2a00      	cmp	r2, #0
 800859c:	d0f7      	beq.n	800858e <_strtol_l.isra.0+0xd6>
 800859e:	b10e      	cbz	r6, 80085a4 <_strtol_l.isra.0+0xec>
 80085a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	e7f2      	b.n	800858e <_strtol_l.isra.0+0xd6>
 80085a8:	2430      	movs	r4, #48	; 0x30
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1b3      	bne.n	8008516 <_strtol_l.isra.0+0x5e>
 80085ae:	2308      	movs	r3, #8
 80085b0:	e7b1      	b.n	8008516 <_strtol_l.isra.0+0x5e>
 80085b2:	2c30      	cmp	r4, #48	; 0x30
 80085b4:	d0a4      	beq.n	8008500 <_strtol_l.isra.0+0x48>
 80085b6:	230a      	movs	r3, #10
 80085b8:	e7ad      	b.n	8008516 <_strtol_l.isra.0+0x5e>
 80085ba:	bf00      	nop
 80085bc:	0800b871 	.word	0x0800b871

080085c0 <_strtol_r>:
 80085c0:	f7ff bf7a 	b.w	80084b8 <_strtol_l.isra.0>

080085c4 <__swbuf_r>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	460e      	mov	r6, r1
 80085c8:	4614      	mov	r4, r2
 80085ca:	4605      	mov	r5, r0
 80085cc:	b118      	cbz	r0, 80085d6 <__swbuf_r+0x12>
 80085ce:	6983      	ldr	r3, [r0, #24]
 80085d0:	b90b      	cbnz	r3, 80085d6 <__swbuf_r+0x12>
 80085d2:	f001 f84b 	bl	800966c <__sinit>
 80085d6:	4b21      	ldr	r3, [pc, #132]	; (800865c <__swbuf_r+0x98>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	d12b      	bne.n	8008634 <__swbuf_r+0x70>
 80085dc:	686c      	ldr	r4, [r5, #4]
 80085de:	69a3      	ldr	r3, [r4, #24]
 80085e0:	60a3      	str	r3, [r4, #8]
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	071a      	lsls	r2, r3, #28
 80085e6:	d52f      	bpl.n	8008648 <__swbuf_r+0x84>
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	b36b      	cbz	r3, 8008648 <__swbuf_r+0x84>
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	1ac0      	subs	r0, r0, r3
 80085f2:	6963      	ldr	r3, [r4, #20]
 80085f4:	b2f6      	uxtb	r6, r6
 80085f6:	4283      	cmp	r3, r0
 80085f8:	4637      	mov	r7, r6
 80085fa:	dc04      	bgt.n	8008606 <__swbuf_r+0x42>
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 ffa0 	bl	8009544 <_fflush_r>
 8008604:	bb30      	cbnz	r0, 8008654 <__swbuf_r+0x90>
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	3b01      	subs	r3, #1
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	701e      	strb	r6, [r3, #0]
 8008614:	6963      	ldr	r3, [r4, #20]
 8008616:	3001      	adds	r0, #1
 8008618:	4283      	cmp	r3, r0
 800861a:	d004      	beq.n	8008626 <__swbuf_r+0x62>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	07db      	lsls	r3, r3, #31
 8008620:	d506      	bpl.n	8008630 <__swbuf_r+0x6c>
 8008622:	2e0a      	cmp	r6, #10
 8008624:	d104      	bne.n	8008630 <__swbuf_r+0x6c>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f000 ff8b 	bl	8009544 <_fflush_r>
 800862e:	b988      	cbnz	r0, 8008654 <__swbuf_r+0x90>
 8008630:	4638      	mov	r0, r7
 8008632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <__swbuf_r+0x9c>)
 8008636:	429c      	cmp	r4, r3
 8008638:	d101      	bne.n	800863e <__swbuf_r+0x7a>
 800863a:	68ac      	ldr	r4, [r5, #8]
 800863c:	e7cf      	b.n	80085de <__swbuf_r+0x1a>
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <__swbuf_r+0xa0>)
 8008640:	429c      	cmp	r4, r3
 8008642:	bf08      	it	eq
 8008644:	68ec      	ldreq	r4, [r5, #12]
 8008646:	e7ca      	b.n	80085de <__swbuf_r+0x1a>
 8008648:	4621      	mov	r1, r4
 800864a:	4628      	mov	r0, r5
 800864c:	f000 f80c 	bl	8008668 <__swsetup_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	d0cb      	beq.n	80085ec <__swbuf_r+0x28>
 8008654:	f04f 37ff 	mov.w	r7, #4294967295
 8008658:	e7ea      	b.n	8008630 <__swbuf_r+0x6c>
 800865a:	bf00      	nop
 800865c:	0800ba28 	.word	0x0800ba28
 8008660:	0800ba48 	.word	0x0800ba48
 8008664:	0800ba08 	.word	0x0800ba08

08008668 <__swsetup_r>:
 8008668:	4b32      	ldr	r3, [pc, #200]	; (8008734 <__swsetup_r+0xcc>)
 800866a:	b570      	push	{r4, r5, r6, lr}
 800866c:	681d      	ldr	r5, [r3, #0]
 800866e:	4606      	mov	r6, r0
 8008670:	460c      	mov	r4, r1
 8008672:	b125      	cbz	r5, 800867e <__swsetup_r+0x16>
 8008674:	69ab      	ldr	r3, [r5, #24]
 8008676:	b913      	cbnz	r3, 800867e <__swsetup_r+0x16>
 8008678:	4628      	mov	r0, r5
 800867a:	f000 fff7 	bl	800966c <__sinit>
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <__swsetup_r+0xd0>)
 8008680:	429c      	cmp	r4, r3
 8008682:	d10f      	bne.n	80086a4 <__swsetup_r+0x3c>
 8008684:	686c      	ldr	r4, [r5, #4]
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800868c:	0719      	lsls	r1, r3, #28
 800868e:	d42c      	bmi.n	80086ea <__swsetup_r+0x82>
 8008690:	06dd      	lsls	r5, r3, #27
 8008692:	d411      	bmi.n	80086b8 <__swsetup_r+0x50>
 8008694:	2309      	movs	r3, #9
 8008696:	6033      	str	r3, [r6, #0]
 8008698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	f04f 30ff 	mov.w	r0, #4294967295
 80086a2:	e03e      	b.n	8008722 <__swsetup_r+0xba>
 80086a4:	4b25      	ldr	r3, [pc, #148]	; (800873c <__swsetup_r+0xd4>)
 80086a6:	429c      	cmp	r4, r3
 80086a8:	d101      	bne.n	80086ae <__swsetup_r+0x46>
 80086aa:	68ac      	ldr	r4, [r5, #8]
 80086ac:	e7eb      	b.n	8008686 <__swsetup_r+0x1e>
 80086ae:	4b24      	ldr	r3, [pc, #144]	; (8008740 <__swsetup_r+0xd8>)
 80086b0:	429c      	cmp	r4, r3
 80086b2:	bf08      	it	eq
 80086b4:	68ec      	ldreq	r4, [r5, #12]
 80086b6:	e7e6      	b.n	8008686 <__swsetup_r+0x1e>
 80086b8:	0758      	lsls	r0, r3, #29
 80086ba:	d512      	bpl.n	80086e2 <__swsetup_r+0x7a>
 80086bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086be:	b141      	cbz	r1, 80086d2 <__swsetup_r+0x6a>
 80086c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086c4:	4299      	cmp	r1, r3
 80086c6:	d002      	beq.n	80086ce <__swsetup_r+0x66>
 80086c8:	4630      	mov	r0, r6
 80086ca:	f002 f939 	bl	800a940 <_free_r>
 80086ce:	2300      	movs	r3, #0
 80086d0:	6363      	str	r3, [r4, #52]	; 0x34
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	2300      	movs	r3, #0
 80086dc:	6063      	str	r3, [r4, #4]
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	f043 0308 	orr.w	r3, r3, #8
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	b94b      	cbnz	r3, 8008702 <__swsetup_r+0x9a>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f8:	d003      	beq.n	8008702 <__swsetup_r+0x9a>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4630      	mov	r0, r6
 80086fe:	f001 fbed 	bl	8009edc <__smakebuf_r>
 8008702:	89a0      	ldrh	r0, [r4, #12]
 8008704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008708:	f010 0301 	ands.w	r3, r0, #1
 800870c:	d00a      	beq.n	8008724 <__swsetup_r+0xbc>
 800870e:	2300      	movs	r3, #0
 8008710:	60a3      	str	r3, [r4, #8]
 8008712:	6963      	ldr	r3, [r4, #20]
 8008714:	425b      	negs	r3, r3
 8008716:	61a3      	str	r3, [r4, #24]
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	b943      	cbnz	r3, 800872e <__swsetup_r+0xc6>
 800871c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008720:	d1ba      	bne.n	8008698 <__swsetup_r+0x30>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	0781      	lsls	r1, r0, #30
 8008726:	bf58      	it	pl
 8008728:	6963      	ldrpl	r3, [r4, #20]
 800872a:	60a3      	str	r3, [r4, #8]
 800872c:	e7f4      	b.n	8008718 <__swsetup_r+0xb0>
 800872e:	2000      	movs	r0, #0
 8008730:	e7f7      	b.n	8008722 <__swsetup_r+0xba>
 8008732:	bf00      	nop
 8008734:	20000090 	.word	0x20000090
 8008738:	0800ba28 	.word	0x0800ba28
 800873c:	0800ba48 	.word	0x0800ba48
 8008740:	0800ba08 	.word	0x0800ba08

08008744 <quorem>:
 8008744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	6903      	ldr	r3, [r0, #16]
 800874a:	690c      	ldr	r4, [r1, #16]
 800874c:	42a3      	cmp	r3, r4
 800874e:	4607      	mov	r7, r0
 8008750:	f2c0 8081 	blt.w	8008856 <quorem+0x112>
 8008754:	3c01      	subs	r4, #1
 8008756:	f101 0814 	add.w	r8, r1, #20
 800875a:	f100 0514 	add.w	r5, r0, #20
 800875e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800876c:	3301      	adds	r3, #1
 800876e:	429a      	cmp	r2, r3
 8008770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008778:	fbb2 f6f3 	udiv	r6, r2, r3
 800877c:	d331      	bcc.n	80087e2 <quorem+0x9e>
 800877e:	f04f 0e00 	mov.w	lr, #0
 8008782:	4640      	mov	r0, r8
 8008784:	46ac      	mov	ip, r5
 8008786:	46f2      	mov	sl, lr
 8008788:	f850 2b04 	ldr.w	r2, [r0], #4
 800878c:	b293      	uxth	r3, r2
 800878e:	fb06 e303 	mla	r3, r6, r3, lr
 8008792:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008796:	b29b      	uxth	r3, r3
 8008798:	ebaa 0303 	sub.w	r3, sl, r3
 800879c:	0c12      	lsrs	r2, r2, #16
 800879e:	f8dc a000 	ldr.w	sl, [ip]
 80087a2:	fb06 e202 	mla	r2, r6, r2, lr
 80087a6:	fa13 f38a 	uxtah	r3, r3, sl
 80087aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087ae:	fa1f fa82 	uxth.w	sl, r2
 80087b2:	f8dc 2000 	ldr.w	r2, [ip]
 80087b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80087ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087be:	b29b      	uxth	r3, r3
 80087c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c4:	4581      	cmp	r9, r0
 80087c6:	f84c 3b04 	str.w	r3, [ip], #4
 80087ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087ce:	d2db      	bcs.n	8008788 <quorem+0x44>
 80087d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80087d4:	b92b      	cbnz	r3, 80087e2 <quorem+0x9e>
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	3b04      	subs	r3, #4
 80087da:	429d      	cmp	r5, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	d32e      	bcc.n	800883e <quorem+0xfa>
 80087e0:	613c      	str	r4, [r7, #16]
 80087e2:	4638      	mov	r0, r7
 80087e4:	f001 feaa 	bl	800a53c <__mcmp>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	db24      	blt.n	8008836 <quorem+0xf2>
 80087ec:	3601      	adds	r6, #1
 80087ee:	4628      	mov	r0, r5
 80087f0:	f04f 0c00 	mov.w	ip, #0
 80087f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087f8:	f8d0 e000 	ldr.w	lr, [r0]
 80087fc:	b293      	uxth	r3, r2
 80087fe:	ebac 0303 	sub.w	r3, ip, r3
 8008802:	0c12      	lsrs	r2, r2, #16
 8008804:	fa13 f38e 	uxtah	r3, r3, lr
 8008808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800880c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008810:	b29b      	uxth	r3, r3
 8008812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008816:	45c1      	cmp	r9, r8
 8008818:	f840 3b04 	str.w	r3, [r0], #4
 800881c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008820:	d2e8      	bcs.n	80087f4 <quorem+0xb0>
 8008822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800882a:	b922      	cbnz	r2, 8008836 <quorem+0xf2>
 800882c:	3b04      	subs	r3, #4
 800882e:	429d      	cmp	r5, r3
 8008830:	461a      	mov	r2, r3
 8008832:	d30a      	bcc.n	800884a <quorem+0x106>
 8008834:	613c      	str	r4, [r7, #16]
 8008836:	4630      	mov	r0, r6
 8008838:	b003      	add	sp, #12
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	3b04      	subs	r3, #4
 8008842:	2a00      	cmp	r2, #0
 8008844:	d1cc      	bne.n	80087e0 <quorem+0x9c>
 8008846:	3c01      	subs	r4, #1
 8008848:	e7c7      	b.n	80087da <quorem+0x96>
 800884a:	6812      	ldr	r2, [r2, #0]
 800884c:	3b04      	subs	r3, #4
 800884e:	2a00      	cmp	r2, #0
 8008850:	d1f0      	bne.n	8008834 <quorem+0xf0>
 8008852:	3c01      	subs	r4, #1
 8008854:	e7eb      	b.n	800882e <quorem+0xea>
 8008856:	2000      	movs	r0, #0
 8008858:	e7ee      	b.n	8008838 <quorem+0xf4>
 800885a:	0000      	movs	r0, r0
 800885c:	0000      	movs	r0, r0
	...

08008860 <_dtoa_r>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	ed2d 8b02 	vpush	{d8}
 8008868:	ec57 6b10 	vmov	r6, r7, d0
 800886c:	b095      	sub	sp, #84	; 0x54
 800886e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008870:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008874:	9105      	str	r1, [sp, #20]
 8008876:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800887a:	4604      	mov	r4, r0
 800887c:	9209      	str	r2, [sp, #36]	; 0x24
 800887e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008880:	b975      	cbnz	r5, 80088a0 <_dtoa_r+0x40>
 8008882:	2010      	movs	r0, #16
 8008884:	f001 fb6a 	bl	8009f5c <malloc>
 8008888:	4602      	mov	r2, r0
 800888a:	6260      	str	r0, [r4, #36]	; 0x24
 800888c:	b920      	cbnz	r0, 8008898 <_dtoa_r+0x38>
 800888e:	4bb2      	ldr	r3, [pc, #712]	; (8008b58 <_dtoa_r+0x2f8>)
 8008890:	21ea      	movs	r1, #234	; 0xea
 8008892:	48b2      	ldr	r0, [pc, #712]	; (8008b5c <_dtoa_r+0x2fc>)
 8008894:	f002 fae8 	bl	800ae68 <__assert_func>
 8008898:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800889c:	6005      	str	r5, [r0, #0]
 800889e:	60c5      	str	r5, [r0, #12]
 80088a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a2:	6819      	ldr	r1, [r3, #0]
 80088a4:	b151      	cbz	r1, 80088bc <_dtoa_r+0x5c>
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	604a      	str	r2, [r1, #4]
 80088aa:	2301      	movs	r3, #1
 80088ac:	4093      	lsls	r3, r2
 80088ae:	608b      	str	r3, [r1, #8]
 80088b0:	4620      	mov	r0, r4
 80088b2:	f001 fbbb 	bl	800a02c <_Bfree>
 80088b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	1e3b      	subs	r3, r7, #0
 80088be:	bfb9      	ittee	lt
 80088c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	9303      	strlt	r3, [sp, #12]
 80088c6:	2300      	movge	r3, #0
 80088c8:	f8c8 3000 	strge.w	r3, [r8]
 80088cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80088d0:	4ba3      	ldr	r3, [pc, #652]	; (8008b60 <_dtoa_r+0x300>)
 80088d2:	bfbc      	itt	lt
 80088d4:	2201      	movlt	r2, #1
 80088d6:	f8c8 2000 	strlt.w	r2, [r8]
 80088da:	ea33 0309 	bics.w	r3, r3, r9
 80088de:	d11b      	bne.n	8008918 <_dtoa_r+0xb8>
 80088e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088ec:	4333      	orrs	r3, r6
 80088ee:	f000 857a 	beq.w	80093e6 <_dtoa_r+0xb86>
 80088f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f4:	b963      	cbnz	r3, 8008910 <_dtoa_r+0xb0>
 80088f6:	4b9b      	ldr	r3, [pc, #620]	; (8008b64 <_dtoa_r+0x304>)
 80088f8:	e024      	b.n	8008944 <_dtoa_r+0xe4>
 80088fa:	4b9b      	ldr	r3, [pc, #620]	; (8008b68 <_dtoa_r+0x308>)
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	9800      	ldr	r0, [sp, #0]
 8008906:	b015      	add	sp, #84	; 0x54
 8008908:	ecbd 8b02 	vpop	{d8}
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	4b94      	ldr	r3, [pc, #592]	; (8008b64 <_dtoa_r+0x304>)
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	3303      	adds	r3, #3
 8008916:	e7f3      	b.n	8008900 <_dtoa_r+0xa0>
 8008918:	ed9d 7b02 	vldr	d7, [sp, #8]
 800891c:	2200      	movs	r2, #0
 800891e:	ec51 0b17 	vmov	r0, r1, d7
 8008922:	2300      	movs	r3, #0
 8008924:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008928:	f7f8 f8ee 	bl	8000b08 <__aeabi_dcmpeq>
 800892c:	4680      	mov	r8, r0
 800892e:	b158      	cbz	r0, 8008948 <_dtoa_r+0xe8>
 8008930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008932:	2301      	movs	r3, #1
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8551 	beq.w	80093e0 <_dtoa_r+0xb80>
 800893e:	488b      	ldr	r0, [pc, #556]	; (8008b6c <_dtoa_r+0x30c>)
 8008940:	6018      	str	r0, [r3, #0]
 8008942:	1e43      	subs	r3, r0, #1
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	e7dd      	b.n	8008904 <_dtoa_r+0xa4>
 8008948:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800894c:	aa12      	add	r2, sp, #72	; 0x48
 800894e:	a913      	add	r1, sp, #76	; 0x4c
 8008950:	4620      	mov	r0, r4
 8008952:	f001 ff13 	bl	800a77c <__d2b>
 8008956:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800895a:	4683      	mov	fp, r0
 800895c:	2d00      	cmp	r5, #0
 800895e:	d07c      	beq.n	8008a5a <_dtoa_r+0x1fa>
 8008960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008962:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800896a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800896e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008972:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800897a:	4b7d      	ldr	r3, [pc, #500]	; (8008b70 <_dtoa_r+0x310>)
 800897c:	2200      	movs	r2, #0
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f7 fca1 	bl	80002c8 <__aeabi_dsub>
 8008986:	a36e      	add	r3, pc, #440	; (adr r3, 8008b40 <_dtoa_r+0x2e0>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f7 fe54 	bl	8000638 <__aeabi_dmul>
 8008990:	a36d      	add	r3, pc, #436	; (adr r3, 8008b48 <_dtoa_r+0x2e8>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fc99 	bl	80002cc <__adddf3>
 800899a:	4606      	mov	r6, r0
 800899c:	4628      	mov	r0, r5
 800899e:	460f      	mov	r7, r1
 80089a0:	f7f7 fde0 	bl	8000564 <__aeabi_i2d>
 80089a4:	a36a      	add	r3, pc, #424	; (adr r3, 8008b50 <_dtoa_r+0x2f0>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fe45 	bl	8000638 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f7 fc89 	bl	80002cc <__adddf3>
 80089ba:	4606      	mov	r6, r0
 80089bc:	460f      	mov	r7, r1
 80089be:	f7f8 f8eb 	bl	8000b98 <__aeabi_d2iz>
 80089c2:	2200      	movs	r2, #0
 80089c4:	4682      	mov	sl, r0
 80089c6:	2300      	movs	r3, #0
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f8 f8a6 	bl	8000b1c <__aeabi_dcmplt>
 80089d0:	b148      	cbz	r0, 80089e6 <_dtoa_r+0x186>
 80089d2:	4650      	mov	r0, sl
 80089d4:	f7f7 fdc6 	bl	8000564 <__aeabi_i2d>
 80089d8:	4632      	mov	r2, r6
 80089da:	463b      	mov	r3, r7
 80089dc:	f7f8 f894 	bl	8000b08 <__aeabi_dcmpeq>
 80089e0:	b908      	cbnz	r0, 80089e6 <_dtoa_r+0x186>
 80089e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089e6:	f1ba 0f16 	cmp.w	sl, #22
 80089ea:	d854      	bhi.n	8008a96 <_dtoa_r+0x236>
 80089ec:	4b61      	ldr	r3, [pc, #388]	; (8008b74 <_dtoa_r+0x314>)
 80089ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089fa:	f7f8 f88f 	bl	8000b1c <__aeabi_dcmplt>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d04b      	beq.n	8008a9a <_dtoa_r+0x23a>
 8008a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a06:	2300      	movs	r3, #0
 8008a08:	930e      	str	r3, [sp, #56]	; 0x38
 8008a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a0c:	1b5d      	subs	r5, r3, r5
 8008a0e:	1e6b      	subs	r3, r5, #1
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	bf43      	ittte	mi
 8008a14:	2300      	movmi	r3, #0
 8008a16:	f1c5 0801 	rsbmi	r8, r5, #1
 8008a1a:	9304      	strmi	r3, [sp, #16]
 8008a1c:	f04f 0800 	movpl.w	r8, #0
 8008a20:	f1ba 0f00 	cmp.w	sl, #0
 8008a24:	db3b      	blt.n	8008a9e <_dtoa_r+0x23e>
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a2c:	4453      	add	r3, sl
 8008a2e:	9304      	str	r3, [sp, #16]
 8008a30:	2300      	movs	r3, #0
 8008a32:	9306      	str	r3, [sp, #24]
 8008a34:	9b05      	ldr	r3, [sp, #20]
 8008a36:	2b09      	cmp	r3, #9
 8008a38:	d869      	bhi.n	8008b0e <_dtoa_r+0x2ae>
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	bfc4      	itt	gt
 8008a3e:	3b04      	subgt	r3, #4
 8008a40:	9305      	strgt	r3, [sp, #20]
 8008a42:	9b05      	ldr	r3, [sp, #20]
 8008a44:	f1a3 0302 	sub.w	r3, r3, #2
 8008a48:	bfcc      	ite	gt
 8008a4a:	2500      	movgt	r5, #0
 8008a4c:	2501      	movle	r5, #1
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d869      	bhi.n	8008b26 <_dtoa_r+0x2c6>
 8008a52:	e8df f003 	tbb	[pc, r3]
 8008a56:	4e2c      	.short	0x4e2c
 8008a58:	5a4c      	.short	0x5a4c
 8008a5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a5e:	441d      	add	r5, r3
 8008a60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	bfc1      	itttt	gt
 8008a68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a70:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a78:	bfda      	itte	le
 8008a7a:	f1c3 0320 	rsble	r3, r3, #32
 8008a7e:	fa06 f003 	lslle.w	r0, r6, r3
 8008a82:	4318      	orrgt	r0, r3
 8008a84:	f7f7 fd5e 	bl	8000544 <__aeabi_ui2d>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a90:	3d01      	subs	r5, #1
 8008a92:	9310      	str	r3, [sp, #64]	; 0x40
 8008a94:	e771      	b.n	800897a <_dtoa_r+0x11a>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7b6      	b.n	8008a08 <_dtoa_r+0x1a8>
 8008a9a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a9c:	e7b5      	b.n	8008a0a <_dtoa_r+0x1aa>
 8008a9e:	f1ca 0300 	rsb	r3, sl, #0
 8008aa2:	9306      	str	r3, [sp, #24]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	eba8 080a 	sub.w	r8, r8, sl
 8008aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8008aac:	e7c2      	b.n	8008a34 <_dtoa_r+0x1d4>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9308      	str	r3, [sp, #32]
 8008ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dc39      	bgt.n	8008b2c <_dtoa_r+0x2cc>
 8008ab8:	f04f 0901 	mov.w	r9, #1
 8008abc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ac6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	6042      	str	r2, [r0, #4]
 8008acc:	2204      	movs	r2, #4
 8008ace:	f102 0614 	add.w	r6, r2, #20
 8008ad2:	429e      	cmp	r6, r3
 8008ad4:	6841      	ldr	r1, [r0, #4]
 8008ad6:	d92f      	bls.n	8008b38 <_dtoa_r+0x2d8>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f001 fa67 	bl	8009fac <_Balloc>
 8008ade:	9000      	str	r0, [sp, #0]
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d14b      	bne.n	8008b7c <_dtoa_r+0x31c>
 8008ae4:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <_dtoa_r+0x318>)
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008aec:	e6d1      	b.n	8008892 <_dtoa_r+0x32>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e7de      	b.n	8008ab0 <_dtoa_r+0x250>
 8008af2:	2300      	movs	r3, #0
 8008af4:	9308      	str	r3, [sp, #32]
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	eb0a 0903 	add.w	r9, sl, r3
 8008afc:	f109 0301 	add.w	r3, r9, #1
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	bfb8      	it	lt
 8008b06:	2301      	movlt	r3, #1
 8008b08:	e7dd      	b.n	8008ac6 <_dtoa_r+0x266>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e7f2      	b.n	8008af4 <_dtoa_r+0x294>
 8008b0e:	2501      	movs	r5, #1
 8008b10:	2300      	movs	r3, #0
 8008b12:	9305      	str	r3, [sp, #20]
 8008b14:	9508      	str	r5, [sp, #32]
 8008b16:	f04f 39ff 	mov.w	r9, #4294967295
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b20:	2312      	movs	r3, #18
 8008b22:	9209      	str	r2, [sp, #36]	; 0x24
 8008b24:	e7cf      	b.n	8008ac6 <_dtoa_r+0x266>
 8008b26:	2301      	movs	r3, #1
 8008b28:	9308      	str	r3, [sp, #32]
 8008b2a:	e7f4      	b.n	8008b16 <_dtoa_r+0x2b6>
 8008b2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b30:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b34:	464b      	mov	r3, r9
 8008b36:	e7c6      	b.n	8008ac6 <_dtoa_r+0x266>
 8008b38:	3101      	adds	r1, #1
 8008b3a:	6041      	str	r1, [r0, #4]
 8008b3c:	0052      	lsls	r2, r2, #1
 8008b3e:	e7c6      	b.n	8008ace <_dtoa_r+0x26e>
 8008b40:	636f4361 	.word	0x636f4361
 8008b44:	3fd287a7 	.word	0x3fd287a7
 8008b48:	8b60c8b3 	.word	0x8b60c8b3
 8008b4c:	3fc68a28 	.word	0x3fc68a28
 8008b50:	509f79fb 	.word	0x509f79fb
 8008b54:	3fd34413 	.word	0x3fd34413
 8008b58:	0800b97e 	.word	0x0800b97e
 8008b5c:	0800b995 	.word	0x0800b995
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	0800b97a 	.word	0x0800b97a
 8008b68:	0800b971 	.word	0x0800b971
 8008b6c:	0800b7f5 	.word	0x0800b7f5
 8008b70:	3ff80000 	.word	0x3ff80000
 8008b74:	0800bb70 	.word	0x0800bb70
 8008b78:	0800b9f4 	.word	0x0800b9f4
 8008b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7e:	9a00      	ldr	r2, [sp, #0]
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	2b0e      	cmp	r3, #14
 8008b86:	f200 80ad 	bhi.w	8008ce4 <_dtoa_r+0x484>
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	f000 80aa 	beq.w	8008ce4 <_dtoa_r+0x484>
 8008b90:	f1ba 0f00 	cmp.w	sl, #0
 8008b94:	dd36      	ble.n	8008c04 <_dtoa_r+0x3a4>
 8008b96:	4ac3      	ldr	r2, [pc, #780]	; (8008ea4 <_dtoa_r+0x644>)
 8008b98:	f00a 030f 	and.w	r3, sl, #15
 8008b9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ba0:	ed93 7b00 	vldr	d7, [r3]
 8008ba4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008ba8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008bac:	eeb0 8a47 	vmov.f32	s16, s14
 8008bb0:	eef0 8a67 	vmov.f32	s17, s15
 8008bb4:	d016      	beq.n	8008be4 <_dtoa_r+0x384>
 8008bb6:	4bbc      	ldr	r3, [pc, #752]	; (8008ea8 <_dtoa_r+0x648>)
 8008bb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bc0:	f7f7 fe64 	bl	800088c <__aeabi_ddiv>
 8008bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc8:	f007 070f 	and.w	r7, r7, #15
 8008bcc:	2503      	movs	r5, #3
 8008bce:	4eb6      	ldr	r6, [pc, #728]	; (8008ea8 <_dtoa_r+0x648>)
 8008bd0:	b957      	cbnz	r7, 8008be8 <_dtoa_r+0x388>
 8008bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd6:	ec53 2b18 	vmov	r2, r3, d8
 8008bda:	f7f7 fe57 	bl	800088c <__aeabi_ddiv>
 8008bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be2:	e029      	b.n	8008c38 <_dtoa_r+0x3d8>
 8008be4:	2502      	movs	r5, #2
 8008be6:	e7f2      	b.n	8008bce <_dtoa_r+0x36e>
 8008be8:	07f9      	lsls	r1, r7, #31
 8008bea:	d508      	bpl.n	8008bfe <_dtoa_r+0x39e>
 8008bec:	ec51 0b18 	vmov	r0, r1, d8
 8008bf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bf4:	f7f7 fd20 	bl	8000638 <__aeabi_dmul>
 8008bf8:	ec41 0b18 	vmov	d8, r0, r1
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	107f      	asrs	r7, r7, #1
 8008c00:	3608      	adds	r6, #8
 8008c02:	e7e5      	b.n	8008bd0 <_dtoa_r+0x370>
 8008c04:	f000 80a6 	beq.w	8008d54 <_dtoa_r+0x4f4>
 8008c08:	f1ca 0600 	rsb	r6, sl, #0
 8008c0c:	4ba5      	ldr	r3, [pc, #660]	; (8008ea4 <_dtoa_r+0x644>)
 8008c0e:	4fa6      	ldr	r7, [pc, #664]	; (8008ea8 <_dtoa_r+0x648>)
 8008c10:	f006 020f 	and.w	r2, r6, #15
 8008c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c20:	f7f7 fd0a 	bl	8000638 <__aeabi_dmul>
 8008c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c28:	1136      	asrs	r6, r6, #4
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2502      	movs	r5, #2
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	f040 8085 	bne.w	8008d3e <_dtoa_r+0x4de>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1d2      	bne.n	8008bde <_dtoa_r+0x37e>
 8008c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 808c 	beq.w	8008d58 <_dtoa_r+0x4f8>
 8008c40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c44:	4b99      	ldr	r3, [pc, #612]	; (8008eac <_dtoa_r+0x64c>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 ff66 	bl	8000b1c <__aeabi_dcmplt>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f000 8081 	beq.w	8008d58 <_dtoa_r+0x4f8>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d07d      	beq.n	8008d58 <_dtoa_r+0x4f8>
 8008c5c:	f1b9 0f00 	cmp.w	r9, #0
 8008c60:	dd3c      	ble.n	8008cdc <_dtoa_r+0x47c>
 8008c62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c66:	9307      	str	r3, [sp, #28]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	4b91      	ldr	r3, [pc, #580]	; (8008eb0 <_dtoa_r+0x650>)
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 fce2 	bl	8000638 <__aeabi_dmul>
 8008c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c78:	3501      	adds	r5, #1
 8008c7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7f7 fc6e 	bl	8000564 <__aeabi_i2d>
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	f7f7 fcd4 	bl	8000638 <__aeabi_dmul>
 8008c90:	4b88      	ldr	r3, [pc, #544]	; (8008eb4 <_dtoa_r+0x654>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	f7f7 fb1a 	bl	80002cc <__adddf3>
 8008c98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d15c      	bne.n	8008d62 <_dtoa_r+0x502>
 8008ca8:	4b83      	ldr	r3, [pc, #524]	; (8008eb8 <_dtoa_r+0x658>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 fb0a 	bl	80002c8 <__aeabi_dsub>
 8008cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	f7f7 ff4c 	bl	8000b58 <__aeabi_dcmpgt>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f040 8296 	bne.w	80091f2 <_dtoa_r+0x992>
 8008cc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 ff23 	bl	8000b1c <__aeabi_dcmplt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f040 8288 	bne.w	80091ec <_dtoa_r+0x98c>
 8008cdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ce0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ce4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f2c0 8158 	blt.w	8008f9c <_dtoa_r+0x73c>
 8008cec:	f1ba 0f0e 	cmp.w	sl, #14
 8008cf0:	f300 8154 	bgt.w	8008f9c <_dtoa_r+0x73c>
 8008cf4:	4b6b      	ldr	r3, [pc, #428]	; (8008ea4 <_dtoa_r+0x644>)
 8008cf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f280 80e3 	bge.w	8008ecc <_dtoa_r+0x66c>
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f300 80df 	bgt.w	8008ecc <_dtoa_r+0x66c>
 8008d0e:	f040 826d 	bne.w	80091ec <_dtoa_r+0x98c>
 8008d12:	4b69      	ldr	r3, [pc, #420]	; (8008eb8 <_dtoa_r+0x658>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	4640      	mov	r0, r8
 8008d18:	4649      	mov	r1, r9
 8008d1a:	f7f7 fc8d 	bl	8000638 <__aeabi_dmul>
 8008d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d22:	f7f7 ff0f 	bl	8000b44 <__aeabi_dcmpge>
 8008d26:	9e01      	ldr	r6, [sp, #4]
 8008d28:	4637      	mov	r7, r6
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	f040 8243 	bne.w	80091b6 <_dtoa_r+0x956>
 8008d30:	9d00      	ldr	r5, [sp, #0]
 8008d32:	2331      	movs	r3, #49	; 0x31
 8008d34:	f805 3b01 	strb.w	r3, [r5], #1
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	e23f      	b.n	80091be <_dtoa_r+0x95e>
 8008d3e:	07f2      	lsls	r2, r6, #31
 8008d40:	d505      	bpl.n	8008d4e <_dtoa_r+0x4ee>
 8008d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d46:	f7f7 fc77 	bl	8000638 <__aeabi_dmul>
 8008d4a:	3501      	adds	r5, #1
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	1076      	asrs	r6, r6, #1
 8008d50:	3708      	adds	r7, #8
 8008d52:	e76c      	b.n	8008c2e <_dtoa_r+0x3ce>
 8008d54:	2502      	movs	r5, #2
 8008d56:	e76f      	b.n	8008c38 <_dtoa_r+0x3d8>
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d60:	e78d      	b.n	8008c7e <_dtoa_r+0x41e>
 8008d62:	9900      	ldr	r1, [sp, #0]
 8008d64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d68:	4b4e      	ldr	r3, [pc, #312]	; (8008ea4 <_dtoa_r+0x644>)
 8008d6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d6e:	4401      	add	r1, r0
 8008d70:	9102      	str	r1, [sp, #8]
 8008d72:	9908      	ldr	r1, [sp, #32]
 8008d74:	eeb0 8a47 	vmov.f32	s16, s14
 8008d78:	eef0 8a67 	vmov.f32	s17, s15
 8008d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d045      	beq.n	8008e14 <_dtoa_r+0x5b4>
 8008d88:	494c      	ldr	r1, [pc, #304]	; (8008ebc <_dtoa_r+0x65c>)
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f7f7 fd7e 	bl	800088c <__aeabi_ddiv>
 8008d90:	ec53 2b18 	vmov	r2, r3, d8
 8008d94:	f7f7 fa98 	bl	80002c8 <__aeabi_dsub>
 8008d98:	9d00      	ldr	r5, [sp, #0]
 8008d9a:	ec41 0b18 	vmov	d8, r0, r1
 8008d9e:	4639      	mov	r1, r7
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7f7 fef9 	bl	8000b98 <__aeabi_d2iz>
 8008da6:	900c      	str	r0, [sp, #48]	; 0x30
 8008da8:	f7f7 fbdc 	bl	8000564 <__aeabi_i2d>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4630      	mov	r0, r6
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fa88 	bl	80002c8 <__aeabi_dsub>
 8008db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dba:	3330      	adds	r3, #48	; 0x30
 8008dbc:	f805 3b01 	strb.w	r3, [r5], #1
 8008dc0:	ec53 2b18 	vmov	r2, r3, d8
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	f7f7 fea8 	bl	8000b1c <__aeabi_dcmplt>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d165      	bne.n	8008e9c <_dtoa_r+0x63c>
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	4935      	ldr	r1, [pc, #212]	; (8008eac <_dtoa_r+0x64c>)
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	f7f7 fa76 	bl	80002c8 <__aeabi_dsub>
 8008ddc:	ec53 2b18 	vmov	r2, r3, d8
 8008de0:	f7f7 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	f040 80b9 	bne.w	8008f5c <_dtoa_r+0x6fc>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	429d      	cmp	r5, r3
 8008dee:	f43f af75 	beq.w	8008cdc <_dtoa_r+0x47c>
 8008df2:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <_dtoa_r+0x650>)
 8008df4:	ec51 0b18 	vmov	r0, r1, d8
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f7f7 fc1d 	bl	8000638 <__aeabi_dmul>
 8008dfe:	4b2c      	ldr	r3, [pc, #176]	; (8008eb0 <_dtoa_r+0x650>)
 8008e00:	ec41 0b18 	vmov	d8, r0, r1
 8008e04:	2200      	movs	r2, #0
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 fc15 	bl	8000638 <__aeabi_dmul>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	e7c4      	b.n	8008d9e <_dtoa_r+0x53e>
 8008e14:	ec51 0b17 	vmov	r0, r1, d7
 8008e18:	f7f7 fc0e 	bl	8000638 <__aeabi_dmul>
 8008e1c:	9b02      	ldr	r3, [sp, #8]
 8008e1e:	9d00      	ldr	r5, [sp, #0]
 8008e20:	930c      	str	r3, [sp, #48]	; 0x30
 8008e22:	ec41 0b18 	vmov	d8, r0, r1
 8008e26:	4639      	mov	r1, r7
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7f7 feb5 	bl	8000b98 <__aeabi_d2iz>
 8008e2e:	9011      	str	r0, [sp, #68]	; 0x44
 8008e30:	f7f7 fb98 	bl	8000564 <__aeabi_i2d>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4630      	mov	r0, r6
 8008e3a:	4639      	mov	r1, r7
 8008e3c:	f7f7 fa44 	bl	80002c8 <__aeabi_dsub>
 8008e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e42:	3330      	adds	r3, #48	; 0x30
 8008e44:	f805 3b01 	strb.w	r3, [r5], #1
 8008e48:	9b02      	ldr	r3, [sp, #8]
 8008e4a:	429d      	cmp	r5, r3
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	460f      	mov	r7, r1
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	d134      	bne.n	8008ec0 <_dtoa_r+0x660>
 8008e56:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <_dtoa_r+0x65c>)
 8008e58:	ec51 0b18 	vmov	r0, r1, d8
 8008e5c:	f7f7 fa36 	bl	80002cc <__adddf3>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4630      	mov	r0, r6
 8008e66:	4639      	mov	r1, r7
 8008e68:	f7f7 fe76 	bl	8000b58 <__aeabi_dcmpgt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d175      	bne.n	8008f5c <_dtoa_r+0x6fc>
 8008e70:	ec53 2b18 	vmov	r2, r3, d8
 8008e74:	4911      	ldr	r1, [pc, #68]	; (8008ebc <_dtoa_r+0x65c>)
 8008e76:	2000      	movs	r0, #0
 8008e78:	f7f7 fa26 	bl	80002c8 <__aeabi_dsub>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fe4a 	bl	8000b1c <__aeabi_dcmplt>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f43f af27 	beq.w	8008cdc <_dtoa_r+0x47c>
 8008e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e90:	1e6b      	subs	r3, r5, #1
 8008e92:	930c      	str	r3, [sp, #48]	; 0x30
 8008e94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e98:	2b30      	cmp	r3, #48	; 0x30
 8008e9a:	d0f8      	beq.n	8008e8e <_dtoa_r+0x62e>
 8008e9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ea0:	e04a      	b.n	8008f38 <_dtoa_r+0x6d8>
 8008ea2:	bf00      	nop
 8008ea4:	0800bb70 	.word	0x0800bb70
 8008ea8:	0800bb48 	.word	0x0800bb48
 8008eac:	3ff00000 	.word	0x3ff00000
 8008eb0:	40240000 	.word	0x40240000
 8008eb4:	401c0000 	.word	0x401c0000
 8008eb8:	40140000 	.word	0x40140000
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	4baf      	ldr	r3, [pc, #700]	; (8009180 <_dtoa_r+0x920>)
 8008ec2:	f7f7 fbb9 	bl	8000638 <__aeabi_dmul>
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	460f      	mov	r7, r1
 8008eca:	e7ac      	b.n	8008e26 <_dtoa_r+0x5c6>
 8008ecc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ed0:	9d00      	ldr	r5, [sp, #0]
 8008ed2:	4642      	mov	r2, r8
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	f7f7 fcd7 	bl	800088c <__aeabi_ddiv>
 8008ede:	f7f7 fe5b 	bl	8000b98 <__aeabi_d2iz>
 8008ee2:	9002      	str	r0, [sp, #8]
 8008ee4:	f7f7 fb3e 	bl	8000564 <__aeabi_i2d>
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	f7f7 fba4 	bl	8000638 <__aeabi_dmul>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f7f7 f9e6 	bl	80002c8 <__aeabi_dsub>
 8008efc:	9e02      	ldr	r6, [sp, #8]
 8008efe:	9f01      	ldr	r7, [sp, #4]
 8008f00:	3630      	adds	r6, #48	; 0x30
 8008f02:	f805 6b01 	strb.w	r6, [r5], #1
 8008f06:	9e00      	ldr	r6, [sp, #0]
 8008f08:	1bae      	subs	r6, r5, r6
 8008f0a:	42b7      	cmp	r7, r6
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	d137      	bne.n	8008f82 <_dtoa_r+0x722>
 8008f12:	f7f7 f9db 	bl	80002cc <__adddf3>
 8008f16:	4642      	mov	r2, r8
 8008f18:	464b      	mov	r3, r9
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	460f      	mov	r7, r1
 8008f1e:	f7f7 fe1b 	bl	8000b58 <__aeabi_dcmpgt>
 8008f22:	b9c8      	cbnz	r0, 8008f58 <_dtoa_r+0x6f8>
 8008f24:	4642      	mov	r2, r8
 8008f26:	464b      	mov	r3, r9
 8008f28:	4630      	mov	r0, r6
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f7f7 fdec 	bl	8000b08 <__aeabi_dcmpeq>
 8008f30:	b110      	cbz	r0, 8008f38 <_dtoa_r+0x6d8>
 8008f32:	9b02      	ldr	r3, [sp, #8]
 8008f34:	07d9      	lsls	r1, r3, #31
 8008f36:	d40f      	bmi.n	8008f58 <_dtoa_r+0x6f8>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f001 f876 	bl	800a02c <_Bfree>
 8008f40:	2300      	movs	r3, #0
 8008f42:	702b      	strb	r3, [r5, #0]
 8008f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f46:	f10a 0001 	add.w	r0, sl, #1
 8008f4a:	6018      	str	r0, [r3, #0]
 8008f4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f43f acd8 	beq.w	8008904 <_dtoa_r+0xa4>
 8008f54:	601d      	str	r5, [r3, #0]
 8008f56:	e4d5      	b.n	8008904 <_dtoa_r+0xa4>
 8008f58:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	461d      	mov	r5, r3
 8008f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f64:	2a39      	cmp	r2, #57	; 0x39
 8008f66:	d108      	bne.n	8008f7a <_dtoa_r+0x71a>
 8008f68:	9a00      	ldr	r2, [sp, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d1f7      	bne.n	8008f5e <_dtoa_r+0x6fe>
 8008f6e:	9a07      	ldr	r2, [sp, #28]
 8008f70:	9900      	ldr	r1, [sp, #0]
 8008f72:	3201      	adds	r2, #1
 8008f74:	9207      	str	r2, [sp, #28]
 8008f76:	2230      	movs	r2, #48	; 0x30
 8008f78:	700a      	strb	r2, [r1, #0]
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	3201      	adds	r2, #1
 8008f7e:	701a      	strb	r2, [r3, #0]
 8008f80:	e78c      	b.n	8008e9c <_dtoa_r+0x63c>
 8008f82:	4b7f      	ldr	r3, [pc, #508]	; (8009180 <_dtoa_r+0x920>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	f7f7 fb57 	bl	8000638 <__aeabi_dmul>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	f7f7 fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d09b      	beq.n	8008ed2 <_dtoa_r+0x672>
 8008f9a:	e7cd      	b.n	8008f38 <_dtoa_r+0x6d8>
 8008f9c:	9a08      	ldr	r2, [sp, #32]
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	f000 80c4 	beq.w	800912c <_dtoa_r+0x8cc>
 8008fa4:	9a05      	ldr	r2, [sp, #20]
 8008fa6:	2a01      	cmp	r2, #1
 8008fa8:	f300 80a8 	bgt.w	80090fc <_dtoa_r+0x89c>
 8008fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fae:	2a00      	cmp	r2, #0
 8008fb0:	f000 80a0 	beq.w	80090f4 <_dtoa_r+0x894>
 8008fb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fb8:	9e06      	ldr	r6, [sp, #24]
 8008fba:	4645      	mov	r5, r8
 8008fbc:	9a04      	ldr	r2, [sp, #16]
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	441a      	add	r2, r3
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	4498      	add	r8, r3
 8008fc6:	9204      	str	r2, [sp, #16]
 8008fc8:	f001 f936 	bl	800a238 <__i2b>
 8008fcc:	4607      	mov	r7, r0
 8008fce:	2d00      	cmp	r5, #0
 8008fd0:	dd0b      	ble.n	8008fea <_dtoa_r+0x78a>
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	dd08      	ble.n	8008fea <_dtoa_r+0x78a>
 8008fd8:	42ab      	cmp	r3, r5
 8008fda:	9a04      	ldr	r2, [sp, #16]
 8008fdc:	bfa8      	it	ge
 8008fde:	462b      	movge	r3, r5
 8008fe0:	eba8 0803 	sub.w	r8, r8, r3
 8008fe4:	1aed      	subs	r5, r5, r3
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	9b06      	ldr	r3, [sp, #24]
 8008fec:	b1fb      	cbz	r3, 800902e <_dtoa_r+0x7ce>
 8008fee:	9b08      	ldr	r3, [sp, #32]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 809f 	beq.w	8009134 <_dtoa_r+0x8d4>
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	dd11      	ble.n	800901e <_dtoa_r+0x7be>
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	4620      	mov	r0, r4
 8009000:	f001 f9d6 	bl	800a3b0 <__pow5mult>
 8009004:	465a      	mov	r2, fp
 8009006:	4601      	mov	r1, r0
 8009008:	4607      	mov	r7, r0
 800900a:	4620      	mov	r0, r4
 800900c:	f001 f92a 	bl	800a264 <__multiply>
 8009010:	4659      	mov	r1, fp
 8009012:	9007      	str	r0, [sp, #28]
 8009014:	4620      	mov	r0, r4
 8009016:	f001 f809 	bl	800a02c <_Bfree>
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	469b      	mov	fp, r3
 800901e:	9b06      	ldr	r3, [sp, #24]
 8009020:	1b9a      	subs	r2, r3, r6
 8009022:	d004      	beq.n	800902e <_dtoa_r+0x7ce>
 8009024:	4659      	mov	r1, fp
 8009026:	4620      	mov	r0, r4
 8009028:	f001 f9c2 	bl	800a3b0 <__pow5mult>
 800902c:	4683      	mov	fp, r0
 800902e:	2101      	movs	r1, #1
 8009030:	4620      	mov	r0, r4
 8009032:	f001 f901 	bl	800a238 <__i2b>
 8009036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009038:	2b00      	cmp	r3, #0
 800903a:	4606      	mov	r6, r0
 800903c:	dd7c      	ble.n	8009138 <_dtoa_r+0x8d8>
 800903e:	461a      	mov	r2, r3
 8009040:	4601      	mov	r1, r0
 8009042:	4620      	mov	r0, r4
 8009044:	f001 f9b4 	bl	800a3b0 <__pow5mult>
 8009048:	9b05      	ldr	r3, [sp, #20]
 800904a:	2b01      	cmp	r3, #1
 800904c:	4606      	mov	r6, r0
 800904e:	dd76      	ble.n	800913e <_dtoa_r+0x8de>
 8009050:	2300      	movs	r3, #0
 8009052:	9306      	str	r3, [sp, #24]
 8009054:	6933      	ldr	r3, [r6, #16]
 8009056:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800905a:	6918      	ldr	r0, [r3, #16]
 800905c:	f001 f89c 	bl	800a198 <__hi0bits>
 8009060:	f1c0 0020 	rsb	r0, r0, #32
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	4418      	add	r0, r3
 8009068:	f010 001f 	ands.w	r0, r0, #31
 800906c:	f000 8086 	beq.w	800917c <_dtoa_r+0x91c>
 8009070:	f1c0 0320 	rsb	r3, r0, #32
 8009074:	2b04      	cmp	r3, #4
 8009076:	dd7f      	ble.n	8009178 <_dtoa_r+0x918>
 8009078:	f1c0 001c 	rsb	r0, r0, #28
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	4403      	add	r3, r0
 8009080:	4480      	add	r8, r0
 8009082:	4405      	add	r5, r0
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	f1b8 0f00 	cmp.w	r8, #0
 800908a:	dd05      	ble.n	8009098 <_dtoa_r+0x838>
 800908c:	4659      	mov	r1, fp
 800908e:	4642      	mov	r2, r8
 8009090:	4620      	mov	r0, r4
 8009092:	f001 f9e7 	bl	800a464 <__lshift>
 8009096:	4683      	mov	fp, r0
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	dd05      	ble.n	80090aa <_dtoa_r+0x84a>
 800909e:	4631      	mov	r1, r6
 80090a0:	461a      	mov	r2, r3
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 f9de 	bl	800a464 <__lshift>
 80090a8:	4606      	mov	r6, r0
 80090aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d069      	beq.n	8009184 <_dtoa_r+0x924>
 80090b0:	4631      	mov	r1, r6
 80090b2:	4658      	mov	r0, fp
 80090b4:	f001 fa42 	bl	800a53c <__mcmp>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	da63      	bge.n	8009184 <_dtoa_r+0x924>
 80090bc:	2300      	movs	r3, #0
 80090be:	4659      	mov	r1, fp
 80090c0:	220a      	movs	r2, #10
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 ffd4 	bl	800a070 <__multadd>
 80090c8:	9b08      	ldr	r3, [sp, #32]
 80090ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ce:	4683      	mov	fp, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 818f 	beq.w	80093f4 <_dtoa_r+0xb94>
 80090d6:	4639      	mov	r1, r7
 80090d8:	2300      	movs	r3, #0
 80090da:	220a      	movs	r2, #10
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 ffc7 	bl	800a070 <__multadd>
 80090e2:	f1b9 0f00 	cmp.w	r9, #0
 80090e6:	4607      	mov	r7, r0
 80090e8:	f300 808e 	bgt.w	8009208 <_dtoa_r+0x9a8>
 80090ec:	9b05      	ldr	r3, [sp, #20]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	dc50      	bgt.n	8009194 <_dtoa_r+0x934>
 80090f2:	e089      	b.n	8009208 <_dtoa_r+0x9a8>
 80090f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090fa:	e75d      	b.n	8008fb8 <_dtoa_r+0x758>
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	1e5e      	subs	r6, r3, #1
 8009100:	9b06      	ldr	r3, [sp, #24]
 8009102:	42b3      	cmp	r3, r6
 8009104:	bfbf      	itttt	lt
 8009106:	9b06      	ldrlt	r3, [sp, #24]
 8009108:	9606      	strlt	r6, [sp, #24]
 800910a:	1af2      	sublt	r2, r6, r3
 800910c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800910e:	bfb6      	itet	lt
 8009110:	189b      	addlt	r3, r3, r2
 8009112:	1b9e      	subge	r6, r3, r6
 8009114:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	bfb8      	it	lt
 800911a:	2600      	movlt	r6, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	bfb5      	itete	lt
 8009120:	eba8 0503 	sublt.w	r5, r8, r3
 8009124:	9b01      	ldrge	r3, [sp, #4]
 8009126:	2300      	movlt	r3, #0
 8009128:	4645      	movge	r5, r8
 800912a:	e747      	b.n	8008fbc <_dtoa_r+0x75c>
 800912c:	9e06      	ldr	r6, [sp, #24]
 800912e:	9f08      	ldr	r7, [sp, #32]
 8009130:	4645      	mov	r5, r8
 8009132:	e74c      	b.n	8008fce <_dtoa_r+0x76e>
 8009134:	9a06      	ldr	r2, [sp, #24]
 8009136:	e775      	b.n	8009024 <_dtoa_r+0x7c4>
 8009138:	9b05      	ldr	r3, [sp, #20]
 800913a:	2b01      	cmp	r3, #1
 800913c:	dc18      	bgt.n	8009170 <_dtoa_r+0x910>
 800913e:	9b02      	ldr	r3, [sp, #8]
 8009140:	b9b3      	cbnz	r3, 8009170 <_dtoa_r+0x910>
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009148:	b9a3      	cbnz	r3, 8009174 <_dtoa_r+0x914>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009150:	0d1b      	lsrs	r3, r3, #20
 8009152:	051b      	lsls	r3, r3, #20
 8009154:	b12b      	cbz	r3, 8009162 <_dtoa_r+0x902>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	3301      	adds	r3, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	f108 0801 	add.w	r8, r8, #1
 8009160:	2301      	movs	r3, #1
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009166:	2b00      	cmp	r3, #0
 8009168:	f47f af74 	bne.w	8009054 <_dtoa_r+0x7f4>
 800916c:	2001      	movs	r0, #1
 800916e:	e779      	b.n	8009064 <_dtoa_r+0x804>
 8009170:	2300      	movs	r3, #0
 8009172:	e7f6      	b.n	8009162 <_dtoa_r+0x902>
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	e7f4      	b.n	8009162 <_dtoa_r+0x902>
 8009178:	d085      	beq.n	8009086 <_dtoa_r+0x826>
 800917a:	4618      	mov	r0, r3
 800917c:	301c      	adds	r0, #28
 800917e:	e77d      	b.n	800907c <_dtoa_r+0x81c>
 8009180:	40240000 	.word	0x40240000
 8009184:	9b01      	ldr	r3, [sp, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	dc38      	bgt.n	80091fc <_dtoa_r+0x99c>
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	2b02      	cmp	r3, #2
 800918e:	dd35      	ble.n	80091fc <_dtoa_r+0x99c>
 8009190:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009194:	f1b9 0f00 	cmp.w	r9, #0
 8009198:	d10d      	bne.n	80091b6 <_dtoa_r+0x956>
 800919a:	4631      	mov	r1, r6
 800919c:	464b      	mov	r3, r9
 800919e:	2205      	movs	r2, #5
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 ff65 	bl	800a070 <__multadd>
 80091a6:	4601      	mov	r1, r0
 80091a8:	4606      	mov	r6, r0
 80091aa:	4658      	mov	r0, fp
 80091ac:	f001 f9c6 	bl	800a53c <__mcmp>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f73f adbd 	bgt.w	8008d30 <_dtoa_r+0x4d0>
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	9d00      	ldr	r5, [sp, #0]
 80091ba:	ea6f 0a03 	mvn.w	sl, r3
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	4631      	mov	r1, r6
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 ff31 	bl	800a02c <_Bfree>
 80091ca:	2f00      	cmp	r7, #0
 80091cc:	f43f aeb4 	beq.w	8008f38 <_dtoa_r+0x6d8>
 80091d0:	f1b8 0f00 	cmp.w	r8, #0
 80091d4:	d005      	beq.n	80091e2 <_dtoa_r+0x982>
 80091d6:	45b8      	cmp	r8, r7
 80091d8:	d003      	beq.n	80091e2 <_dtoa_r+0x982>
 80091da:	4641      	mov	r1, r8
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 ff25 	bl	800a02c <_Bfree>
 80091e2:	4639      	mov	r1, r7
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 ff21 	bl	800a02c <_Bfree>
 80091ea:	e6a5      	b.n	8008f38 <_dtoa_r+0x6d8>
 80091ec:	2600      	movs	r6, #0
 80091ee:	4637      	mov	r7, r6
 80091f0:	e7e1      	b.n	80091b6 <_dtoa_r+0x956>
 80091f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091f8:	4637      	mov	r7, r6
 80091fa:	e599      	b.n	8008d30 <_dtoa_r+0x4d0>
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80fd 	beq.w	8009402 <_dtoa_r+0xba2>
 8009208:	2d00      	cmp	r5, #0
 800920a:	dd05      	ble.n	8009218 <_dtoa_r+0x9b8>
 800920c:	4639      	mov	r1, r7
 800920e:	462a      	mov	r2, r5
 8009210:	4620      	mov	r0, r4
 8009212:	f001 f927 	bl	800a464 <__lshift>
 8009216:	4607      	mov	r7, r0
 8009218:	9b06      	ldr	r3, [sp, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d05c      	beq.n	80092d8 <_dtoa_r+0xa78>
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4620      	mov	r0, r4
 8009222:	f000 fec3 	bl	8009fac <_Balloc>
 8009226:	4605      	mov	r5, r0
 8009228:	b928      	cbnz	r0, 8009236 <_dtoa_r+0x9d6>
 800922a:	4b80      	ldr	r3, [pc, #512]	; (800942c <_dtoa_r+0xbcc>)
 800922c:	4602      	mov	r2, r0
 800922e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009232:	f7ff bb2e 	b.w	8008892 <_dtoa_r+0x32>
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	3202      	adds	r2, #2
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	f107 010c 	add.w	r1, r7, #12
 8009240:	300c      	adds	r0, #12
 8009242:	f000 fea5 	bl	8009f90 <memcpy>
 8009246:	2201      	movs	r2, #1
 8009248:	4629      	mov	r1, r5
 800924a:	4620      	mov	r0, r4
 800924c:	f001 f90a 	bl	800a464 <__lshift>
 8009250:	9b00      	ldr	r3, [sp, #0]
 8009252:	3301      	adds	r3, #1
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	444b      	add	r3, r9
 800925a:	9307      	str	r3, [sp, #28]
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	46b8      	mov	r8, r7
 8009264:	9306      	str	r3, [sp, #24]
 8009266:	4607      	mov	r7, r0
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	4631      	mov	r1, r6
 800926c:	3b01      	subs	r3, #1
 800926e:	4658      	mov	r0, fp
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	f7ff fa67 	bl	8008744 <quorem>
 8009276:	4603      	mov	r3, r0
 8009278:	3330      	adds	r3, #48	; 0x30
 800927a:	9004      	str	r0, [sp, #16]
 800927c:	4641      	mov	r1, r8
 800927e:	4658      	mov	r0, fp
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	f001 f95b 	bl	800a53c <__mcmp>
 8009286:	463a      	mov	r2, r7
 8009288:	4681      	mov	r9, r0
 800928a:	4631      	mov	r1, r6
 800928c:	4620      	mov	r0, r4
 800928e:	f001 f971 	bl	800a574 <__mdiff>
 8009292:	68c2      	ldr	r2, [r0, #12]
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	4605      	mov	r5, r0
 8009298:	bb02      	cbnz	r2, 80092dc <_dtoa_r+0xa7c>
 800929a:	4601      	mov	r1, r0
 800929c:	4658      	mov	r0, fp
 800929e:	f001 f94d 	bl	800a53c <__mcmp>
 80092a2:	9b08      	ldr	r3, [sp, #32]
 80092a4:	4602      	mov	r2, r0
 80092a6:	4629      	mov	r1, r5
 80092a8:	4620      	mov	r0, r4
 80092aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80092ae:	f000 febd 	bl	800a02c <_Bfree>
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b6:	9d01      	ldr	r5, [sp, #4]
 80092b8:	ea43 0102 	orr.w	r1, r3, r2
 80092bc:	9b06      	ldr	r3, [sp, #24]
 80092be:	430b      	orrs	r3, r1
 80092c0:	9b08      	ldr	r3, [sp, #32]
 80092c2:	d10d      	bne.n	80092e0 <_dtoa_r+0xa80>
 80092c4:	2b39      	cmp	r3, #57	; 0x39
 80092c6:	d029      	beq.n	800931c <_dtoa_r+0xabc>
 80092c8:	f1b9 0f00 	cmp.w	r9, #0
 80092cc:	dd01      	ble.n	80092d2 <_dtoa_r+0xa72>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	3331      	adds	r3, #49	; 0x31
 80092d2:	9a02      	ldr	r2, [sp, #8]
 80092d4:	7013      	strb	r3, [r2, #0]
 80092d6:	e774      	b.n	80091c2 <_dtoa_r+0x962>
 80092d8:	4638      	mov	r0, r7
 80092da:	e7b9      	b.n	8009250 <_dtoa_r+0x9f0>
 80092dc:	2201      	movs	r2, #1
 80092de:	e7e2      	b.n	80092a6 <_dtoa_r+0xa46>
 80092e0:	f1b9 0f00 	cmp.w	r9, #0
 80092e4:	db06      	blt.n	80092f4 <_dtoa_r+0xa94>
 80092e6:	9905      	ldr	r1, [sp, #20]
 80092e8:	ea41 0909 	orr.w	r9, r1, r9
 80092ec:	9906      	ldr	r1, [sp, #24]
 80092ee:	ea59 0101 	orrs.w	r1, r9, r1
 80092f2:	d120      	bne.n	8009336 <_dtoa_r+0xad6>
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	ddec      	ble.n	80092d2 <_dtoa_r+0xa72>
 80092f8:	4659      	mov	r1, fp
 80092fa:	2201      	movs	r2, #1
 80092fc:	4620      	mov	r0, r4
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	f001 f8b0 	bl	800a464 <__lshift>
 8009304:	4631      	mov	r1, r6
 8009306:	4683      	mov	fp, r0
 8009308:	f001 f918 	bl	800a53c <__mcmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	dc02      	bgt.n	8009318 <_dtoa_r+0xab8>
 8009312:	d1de      	bne.n	80092d2 <_dtoa_r+0xa72>
 8009314:	07da      	lsls	r2, r3, #31
 8009316:	d5dc      	bpl.n	80092d2 <_dtoa_r+0xa72>
 8009318:	2b39      	cmp	r3, #57	; 0x39
 800931a:	d1d8      	bne.n	80092ce <_dtoa_r+0xa6e>
 800931c:	9a02      	ldr	r2, [sp, #8]
 800931e:	2339      	movs	r3, #57	; 0x39
 8009320:	7013      	strb	r3, [r2, #0]
 8009322:	462b      	mov	r3, r5
 8009324:	461d      	mov	r5, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800932c:	2a39      	cmp	r2, #57	; 0x39
 800932e:	d050      	beq.n	80093d2 <_dtoa_r+0xb72>
 8009330:	3201      	adds	r2, #1
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	e745      	b.n	80091c2 <_dtoa_r+0x962>
 8009336:	2a00      	cmp	r2, #0
 8009338:	dd03      	ble.n	8009342 <_dtoa_r+0xae2>
 800933a:	2b39      	cmp	r3, #57	; 0x39
 800933c:	d0ee      	beq.n	800931c <_dtoa_r+0xabc>
 800933e:	3301      	adds	r3, #1
 8009340:	e7c7      	b.n	80092d2 <_dtoa_r+0xa72>
 8009342:	9a01      	ldr	r2, [sp, #4]
 8009344:	9907      	ldr	r1, [sp, #28]
 8009346:	f802 3c01 	strb.w	r3, [r2, #-1]
 800934a:	428a      	cmp	r2, r1
 800934c:	d02a      	beq.n	80093a4 <_dtoa_r+0xb44>
 800934e:	4659      	mov	r1, fp
 8009350:	2300      	movs	r3, #0
 8009352:	220a      	movs	r2, #10
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fe8b 	bl	800a070 <__multadd>
 800935a:	45b8      	cmp	r8, r7
 800935c:	4683      	mov	fp, r0
 800935e:	f04f 0300 	mov.w	r3, #0
 8009362:	f04f 020a 	mov.w	r2, #10
 8009366:	4641      	mov	r1, r8
 8009368:	4620      	mov	r0, r4
 800936a:	d107      	bne.n	800937c <_dtoa_r+0xb1c>
 800936c:	f000 fe80 	bl	800a070 <__multadd>
 8009370:	4680      	mov	r8, r0
 8009372:	4607      	mov	r7, r0
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	3301      	adds	r3, #1
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	e775      	b.n	8009268 <_dtoa_r+0xa08>
 800937c:	f000 fe78 	bl	800a070 <__multadd>
 8009380:	4639      	mov	r1, r7
 8009382:	4680      	mov	r8, r0
 8009384:	2300      	movs	r3, #0
 8009386:	220a      	movs	r2, #10
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fe71 	bl	800a070 <__multadd>
 800938e:	4607      	mov	r7, r0
 8009390:	e7f0      	b.n	8009374 <_dtoa_r+0xb14>
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	9a00      	ldr	r2, [sp, #0]
 8009398:	bfcc      	ite	gt
 800939a:	464d      	movgt	r5, r9
 800939c:	2501      	movle	r5, #1
 800939e:	4415      	add	r5, r2
 80093a0:	f04f 0800 	mov.w	r8, #0
 80093a4:	4659      	mov	r1, fp
 80093a6:	2201      	movs	r2, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	f001 f85a 	bl	800a464 <__lshift>
 80093b0:	4631      	mov	r1, r6
 80093b2:	4683      	mov	fp, r0
 80093b4:	f001 f8c2 	bl	800a53c <__mcmp>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	dcb2      	bgt.n	8009322 <_dtoa_r+0xac2>
 80093bc:	d102      	bne.n	80093c4 <_dtoa_r+0xb64>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	07db      	lsls	r3, r3, #31
 80093c2:	d4ae      	bmi.n	8009322 <_dtoa_r+0xac2>
 80093c4:	462b      	mov	r3, r5
 80093c6:	461d      	mov	r5, r3
 80093c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093cc:	2a30      	cmp	r2, #48	; 0x30
 80093ce:	d0fa      	beq.n	80093c6 <_dtoa_r+0xb66>
 80093d0:	e6f7      	b.n	80091c2 <_dtoa_r+0x962>
 80093d2:	9a00      	ldr	r2, [sp, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d1a5      	bne.n	8009324 <_dtoa_r+0xac4>
 80093d8:	f10a 0a01 	add.w	sl, sl, #1
 80093dc:	2331      	movs	r3, #49	; 0x31
 80093de:	e779      	b.n	80092d4 <_dtoa_r+0xa74>
 80093e0:	4b13      	ldr	r3, [pc, #76]	; (8009430 <_dtoa_r+0xbd0>)
 80093e2:	f7ff baaf 	b.w	8008944 <_dtoa_r+0xe4>
 80093e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f47f aa86 	bne.w	80088fa <_dtoa_r+0x9a>
 80093ee:	4b11      	ldr	r3, [pc, #68]	; (8009434 <_dtoa_r+0xbd4>)
 80093f0:	f7ff baa8 	b.w	8008944 <_dtoa_r+0xe4>
 80093f4:	f1b9 0f00 	cmp.w	r9, #0
 80093f8:	dc03      	bgt.n	8009402 <_dtoa_r+0xba2>
 80093fa:	9b05      	ldr	r3, [sp, #20]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	f73f aec9 	bgt.w	8009194 <_dtoa_r+0x934>
 8009402:	9d00      	ldr	r5, [sp, #0]
 8009404:	4631      	mov	r1, r6
 8009406:	4658      	mov	r0, fp
 8009408:	f7ff f99c 	bl	8008744 <quorem>
 800940c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009410:	f805 3b01 	strb.w	r3, [r5], #1
 8009414:	9a00      	ldr	r2, [sp, #0]
 8009416:	1aaa      	subs	r2, r5, r2
 8009418:	4591      	cmp	r9, r2
 800941a:	ddba      	ble.n	8009392 <_dtoa_r+0xb32>
 800941c:	4659      	mov	r1, fp
 800941e:	2300      	movs	r3, #0
 8009420:	220a      	movs	r2, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fe24 	bl	800a070 <__multadd>
 8009428:	4683      	mov	fp, r0
 800942a:	e7eb      	b.n	8009404 <_dtoa_r+0xba4>
 800942c:	0800b9f4 	.word	0x0800b9f4
 8009430:	0800b7f4 	.word	0x0800b7f4
 8009434:	0800b971 	.word	0x0800b971

08009438 <__sflush_r>:
 8009438:	898a      	ldrh	r2, [r1, #12]
 800943a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943e:	4605      	mov	r5, r0
 8009440:	0710      	lsls	r0, r2, #28
 8009442:	460c      	mov	r4, r1
 8009444:	d458      	bmi.n	80094f8 <__sflush_r+0xc0>
 8009446:	684b      	ldr	r3, [r1, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	dc05      	bgt.n	8009458 <__sflush_r+0x20>
 800944c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	dc02      	bgt.n	8009458 <__sflush_r+0x20>
 8009452:	2000      	movs	r0, #0
 8009454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800945a:	2e00      	cmp	r6, #0
 800945c:	d0f9      	beq.n	8009452 <__sflush_r+0x1a>
 800945e:	2300      	movs	r3, #0
 8009460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009464:	682f      	ldr	r7, [r5, #0]
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	d032      	beq.n	80094d0 <__sflush_r+0x98>
 800946a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	075a      	lsls	r2, r3, #29
 8009470:	d505      	bpl.n	800947e <__sflush_r+0x46>
 8009472:	6863      	ldr	r3, [r4, #4]
 8009474:	1ac0      	subs	r0, r0, r3
 8009476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009478:	b10b      	cbz	r3, 800947e <__sflush_r+0x46>
 800947a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800947c:	1ac0      	subs	r0, r0, r3
 800947e:	2300      	movs	r3, #0
 8009480:	4602      	mov	r2, r0
 8009482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009484:	6a21      	ldr	r1, [r4, #32]
 8009486:	4628      	mov	r0, r5
 8009488:	47b0      	blx	r6
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	d106      	bne.n	800949e <__sflush_r+0x66>
 8009490:	6829      	ldr	r1, [r5, #0]
 8009492:	291d      	cmp	r1, #29
 8009494:	d82c      	bhi.n	80094f0 <__sflush_r+0xb8>
 8009496:	4a2a      	ldr	r2, [pc, #168]	; (8009540 <__sflush_r+0x108>)
 8009498:	40ca      	lsrs	r2, r1
 800949a:	07d6      	lsls	r6, r2, #31
 800949c:	d528      	bpl.n	80094f0 <__sflush_r+0xb8>
 800949e:	2200      	movs	r2, #0
 80094a0:	6062      	str	r2, [r4, #4]
 80094a2:	04d9      	lsls	r1, r3, #19
 80094a4:	6922      	ldr	r2, [r4, #16]
 80094a6:	6022      	str	r2, [r4, #0]
 80094a8:	d504      	bpl.n	80094b4 <__sflush_r+0x7c>
 80094aa:	1c42      	adds	r2, r0, #1
 80094ac:	d101      	bne.n	80094b2 <__sflush_r+0x7a>
 80094ae:	682b      	ldr	r3, [r5, #0]
 80094b0:	b903      	cbnz	r3, 80094b4 <__sflush_r+0x7c>
 80094b2:	6560      	str	r0, [r4, #84]	; 0x54
 80094b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094b6:	602f      	str	r7, [r5, #0]
 80094b8:	2900      	cmp	r1, #0
 80094ba:	d0ca      	beq.n	8009452 <__sflush_r+0x1a>
 80094bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c0:	4299      	cmp	r1, r3
 80094c2:	d002      	beq.n	80094ca <__sflush_r+0x92>
 80094c4:	4628      	mov	r0, r5
 80094c6:	f001 fa3b 	bl	800a940 <_free_r>
 80094ca:	2000      	movs	r0, #0
 80094cc:	6360      	str	r0, [r4, #52]	; 0x34
 80094ce:	e7c1      	b.n	8009454 <__sflush_r+0x1c>
 80094d0:	6a21      	ldr	r1, [r4, #32]
 80094d2:	2301      	movs	r3, #1
 80094d4:	4628      	mov	r0, r5
 80094d6:	47b0      	blx	r6
 80094d8:	1c41      	adds	r1, r0, #1
 80094da:	d1c7      	bne.n	800946c <__sflush_r+0x34>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0c4      	beq.n	800946c <__sflush_r+0x34>
 80094e2:	2b1d      	cmp	r3, #29
 80094e4:	d001      	beq.n	80094ea <__sflush_r+0xb2>
 80094e6:	2b16      	cmp	r3, #22
 80094e8:	d101      	bne.n	80094ee <__sflush_r+0xb6>
 80094ea:	602f      	str	r7, [r5, #0]
 80094ec:	e7b1      	b.n	8009452 <__sflush_r+0x1a>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	e7ad      	b.n	8009454 <__sflush_r+0x1c>
 80094f8:	690f      	ldr	r7, [r1, #16]
 80094fa:	2f00      	cmp	r7, #0
 80094fc:	d0a9      	beq.n	8009452 <__sflush_r+0x1a>
 80094fe:	0793      	lsls	r3, r2, #30
 8009500:	680e      	ldr	r6, [r1, #0]
 8009502:	bf08      	it	eq
 8009504:	694b      	ldreq	r3, [r1, #20]
 8009506:	600f      	str	r7, [r1, #0]
 8009508:	bf18      	it	ne
 800950a:	2300      	movne	r3, #0
 800950c:	eba6 0807 	sub.w	r8, r6, r7
 8009510:	608b      	str	r3, [r1, #8]
 8009512:	f1b8 0f00 	cmp.w	r8, #0
 8009516:	dd9c      	ble.n	8009452 <__sflush_r+0x1a>
 8009518:	6a21      	ldr	r1, [r4, #32]
 800951a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800951c:	4643      	mov	r3, r8
 800951e:	463a      	mov	r2, r7
 8009520:	4628      	mov	r0, r5
 8009522:	47b0      	blx	r6
 8009524:	2800      	cmp	r0, #0
 8009526:	dc06      	bgt.n	8009536 <__sflush_r+0xfe>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	f04f 30ff 	mov.w	r0, #4294967295
 8009534:	e78e      	b.n	8009454 <__sflush_r+0x1c>
 8009536:	4407      	add	r7, r0
 8009538:	eba8 0800 	sub.w	r8, r8, r0
 800953c:	e7e9      	b.n	8009512 <__sflush_r+0xda>
 800953e:	bf00      	nop
 8009540:	20400001 	.word	0x20400001

08009544 <_fflush_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	690b      	ldr	r3, [r1, #16]
 8009548:	4605      	mov	r5, r0
 800954a:	460c      	mov	r4, r1
 800954c:	b913      	cbnz	r3, 8009554 <_fflush_r+0x10>
 800954e:	2500      	movs	r5, #0
 8009550:	4628      	mov	r0, r5
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	b118      	cbz	r0, 800955e <_fflush_r+0x1a>
 8009556:	6983      	ldr	r3, [r0, #24]
 8009558:	b90b      	cbnz	r3, 800955e <_fflush_r+0x1a>
 800955a:	f000 f887 	bl	800966c <__sinit>
 800955e:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <_fflush_r+0x6c>)
 8009560:	429c      	cmp	r4, r3
 8009562:	d11b      	bne.n	800959c <_fflush_r+0x58>
 8009564:	686c      	ldr	r4, [r5, #4]
 8009566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0ef      	beq.n	800954e <_fflush_r+0xa>
 800956e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009570:	07d0      	lsls	r0, r2, #31
 8009572:	d404      	bmi.n	800957e <_fflush_r+0x3a>
 8009574:	0599      	lsls	r1, r3, #22
 8009576:	d402      	bmi.n	800957e <_fflush_r+0x3a>
 8009578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800957a:	f000 fc88 	bl	8009e8e <__retarget_lock_acquire_recursive>
 800957e:	4628      	mov	r0, r5
 8009580:	4621      	mov	r1, r4
 8009582:	f7ff ff59 	bl	8009438 <__sflush_r>
 8009586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009588:	07da      	lsls	r2, r3, #31
 800958a:	4605      	mov	r5, r0
 800958c:	d4e0      	bmi.n	8009550 <_fflush_r+0xc>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	059b      	lsls	r3, r3, #22
 8009592:	d4dd      	bmi.n	8009550 <_fflush_r+0xc>
 8009594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009596:	f000 fc7b 	bl	8009e90 <__retarget_lock_release_recursive>
 800959a:	e7d9      	b.n	8009550 <_fflush_r+0xc>
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <_fflush_r+0x70>)
 800959e:	429c      	cmp	r4, r3
 80095a0:	d101      	bne.n	80095a6 <_fflush_r+0x62>
 80095a2:	68ac      	ldr	r4, [r5, #8]
 80095a4:	e7df      	b.n	8009566 <_fflush_r+0x22>
 80095a6:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <_fflush_r+0x74>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	bf08      	it	eq
 80095ac:	68ec      	ldreq	r4, [r5, #12]
 80095ae:	e7da      	b.n	8009566 <_fflush_r+0x22>
 80095b0:	0800ba28 	.word	0x0800ba28
 80095b4:	0800ba48 	.word	0x0800ba48
 80095b8:	0800ba08 	.word	0x0800ba08

080095bc <std>:
 80095bc:	2300      	movs	r3, #0
 80095be:	b510      	push	{r4, lr}
 80095c0:	4604      	mov	r4, r0
 80095c2:	e9c0 3300 	strd	r3, r3, [r0]
 80095c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ca:	6083      	str	r3, [r0, #8]
 80095cc:	8181      	strh	r1, [r0, #12]
 80095ce:	6643      	str	r3, [r0, #100]	; 0x64
 80095d0:	81c2      	strh	r2, [r0, #14]
 80095d2:	6183      	str	r3, [r0, #24]
 80095d4:	4619      	mov	r1, r3
 80095d6:	2208      	movs	r2, #8
 80095d8:	305c      	adds	r0, #92	; 0x5c
 80095da:	f7fd fa23 	bl	8006a24 <memset>
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <std+0x38>)
 80095e0:	6263      	str	r3, [r4, #36]	; 0x24
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <std+0x3c>)
 80095e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095e6:	4b05      	ldr	r3, [pc, #20]	; (80095fc <std+0x40>)
 80095e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <std+0x44>)
 80095ec:	6224      	str	r4, [r4, #32]
 80095ee:	6323      	str	r3, [r4, #48]	; 0x30
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	bf00      	nop
 80095f4:	0800ad81 	.word	0x0800ad81
 80095f8:	0800ada3 	.word	0x0800ada3
 80095fc:	0800addb 	.word	0x0800addb
 8009600:	0800adff 	.word	0x0800adff

08009604 <_cleanup_r>:
 8009604:	4901      	ldr	r1, [pc, #4]	; (800960c <_cleanup_r+0x8>)
 8009606:	f000 b8af 	b.w	8009768 <_fwalk_reent>
 800960a:	bf00      	nop
 800960c:	08009545 	.word	0x08009545

08009610 <__sfmoreglue>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	1e4a      	subs	r2, r1, #1
 8009614:	2568      	movs	r5, #104	; 0x68
 8009616:	4355      	muls	r5, r2
 8009618:	460e      	mov	r6, r1
 800961a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800961e:	f001 f9df 	bl	800a9e0 <_malloc_r>
 8009622:	4604      	mov	r4, r0
 8009624:	b140      	cbz	r0, 8009638 <__sfmoreglue+0x28>
 8009626:	2100      	movs	r1, #0
 8009628:	e9c0 1600 	strd	r1, r6, [r0]
 800962c:	300c      	adds	r0, #12
 800962e:	60a0      	str	r0, [r4, #8]
 8009630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009634:	f7fd f9f6 	bl	8006a24 <memset>
 8009638:	4620      	mov	r0, r4
 800963a:	bd70      	pop	{r4, r5, r6, pc}

0800963c <__sfp_lock_acquire>:
 800963c:	4801      	ldr	r0, [pc, #4]	; (8009644 <__sfp_lock_acquire+0x8>)
 800963e:	f000 bc26 	b.w	8009e8e <__retarget_lock_acquire_recursive>
 8009642:	bf00      	nop
 8009644:	200009ec 	.word	0x200009ec

08009648 <__sfp_lock_release>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__sfp_lock_release+0x8>)
 800964a:	f000 bc21 	b.w	8009e90 <__retarget_lock_release_recursive>
 800964e:	bf00      	nop
 8009650:	200009ec 	.word	0x200009ec

08009654 <__sinit_lock_acquire>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__sinit_lock_acquire+0x8>)
 8009656:	f000 bc1a 	b.w	8009e8e <__retarget_lock_acquire_recursive>
 800965a:	bf00      	nop
 800965c:	200009e7 	.word	0x200009e7

08009660 <__sinit_lock_release>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__sinit_lock_release+0x8>)
 8009662:	f000 bc15 	b.w	8009e90 <__retarget_lock_release_recursive>
 8009666:	bf00      	nop
 8009668:	200009e7 	.word	0x200009e7

0800966c <__sinit>:
 800966c:	b510      	push	{r4, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	f7ff fff0 	bl	8009654 <__sinit_lock_acquire>
 8009674:	69a3      	ldr	r3, [r4, #24]
 8009676:	b11b      	cbz	r3, 8009680 <__sinit+0x14>
 8009678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800967c:	f7ff bff0 	b.w	8009660 <__sinit_lock_release>
 8009680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009684:	6523      	str	r3, [r4, #80]	; 0x50
 8009686:	4b13      	ldr	r3, [pc, #76]	; (80096d4 <__sinit+0x68>)
 8009688:	4a13      	ldr	r2, [pc, #76]	; (80096d8 <__sinit+0x6c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	62a2      	str	r2, [r4, #40]	; 0x28
 800968e:	42a3      	cmp	r3, r4
 8009690:	bf04      	itt	eq
 8009692:	2301      	moveq	r3, #1
 8009694:	61a3      	streq	r3, [r4, #24]
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f820 	bl	80096dc <__sfp>
 800969c:	6060      	str	r0, [r4, #4]
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 f81c 	bl	80096dc <__sfp>
 80096a4:	60a0      	str	r0, [r4, #8]
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 f818 	bl	80096dc <__sfp>
 80096ac:	2200      	movs	r2, #0
 80096ae:	60e0      	str	r0, [r4, #12]
 80096b0:	2104      	movs	r1, #4
 80096b2:	6860      	ldr	r0, [r4, #4]
 80096b4:	f7ff ff82 	bl	80095bc <std>
 80096b8:	68a0      	ldr	r0, [r4, #8]
 80096ba:	2201      	movs	r2, #1
 80096bc:	2109      	movs	r1, #9
 80096be:	f7ff ff7d 	bl	80095bc <std>
 80096c2:	68e0      	ldr	r0, [r4, #12]
 80096c4:	2202      	movs	r2, #2
 80096c6:	2112      	movs	r1, #18
 80096c8:	f7ff ff78 	bl	80095bc <std>
 80096cc:	2301      	movs	r3, #1
 80096ce:	61a3      	str	r3, [r4, #24]
 80096d0:	e7d2      	b.n	8009678 <__sinit+0xc>
 80096d2:	bf00      	nop
 80096d4:	0800b7e0 	.word	0x0800b7e0
 80096d8:	08009605 	.word	0x08009605

080096dc <__sfp>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	4607      	mov	r7, r0
 80096e0:	f7ff ffac 	bl	800963c <__sfp_lock_acquire>
 80096e4:	4b1e      	ldr	r3, [pc, #120]	; (8009760 <__sfp+0x84>)
 80096e6:	681e      	ldr	r6, [r3, #0]
 80096e8:	69b3      	ldr	r3, [r6, #24]
 80096ea:	b913      	cbnz	r3, 80096f2 <__sfp+0x16>
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff ffbd 	bl	800966c <__sinit>
 80096f2:	3648      	adds	r6, #72	; 0x48
 80096f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	d503      	bpl.n	8009704 <__sfp+0x28>
 80096fc:	6833      	ldr	r3, [r6, #0]
 80096fe:	b30b      	cbz	r3, 8009744 <__sfp+0x68>
 8009700:	6836      	ldr	r6, [r6, #0]
 8009702:	e7f7      	b.n	80096f4 <__sfp+0x18>
 8009704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009708:	b9d5      	cbnz	r5, 8009740 <__sfp+0x64>
 800970a:	4b16      	ldr	r3, [pc, #88]	; (8009764 <__sfp+0x88>)
 800970c:	60e3      	str	r3, [r4, #12]
 800970e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009712:	6665      	str	r5, [r4, #100]	; 0x64
 8009714:	f000 fbba 	bl	8009e8c <__retarget_lock_init_recursive>
 8009718:	f7ff ff96 	bl	8009648 <__sfp_lock_release>
 800971c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009724:	6025      	str	r5, [r4, #0]
 8009726:	61a5      	str	r5, [r4, #24]
 8009728:	2208      	movs	r2, #8
 800972a:	4629      	mov	r1, r5
 800972c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009730:	f7fd f978 	bl	8006a24 <memset>
 8009734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800973c:	4620      	mov	r0, r4
 800973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009740:	3468      	adds	r4, #104	; 0x68
 8009742:	e7d9      	b.n	80096f8 <__sfp+0x1c>
 8009744:	2104      	movs	r1, #4
 8009746:	4638      	mov	r0, r7
 8009748:	f7ff ff62 	bl	8009610 <__sfmoreglue>
 800974c:	4604      	mov	r4, r0
 800974e:	6030      	str	r0, [r6, #0]
 8009750:	2800      	cmp	r0, #0
 8009752:	d1d5      	bne.n	8009700 <__sfp+0x24>
 8009754:	f7ff ff78 	bl	8009648 <__sfp_lock_release>
 8009758:	230c      	movs	r3, #12
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	e7ee      	b.n	800973c <__sfp+0x60>
 800975e:	bf00      	nop
 8009760:	0800b7e0 	.word	0x0800b7e0
 8009764:	ffff0001 	.word	0xffff0001

08009768 <_fwalk_reent>:
 8009768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800976c:	4606      	mov	r6, r0
 800976e:	4688      	mov	r8, r1
 8009770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009774:	2700      	movs	r7, #0
 8009776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800977a:	f1b9 0901 	subs.w	r9, r9, #1
 800977e:	d505      	bpl.n	800978c <_fwalk_reent+0x24>
 8009780:	6824      	ldr	r4, [r4, #0]
 8009782:	2c00      	cmp	r4, #0
 8009784:	d1f7      	bne.n	8009776 <_fwalk_reent+0xe>
 8009786:	4638      	mov	r0, r7
 8009788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978c:	89ab      	ldrh	r3, [r5, #12]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d907      	bls.n	80097a2 <_fwalk_reent+0x3a>
 8009792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009796:	3301      	adds	r3, #1
 8009798:	d003      	beq.n	80097a2 <_fwalk_reent+0x3a>
 800979a:	4629      	mov	r1, r5
 800979c:	4630      	mov	r0, r6
 800979e:	47c0      	blx	r8
 80097a0:	4307      	orrs	r7, r0
 80097a2:	3568      	adds	r5, #104	; 0x68
 80097a4:	e7e9      	b.n	800977a <_fwalk_reent+0x12>

080097a6 <rshift>:
 80097a6:	6903      	ldr	r3, [r0, #16]
 80097a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097b4:	f100 0414 	add.w	r4, r0, #20
 80097b8:	dd45      	ble.n	8009846 <rshift+0xa0>
 80097ba:	f011 011f 	ands.w	r1, r1, #31
 80097be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097c6:	d10c      	bne.n	80097e2 <rshift+0x3c>
 80097c8:	f100 0710 	add.w	r7, r0, #16
 80097cc:	4629      	mov	r1, r5
 80097ce:	42b1      	cmp	r1, r6
 80097d0:	d334      	bcc.n	800983c <rshift+0x96>
 80097d2:	1a9b      	subs	r3, r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	1eea      	subs	r2, r5, #3
 80097d8:	4296      	cmp	r6, r2
 80097da:	bf38      	it	cc
 80097dc:	2300      	movcc	r3, #0
 80097de:	4423      	add	r3, r4
 80097e0:	e015      	b.n	800980e <rshift+0x68>
 80097e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097e6:	f1c1 0820 	rsb	r8, r1, #32
 80097ea:	40cf      	lsrs	r7, r1
 80097ec:	f105 0e04 	add.w	lr, r5, #4
 80097f0:	46a1      	mov	r9, r4
 80097f2:	4576      	cmp	r6, lr
 80097f4:	46f4      	mov	ip, lr
 80097f6:	d815      	bhi.n	8009824 <rshift+0x7e>
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	009a      	lsls	r2, r3, #2
 80097fc:	3a04      	subs	r2, #4
 80097fe:	3501      	adds	r5, #1
 8009800:	42ae      	cmp	r6, r5
 8009802:	bf38      	it	cc
 8009804:	2200      	movcc	r2, #0
 8009806:	18a3      	adds	r3, r4, r2
 8009808:	50a7      	str	r7, [r4, r2]
 800980a:	b107      	cbz	r7, 800980e <rshift+0x68>
 800980c:	3304      	adds	r3, #4
 800980e:	1b1a      	subs	r2, r3, r4
 8009810:	42a3      	cmp	r3, r4
 8009812:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009816:	bf08      	it	eq
 8009818:	2300      	moveq	r3, #0
 800981a:	6102      	str	r2, [r0, #16]
 800981c:	bf08      	it	eq
 800981e:	6143      	streq	r3, [r0, #20]
 8009820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009824:	f8dc c000 	ldr.w	ip, [ip]
 8009828:	fa0c fc08 	lsl.w	ip, ip, r8
 800982c:	ea4c 0707 	orr.w	r7, ip, r7
 8009830:	f849 7b04 	str.w	r7, [r9], #4
 8009834:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009838:	40cf      	lsrs	r7, r1
 800983a:	e7da      	b.n	80097f2 <rshift+0x4c>
 800983c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009840:	f847 cf04 	str.w	ip, [r7, #4]!
 8009844:	e7c3      	b.n	80097ce <rshift+0x28>
 8009846:	4623      	mov	r3, r4
 8009848:	e7e1      	b.n	800980e <rshift+0x68>

0800984a <__hexdig_fun>:
 800984a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800984e:	2b09      	cmp	r3, #9
 8009850:	d802      	bhi.n	8009858 <__hexdig_fun+0xe>
 8009852:	3820      	subs	r0, #32
 8009854:	b2c0      	uxtb	r0, r0
 8009856:	4770      	bx	lr
 8009858:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800985c:	2b05      	cmp	r3, #5
 800985e:	d801      	bhi.n	8009864 <__hexdig_fun+0x1a>
 8009860:	3847      	subs	r0, #71	; 0x47
 8009862:	e7f7      	b.n	8009854 <__hexdig_fun+0xa>
 8009864:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009868:	2b05      	cmp	r3, #5
 800986a:	d801      	bhi.n	8009870 <__hexdig_fun+0x26>
 800986c:	3827      	subs	r0, #39	; 0x27
 800986e:	e7f1      	b.n	8009854 <__hexdig_fun+0xa>
 8009870:	2000      	movs	r0, #0
 8009872:	4770      	bx	lr

08009874 <__gethex>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	ed2d 8b02 	vpush	{d8}
 800987c:	b089      	sub	sp, #36	; 0x24
 800987e:	ee08 0a10 	vmov	s16, r0
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	4bbc      	ldr	r3, [pc, #752]	; (8009b78 <__gethex+0x304>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	468b      	mov	fp, r1
 800988e:	4690      	mov	r8, r2
 8009890:	f7f6 fcbe 	bl	8000210 <strlen>
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	f8db 2000 	ldr.w	r2, [fp]
 800989a:	4403      	add	r3, r0
 800989c:	4682      	mov	sl, r0
 800989e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	1c93      	adds	r3, r2, #2
 80098a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098ae:	32fe      	adds	r2, #254	; 0xfe
 80098b0:	18d1      	adds	r1, r2, r3
 80098b2:	461f      	mov	r7, r3
 80098b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098b8:	9100      	str	r1, [sp, #0]
 80098ba:	2830      	cmp	r0, #48	; 0x30
 80098bc:	d0f8      	beq.n	80098b0 <__gethex+0x3c>
 80098be:	f7ff ffc4 	bl	800984a <__hexdig_fun>
 80098c2:	4604      	mov	r4, r0
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d13a      	bne.n	800993e <__gethex+0xca>
 80098c8:	9901      	ldr	r1, [sp, #4]
 80098ca:	4652      	mov	r2, sl
 80098cc:	4638      	mov	r0, r7
 80098ce:	f001 fa9a 	bl	800ae06 <strncmp>
 80098d2:	4605      	mov	r5, r0
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d168      	bne.n	80099aa <__gethex+0x136>
 80098d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80098dc:	eb07 060a 	add.w	r6, r7, sl
 80098e0:	f7ff ffb3 	bl	800984a <__hexdig_fun>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d062      	beq.n	80099ae <__gethex+0x13a>
 80098e8:	4633      	mov	r3, r6
 80098ea:	7818      	ldrb	r0, [r3, #0]
 80098ec:	2830      	cmp	r0, #48	; 0x30
 80098ee:	461f      	mov	r7, r3
 80098f0:	f103 0301 	add.w	r3, r3, #1
 80098f4:	d0f9      	beq.n	80098ea <__gethex+0x76>
 80098f6:	f7ff ffa8 	bl	800984a <__hexdig_fun>
 80098fa:	2301      	movs	r3, #1
 80098fc:	fab0 f480 	clz	r4, r0
 8009900:	0964      	lsrs	r4, r4, #5
 8009902:	4635      	mov	r5, r6
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	463a      	mov	r2, r7
 8009908:	4616      	mov	r6, r2
 800990a:	3201      	adds	r2, #1
 800990c:	7830      	ldrb	r0, [r6, #0]
 800990e:	f7ff ff9c 	bl	800984a <__hexdig_fun>
 8009912:	2800      	cmp	r0, #0
 8009914:	d1f8      	bne.n	8009908 <__gethex+0x94>
 8009916:	9901      	ldr	r1, [sp, #4]
 8009918:	4652      	mov	r2, sl
 800991a:	4630      	mov	r0, r6
 800991c:	f001 fa73 	bl	800ae06 <strncmp>
 8009920:	b980      	cbnz	r0, 8009944 <__gethex+0xd0>
 8009922:	b94d      	cbnz	r5, 8009938 <__gethex+0xc4>
 8009924:	eb06 050a 	add.w	r5, r6, sl
 8009928:	462a      	mov	r2, r5
 800992a:	4616      	mov	r6, r2
 800992c:	3201      	adds	r2, #1
 800992e:	7830      	ldrb	r0, [r6, #0]
 8009930:	f7ff ff8b 	bl	800984a <__hexdig_fun>
 8009934:	2800      	cmp	r0, #0
 8009936:	d1f8      	bne.n	800992a <__gethex+0xb6>
 8009938:	1bad      	subs	r5, r5, r6
 800993a:	00ad      	lsls	r5, r5, #2
 800993c:	e004      	b.n	8009948 <__gethex+0xd4>
 800993e:	2400      	movs	r4, #0
 8009940:	4625      	mov	r5, r4
 8009942:	e7e0      	b.n	8009906 <__gethex+0x92>
 8009944:	2d00      	cmp	r5, #0
 8009946:	d1f7      	bne.n	8009938 <__gethex+0xc4>
 8009948:	7833      	ldrb	r3, [r6, #0]
 800994a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800994e:	2b50      	cmp	r3, #80	; 0x50
 8009950:	d13b      	bne.n	80099ca <__gethex+0x156>
 8009952:	7873      	ldrb	r3, [r6, #1]
 8009954:	2b2b      	cmp	r3, #43	; 0x2b
 8009956:	d02c      	beq.n	80099b2 <__gethex+0x13e>
 8009958:	2b2d      	cmp	r3, #45	; 0x2d
 800995a:	d02e      	beq.n	80099ba <__gethex+0x146>
 800995c:	1c71      	adds	r1, r6, #1
 800995e:	f04f 0900 	mov.w	r9, #0
 8009962:	7808      	ldrb	r0, [r1, #0]
 8009964:	f7ff ff71 	bl	800984a <__hexdig_fun>
 8009968:	1e43      	subs	r3, r0, #1
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b18      	cmp	r3, #24
 800996e:	d82c      	bhi.n	80099ca <__gethex+0x156>
 8009970:	f1a0 0210 	sub.w	r2, r0, #16
 8009974:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009978:	f7ff ff67 	bl	800984a <__hexdig_fun>
 800997c:	1e43      	subs	r3, r0, #1
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b18      	cmp	r3, #24
 8009982:	d91d      	bls.n	80099c0 <__gethex+0x14c>
 8009984:	f1b9 0f00 	cmp.w	r9, #0
 8009988:	d000      	beq.n	800998c <__gethex+0x118>
 800998a:	4252      	negs	r2, r2
 800998c:	4415      	add	r5, r2
 800998e:	f8cb 1000 	str.w	r1, [fp]
 8009992:	b1e4      	cbz	r4, 80099ce <__gethex+0x15a>
 8009994:	9b00      	ldr	r3, [sp, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	bf14      	ite	ne
 800999a:	2700      	movne	r7, #0
 800999c:	2706      	moveq	r7, #6
 800999e:	4638      	mov	r0, r7
 80099a0:	b009      	add	sp, #36	; 0x24
 80099a2:	ecbd 8b02 	vpop	{d8}
 80099a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099aa:	463e      	mov	r6, r7
 80099ac:	4625      	mov	r5, r4
 80099ae:	2401      	movs	r4, #1
 80099b0:	e7ca      	b.n	8009948 <__gethex+0xd4>
 80099b2:	f04f 0900 	mov.w	r9, #0
 80099b6:	1cb1      	adds	r1, r6, #2
 80099b8:	e7d3      	b.n	8009962 <__gethex+0xee>
 80099ba:	f04f 0901 	mov.w	r9, #1
 80099be:	e7fa      	b.n	80099b6 <__gethex+0x142>
 80099c0:	230a      	movs	r3, #10
 80099c2:	fb03 0202 	mla	r2, r3, r2, r0
 80099c6:	3a10      	subs	r2, #16
 80099c8:	e7d4      	b.n	8009974 <__gethex+0x100>
 80099ca:	4631      	mov	r1, r6
 80099cc:	e7df      	b.n	800998e <__gethex+0x11a>
 80099ce:	1bf3      	subs	r3, r6, r7
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4621      	mov	r1, r4
 80099d4:	2b07      	cmp	r3, #7
 80099d6:	dc0b      	bgt.n	80099f0 <__gethex+0x17c>
 80099d8:	ee18 0a10 	vmov	r0, s16
 80099dc:	f000 fae6 	bl	8009fac <_Balloc>
 80099e0:	4604      	mov	r4, r0
 80099e2:	b940      	cbnz	r0, 80099f6 <__gethex+0x182>
 80099e4:	4b65      	ldr	r3, [pc, #404]	; (8009b7c <__gethex+0x308>)
 80099e6:	4602      	mov	r2, r0
 80099e8:	21de      	movs	r1, #222	; 0xde
 80099ea:	4865      	ldr	r0, [pc, #404]	; (8009b80 <__gethex+0x30c>)
 80099ec:	f001 fa3c 	bl	800ae68 <__assert_func>
 80099f0:	3101      	adds	r1, #1
 80099f2:	105b      	asrs	r3, r3, #1
 80099f4:	e7ee      	b.n	80099d4 <__gethex+0x160>
 80099f6:	f100 0914 	add.w	r9, r0, #20
 80099fa:	f04f 0b00 	mov.w	fp, #0
 80099fe:	f1ca 0301 	rsb	r3, sl, #1
 8009a02:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a06:	f8cd b000 	str.w	fp, [sp]
 8009a0a:	9306      	str	r3, [sp, #24]
 8009a0c:	42b7      	cmp	r7, r6
 8009a0e:	d340      	bcc.n	8009a92 <__gethex+0x21e>
 8009a10:	9802      	ldr	r0, [sp, #8]
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	f840 3b04 	str.w	r3, [r0], #4
 8009a18:	eba0 0009 	sub.w	r0, r0, r9
 8009a1c:	1080      	asrs	r0, r0, #2
 8009a1e:	0146      	lsls	r6, r0, #5
 8009a20:	6120      	str	r0, [r4, #16]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fbb8 	bl	800a198 <__hi0bits>
 8009a28:	1a30      	subs	r0, r6, r0
 8009a2a:	f8d8 6000 	ldr.w	r6, [r8]
 8009a2e:	42b0      	cmp	r0, r6
 8009a30:	dd63      	ble.n	8009afa <__gethex+0x286>
 8009a32:	1b87      	subs	r7, r0, r6
 8009a34:	4639      	mov	r1, r7
 8009a36:	4620      	mov	r0, r4
 8009a38:	f000 ff52 	bl	800a8e0 <__any_on>
 8009a3c:	4682      	mov	sl, r0
 8009a3e:	b1a8      	cbz	r0, 8009a6c <__gethex+0x1f8>
 8009a40:	1e7b      	subs	r3, r7, #1
 8009a42:	1159      	asrs	r1, r3, #5
 8009a44:	f003 021f 	and.w	r2, r3, #31
 8009a48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a4c:	f04f 0a01 	mov.w	sl, #1
 8009a50:	fa0a f202 	lsl.w	r2, sl, r2
 8009a54:	420a      	tst	r2, r1
 8009a56:	d009      	beq.n	8009a6c <__gethex+0x1f8>
 8009a58:	4553      	cmp	r3, sl
 8009a5a:	dd05      	ble.n	8009a68 <__gethex+0x1f4>
 8009a5c:	1eb9      	subs	r1, r7, #2
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 ff3e 	bl	800a8e0 <__any_on>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d145      	bne.n	8009af4 <__gethex+0x280>
 8009a68:	f04f 0a02 	mov.w	sl, #2
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff fe99 	bl	80097a6 <rshift>
 8009a74:	443d      	add	r5, r7
 8009a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a7a:	42ab      	cmp	r3, r5
 8009a7c:	da4c      	bge.n	8009b18 <__gethex+0x2a4>
 8009a7e:	ee18 0a10 	vmov	r0, s16
 8009a82:	4621      	mov	r1, r4
 8009a84:	f000 fad2 	bl	800a02c <_Bfree>
 8009a88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	27a3      	movs	r7, #163	; 0xa3
 8009a90:	e785      	b.n	800999e <__gethex+0x12a>
 8009a92:	1e73      	subs	r3, r6, #1
 8009a94:	9a05      	ldr	r2, [sp, #20]
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d019      	beq.n	8009ad4 <__gethex+0x260>
 8009aa0:	f1bb 0f20 	cmp.w	fp, #32
 8009aa4:	d107      	bne.n	8009ab6 <__gethex+0x242>
 8009aa6:	9b02      	ldr	r3, [sp, #8]
 8009aa8:	9a00      	ldr	r2, [sp, #0]
 8009aaa:	f843 2b04 	str.w	r2, [r3], #4
 8009aae:	9302      	str	r3, [sp, #8]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	469b      	mov	fp, r3
 8009ab6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009aba:	f7ff fec6 	bl	800984a <__hexdig_fun>
 8009abe:	9b00      	ldr	r3, [sp, #0]
 8009ac0:	f000 000f 	and.w	r0, r0, #15
 8009ac4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ac8:	4303      	orrs	r3, r0
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	f10b 0b04 	add.w	fp, fp, #4
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	e00d      	b.n	8009af0 <__gethex+0x27c>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	9a06      	ldr	r2, [sp, #24]
 8009ad8:	4413      	add	r3, r2
 8009ada:	42bb      	cmp	r3, r7
 8009adc:	d3e0      	bcc.n	8009aa0 <__gethex+0x22c>
 8009ade:	4618      	mov	r0, r3
 8009ae0:	9901      	ldr	r1, [sp, #4]
 8009ae2:	9307      	str	r3, [sp, #28]
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	f001 f98e 	bl	800ae06 <strncmp>
 8009aea:	9b07      	ldr	r3, [sp, #28]
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d1d7      	bne.n	8009aa0 <__gethex+0x22c>
 8009af0:	461e      	mov	r6, r3
 8009af2:	e78b      	b.n	8009a0c <__gethex+0x198>
 8009af4:	f04f 0a03 	mov.w	sl, #3
 8009af8:	e7b8      	b.n	8009a6c <__gethex+0x1f8>
 8009afa:	da0a      	bge.n	8009b12 <__gethex+0x29e>
 8009afc:	1a37      	subs	r7, r6, r0
 8009afe:	4621      	mov	r1, r4
 8009b00:	ee18 0a10 	vmov	r0, s16
 8009b04:	463a      	mov	r2, r7
 8009b06:	f000 fcad 	bl	800a464 <__lshift>
 8009b0a:	1bed      	subs	r5, r5, r7
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	f100 0914 	add.w	r9, r0, #20
 8009b12:	f04f 0a00 	mov.w	sl, #0
 8009b16:	e7ae      	b.n	8009a76 <__gethex+0x202>
 8009b18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b1c:	42a8      	cmp	r0, r5
 8009b1e:	dd72      	ble.n	8009c06 <__gethex+0x392>
 8009b20:	1b45      	subs	r5, r0, r5
 8009b22:	42ae      	cmp	r6, r5
 8009b24:	dc36      	bgt.n	8009b94 <__gethex+0x320>
 8009b26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d02a      	beq.n	8009b84 <__gethex+0x310>
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d02c      	beq.n	8009b8c <__gethex+0x318>
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d115      	bne.n	8009b62 <__gethex+0x2ee>
 8009b36:	42ae      	cmp	r6, r5
 8009b38:	d113      	bne.n	8009b62 <__gethex+0x2ee>
 8009b3a:	2e01      	cmp	r6, #1
 8009b3c:	d10b      	bne.n	8009b56 <__gethex+0x2e2>
 8009b3e:	9a04      	ldr	r2, [sp, #16]
 8009b40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	f8c9 3000 	str.w	r3, [r9]
 8009b4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b50:	2762      	movs	r7, #98	; 0x62
 8009b52:	601c      	str	r4, [r3, #0]
 8009b54:	e723      	b.n	800999e <__gethex+0x12a>
 8009b56:	1e71      	subs	r1, r6, #1
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fec1 	bl	800a8e0 <__any_on>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d1ed      	bne.n	8009b3e <__gethex+0x2ca>
 8009b62:	ee18 0a10 	vmov	r0, s16
 8009b66:	4621      	mov	r1, r4
 8009b68:	f000 fa60 	bl	800a02c <_Bfree>
 8009b6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	2750      	movs	r7, #80	; 0x50
 8009b74:	e713      	b.n	800999e <__gethex+0x12a>
 8009b76:	bf00      	nop
 8009b78:	0800bad4 	.word	0x0800bad4
 8009b7c:	0800b9f4 	.word	0x0800b9f4
 8009b80:	0800ba68 	.word	0x0800ba68
 8009b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1eb      	bne.n	8009b62 <__gethex+0x2ee>
 8009b8a:	e7d8      	b.n	8009b3e <__gethex+0x2ca>
 8009b8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1d5      	bne.n	8009b3e <__gethex+0x2ca>
 8009b92:	e7e6      	b.n	8009b62 <__gethex+0x2ee>
 8009b94:	1e6f      	subs	r7, r5, #1
 8009b96:	f1ba 0f00 	cmp.w	sl, #0
 8009b9a:	d131      	bne.n	8009c00 <__gethex+0x38c>
 8009b9c:	b127      	cbz	r7, 8009ba8 <__gethex+0x334>
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 fe9d 	bl	800a8e0 <__any_on>
 8009ba6:	4682      	mov	sl, r0
 8009ba8:	117b      	asrs	r3, r7, #5
 8009baa:	2101      	movs	r1, #1
 8009bac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009bb0:	f007 071f 	and.w	r7, r7, #31
 8009bb4:	fa01 f707 	lsl.w	r7, r1, r7
 8009bb8:	421f      	tst	r7, r3
 8009bba:	4629      	mov	r1, r5
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	bf18      	it	ne
 8009bc0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009bc4:	1b76      	subs	r6, r6, r5
 8009bc6:	f7ff fdee 	bl	80097a6 <rshift>
 8009bca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009bce:	2702      	movs	r7, #2
 8009bd0:	f1ba 0f00 	cmp.w	sl, #0
 8009bd4:	d048      	beq.n	8009c68 <__gethex+0x3f4>
 8009bd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d015      	beq.n	8009c0a <__gethex+0x396>
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d017      	beq.n	8009c12 <__gethex+0x39e>
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d109      	bne.n	8009bfa <__gethex+0x386>
 8009be6:	f01a 0f02 	tst.w	sl, #2
 8009bea:	d006      	beq.n	8009bfa <__gethex+0x386>
 8009bec:	f8d9 0000 	ldr.w	r0, [r9]
 8009bf0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009bf4:	f01a 0f01 	tst.w	sl, #1
 8009bf8:	d10e      	bne.n	8009c18 <__gethex+0x3a4>
 8009bfa:	f047 0710 	orr.w	r7, r7, #16
 8009bfe:	e033      	b.n	8009c68 <__gethex+0x3f4>
 8009c00:	f04f 0a01 	mov.w	sl, #1
 8009c04:	e7d0      	b.n	8009ba8 <__gethex+0x334>
 8009c06:	2701      	movs	r7, #1
 8009c08:	e7e2      	b.n	8009bd0 <__gethex+0x35c>
 8009c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c0c:	f1c3 0301 	rsb	r3, r3, #1
 8009c10:	9315      	str	r3, [sp, #84]	; 0x54
 8009c12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0f0      	beq.n	8009bfa <__gethex+0x386>
 8009c18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c1c:	f104 0314 	add.w	r3, r4, #20
 8009c20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c28:	f04f 0c00 	mov.w	ip, #0
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c32:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c36:	d01c      	beq.n	8009c72 <__gethex+0x3fe>
 8009c38:	3201      	adds	r2, #1
 8009c3a:	6002      	str	r2, [r0, #0]
 8009c3c:	2f02      	cmp	r7, #2
 8009c3e:	f104 0314 	add.w	r3, r4, #20
 8009c42:	d13f      	bne.n	8009cc4 <__gethex+0x450>
 8009c44:	f8d8 2000 	ldr.w	r2, [r8]
 8009c48:	3a01      	subs	r2, #1
 8009c4a:	42b2      	cmp	r2, r6
 8009c4c:	d10a      	bne.n	8009c64 <__gethex+0x3f0>
 8009c4e:	1171      	asrs	r1, r6, #5
 8009c50:	2201      	movs	r2, #1
 8009c52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c56:	f006 061f 	and.w	r6, r6, #31
 8009c5a:	fa02 f606 	lsl.w	r6, r2, r6
 8009c5e:	421e      	tst	r6, r3
 8009c60:	bf18      	it	ne
 8009c62:	4617      	movne	r7, r2
 8009c64:	f047 0720 	orr.w	r7, r7, #32
 8009c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c6a:	601c      	str	r4, [r3, #0]
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	601d      	str	r5, [r3, #0]
 8009c70:	e695      	b.n	800999e <__gethex+0x12a>
 8009c72:	4299      	cmp	r1, r3
 8009c74:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c78:	d8d8      	bhi.n	8009c2c <__gethex+0x3b8>
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	459b      	cmp	fp, r3
 8009c7e:	db19      	blt.n	8009cb4 <__gethex+0x440>
 8009c80:	6861      	ldr	r1, [r4, #4]
 8009c82:	ee18 0a10 	vmov	r0, s16
 8009c86:	3101      	adds	r1, #1
 8009c88:	f000 f990 	bl	8009fac <_Balloc>
 8009c8c:	4681      	mov	r9, r0
 8009c8e:	b918      	cbnz	r0, 8009c98 <__gethex+0x424>
 8009c90:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <__gethex+0x488>)
 8009c92:	4602      	mov	r2, r0
 8009c94:	2184      	movs	r1, #132	; 0x84
 8009c96:	e6a8      	b.n	80099ea <__gethex+0x176>
 8009c98:	6922      	ldr	r2, [r4, #16]
 8009c9a:	3202      	adds	r2, #2
 8009c9c:	f104 010c 	add.w	r1, r4, #12
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	300c      	adds	r0, #12
 8009ca4:	f000 f974 	bl	8009f90 <memcpy>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	ee18 0a10 	vmov	r0, s16
 8009cae:	f000 f9bd 	bl	800a02c <_Bfree>
 8009cb2:	464c      	mov	r4, r9
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cbc:	6122      	str	r2, [r4, #16]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	615a      	str	r2, [r3, #20]
 8009cc2:	e7bb      	b.n	8009c3c <__gethex+0x3c8>
 8009cc4:	6922      	ldr	r2, [r4, #16]
 8009cc6:	455a      	cmp	r2, fp
 8009cc8:	dd0b      	ble.n	8009ce2 <__gethex+0x46e>
 8009cca:	2101      	movs	r1, #1
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff fd6a 	bl	80097a6 <rshift>
 8009cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cd6:	3501      	adds	r5, #1
 8009cd8:	42ab      	cmp	r3, r5
 8009cda:	f6ff aed0 	blt.w	8009a7e <__gethex+0x20a>
 8009cde:	2701      	movs	r7, #1
 8009ce0:	e7c0      	b.n	8009c64 <__gethex+0x3f0>
 8009ce2:	f016 061f 	ands.w	r6, r6, #31
 8009ce6:	d0fa      	beq.n	8009cde <__gethex+0x46a>
 8009ce8:	449a      	add	sl, r3
 8009cea:	f1c6 0620 	rsb	r6, r6, #32
 8009cee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009cf2:	f000 fa51 	bl	800a198 <__hi0bits>
 8009cf6:	42b0      	cmp	r0, r6
 8009cf8:	dbe7      	blt.n	8009cca <__gethex+0x456>
 8009cfa:	e7f0      	b.n	8009cde <__gethex+0x46a>
 8009cfc:	0800b9f4 	.word	0x0800b9f4

08009d00 <L_shift>:
 8009d00:	f1c2 0208 	rsb	r2, r2, #8
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	f1c2 0620 	rsb	r6, r2, #32
 8009d0c:	6843      	ldr	r3, [r0, #4]
 8009d0e:	6804      	ldr	r4, [r0, #0]
 8009d10:	fa03 f506 	lsl.w	r5, r3, r6
 8009d14:	432c      	orrs	r4, r5
 8009d16:	40d3      	lsrs	r3, r2
 8009d18:	6004      	str	r4, [r0, #0]
 8009d1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d1e:	4288      	cmp	r0, r1
 8009d20:	d3f4      	bcc.n	8009d0c <L_shift+0xc>
 8009d22:	bd70      	pop	{r4, r5, r6, pc}

08009d24 <__match>:
 8009d24:	b530      	push	{r4, r5, lr}
 8009d26:	6803      	ldr	r3, [r0, #0]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d2e:	b914      	cbnz	r4, 8009d36 <__match+0x12>
 8009d30:	6003      	str	r3, [r0, #0]
 8009d32:	2001      	movs	r0, #1
 8009d34:	bd30      	pop	{r4, r5, pc}
 8009d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d3e:	2d19      	cmp	r5, #25
 8009d40:	bf98      	it	ls
 8009d42:	3220      	addls	r2, #32
 8009d44:	42a2      	cmp	r2, r4
 8009d46:	d0f0      	beq.n	8009d2a <__match+0x6>
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e7f3      	b.n	8009d34 <__match+0x10>

08009d4c <__hexnan>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	680b      	ldr	r3, [r1, #0]
 8009d52:	6801      	ldr	r1, [r0, #0]
 8009d54:	115e      	asrs	r6, r3, #5
 8009d56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d5a:	f013 031f 	ands.w	r3, r3, #31
 8009d5e:	b087      	sub	sp, #28
 8009d60:	bf18      	it	ne
 8009d62:	3604      	addne	r6, #4
 8009d64:	2500      	movs	r5, #0
 8009d66:	1f37      	subs	r7, r6, #4
 8009d68:	4682      	mov	sl, r0
 8009d6a:	4690      	mov	r8, r2
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d72:	46b9      	mov	r9, r7
 8009d74:	463c      	mov	r4, r7
 8009d76:	9502      	str	r5, [sp, #8]
 8009d78:	46ab      	mov	fp, r5
 8009d7a:	784a      	ldrb	r2, [r1, #1]
 8009d7c:	1c4b      	adds	r3, r1, #1
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	b342      	cbz	r2, 8009dd4 <__hexnan+0x88>
 8009d82:	4610      	mov	r0, r2
 8009d84:	9105      	str	r1, [sp, #20]
 8009d86:	9204      	str	r2, [sp, #16]
 8009d88:	f7ff fd5f 	bl	800984a <__hexdig_fun>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d14f      	bne.n	8009e30 <__hexnan+0xe4>
 8009d90:	9a04      	ldr	r2, [sp, #16]
 8009d92:	9905      	ldr	r1, [sp, #20]
 8009d94:	2a20      	cmp	r2, #32
 8009d96:	d818      	bhi.n	8009dca <__hexnan+0x7e>
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	459b      	cmp	fp, r3
 8009d9c:	dd13      	ble.n	8009dc6 <__hexnan+0x7a>
 8009d9e:	454c      	cmp	r4, r9
 8009da0:	d206      	bcs.n	8009db0 <__hexnan+0x64>
 8009da2:	2d07      	cmp	r5, #7
 8009da4:	dc04      	bgt.n	8009db0 <__hexnan+0x64>
 8009da6:	462a      	mov	r2, r5
 8009da8:	4649      	mov	r1, r9
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff ffa8 	bl	8009d00 <L_shift>
 8009db0:	4544      	cmp	r4, r8
 8009db2:	d950      	bls.n	8009e56 <__hexnan+0x10a>
 8009db4:	2300      	movs	r3, #0
 8009db6:	f1a4 0904 	sub.w	r9, r4, #4
 8009dba:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dbe:	f8cd b008 	str.w	fp, [sp, #8]
 8009dc2:	464c      	mov	r4, r9
 8009dc4:	461d      	mov	r5, r3
 8009dc6:	9903      	ldr	r1, [sp, #12]
 8009dc8:	e7d7      	b.n	8009d7a <__hexnan+0x2e>
 8009dca:	2a29      	cmp	r2, #41	; 0x29
 8009dcc:	d156      	bne.n	8009e7c <__hexnan+0x130>
 8009dce:	3102      	adds	r1, #2
 8009dd0:	f8ca 1000 	str.w	r1, [sl]
 8009dd4:	f1bb 0f00 	cmp.w	fp, #0
 8009dd8:	d050      	beq.n	8009e7c <__hexnan+0x130>
 8009dda:	454c      	cmp	r4, r9
 8009ddc:	d206      	bcs.n	8009dec <__hexnan+0xa0>
 8009dde:	2d07      	cmp	r5, #7
 8009de0:	dc04      	bgt.n	8009dec <__hexnan+0xa0>
 8009de2:	462a      	mov	r2, r5
 8009de4:	4649      	mov	r1, r9
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff ff8a 	bl	8009d00 <L_shift>
 8009dec:	4544      	cmp	r4, r8
 8009dee:	d934      	bls.n	8009e5a <__hexnan+0x10e>
 8009df0:	f1a8 0204 	sub.w	r2, r8, #4
 8009df4:	4623      	mov	r3, r4
 8009df6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dfa:	f842 1f04 	str.w	r1, [r2, #4]!
 8009dfe:	429f      	cmp	r7, r3
 8009e00:	d2f9      	bcs.n	8009df6 <__hexnan+0xaa>
 8009e02:	1b3b      	subs	r3, r7, r4
 8009e04:	f023 0303 	bic.w	r3, r3, #3
 8009e08:	3304      	adds	r3, #4
 8009e0a:	3401      	adds	r4, #1
 8009e0c:	3e03      	subs	r6, #3
 8009e0e:	42b4      	cmp	r4, r6
 8009e10:	bf88      	it	hi
 8009e12:	2304      	movhi	r3, #4
 8009e14:	4443      	add	r3, r8
 8009e16:	2200      	movs	r2, #0
 8009e18:	f843 2b04 	str.w	r2, [r3], #4
 8009e1c:	429f      	cmp	r7, r3
 8009e1e:	d2fb      	bcs.n	8009e18 <__hexnan+0xcc>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	b91b      	cbnz	r3, 8009e2c <__hexnan+0xe0>
 8009e24:	4547      	cmp	r7, r8
 8009e26:	d127      	bne.n	8009e78 <__hexnan+0x12c>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	2005      	movs	r0, #5
 8009e2e:	e026      	b.n	8009e7e <__hexnan+0x132>
 8009e30:	3501      	adds	r5, #1
 8009e32:	2d08      	cmp	r5, #8
 8009e34:	f10b 0b01 	add.w	fp, fp, #1
 8009e38:	dd06      	ble.n	8009e48 <__hexnan+0xfc>
 8009e3a:	4544      	cmp	r4, r8
 8009e3c:	d9c3      	bls.n	8009dc6 <__hexnan+0x7a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e44:	2501      	movs	r5, #1
 8009e46:	3c04      	subs	r4, #4
 8009e48:	6822      	ldr	r2, [r4, #0]
 8009e4a:	f000 000f 	and.w	r0, r0, #15
 8009e4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009e52:	6022      	str	r2, [r4, #0]
 8009e54:	e7b7      	b.n	8009dc6 <__hexnan+0x7a>
 8009e56:	2508      	movs	r5, #8
 8009e58:	e7b5      	b.n	8009dc6 <__hexnan+0x7a>
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0df      	beq.n	8009e20 <__hexnan+0xd4>
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	f1c3 0320 	rsb	r3, r3, #32
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e70:	401a      	ands	r2, r3
 8009e72:	f846 2c04 	str.w	r2, [r6, #-4]
 8009e76:	e7d3      	b.n	8009e20 <__hexnan+0xd4>
 8009e78:	3f04      	subs	r7, #4
 8009e7a:	e7d1      	b.n	8009e20 <__hexnan+0xd4>
 8009e7c:	2004      	movs	r0, #4
 8009e7e:	b007      	add	sp, #28
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e84 <_localeconv_r>:
 8009e84:	4800      	ldr	r0, [pc, #0]	; (8009e88 <_localeconv_r+0x4>)
 8009e86:	4770      	bx	lr
 8009e88:	200001e8 	.word	0x200001e8

08009e8c <__retarget_lock_init_recursive>:
 8009e8c:	4770      	bx	lr

08009e8e <__retarget_lock_acquire_recursive>:
 8009e8e:	4770      	bx	lr

08009e90 <__retarget_lock_release_recursive>:
 8009e90:	4770      	bx	lr

08009e92 <__swhatbuf_r>:
 8009e92:	b570      	push	{r4, r5, r6, lr}
 8009e94:	460e      	mov	r6, r1
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	2900      	cmp	r1, #0
 8009e9c:	b096      	sub	sp, #88	; 0x58
 8009e9e:	4614      	mov	r4, r2
 8009ea0:	461d      	mov	r5, r3
 8009ea2:	da07      	bge.n	8009eb4 <__swhatbuf_r+0x22>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	89b3      	ldrh	r3, [r6, #12]
 8009eaa:	061a      	lsls	r2, r3, #24
 8009eac:	d410      	bmi.n	8009ed0 <__swhatbuf_r+0x3e>
 8009eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eb2:	e00e      	b.n	8009ed2 <__swhatbuf_r+0x40>
 8009eb4:	466a      	mov	r2, sp
 8009eb6:	f001 f817 	bl	800aee8 <_fstat_r>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	dbf2      	blt.n	8009ea4 <__swhatbuf_r+0x12>
 8009ebe:	9a01      	ldr	r2, [sp, #4]
 8009ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ec8:	425a      	negs	r2, r3
 8009eca:	415a      	adcs	r2, r3
 8009ecc:	602a      	str	r2, [r5, #0]
 8009ece:	e7ee      	b.n	8009eae <__swhatbuf_r+0x1c>
 8009ed0:	2340      	movs	r3, #64	; 0x40
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	b016      	add	sp, #88	; 0x58
 8009ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009edc <__smakebuf_r>:
 8009edc:	898b      	ldrh	r3, [r1, #12]
 8009ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ee0:	079d      	lsls	r5, r3, #30
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	d507      	bpl.n	8009ef8 <__smakebuf_r+0x1c>
 8009ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	6123      	str	r3, [r4, #16]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	6163      	str	r3, [r4, #20]
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	ab01      	add	r3, sp, #4
 8009efa:	466a      	mov	r2, sp
 8009efc:	f7ff ffc9 	bl	8009e92 <__swhatbuf_r>
 8009f00:	9900      	ldr	r1, [sp, #0]
 8009f02:	4605      	mov	r5, r0
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 fd6b 	bl	800a9e0 <_malloc_r>
 8009f0a:	b948      	cbnz	r0, 8009f20 <__smakebuf_r+0x44>
 8009f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f10:	059a      	lsls	r2, r3, #22
 8009f12:	d4ef      	bmi.n	8009ef4 <__smakebuf_r+0x18>
 8009f14:	f023 0303 	bic.w	r3, r3, #3
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	81a3      	strh	r3, [r4, #12]
 8009f1e:	e7e3      	b.n	8009ee8 <__smakebuf_r+0xc>
 8009f20:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <__smakebuf_r+0x7c>)
 8009f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	6020      	str	r0, [r4, #0]
 8009f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	9b00      	ldr	r3, [sp, #0]
 8009f30:	6163      	str	r3, [r4, #20]
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	6120      	str	r0, [r4, #16]
 8009f36:	b15b      	cbz	r3, 8009f50 <__smakebuf_r+0x74>
 8009f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f000 ffe5 	bl	800af0c <_isatty_r>
 8009f42:	b128      	cbz	r0, 8009f50 <__smakebuf_r+0x74>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f023 0303 	bic.w	r3, r3, #3
 8009f4a:	f043 0301 	orr.w	r3, r3, #1
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	89a0      	ldrh	r0, [r4, #12]
 8009f52:	4305      	orrs	r5, r0
 8009f54:	81a5      	strh	r5, [r4, #12]
 8009f56:	e7cd      	b.n	8009ef4 <__smakebuf_r+0x18>
 8009f58:	08009605 	.word	0x08009605

08009f5c <malloc>:
 8009f5c:	4b02      	ldr	r3, [pc, #8]	; (8009f68 <malloc+0xc>)
 8009f5e:	4601      	mov	r1, r0
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	f000 bd3d 	b.w	800a9e0 <_malloc_r>
 8009f66:	bf00      	nop
 8009f68:	20000090 	.word	0x20000090

08009f6c <__ascii_mbtowc>:
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	b901      	cbnz	r1, 8009f72 <__ascii_mbtowc+0x6>
 8009f70:	a901      	add	r1, sp, #4
 8009f72:	b142      	cbz	r2, 8009f86 <__ascii_mbtowc+0x1a>
 8009f74:	b14b      	cbz	r3, 8009f8a <__ascii_mbtowc+0x1e>
 8009f76:	7813      	ldrb	r3, [r2, #0]
 8009f78:	600b      	str	r3, [r1, #0]
 8009f7a:	7812      	ldrb	r2, [r2, #0]
 8009f7c:	1e10      	subs	r0, r2, #0
 8009f7e:	bf18      	it	ne
 8009f80:	2001      	movne	r0, #1
 8009f82:	b002      	add	sp, #8
 8009f84:	4770      	bx	lr
 8009f86:	4610      	mov	r0, r2
 8009f88:	e7fb      	b.n	8009f82 <__ascii_mbtowc+0x16>
 8009f8a:	f06f 0001 	mvn.w	r0, #1
 8009f8e:	e7f8      	b.n	8009f82 <__ascii_mbtowc+0x16>

08009f90 <memcpy>:
 8009f90:	440a      	add	r2, r1
 8009f92:	4291      	cmp	r1, r2
 8009f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f98:	d100      	bne.n	8009f9c <memcpy+0xc>
 8009f9a:	4770      	bx	lr
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa6:	4291      	cmp	r1, r2
 8009fa8:	d1f9      	bne.n	8009f9e <memcpy+0xe>
 8009faa:	bd10      	pop	{r4, pc}

08009fac <_Balloc>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	b976      	cbnz	r6, 8009fd4 <_Balloc+0x28>
 8009fb6:	2010      	movs	r0, #16
 8009fb8:	f7ff ffd0 	bl	8009f5c <malloc>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	6260      	str	r0, [r4, #36]	; 0x24
 8009fc0:	b920      	cbnz	r0, 8009fcc <_Balloc+0x20>
 8009fc2:	4b18      	ldr	r3, [pc, #96]	; (800a024 <_Balloc+0x78>)
 8009fc4:	4818      	ldr	r0, [pc, #96]	; (800a028 <_Balloc+0x7c>)
 8009fc6:	2166      	movs	r1, #102	; 0x66
 8009fc8:	f000 ff4e 	bl	800ae68 <__assert_func>
 8009fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fd0:	6006      	str	r6, [r0, #0]
 8009fd2:	60c6      	str	r6, [r0, #12]
 8009fd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fd6:	68f3      	ldr	r3, [r6, #12]
 8009fd8:	b183      	cbz	r3, 8009ffc <_Balloc+0x50>
 8009fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fe2:	b9b8      	cbnz	r0, 800a014 <_Balloc+0x68>
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8009fea:	1d72      	adds	r2, r6, #5
 8009fec:	0092      	lsls	r2, r2, #2
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fc97 	bl	800a922 <_calloc_r>
 8009ff4:	b160      	cbz	r0, 800a010 <_Balloc+0x64>
 8009ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ffa:	e00e      	b.n	800a01a <_Balloc+0x6e>
 8009ffc:	2221      	movs	r2, #33	; 0x21
 8009ffe:	2104      	movs	r1, #4
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fc8e 	bl	800a922 <_calloc_r>
 800a006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a008:	60f0      	str	r0, [r6, #12]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e4      	bne.n	8009fda <_Balloc+0x2e>
 800a010:	2000      	movs	r0, #0
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	6802      	ldr	r2, [r0, #0]
 800a016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a01a:	2300      	movs	r3, #0
 800a01c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a020:	e7f7      	b.n	800a012 <_Balloc+0x66>
 800a022:	bf00      	nop
 800a024:	0800b97e 	.word	0x0800b97e
 800a028:	0800bae8 	.word	0x0800bae8

0800a02c <_Bfree>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a030:	4605      	mov	r5, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b976      	cbnz	r6, 800a054 <_Bfree+0x28>
 800a036:	2010      	movs	r0, #16
 800a038:	f7ff ff90 	bl	8009f5c <malloc>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6268      	str	r0, [r5, #36]	; 0x24
 800a040:	b920      	cbnz	r0, 800a04c <_Bfree+0x20>
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <_Bfree+0x3c>)
 800a044:	4809      	ldr	r0, [pc, #36]	; (800a06c <_Bfree+0x40>)
 800a046:	218a      	movs	r1, #138	; 0x8a
 800a048:	f000 ff0e 	bl	800ae68 <__assert_func>
 800a04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a050:	6006      	str	r6, [r0, #0]
 800a052:	60c6      	str	r6, [r0, #12]
 800a054:	b13c      	cbz	r4, 800a066 <_Bfree+0x3a>
 800a056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a058:	6862      	ldr	r2, [r4, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a060:	6021      	str	r1, [r4, #0]
 800a062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	0800b97e 	.word	0x0800b97e
 800a06c:	0800bae8 	.word	0x0800bae8

0800a070 <__multadd>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	690e      	ldr	r6, [r1, #16]
 800a076:	4607      	mov	r7, r0
 800a078:	4698      	mov	r8, r3
 800a07a:	460c      	mov	r4, r1
 800a07c:	f101 0014 	add.w	r0, r1, #20
 800a080:	2300      	movs	r3, #0
 800a082:	6805      	ldr	r5, [r0, #0]
 800a084:	b2a9      	uxth	r1, r5
 800a086:	fb02 8101 	mla	r1, r2, r1, r8
 800a08a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a08e:	0c2d      	lsrs	r5, r5, #16
 800a090:	fb02 c505 	mla	r5, r2, r5, ip
 800a094:	b289      	uxth	r1, r1
 800a096:	3301      	adds	r3, #1
 800a098:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a09c:	429e      	cmp	r6, r3
 800a09e:	f840 1b04 	str.w	r1, [r0], #4
 800a0a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a0a6:	dcec      	bgt.n	800a082 <__multadd+0x12>
 800a0a8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ac:	d022      	beq.n	800a0f4 <__multadd+0x84>
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	42b3      	cmp	r3, r6
 800a0b2:	dc19      	bgt.n	800a0e8 <__multadd+0x78>
 800a0b4:	6861      	ldr	r1, [r4, #4]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	f7ff ff77 	bl	8009fac <_Balloc>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <__multadd+0x5e>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <__multadd+0x8c>)
 800a0c6:	480e      	ldr	r0, [pc, #56]	; (800a100 <__multadd+0x90>)
 800a0c8:	21b5      	movs	r1, #181	; 0xb5
 800a0ca:	f000 fecd 	bl	800ae68 <__assert_func>
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	f104 010c 	add.w	r1, r4, #12
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	300c      	adds	r0, #12
 800a0da:	f7ff ff59 	bl	8009f90 <memcpy>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff ffa3 	bl	800a02c <_Bfree>
 800a0e6:	462c      	mov	r4, r5
 800a0e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a0ec:	3601      	adds	r6, #1
 800a0ee:	f8c3 8014 	str.w	r8, [r3, #20]
 800a0f2:	6126      	str	r6, [r4, #16]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fa:	bf00      	nop
 800a0fc:	0800b9f4 	.word	0x0800b9f4
 800a100:	0800bae8 	.word	0x0800bae8

0800a104 <__s2b>:
 800a104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a108:	460c      	mov	r4, r1
 800a10a:	4615      	mov	r5, r2
 800a10c:	461f      	mov	r7, r3
 800a10e:	2209      	movs	r2, #9
 800a110:	3308      	adds	r3, #8
 800a112:	4606      	mov	r6, r0
 800a114:	fb93 f3f2 	sdiv	r3, r3, r2
 800a118:	2100      	movs	r1, #0
 800a11a:	2201      	movs	r2, #1
 800a11c:	429a      	cmp	r2, r3
 800a11e:	db09      	blt.n	800a134 <__s2b+0x30>
 800a120:	4630      	mov	r0, r6
 800a122:	f7ff ff43 	bl	8009fac <_Balloc>
 800a126:	b940      	cbnz	r0, 800a13a <__s2b+0x36>
 800a128:	4602      	mov	r2, r0
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <__s2b+0x8c>)
 800a12c:	4819      	ldr	r0, [pc, #100]	; (800a194 <__s2b+0x90>)
 800a12e:	21ce      	movs	r1, #206	; 0xce
 800a130:	f000 fe9a 	bl	800ae68 <__assert_func>
 800a134:	0052      	lsls	r2, r2, #1
 800a136:	3101      	adds	r1, #1
 800a138:	e7f0      	b.n	800a11c <__s2b+0x18>
 800a13a:	9b08      	ldr	r3, [sp, #32]
 800a13c:	6143      	str	r3, [r0, #20]
 800a13e:	2d09      	cmp	r5, #9
 800a140:	f04f 0301 	mov.w	r3, #1
 800a144:	6103      	str	r3, [r0, #16]
 800a146:	dd16      	ble.n	800a176 <__s2b+0x72>
 800a148:	f104 0909 	add.w	r9, r4, #9
 800a14c:	46c8      	mov	r8, r9
 800a14e:	442c      	add	r4, r5
 800a150:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a154:	4601      	mov	r1, r0
 800a156:	3b30      	subs	r3, #48	; 0x30
 800a158:	220a      	movs	r2, #10
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7ff ff88 	bl	800a070 <__multadd>
 800a160:	45a0      	cmp	r8, r4
 800a162:	d1f5      	bne.n	800a150 <__s2b+0x4c>
 800a164:	f1a5 0408 	sub.w	r4, r5, #8
 800a168:	444c      	add	r4, r9
 800a16a:	1b2d      	subs	r5, r5, r4
 800a16c:	1963      	adds	r3, r4, r5
 800a16e:	42bb      	cmp	r3, r7
 800a170:	db04      	blt.n	800a17c <__s2b+0x78>
 800a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a176:	340a      	adds	r4, #10
 800a178:	2509      	movs	r5, #9
 800a17a:	e7f6      	b.n	800a16a <__s2b+0x66>
 800a17c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a180:	4601      	mov	r1, r0
 800a182:	3b30      	subs	r3, #48	; 0x30
 800a184:	220a      	movs	r2, #10
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff72 	bl	800a070 <__multadd>
 800a18c:	e7ee      	b.n	800a16c <__s2b+0x68>
 800a18e:	bf00      	nop
 800a190:	0800b9f4 	.word	0x0800b9f4
 800a194:	0800bae8 	.word	0x0800bae8

0800a198 <__hi0bits>:
 800a198:	0c03      	lsrs	r3, r0, #16
 800a19a:	041b      	lsls	r3, r3, #16
 800a19c:	b9d3      	cbnz	r3, 800a1d4 <__hi0bits+0x3c>
 800a19e:	0400      	lsls	r0, r0, #16
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1a6:	bf04      	itt	eq
 800a1a8:	0200      	lsleq	r0, r0, #8
 800a1aa:	3308      	addeq	r3, #8
 800a1ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1b0:	bf04      	itt	eq
 800a1b2:	0100      	lsleq	r0, r0, #4
 800a1b4:	3304      	addeq	r3, #4
 800a1b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1ba:	bf04      	itt	eq
 800a1bc:	0080      	lsleq	r0, r0, #2
 800a1be:	3302      	addeq	r3, #2
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	db05      	blt.n	800a1d0 <__hi0bits+0x38>
 800a1c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1c8:	f103 0301 	add.w	r3, r3, #1
 800a1cc:	bf08      	it	eq
 800a1ce:	2320      	moveq	r3, #32
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	4770      	bx	lr
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e7e4      	b.n	800a1a2 <__hi0bits+0xa>

0800a1d8 <__lo0bits>:
 800a1d8:	6803      	ldr	r3, [r0, #0]
 800a1da:	f013 0207 	ands.w	r2, r3, #7
 800a1de:	4601      	mov	r1, r0
 800a1e0:	d00b      	beq.n	800a1fa <__lo0bits+0x22>
 800a1e2:	07da      	lsls	r2, r3, #31
 800a1e4:	d424      	bmi.n	800a230 <__lo0bits+0x58>
 800a1e6:	0798      	lsls	r0, r3, #30
 800a1e8:	bf49      	itett	mi
 800a1ea:	085b      	lsrmi	r3, r3, #1
 800a1ec:	089b      	lsrpl	r3, r3, #2
 800a1ee:	2001      	movmi	r0, #1
 800a1f0:	600b      	strmi	r3, [r1, #0]
 800a1f2:	bf5c      	itt	pl
 800a1f4:	600b      	strpl	r3, [r1, #0]
 800a1f6:	2002      	movpl	r0, #2
 800a1f8:	4770      	bx	lr
 800a1fa:	b298      	uxth	r0, r3
 800a1fc:	b9b0      	cbnz	r0, 800a22c <__lo0bits+0x54>
 800a1fe:	0c1b      	lsrs	r3, r3, #16
 800a200:	2010      	movs	r0, #16
 800a202:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a206:	bf04      	itt	eq
 800a208:	0a1b      	lsreq	r3, r3, #8
 800a20a:	3008      	addeq	r0, #8
 800a20c:	071a      	lsls	r2, r3, #28
 800a20e:	bf04      	itt	eq
 800a210:	091b      	lsreq	r3, r3, #4
 800a212:	3004      	addeq	r0, #4
 800a214:	079a      	lsls	r2, r3, #30
 800a216:	bf04      	itt	eq
 800a218:	089b      	lsreq	r3, r3, #2
 800a21a:	3002      	addeq	r0, #2
 800a21c:	07da      	lsls	r2, r3, #31
 800a21e:	d403      	bmi.n	800a228 <__lo0bits+0x50>
 800a220:	085b      	lsrs	r3, r3, #1
 800a222:	f100 0001 	add.w	r0, r0, #1
 800a226:	d005      	beq.n	800a234 <__lo0bits+0x5c>
 800a228:	600b      	str	r3, [r1, #0]
 800a22a:	4770      	bx	lr
 800a22c:	4610      	mov	r0, r2
 800a22e:	e7e8      	b.n	800a202 <__lo0bits+0x2a>
 800a230:	2000      	movs	r0, #0
 800a232:	4770      	bx	lr
 800a234:	2020      	movs	r0, #32
 800a236:	4770      	bx	lr

0800a238 <__i2b>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	460c      	mov	r4, r1
 800a23c:	2101      	movs	r1, #1
 800a23e:	f7ff feb5 	bl	8009fac <_Balloc>
 800a242:	4602      	mov	r2, r0
 800a244:	b928      	cbnz	r0, 800a252 <__i2b+0x1a>
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <__i2b+0x24>)
 800a248:	4805      	ldr	r0, [pc, #20]	; (800a260 <__i2b+0x28>)
 800a24a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a24e:	f000 fe0b 	bl	800ae68 <__assert_func>
 800a252:	2301      	movs	r3, #1
 800a254:	6144      	str	r4, [r0, #20]
 800a256:	6103      	str	r3, [r0, #16]
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	bf00      	nop
 800a25c:	0800b9f4 	.word	0x0800b9f4
 800a260:	0800bae8 	.word	0x0800bae8

0800a264 <__multiply>:
 800a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a268:	4614      	mov	r4, r2
 800a26a:	690a      	ldr	r2, [r1, #16]
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	429a      	cmp	r2, r3
 800a270:	bfb8      	it	lt
 800a272:	460b      	movlt	r3, r1
 800a274:	460d      	mov	r5, r1
 800a276:	bfbc      	itt	lt
 800a278:	4625      	movlt	r5, r4
 800a27a:	461c      	movlt	r4, r3
 800a27c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a280:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a284:	68ab      	ldr	r3, [r5, #8]
 800a286:	6869      	ldr	r1, [r5, #4]
 800a288:	eb0a 0709 	add.w	r7, sl, r9
 800a28c:	42bb      	cmp	r3, r7
 800a28e:	b085      	sub	sp, #20
 800a290:	bfb8      	it	lt
 800a292:	3101      	addlt	r1, #1
 800a294:	f7ff fe8a 	bl	8009fac <_Balloc>
 800a298:	b930      	cbnz	r0, 800a2a8 <__multiply+0x44>
 800a29a:	4602      	mov	r2, r0
 800a29c:	4b42      	ldr	r3, [pc, #264]	; (800a3a8 <__multiply+0x144>)
 800a29e:	4843      	ldr	r0, [pc, #268]	; (800a3ac <__multiply+0x148>)
 800a2a0:	f240 115d 	movw	r1, #349	; 0x15d
 800a2a4:	f000 fde0 	bl	800ae68 <__assert_func>
 800a2a8:	f100 0614 	add.w	r6, r0, #20
 800a2ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a2b0:	4633      	mov	r3, r6
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	4543      	cmp	r3, r8
 800a2b6:	d31e      	bcc.n	800a2f6 <__multiply+0x92>
 800a2b8:	f105 0c14 	add.w	ip, r5, #20
 800a2bc:	f104 0314 	add.w	r3, r4, #20
 800a2c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a2c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a2c8:	9202      	str	r2, [sp, #8]
 800a2ca:	ebac 0205 	sub.w	r2, ip, r5
 800a2ce:	3a15      	subs	r2, #21
 800a2d0:	f022 0203 	bic.w	r2, r2, #3
 800a2d4:	3204      	adds	r2, #4
 800a2d6:	f105 0115 	add.w	r1, r5, #21
 800a2da:	458c      	cmp	ip, r1
 800a2dc:	bf38      	it	cc
 800a2de:	2204      	movcc	r2, #4
 800a2e0:	9201      	str	r2, [sp, #4]
 800a2e2:	9a02      	ldr	r2, [sp, #8]
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d808      	bhi.n	800a2fc <__multiply+0x98>
 800a2ea:	2f00      	cmp	r7, #0
 800a2ec:	dc55      	bgt.n	800a39a <__multiply+0x136>
 800a2ee:	6107      	str	r7, [r0, #16]
 800a2f0:	b005      	add	sp, #20
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	f843 2b04 	str.w	r2, [r3], #4
 800a2fa:	e7db      	b.n	800a2b4 <__multiply+0x50>
 800a2fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a300:	f1ba 0f00 	cmp.w	sl, #0
 800a304:	d020      	beq.n	800a348 <__multiply+0xe4>
 800a306:	f105 0e14 	add.w	lr, r5, #20
 800a30a:	46b1      	mov	r9, r6
 800a30c:	2200      	movs	r2, #0
 800a30e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a312:	f8d9 b000 	ldr.w	fp, [r9]
 800a316:	b2a1      	uxth	r1, r4
 800a318:	fa1f fb8b 	uxth.w	fp, fp
 800a31c:	fb0a b101 	mla	r1, sl, r1, fp
 800a320:	4411      	add	r1, r2
 800a322:	f8d9 2000 	ldr.w	r2, [r9]
 800a326:	0c24      	lsrs	r4, r4, #16
 800a328:	0c12      	lsrs	r2, r2, #16
 800a32a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a32e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a332:	b289      	uxth	r1, r1
 800a334:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a338:	45f4      	cmp	ip, lr
 800a33a:	f849 1b04 	str.w	r1, [r9], #4
 800a33e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a342:	d8e4      	bhi.n	800a30e <__multiply+0xaa>
 800a344:	9901      	ldr	r1, [sp, #4]
 800a346:	5072      	str	r2, [r6, r1]
 800a348:	9a03      	ldr	r2, [sp, #12]
 800a34a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a34e:	3304      	adds	r3, #4
 800a350:	f1b9 0f00 	cmp.w	r9, #0
 800a354:	d01f      	beq.n	800a396 <__multiply+0x132>
 800a356:	6834      	ldr	r4, [r6, #0]
 800a358:	f105 0114 	add.w	r1, r5, #20
 800a35c:	46b6      	mov	lr, r6
 800a35e:	f04f 0a00 	mov.w	sl, #0
 800a362:	880a      	ldrh	r2, [r1, #0]
 800a364:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a368:	fb09 b202 	mla	r2, r9, r2, fp
 800a36c:	4492      	add	sl, r2
 800a36e:	b2a4      	uxth	r4, r4
 800a370:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a374:	f84e 4b04 	str.w	r4, [lr], #4
 800a378:	f851 4b04 	ldr.w	r4, [r1], #4
 800a37c:	f8be 2000 	ldrh.w	r2, [lr]
 800a380:	0c24      	lsrs	r4, r4, #16
 800a382:	fb09 2404 	mla	r4, r9, r4, r2
 800a386:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a38a:	458c      	cmp	ip, r1
 800a38c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a390:	d8e7      	bhi.n	800a362 <__multiply+0xfe>
 800a392:	9a01      	ldr	r2, [sp, #4]
 800a394:	50b4      	str	r4, [r6, r2]
 800a396:	3604      	adds	r6, #4
 800a398:	e7a3      	b.n	800a2e2 <__multiply+0x7e>
 800a39a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1a5      	bne.n	800a2ee <__multiply+0x8a>
 800a3a2:	3f01      	subs	r7, #1
 800a3a4:	e7a1      	b.n	800a2ea <__multiply+0x86>
 800a3a6:	bf00      	nop
 800a3a8:	0800b9f4 	.word	0x0800b9f4
 800a3ac:	0800bae8 	.word	0x0800bae8

0800a3b0 <__pow5mult>:
 800a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	4615      	mov	r5, r2
 800a3b6:	f012 0203 	ands.w	r2, r2, #3
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	d007      	beq.n	800a3d0 <__pow5mult+0x20>
 800a3c0:	4c25      	ldr	r4, [pc, #148]	; (800a458 <__pow5mult+0xa8>)
 800a3c2:	3a01      	subs	r2, #1
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ca:	f7ff fe51 	bl	800a070 <__multadd>
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	10ad      	asrs	r5, r5, #2
 800a3d2:	d03d      	beq.n	800a450 <__pow5mult+0xa0>
 800a3d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3d6:	b97c      	cbnz	r4, 800a3f8 <__pow5mult+0x48>
 800a3d8:	2010      	movs	r0, #16
 800a3da:	f7ff fdbf 	bl	8009f5c <malloc>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	6270      	str	r0, [r6, #36]	; 0x24
 800a3e2:	b928      	cbnz	r0, 800a3f0 <__pow5mult+0x40>
 800a3e4:	4b1d      	ldr	r3, [pc, #116]	; (800a45c <__pow5mult+0xac>)
 800a3e6:	481e      	ldr	r0, [pc, #120]	; (800a460 <__pow5mult+0xb0>)
 800a3e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3ec:	f000 fd3c 	bl	800ae68 <__assert_func>
 800a3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3f4:	6004      	str	r4, [r0, #0]
 800a3f6:	60c4      	str	r4, [r0, #12]
 800a3f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a400:	b94c      	cbnz	r4, 800a416 <__pow5mult+0x66>
 800a402:	f240 2171 	movw	r1, #625	; 0x271
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff ff16 	bl	800a238 <__i2b>
 800a40c:	2300      	movs	r3, #0
 800a40e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a412:	4604      	mov	r4, r0
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	f04f 0900 	mov.w	r9, #0
 800a41a:	07eb      	lsls	r3, r5, #31
 800a41c:	d50a      	bpl.n	800a434 <__pow5mult+0x84>
 800a41e:	4639      	mov	r1, r7
 800a420:	4622      	mov	r2, r4
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff ff1e 	bl	800a264 <__multiply>
 800a428:	4639      	mov	r1, r7
 800a42a:	4680      	mov	r8, r0
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7ff fdfd 	bl	800a02c <_Bfree>
 800a432:	4647      	mov	r7, r8
 800a434:	106d      	asrs	r5, r5, #1
 800a436:	d00b      	beq.n	800a450 <__pow5mult+0xa0>
 800a438:	6820      	ldr	r0, [r4, #0]
 800a43a:	b938      	cbnz	r0, 800a44c <__pow5mult+0x9c>
 800a43c:	4622      	mov	r2, r4
 800a43e:	4621      	mov	r1, r4
 800a440:	4630      	mov	r0, r6
 800a442:	f7ff ff0f 	bl	800a264 <__multiply>
 800a446:	6020      	str	r0, [r4, #0]
 800a448:	f8c0 9000 	str.w	r9, [r0]
 800a44c:	4604      	mov	r4, r0
 800a44e:	e7e4      	b.n	800a41a <__pow5mult+0x6a>
 800a450:	4638      	mov	r0, r7
 800a452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a456:	bf00      	nop
 800a458:	0800bc38 	.word	0x0800bc38
 800a45c:	0800b97e 	.word	0x0800b97e
 800a460:	0800bae8 	.word	0x0800bae8

0800a464 <__lshift>:
 800a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	460c      	mov	r4, r1
 800a46a:	6849      	ldr	r1, [r1, #4]
 800a46c:	6923      	ldr	r3, [r4, #16]
 800a46e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	4607      	mov	r7, r0
 800a476:	4691      	mov	r9, r2
 800a478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a47c:	f108 0601 	add.w	r6, r8, #1
 800a480:	42b3      	cmp	r3, r6
 800a482:	db0b      	blt.n	800a49c <__lshift+0x38>
 800a484:	4638      	mov	r0, r7
 800a486:	f7ff fd91 	bl	8009fac <_Balloc>
 800a48a:	4605      	mov	r5, r0
 800a48c:	b948      	cbnz	r0, 800a4a2 <__lshift+0x3e>
 800a48e:	4602      	mov	r2, r0
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <__lshift+0xd0>)
 800a492:	4829      	ldr	r0, [pc, #164]	; (800a538 <__lshift+0xd4>)
 800a494:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a498:	f000 fce6 	bl	800ae68 <__assert_func>
 800a49c:	3101      	adds	r1, #1
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	e7ee      	b.n	800a480 <__lshift+0x1c>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f100 0114 	add.w	r1, r0, #20
 800a4a8:	f100 0210 	add.w	r2, r0, #16
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	4553      	cmp	r3, sl
 800a4b0:	db33      	blt.n	800a51a <__lshift+0xb6>
 800a4b2:	6920      	ldr	r0, [r4, #16]
 800a4b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4b8:	f104 0314 	add.w	r3, r4, #20
 800a4bc:	f019 091f 	ands.w	r9, r9, #31
 800a4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4c8:	d02b      	beq.n	800a522 <__lshift+0xbe>
 800a4ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ce:	468a      	mov	sl, r1
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	fa00 f009 	lsl.w	r0, r0, r9
 800a4d8:	4302      	orrs	r2, r0
 800a4da:	f84a 2b04 	str.w	r2, [sl], #4
 800a4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e2:	459c      	cmp	ip, r3
 800a4e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4e8:	d8f3      	bhi.n	800a4d2 <__lshift+0x6e>
 800a4ea:	ebac 0304 	sub.w	r3, ip, r4
 800a4ee:	3b15      	subs	r3, #21
 800a4f0:	f023 0303 	bic.w	r3, r3, #3
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	f104 0015 	add.w	r0, r4, #21
 800a4fa:	4584      	cmp	ip, r0
 800a4fc:	bf38      	it	cc
 800a4fe:	2304      	movcc	r3, #4
 800a500:	50ca      	str	r2, [r1, r3]
 800a502:	b10a      	cbz	r2, 800a508 <__lshift+0xa4>
 800a504:	f108 0602 	add.w	r6, r8, #2
 800a508:	3e01      	subs	r6, #1
 800a50a:	4638      	mov	r0, r7
 800a50c:	612e      	str	r6, [r5, #16]
 800a50e:	4621      	mov	r1, r4
 800a510:	f7ff fd8c 	bl	800a02c <_Bfree>
 800a514:	4628      	mov	r0, r5
 800a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a51e:	3301      	adds	r3, #1
 800a520:	e7c5      	b.n	800a4ae <__lshift+0x4a>
 800a522:	3904      	subs	r1, #4
 800a524:	f853 2b04 	ldr.w	r2, [r3], #4
 800a528:	f841 2f04 	str.w	r2, [r1, #4]!
 800a52c:	459c      	cmp	ip, r3
 800a52e:	d8f9      	bhi.n	800a524 <__lshift+0xc0>
 800a530:	e7ea      	b.n	800a508 <__lshift+0xa4>
 800a532:	bf00      	nop
 800a534:	0800b9f4 	.word	0x0800b9f4
 800a538:	0800bae8 	.word	0x0800bae8

0800a53c <__mcmp>:
 800a53c:	b530      	push	{r4, r5, lr}
 800a53e:	6902      	ldr	r2, [r0, #16]
 800a540:	690c      	ldr	r4, [r1, #16]
 800a542:	1b12      	subs	r2, r2, r4
 800a544:	d10e      	bne.n	800a564 <__mcmp+0x28>
 800a546:	f100 0314 	add.w	r3, r0, #20
 800a54a:	3114      	adds	r1, #20
 800a54c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a55c:	42a5      	cmp	r5, r4
 800a55e:	d003      	beq.n	800a568 <__mcmp+0x2c>
 800a560:	d305      	bcc.n	800a56e <__mcmp+0x32>
 800a562:	2201      	movs	r2, #1
 800a564:	4610      	mov	r0, r2
 800a566:	bd30      	pop	{r4, r5, pc}
 800a568:	4283      	cmp	r3, r0
 800a56a:	d3f3      	bcc.n	800a554 <__mcmp+0x18>
 800a56c:	e7fa      	b.n	800a564 <__mcmp+0x28>
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295
 800a572:	e7f7      	b.n	800a564 <__mcmp+0x28>

0800a574 <__mdiff>:
 800a574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a578:	460c      	mov	r4, r1
 800a57a:	4606      	mov	r6, r0
 800a57c:	4611      	mov	r1, r2
 800a57e:	4620      	mov	r0, r4
 800a580:	4617      	mov	r7, r2
 800a582:	f7ff ffdb 	bl	800a53c <__mcmp>
 800a586:	1e05      	subs	r5, r0, #0
 800a588:	d110      	bne.n	800a5ac <__mdiff+0x38>
 800a58a:	4629      	mov	r1, r5
 800a58c:	4630      	mov	r0, r6
 800a58e:	f7ff fd0d 	bl	8009fac <_Balloc>
 800a592:	b930      	cbnz	r0, 800a5a2 <__mdiff+0x2e>
 800a594:	4b39      	ldr	r3, [pc, #228]	; (800a67c <__mdiff+0x108>)
 800a596:	4602      	mov	r2, r0
 800a598:	f240 2132 	movw	r1, #562	; 0x232
 800a59c:	4838      	ldr	r0, [pc, #224]	; (800a680 <__mdiff+0x10c>)
 800a59e:	f000 fc63 	bl	800ae68 <__assert_func>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	bfa4      	itt	ge
 800a5ae:	463b      	movge	r3, r7
 800a5b0:	4627      	movge	r7, r4
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	bfa6      	itte	ge
 800a5b8:	461c      	movge	r4, r3
 800a5ba:	2500      	movge	r5, #0
 800a5bc:	2501      	movlt	r5, #1
 800a5be:	f7ff fcf5 	bl	8009fac <_Balloc>
 800a5c2:	b920      	cbnz	r0, 800a5ce <__mdiff+0x5a>
 800a5c4:	4b2d      	ldr	r3, [pc, #180]	; (800a67c <__mdiff+0x108>)
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5cc:	e7e6      	b.n	800a59c <__mdiff+0x28>
 800a5ce:	693e      	ldr	r6, [r7, #16]
 800a5d0:	60c5      	str	r5, [r0, #12]
 800a5d2:	6925      	ldr	r5, [r4, #16]
 800a5d4:	f107 0114 	add.w	r1, r7, #20
 800a5d8:	f104 0914 	add.w	r9, r4, #20
 800a5dc:	f100 0e14 	add.w	lr, r0, #20
 800a5e0:	f107 0210 	add.w	r2, r7, #16
 800a5e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a5e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a5ec:	46f2      	mov	sl, lr
 800a5ee:	2700      	movs	r7, #0
 800a5f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5f8:	fa1f f883 	uxth.w	r8, r3
 800a5fc:	fa17 f78b 	uxtah	r7, r7, fp
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	eba7 0808 	sub.w	r8, r7, r8
 800a606:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a60a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a60e:	fa1f f888 	uxth.w	r8, r8
 800a612:	141f      	asrs	r7, r3, #16
 800a614:	454d      	cmp	r5, r9
 800a616:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a61a:	f84a 3b04 	str.w	r3, [sl], #4
 800a61e:	d8e7      	bhi.n	800a5f0 <__mdiff+0x7c>
 800a620:	1b2b      	subs	r3, r5, r4
 800a622:	3b15      	subs	r3, #21
 800a624:	f023 0303 	bic.w	r3, r3, #3
 800a628:	3304      	adds	r3, #4
 800a62a:	3415      	adds	r4, #21
 800a62c:	42a5      	cmp	r5, r4
 800a62e:	bf38      	it	cc
 800a630:	2304      	movcc	r3, #4
 800a632:	4419      	add	r1, r3
 800a634:	4473      	add	r3, lr
 800a636:	469e      	mov	lr, r3
 800a638:	460d      	mov	r5, r1
 800a63a:	4565      	cmp	r5, ip
 800a63c:	d30e      	bcc.n	800a65c <__mdiff+0xe8>
 800a63e:	f10c 0203 	add.w	r2, ip, #3
 800a642:	1a52      	subs	r2, r2, r1
 800a644:	f022 0203 	bic.w	r2, r2, #3
 800a648:	3903      	subs	r1, #3
 800a64a:	458c      	cmp	ip, r1
 800a64c:	bf38      	it	cc
 800a64e:	2200      	movcc	r2, #0
 800a650:	441a      	add	r2, r3
 800a652:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a656:	b17b      	cbz	r3, 800a678 <__mdiff+0x104>
 800a658:	6106      	str	r6, [r0, #16]
 800a65a:	e7a5      	b.n	800a5a8 <__mdiff+0x34>
 800a65c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a660:	fa17 f488 	uxtah	r4, r7, r8
 800a664:	1422      	asrs	r2, r4, #16
 800a666:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a66a:	b2a4      	uxth	r4, r4
 800a66c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a670:	f84e 4b04 	str.w	r4, [lr], #4
 800a674:	1417      	asrs	r7, r2, #16
 800a676:	e7e0      	b.n	800a63a <__mdiff+0xc6>
 800a678:	3e01      	subs	r6, #1
 800a67a:	e7ea      	b.n	800a652 <__mdiff+0xde>
 800a67c:	0800b9f4 	.word	0x0800b9f4
 800a680:	0800bae8 	.word	0x0800bae8

0800a684 <__ulp>:
 800a684:	b082      	sub	sp, #8
 800a686:	ed8d 0b00 	vstr	d0, [sp]
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	4912      	ldr	r1, [pc, #72]	; (800a6d8 <__ulp+0x54>)
 800a68e:	4019      	ands	r1, r3
 800a690:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a694:	2900      	cmp	r1, #0
 800a696:	dd05      	ble.n	800a6a4 <__ulp+0x20>
 800a698:	2200      	movs	r2, #0
 800a69a:	460b      	mov	r3, r1
 800a69c:	ec43 2b10 	vmov	d0, r2, r3
 800a6a0:	b002      	add	sp, #8
 800a6a2:	4770      	bx	lr
 800a6a4:	4249      	negs	r1, r1
 800a6a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a6aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a6ae:	f04f 0200 	mov.w	r2, #0
 800a6b2:	f04f 0300 	mov.w	r3, #0
 800a6b6:	da04      	bge.n	800a6c2 <__ulp+0x3e>
 800a6b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a6bc:	fa41 f300 	asr.w	r3, r1, r0
 800a6c0:	e7ec      	b.n	800a69c <__ulp+0x18>
 800a6c2:	f1a0 0114 	sub.w	r1, r0, #20
 800a6c6:	291e      	cmp	r1, #30
 800a6c8:	bfda      	itte	le
 800a6ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a6ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800a6d2:	2101      	movgt	r1, #1
 800a6d4:	460a      	mov	r2, r1
 800a6d6:	e7e1      	b.n	800a69c <__ulp+0x18>
 800a6d8:	7ff00000 	.word	0x7ff00000

0800a6dc <__b2d>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	6905      	ldr	r5, [r0, #16]
 800a6e0:	f100 0714 	add.w	r7, r0, #20
 800a6e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6e8:	1f2e      	subs	r6, r5, #4
 800a6ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7ff fd52 	bl	800a198 <__hi0bits>
 800a6f4:	f1c0 0320 	rsb	r3, r0, #32
 800a6f8:	280a      	cmp	r0, #10
 800a6fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a778 <__b2d+0x9c>
 800a6fe:	600b      	str	r3, [r1, #0]
 800a700:	dc14      	bgt.n	800a72c <__b2d+0x50>
 800a702:	f1c0 0e0b 	rsb	lr, r0, #11
 800a706:	fa24 f10e 	lsr.w	r1, r4, lr
 800a70a:	42b7      	cmp	r7, r6
 800a70c:	ea41 030c 	orr.w	r3, r1, ip
 800a710:	bf34      	ite	cc
 800a712:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a716:	2100      	movcs	r1, #0
 800a718:	3015      	adds	r0, #21
 800a71a:	fa04 f000 	lsl.w	r0, r4, r0
 800a71e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a722:	ea40 0201 	orr.w	r2, r0, r1
 800a726:	ec43 2b10 	vmov	d0, r2, r3
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a72c:	42b7      	cmp	r7, r6
 800a72e:	bf3a      	itte	cc
 800a730:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a734:	f1a5 0608 	subcc.w	r6, r5, #8
 800a738:	2100      	movcs	r1, #0
 800a73a:	380b      	subs	r0, #11
 800a73c:	d017      	beq.n	800a76e <__b2d+0x92>
 800a73e:	f1c0 0c20 	rsb	ip, r0, #32
 800a742:	fa04 f500 	lsl.w	r5, r4, r0
 800a746:	42be      	cmp	r6, r7
 800a748:	fa21 f40c 	lsr.w	r4, r1, ip
 800a74c:	ea45 0504 	orr.w	r5, r5, r4
 800a750:	bf8c      	ite	hi
 800a752:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a756:	2400      	movls	r4, #0
 800a758:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a75c:	fa01 f000 	lsl.w	r0, r1, r0
 800a760:	fa24 f40c 	lsr.w	r4, r4, ip
 800a764:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a768:	ea40 0204 	orr.w	r2, r0, r4
 800a76c:	e7db      	b.n	800a726 <__b2d+0x4a>
 800a76e:	ea44 030c 	orr.w	r3, r4, ip
 800a772:	460a      	mov	r2, r1
 800a774:	e7d7      	b.n	800a726 <__b2d+0x4a>
 800a776:	bf00      	nop
 800a778:	3ff00000 	.word	0x3ff00000

0800a77c <__d2b>:
 800a77c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a780:	4689      	mov	r9, r1
 800a782:	2101      	movs	r1, #1
 800a784:	ec57 6b10 	vmov	r6, r7, d0
 800a788:	4690      	mov	r8, r2
 800a78a:	f7ff fc0f 	bl	8009fac <_Balloc>
 800a78e:	4604      	mov	r4, r0
 800a790:	b930      	cbnz	r0, 800a7a0 <__d2b+0x24>
 800a792:	4602      	mov	r2, r0
 800a794:	4b25      	ldr	r3, [pc, #148]	; (800a82c <__d2b+0xb0>)
 800a796:	4826      	ldr	r0, [pc, #152]	; (800a830 <__d2b+0xb4>)
 800a798:	f240 310a 	movw	r1, #778	; 0x30a
 800a79c:	f000 fb64 	bl	800ae68 <__assert_func>
 800a7a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7a8:	bb35      	cbnz	r5, 800a7f8 <__d2b+0x7c>
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	d028      	beq.n	800a802 <__d2b+0x86>
 800a7b0:	4668      	mov	r0, sp
 800a7b2:	9600      	str	r6, [sp, #0]
 800a7b4:	f7ff fd10 	bl	800a1d8 <__lo0bits>
 800a7b8:	9900      	ldr	r1, [sp, #0]
 800a7ba:	b300      	cbz	r0, 800a7fe <__d2b+0x82>
 800a7bc:	9a01      	ldr	r2, [sp, #4]
 800a7be:	f1c0 0320 	rsb	r3, r0, #32
 800a7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	40c2      	lsrs	r2, r0
 800a7ca:	6163      	str	r3, [r4, #20]
 800a7cc:	9201      	str	r2, [sp, #4]
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	61a3      	str	r3, [r4, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bf14      	ite	ne
 800a7d6:	2202      	movne	r2, #2
 800a7d8:	2201      	moveq	r2, #1
 800a7da:	6122      	str	r2, [r4, #16]
 800a7dc:	b1d5      	cbz	r5, 800a814 <__d2b+0x98>
 800a7de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7e2:	4405      	add	r5, r0
 800a7e4:	f8c9 5000 	str.w	r5, [r9]
 800a7e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7ec:	f8c8 0000 	str.w	r0, [r8]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	b003      	add	sp, #12
 800a7f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7fc:	e7d5      	b.n	800a7aa <__d2b+0x2e>
 800a7fe:	6161      	str	r1, [r4, #20]
 800a800:	e7e5      	b.n	800a7ce <__d2b+0x52>
 800a802:	a801      	add	r0, sp, #4
 800a804:	f7ff fce8 	bl	800a1d8 <__lo0bits>
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	6163      	str	r3, [r4, #20]
 800a80c:	2201      	movs	r2, #1
 800a80e:	6122      	str	r2, [r4, #16]
 800a810:	3020      	adds	r0, #32
 800a812:	e7e3      	b.n	800a7dc <__d2b+0x60>
 800a814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a81c:	f8c9 0000 	str.w	r0, [r9]
 800a820:	6918      	ldr	r0, [r3, #16]
 800a822:	f7ff fcb9 	bl	800a198 <__hi0bits>
 800a826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a82a:	e7df      	b.n	800a7ec <__d2b+0x70>
 800a82c:	0800b9f4 	.word	0x0800b9f4
 800a830:	0800bae8 	.word	0x0800bae8

0800a834 <__ratio>:
 800a834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4688      	mov	r8, r1
 800a83a:	4669      	mov	r1, sp
 800a83c:	4681      	mov	r9, r0
 800a83e:	f7ff ff4d 	bl	800a6dc <__b2d>
 800a842:	a901      	add	r1, sp, #4
 800a844:	4640      	mov	r0, r8
 800a846:	ec55 4b10 	vmov	r4, r5, d0
 800a84a:	f7ff ff47 	bl	800a6dc <__b2d>
 800a84e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a852:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a856:	eba3 0c02 	sub.w	ip, r3, r2
 800a85a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a864:	ec51 0b10 	vmov	r0, r1, d0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfd6      	itet	le
 800a86c:	460a      	movle	r2, r1
 800a86e:	462a      	movgt	r2, r5
 800a870:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a874:	468b      	mov	fp, r1
 800a876:	462f      	mov	r7, r5
 800a878:	bfd4      	ite	le
 800a87a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a87e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a882:	4620      	mov	r0, r4
 800a884:	ee10 2a10 	vmov	r2, s0
 800a888:	465b      	mov	r3, fp
 800a88a:	4639      	mov	r1, r7
 800a88c:	f7f5 fffe 	bl	800088c <__aeabi_ddiv>
 800a890:	ec41 0b10 	vmov	d0, r0, r1
 800a894:	b003      	add	sp, #12
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a89a <__copybits>:
 800a89a:	3901      	subs	r1, #1
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	1149      	asrs	r1, r1, #5
 800a8a0:	6914      	ldr	r4, [r2, #16]
 800a8a2:	3101      	adds	r1, #1
 800a8a4:	f102 0314 	add.w	r3, r2, #20
 800a8a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8b0:	1f05      	subs	r5, r0, #4
 800a8b2:	42a3      	cmp	r3, r4
 800a8b4:	d30c      	bcc.n	800a8d0 <__copybits+0x36>
 800a8b6:	1aa3      	subs	r3, r4, r2
 800a8b8:	3b11      	subs	r3, #17
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	3211      	adds	r2, #17
 800a8c0:	42a2      	cmp	r2, r4
 800a8c2:	bf88      	it	hi
 800a8c4:	2300      	movhi	r3, #0
 800a8c6:	4418      	add	r0, r3
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4288      	cmp	r0, r1
 800a8cc:	d305      	bcc.n	800a8da <__copybits+0x40>
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8d8:	e7eb      	b.n	800a8b2 <__copybits+0x18>
 800a8da:	f840 3b04 	str.w	r3, [r0], #4
 800a8de:	e7f4      	b.n	800a8ca <__copybits+0x30>

0800a8e0 <__any_on>:
 800a8e0:	f100 0214 	add.w	r2, r0, #20
 800a8e4:	6900      	ldr	r0, [r0, #16]
 800a8e6:	114b      	asrs	r3, r1, #5
 800a8e8:	4298      	cmp	r0, r3
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	db11      	blt.n	800a912 <__any_on+0x32>
 800a8ee:	dd0a      	ble.n	800a906 <__any_on+0x26>
 800a8f0:	f011 011f 	ands.w	r1, r1, #31
 800a8f4:	d007      	beq.n	800a906 <__any_on+0x26>
 800a8f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8fa:	fa24 f001 	lsr.w	r0, r4, r1
 800a8fe:	fa00 f101 	lsl.w	r1, r0, r1
 800a902:	428c      	cmp	r4, r1
 800a904:	d10b      	bne.n	800a91e <__any_on+0x3e>
 800a906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d803      	bhi.n	800a916 <__any_on+0x36>
 800a90e:	2000      	movs	r0, #0
 800a910:	bd10      	pop	{r4, pc}
 800a912:	4603      	mov	r3, r0
 800a914:	e7f7      	b.n	800a906 <__any_on+0x26>
 800a916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a91a:	2900      	cmp	r1, #0
 800a91c:	d0f5      	beq.n	800a90a <__any_on+0x2a>
 800a91e:	2001      	movs	r0, #1
 800a920:	e7f6      	b.n	800a910 <__any_on+0x30>

0800a922 <_calloc_r>:
 800a922:	b513      	push	{r0, r1, r4, lr}
 800a924:	434a      	muls	r2, r1
 800a926:	4611      	mov	r1, r2
 800a928:	9201      	str	r2, [sp, #4]
 800a92a:	f000 f859 	bl	800a9e0 <_malloc_r>
 800a92e:	4604      	mov	r4, r0
 800a930:	b118      	cbz	r0, 800a93a <_calloc_r+0x18>
 800a932:	9a01      	ldr	r2, [sp, #4]
 800a934:	2100      	movs	r1, #0
 800a936:	f7fc f875 	bl	8006a24 <memset>
 800a93a:	4620      	mov	r0, r4
 800a93c:	b002      	add	sp, #8
 800a93e:	bd10      	pop	{r4, pc}

0800a940 <_free_r>:
 800a940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a942:	2900      	cmp	r1, #0
 800a944:	d048      	beq.n	800a9d8 <_free_r+0x98>
 800a946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94a:	9001      	str	r0, [sp, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f1a1 0404 	sub.w	r4, r1, #4
 800a952:	bfb8      	it	lt
 800a954:	18e4      	addlt	r4, r4, r3
 800a956:	f000 fb15 	bl	800af84 <__malloc_lock>
 800a95a:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <_free_r+0x9c>)
 800a95c:	9801      	ldr	r0, [sp, #4]
 800a95e:	6813      	ldr	r3, [r2, #0]
 800a960:	4615      	mov	r5, r2
 800a962:	b933      	cbnz	r3, 800a972 <_free_r+0x32>
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	6014      	str	r4, [r2, #0]
 800a968:	b003      	add	sp, #12
 800a96a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a96e:	f000 bb0f 	b.w	800af90 <__malloc_unlock>
 800a972:	42a3      	cmp	r3, r4
 800a974:	d90b      	bls.n	800a98e <_free_r+0x4e>
 800a976:	6821      	ldr	r1, [r4, #0]
 800a978:	1862      	adds	r2, r4, r1
 800a97a:	4293      	cmp	r3, r2
 800a97c:	bf04      	itt	eq
 800a97e:	681a      	ldreq	r2, [r3, #0]
 800a980:	685b      	ldreq	r3, [r3, #4]
 800a982:	6063      	str	r3, [r4, #4]
 800a984:	bf04      	itt	eq
 800a986:	1852      	addeq	r2, r2, r1
 800a988:	6022      	streq	r2, [r4, #0]
 800a98a:	602c      	str	r4, [r5, #0]
 800a98c:	e7ec      	b.n	800a968 <_free_r+0x28>
 800a98e:	461a      	mov	r2, r3
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	b10b      	cbz	r3, 800a998 <_free_r+0x58>
 800a994:	42a3      	cmp	r3, r4
 800a996:	d9fa      	bls.n	800a98e <_free_r+0x4e>
 800a998:	6811      	ldr	r1, [r2, #0]
 800a99a:	1855      	adds	r5, r2, r1
 800a99c:	42a5      	cmp	r5, r4
 800a99e:	d10b      	bne.n	800a9b8 <_free_r+0x78>
 800a9a0:	6824      	ldr	r4, [r4, #0]
 800a9a2:	4421      	add	r1, r4
 800a9a4:	1854      	adds	r4, r2, r1
 800a9a6:	42a3      	cmp	r3, r4
 800a9a8:	6011      	str	r1, [r2, #0]
 800a9aa:	d1dd      	bne.n	800a968 <_free_r+0x28>
 800a9ac:	681c      	ldr	r4, [r3, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	6053      	str	r3, [r2, #4]
 800a9b2:	4421      	add	r1, r4
 800a9b4:	6011      	str	r1, [r2, #0]
 800a9b6:	e7d7      	b.n	800a968 <_free_r+0x28>
 800a9b8:	d902      	bls.n	800a9c0 <_free_r+0x80>
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	6003      	str	r3, [r0, #0]
 800a9be:	e7d3      	b.n	800a968 <_free_r+0x28>
 800a9c0:	6825      	ldr	r5, [r4, #0]
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf04      	itt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	6063      	str	r3, [r4, #4]
 800a9ce:	bf04      	itt	eq
 800a9d0:	1949      	addeq	r1, r1, r5
 800a9d2:	6021      	streq	r1, [r4, #0]
 800a9d4:	6054      	str	r4, [r2, #4]
 800a9d6:	e7c7      	b.n	800a968 <_free_r+0x28>
 800a9d8:	b003      	add	sp, #12
 800a9da:	bd30      	pop	{r4, r5, pc}
 800a9dc:	20000298 	.word	0x20000298

0800a9e0 <_malloc_r>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	1ccd      	adds	r5, r1, #3
 800a9e4:	f025 0503 	bic.w	r5, r5, #3
 800a9e8:	3508      	adds	r5, #8
 800a9ea:	2d0c      	cmp	r5, #12
 800a9ec:	bf38      	it	cc
 800a9ee:	250c      	movcc	r5, #12
 800a9f0:	2d00      	cmp	r5, #0
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	db01      	blt.n	800a9fa <_malloc_r+0x1a>
 800a9f6:	42a9      	cmp	r1, r5
 800a9f8:	d903      	bls.n	800aa02 <_malloc_r+0x22>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	2000      	movs	r0, #0
 800aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa02:	f000 fabf 	bl	800af84 <__malloc_lock>
 800aa06:	4921      	ldr	r1, [pc, #132]	; (800aa8c <_malloc_r+0xac>)
 800aa08:	680a      	ldr	r2, [r1, #0]
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	b99c      	cbnz	r4, 800aa36 <_malloc_r+0x56>
 800aa0e:	4f20      	ldr	r7, [pc, #128]	; (800aa90 <_malloc_r+0xb0>)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	b923      	cbnz	r3, 800aa1e <_malloc_r+0x3e>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f9a2 	bl	800ad60 <_sbrk_r>
 800aa1c:	6038      	str	r0, [r7, #0]
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 f99d 	bl	800ad60 <_sbrk_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	d123      	bne.n	800aa72 <_malloc_r+0x92>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	6033      	str	r3, [r6, #0]
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 faae 	bl	800af90 <__malloc_unlock>
 800aa34:	e7e3      	b.n	800a9fe <_malloc_r+0x1e>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	1b5b      	subs	r3, r3, r5
 800aa3a:	d417      	bmi.n	800aa6c <_malloc_r+0x8c>
 800aa3c:	2b0b      	cmp	r3, #11
 800aa3e:	d903      	bls.n	800aa48 <_malloc_r+0x68>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	441c      	add	r4, r3
 800aa44:	6025      	str	r5, [r4, #0]
 800aa46:	e004      	b.n	800aa52 <_malloc_r+0x72>
 800aa48:	6863      	ldr	r3, [r4, #4]
 800aa4a:	42a2      	cmp	r2, r4
 800aa4c:	bf0c      	ite	eq
 800aa4e:	600b      	streq	r3, [r1, #0]
 800aa50:	6053      	strne	r3, [r2, #4]
 800aa52:	4630      	mov	r0, r6
 800aa54:	f000 fa9c 	bl	800af90 <__malloc_unlock>
 800aa58:	f104 000b 	add.w	r0, r4, #11
 800aa5c:	1d23      	adds	r3, r4, #4
 800aa5e:	f020 0007 	bic.w	r0, r0, #7
 800aa62:	1ac2      	subs	r2, r0, r3
 800aa64:	d0cc      	beq.n	800aa00 <_malloc_r+0x20>
 800aa66:	1a1b      	subs	r3, r3, r0
 800aa68:	50a3      	str	r3, [r4, r2]
 800aa6a:	e7c9      	b.n	800aa00 <_malloc_r+0x20>
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	6864      	ldr	r4, [r4, #4]
 800aa70:	e7cc      	b.n	800aa0c <_malloc_r+0x2c>
 800aa72:	1cc4      	adds	r4, r0, #3
 800aa74:	f024 0403 	bic.w	r4, r4, #3
 800aa78:	42a0      	cmp	r0, r4
 800aa7a:	d0e3      	beq.n	800aa44 <_malloc_r+0x64>
 800aa7c:	1a21      	subs	r1, r4, r0
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 f96e 	bl	800ad60 <_sbrk_r>
 800aa84:	3001      	adds	r0, #1
 800aa86:	d1dd      	bne.n	800aa44 <_malloc_r+0x64>
 800aa88:	e7cf      	b.n	800aa2a <_malloc_r+0x4a>
 800aa8a:	bf00      	nop
 800aa8c:	20000298 	.word	0x20000298
 800aa90:	2000029c 	.word	0x2000029c

0800aa94 <__ssputs_r>:
 800aa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	688e      	ldr	r6, [r1, #8]
 800aa9a:	429e      	cmp	r6, r3
 800aa9c:	4682      	mov	sl, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	4690      	mov	r8, r2
 800aaa2:	461f      	mov	r7, r3
 800aaa4:	d838      	bhi.n	800ab18 <__ssputs_r+0x84>
 800aaa6:	898a      	ldrh	r2, [r1, #12]
 800aaa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaac:	d032      	beq.n	800ab14 <__ssputs_r+0x80>
 800aaae:	6825      	ldr	r5, [r4, #0]
 800aab0:	6909      	ldr	r1, [r1, #16]
 800aab2:	eba5 0901 	sub.w	r9, r5, r1
 800aab6:	6965      	ldr	r5, [r4, #20]
 800aab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aac0:	3301      	adds	r3, #1
 800aac2:	444b      	add	r3, r9
 800aac4:	106d      	asrs	r5, r5, #1
 800aac6:	429d      	cmp	r5, r3
 800aac8:	bf38      	it	cc
 800aaca:	461d      	movcc	r5, r3
 800aacc:	0553      	lsls	r3, r2, #21
 800aace:	d531      	bpl.n	800ab34 <__ssputs_r+0xa0>
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7ff ff85 	bl	800a9e0 <_malloc_r>
 800aad6:	4606      	mov	r6, r0
 800aad8:	b950      	cbnz	r0, 800aaf0 <__ssputs_r+0x5c>
 800aada:	230c      	movs	r3, #12
 800aadc:	f8ca 3000 	str.w	r3, [sl]
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf0:	6921      	ldr	r1, [r4, #16]
 800aaf2:	464a      	mov	r2, r9
 800aaf4:	f7ff fa4c 	bl	8009f90 <memcpy>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab02:	81a3      	strh	r3, [r4, #12]
 800ab04:	6126      	str	r6, [r4, #16]
 800ab06:	6165      	str	r5, [r4, #20]
 800ab08:	444e      	add	r6, r9
 800ab0a:	eba5 0509 	sub.w	r5, r5, r9
 800ab0e:	6026      	str	r6, [r4, #0]
 800ab10:	60a5      	str	r5, [r4, #8]
 800ab12:	463e      	mov	r6, r7
 800ab14:	42be      	cmp	r6, r7
 800ab16:	d900      	bls.n	800ab1a <__ssputs_r+0x86>
 800ab18:	463e      	mov	r6, r7
 800ab1a:	4632      	mov	r2, r6
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	4641      	mov	r1, r8
 800ab20:	f000 fa16 	bl	800af50 <memmove>
 800ab24:	68a3      	ldr	r3, [r4, #8]
 800ab26:	6822      	ldr	r2, [r4, #0]
 800ab28:	1b9b      	subs	r3, r3, r6
 800ab2a:	4432      	add	r2, r6
 800ab2c:	60a3      	str	r3, [r4, #8]
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	2000      	movs	r0, #0
 800ab32:	e7db      	b.n	800aaec <__ssputs_r+0x58>
 800ab34:	462a      	mov	r2, r5
 800ab36:	f000 fa31 	bl	800af9c <_realloc_r>
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1e1      	bne.n	800ab04 <__ssputs_r+0x70>
 800ab40:	6921      	ldr	r1, [r4, #16]
 800ab42:	4650      	mov	r0, sl
 800ab44:	f7ff fefc 	bl	800a940 <_free_r>
 800ab48:	e7c7      	b.n	800aada <__ssputs_r+0x46>
	...

0800ab4c <_svfiprintf_r>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	4698      	mov	r8, r3
 800ab52:	898b      	ldrh	r3, [r1, #12]
 800ab54:	061b      	lsls	r3, r3, #24
 800ab56:	b09d      	sub	sp, #116	; 0x74
 800ab58:	4607      	mov	r7, r0
 800ab5a:	460d      	mov	r5, r1
 800ab5c:	4614      	mov	r4, r2
 800ab5e:	d50e      	bpl.n	800ab7e <_svfiprintf_r+0x32>
 800ab60:	690b      	ldr	r3, [r1, #16]
 800ab62:	b963      	cbnz	r3, 800ab7e <_svfiprintf_r+0x32>
 800ab64:	2140      	movs	r1, #64	; 0x40
 800ab66:	f7ff ff3b 	bl	800a9e0 <_malloc_r>
 800ab6a:	6028      	str	r0, [r5, #0]
 800ab6c:	6128      	str	r0, [r5, #16]
 800ab6e:	b920      	cbnz	r0, 800ab7a <_svfiprintf_r+0x2e>
 800ab70:	230c      	movs	r3, #12
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	e0d1      	b.n	800ad1e <_svfiprintf_r+0x1d2>
 800ab7a:	2340      	movs	r3, #64	; 0x40
 800ab7c:	616b      	str	r3, [r5, #20]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9309      	str	r3, [sp, #36]	; 0x24
 800ab82:	2320      	movs	r3, #32
 800ab84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab8c:	2330      	movs	r3, #48	; 0x30
 800ab8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad38 <_svfiprintf_r+0x1ec>
 800ab92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab96:	f04f 0901 	mov.w	r9, #1
 800ab9a:	4623      	mov	r3, r4
 800ab9c:	469a      	mov	sl, r3
 800ab9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aba2:	b10a      	cbz	r2, 800aba8 <_svfiprintf_r+0x5c>
 800aba4:	2a25      	cmp	r2, #37	; 0x25
 800aba6:	d1f9      	bne.n	800ab9c <_svfiprintf_r+0x50>
 800aba8:	ebba 0b04 	subs.w	fp, sl, r4
 800abac:	d00b      	beq.n	800abc6 <_svfiprintf_r+0x7a>
 800abae:	465b      	mov	r3, fp
 800abb0:	4622      	mov	r2, r4
 800abb2:	4629      	mov	r1, r5
 800abb4:	4638      	mov	r0, r7
 800abb6:	f7ff ff6d 	bl	800aa94 <__ssputs_r>
 800abba:	3001      	adds	r0, #1
 800abbc:	f000 80aa 	beq.w	800ad14 <_svfiprintf_r+0x1c8>
 800abc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc2:	445a      	add	r2, fp
 800abc4:	9209      	str	r2, [sp, #36]	; 0x24
 800abc6:	f89a 3000 	ldrb.w	r3, [sl]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 80a2 	beq.w	800ad14 <_svfiprintf_r+0x1c8>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abda:	f10a 0a01 	add.w	sl, sl, #1
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abe6:	931a      	str	r3, [sp, #104]	; 0x68
 800abe8:	4654      	mov	r4, sl
 800abea:	2205      	movs	r2, #5
 800abec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf0:	4851      	ldr	r0, [pc, #324]	; (800ad38 <_svfiprintf_r+0x1ec>)
 800abf2:	f7f5 fb15 	bl	8000220 <memchr>
 800abf6:	9a04      	ldr	r2, [sp, #16]
 800abf8:	b9d8      	cbnz	r0, 800ac32 <_svfiprintf_r+0xe6>
 800abfa:	06d0      	lsls	r0, r2, #27
 800abfc:	bf44      	itt	mi
 800abfe:	2320      	movmi	r3, #32
 800ac00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac04:	0711      	lsls	r1, r2, #28
 800ac06:	bf44      	itt	mi
 800ac08:	232b      	movmi	r3, #43	; 0x2b
 800ac0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac12:	2b2a      	cmp	r3, #42	; 0x2a
 800ac14:	d015      	beq.n	800ac42 <_svfiprintf_r+0xf6>
 800ac16:	9a07      	ldr	r2, [sp, #28]
 800ac18:	4654      	mov	r4, sl
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f04f 0c0a 	mov.w	ip, #10
 800ac20:	4621      	mov	r1, r4
 800ac22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac26:	3b30      	subs	r3, #48	; 0x30
 800ac28:	2b09      	cmp	r3, #9
 800ac2a:	d94e      	bls.n	800acca <_svfiprintf_r+0x17e>
 800ac2c:	b1b0      	cbz	r0, 800ac5c <_svfiprintf_r+0x110>
 800ac2e:	9207      	str	r2, [sp, #28]
 800ac30:	e014      	b.n	800ac5c <_svfiprintf_r+0x110>
 800ac32:	eba0 0308 	sub.w	r3, r0, r8
 800ac36:	fa09 f303 	lsl.w	r3, r9, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	9304      	str	r3, [sp, #16]
 800ac3e:	46a2      	mov	sl, r4
 800ac40:	e7d2      	b.n	800abe8 <_svfiprintf_r+0x9c>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	1d19      	adds	r1, r3, #4
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	9103      	str	r1, [sp, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bfbb      	ittet	lt
 800ac4e:	425b      	neglt	r3, r3
 800ac50:	f042 0202 	orrlt.w	r2, r2, #2
 800ac54:	9307      	strge	r3, [sp, #28]
 800ac56:	9307      	strlt	r3, [sp, #28]
 800ac58:	bfb8      	it	lt
 800ac5a:	9204      	strlt	r2, [sp, #16]
 800ac5c:	7823      	ldrb	r3, [r4, #0]
 800ac5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac60:	d10c      	bne.n	800ac7c <_svfiprintf_r+0x130>
 800ac62:	7863      	ldrb	r3, [r4, #1]
 800ac64:	2b2a      	cmp	r3, #42	; 0x2a
 800ac66:	d135      	bne.n	800acd4 <_svfiprintf_r+0x188>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	1d1a      	adds	r2, r3, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	9203      	str	r2, [sp, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	bfb8      	it	lt
 800ac74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac78:	3402      	adds	r4, #2
 800ac7a:	9305      	str	r3, [sp, #20]
 800ac7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad48 <_svfiprintf_r+0x1fc>
 800ac80:	7821      	ldrb	r1, [r4, #0]
 800ac82:	2203      	movs	r2, #3
 800ac84:	4650      	mov	r0, sl
 800ac86:	f7f5 facb 	bl	8000220 <memchr>
 800ac8a:	b140      	cbz	r0, 800ac9e <_svfiprintf_r+0x152>
 800ac8c:	2340      	movs	r3, #64	; 0x40
 800ac8e:	eba0 000a 	sub.w	r0, r0, sl
 800ac92:	fa03 f000 	lsl.w	r0, r3, r0
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	4303      	orrs	r3, r0
 800ac9a:	3401      	adds	r4, #1
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca2:	4826      	ldr	r0, [pc, #152]	; (800ad3c <_svfiprintf_r+0x1f0>)
 800aca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aca8:	2206      	movs	r2, #6
 800acaa:	f7f5 fab9 	bl	8000220 <memchr>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d038      	beq.n	800ad24 <_svfiprintf_r+0x1d8>
 800acb2:	4b23      	ldr	r3, [pc, #140]	; (800ad40 <_svfiprintf_r+0x1f4>)
 800acb4:	bb1b      	cbnz	r3, 800acfe <_svfiprintf_r+0x1b2>
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	3307      	adds	r3, #7
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	3308      	adds	r3, #8
 800acc0:	9303      	str	r3, [sp, #12]
 800acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc4:	4433      	add	r3, r6
 800acc6:	9309      	str	r3, [sp, #36]	; 0x24
 800acc8:	e767      	b.n	800ab9a <_svfiprintf_r+0x4e>
 800acca:	fb0c 3202 	mla	r2, ip, r2, r3
 800acce:	460c      	mov	r4, r1
 800acd0:	2001      	movs	r0, #1
 800acd2:	e7a5      	b.n	800ac20 <_svfiprintf_r+0xd4>
 800acd4:	2300      	movs	r3, #0
 800acd6:	3401      	adds	r4, #1
 800acd8:	9305      	str	r3, [sp, #20]
 800acda:	4619      	mov	r1, r3
 800acdc:	f04f 0c0a 	mov.w	ip, #10
 800ace0:	4620      	mov	r0, r4
 800ace2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ace6:	3a30      	subs	r2, #48	; 0x30
 800ace8:	2a09      	cmp	r2, #9
 800acea:	d903      	bls.n	800acf4 <_svfiprintf_r+0x1a8>
 800acec:	2b00      	cmp	r3, #0
 800acee:	d0c5      	beq.n	800ac7c <_svfiprintf_r+0x130>
 800acf0:	9105      	str	r1, [sp, #20]
 800acf2:	e7c3      	b.n	800ac7c <_svfiprintf_r+0x130>
 800acf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800acf8:	4604      	mov	r4, r0
 800acfa:	2301      	movs	r3, #1
 800acfc:	e7f0      	b.n	800ace0 <_svfiprintf_r+0x194>
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462a      	mov	r2, r5
 800ad04:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <_svfiprintf_r+0x1f8>)
 800ad06:	a904      	add	r1, sp, #16
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7fb ff33 	bl	8006b74 <_printf_float>
 800ad0e:	1c42      	adds	r2, r0, #1
 800ad10:	4606      	mov	r6, r0
 800ad12:	d1d6      	bne.n	800acc2 <_svfiprintf_r+0x176>
 800ad14:	89ab      	ldrh	r3, [r5, #12]
 800ad16:	065b      	lsls	r3, r3, #25
 800ad18:	f53f af2c 	bmi.w	800ab74 <_svfiprintf_r+0x28>
 800ad1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad1e:	b01d      	add	sp, #116	; 0x74
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	ab03      	add	r3, sp, #12
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	462a      	mov	r2, r5
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <_svfiprintf_r+0x1f8>)
 800ad2c:	a904      	add	r1, sp, #16
 800ad2e:	4638      	mov	r0, r7
 800ad30:	f7fc f9c4 	bl	80070bc <_printf_i>
 800ad34:	e7eb      	b.n	800ad0e <_svfiprintf_r+0x1c2>
 800ad36:	bf00      	nop
 800ad38:	0800bc44 	.word	0x0800bc44
 800ad3c:	0800bc4e 	.word	0x0800bc4e
 800ad40:	08006b75 	.word	0x08006b75
 800ad44:	0800aa95 	.word	0x0800aa95
 800ad48:	0800bc4a 	.word	0x0800bc4a
 800ad4c:	00000000 	.word	0x00000000

0800ad50 <nan>:
 800ad50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad58 <nan+0x8>
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	00000000 	.word	0x00000000
 800ad5c:	7ff80000 	.word	0x7ff80000

0800ad60 <_sbrk_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	; (800ad7c <_sbrk_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f7 fe2e 	bl	80029cc <_sbrk>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_sbrk_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_sbrk_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	200009f0 	.word	0x200009f0

0800ad80 <__sread>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	460c      	mov	r4, r1
 800ad84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad88:	f000 fa88 	bl	800b29c <_read_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	bfab      	itete	ge
 800ad90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad92:	89a3      	ldrhlt	r3, [r4, #12]
 800ad94:	181b      	addge	r3, r3, r0
 800ad96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad9a:	bfac      	ite	ge
 800ad9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad9e:	81a3      	strhlt	r3, [r4, #12]
 800ada0:	bd10      	pop	{r4, pc}

0800ada2 <__swrite>:
 800ada2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada6:	461f      	mov	r7, r3
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	05db      	lsls	r3, r3, #23
 800adac:	4605      	mov	r5, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	4616      	mov	r6, r2
 800adb2:	d505      	bpl.n	800adc0 <__swrite+0x1e>
 800adb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb8:	2302      	movs	r3, #2
 800adba:	2200      	movs	r2, #0
 800adbc:	f000 f8b6 	bl	800af2c <_lseek_r>
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	4628      	mov	r0, r5
 800add2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add6:	f000 b835 	b.w	800ae44 <_write_r>

0800adda <__sseek>:
 800adda:	b510      	push	{r4, lr}
 800addc:	460c      	mov	r4, r1
 800adde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade2:	f000 f8a3 	bl	800af2c <_lseek_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	bf15      	itete	ne
 800adec:	6560      	strne	r0, [r4, #84]	; 0x54
 800adee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adf6:	81a3      	strheq	r3, [r4, #12]
 800adf8:	bf18      	it	ne
 800adfa:	81a3      	strhne	r3, [r4, #12]
 800adfc:	bd10      	pop	{r4, pc}

0800adfe <__sclose>:
 800adfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae02:	f000 b84f 	b.w	800aea4 <_close_r>

0800ae06 <strncmp>:
 800ae06:	b510      	push	{r4, lr}
 800ae08:	b16a      	cbz	r2, 800ae26 <strncmp+0x20>
 800ae0a:	3901      	subs	r1, #1
 800ae0c:	1884      	adds	r4, r0, r2
 800ae0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ae12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d103      	bne.n	800ae22 <strncmp+0x1c>
 800ae1a:	42a0      	cmp	r0, r4
 800ae1c:	d001      	beq.n	800ae22 <strncmp+0x1c>
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1f5      	bne.n	800ae0e <strncmp+0x8>
 800ae22:	1a98      	subs	r0, r3, r2
 800ae24:	bd10      	pop	{r4, pc}
 800ae26:	4610      	mov	r0, r2
 800ae28:	e7fc      	b.n	800ae24 <strncmp+0x1e>

0800ae2a <__ascii_wctomb>:
 800ae2a:	b149      	cbz	r1, 800ae40 <__ascii_wctomb+0x16>
 800ae2c:	2aff      	cmp	r2, #255	; 0xff
 800ae2e:	bf85      	ittet	hi
 800ae30:	238a      	movhi	r3, #138	; 0x8a
 800ae32:	6003      	strhi	r3, [r0, #0]
 800ae34:	700a      	strbls	r2, [r1, #0]
 800ae36:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae3a:	bf98      	it	ls
 800ae3c:	2001      	movls	r0, #1
 800ae3e:	4770      	bx	lr
 800ae40:	4608      	mov	r0, r1
 800ae42:	4770      	bx	lr

0800ae44 <_write_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d07      	ldr	r5, [pc, #28]	; (800ae64 <_write_r+0x20>)
 800ae48:	4604      	mov	r4, r0
 800ae4a:	4608      	mov	r0, r1
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	2200      	movs	r2, #0
 800ae50:	602a      	str	r2, [r5, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	f7f7 fd69 	bl	800292a <_write>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_write_r+0x1e>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_write_r+0x1e>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	200009f0 	.word	0x200009f0

0800ae68 <__assert_func>:
 800ae68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae6a:	4614      	mov	r4, r2
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <__assert_func+0x2c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4605      	mov	r5, r0
 800ae74:	68d8      	ldr	r0, [r3, #12]
 800ae76:	b14c      	cbz	r4, 800ae8c <__assert_func+0x24>
 800ae78:	4b07      	ldr	r3, [pc, #28]	; (800ae98 <__assert_func+0x30>)
 800ae7a:	9100      	str	r1, [sp, #0]
 800ae7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae80:	4906      	ldr	r1, [pc, #24]	; (800ae9c <__assert_func+0x34>)
 800ae82:	462b      	mov	r3, r5
 800ae84:	f000 f81e 	bl	800aec4 <fiprintf>
 800ae88:	f000 fa1a 	bl	800b2c0 <abort>
 800ae8c:	4b04      	ldr	r3, [pc, #16]	; (800aea0 <__assert_func+0x38>)
 800ae8e:	461c      	mov	r4, r3
 800ae90:	e7f3      	b.n	800ae7a <__assert_func+0x12>
 800ae92:	bf00      	nop
 800ae94:	20000090 	.word	0x20000090
 800ae98:	0800bc55 	.word	0x0800bc55
 800ae9c:	0800bc62 	.word	0x0800bc62
 800aea0:	0800bc90 	.word	0x0800bc90

0800aea4 <_close_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d06      	ldr	r5, [pc, #24]	; (800aec0 <_close_r+0x1c>)
 800aea8:	2300      	movs	r3, #0
 800aeaa:	4604      	mov	r4, r0
 800aeac:	4608      	mov	r0, r1
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	f7f7 fd57 	bl	8002962 <_close>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_close_r+0x1a>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_close_r+0x1a>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	200009f0 	.word	0x200009f0

0800aec4 <fiprintf>:
 800aec4:	b40e      	push	{r1, r2, r3}
 800aec6:	b503      	push	{r0, r1, lr}
 800aec8:	4601      	mov	r1, r0
 800aeca:	ab03      	add	r3, sp, #12
 800aecc:	4805      	ldr	r0, [pc, #20]	; (800aee4 <fiprintf+0x20>)
 800aece:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed2:	6800      	ldr	r0, [r0, #0]
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	f000 f8b1 	bl	800b03c <_vfiprintf_r>
 800aeda:	b002      	add	sp, #8
 800aedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee0:	b003      	add	sp, #12
 800aee2:	4770      	bx	lr
 800aee4:	20000090 	.word	0x20000090

0800aee8 <_fstat_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	; (800af08 <_fstat_r+0x20>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	4611      	mov	r1, r2
 800aef4:	602b      	str	r3, [r5, #0]
 800aef6:	f7f7 fd40 	bl	800297a <_fstat>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d102      	bne.n	800af04 <_fstat_r+0x1c>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	b103      	cbz	r3, 800af04 <_fstat_r+0x1c>
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	bf00      	nop
 800af08:	200009f0 	.word	0x200009f0

0800af0c <_isatty_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	; (800af28 <_isatty_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f7 fd3f 	bl	800299a <_isatty>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_isatty_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_isatty_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	200009f0 	.word	0x200009f0

0800af2c <_lseek_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_lseek_r+0x20>)
 800af30:	4604      	mov	r4, r0
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f7f7 fd38 	bl	80029b0 <_lseek>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_lseek_r+0x1e>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_lseek_r+0x1e>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	200009f0 	.word	0x200009f0

0800af50 <memmove>:
 800af50:	4288      	cmp	r0, r1
 800af52:	b510      	push	{r4, lr}
 800af54:	eb01 0402 	add.w	r4, r1, r2
 800af58:	d902      	bls.n	800af60 <memmove+0x10>
 800af5a:	4284      	cmp	r4, r0
 800af5c:	4623      	mov	r3, r4
 800af5e:	d807      	bhi.n	800af70 <memmove+0x20>
 800af60:	1e43      	subs	r3, r0, #1
 800af62:	42a1      	cmp	r1, r4
 800af64:	d008      	beq.n	800af78 <memmove+0x28>
 800af66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af6e:	e7f8      	b.n	800af62 <memmove+0x12>
 800af70:	4402      	add	r2, r0
 800af72:	4601      	mov	r1, r0
 800af74:	428a      	cmp	r2, r1
 800af76:	d100      	bne.n	800af7a <memmove+0x2a>
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af82:	e7f7      	b.n	800af74 <memmove+0x24>

0800af84 <__malloc_lock>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__malloc_lock+0x8>)
 800af86:	f7fe bf82 	b.w	8009e8e <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	200009e8 	.word	0x200009e8

0800af90 <__malloc_unlock>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__malloc_unlock+0x8>)
 800af92:	f7fe bf7d 	b.w	8009e90 <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	200009e8 	.word	0x200009e8

0800af9c <_realloc_r>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	4607      	mov	r7, r0
 800afa0:	4614      	mov	r4, r2
 800afa2:	460e      	mov	r6, r1
 800afa4:	b921      	cbnz	r1, 800afb0 <_realloc_r+0x14>
 800afa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afaa:	4611      	mov	r1, r2
 800afac:	f7ff bd18 	b.w	800a9e0 <_malloc_r>
 800afb0:	b922      	cbnz	r2, 800afbc <_realloc_r+0x20>
 800afb2:	f7ff fcc5 	bl	800a940 <_free_r>
 800afb6:	4625      	mov	r5, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	f000 f987 	bl	800b2ce <_malloc_usable_size_r>
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d20f      	bcs.n	800afe4 <_realloc_r+0x48>
 800afc4:	4621      	mov	r1, r4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff fd0a 	bl	800a9e0 <_malloc_r>
 800afcc:	4605      	mov	r5, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0f2      	beq.n	800afb8 <_realloc_r+0x1c>
 800afd2:	4631      	mov	r1, r6
 800afd4:	4622      	mov	r2, r4
 800afd6:	f7fe ffdb 	bl	8009f90 <memcpy>
 800afda:	4631      	mov	r1, r6
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff fcaf 	bl	800a940 <_free_r>
 800afe2:	e7e9      	b.n	800afb8 <_realloc_r+0x1c>
 800afe4:	4635      	mov	r5, r6
 800afe6:	e7e7      	b.n	800afb8 <_realloc_r+0x1c>

0800afe8 <__sfputc_r>:
 800afe8:	6893      	ldr	r3, [r2, #8]
 800afea:	3b01      	subs	r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	b410      	push	{r4}
 800aff0:	6093      	str	r3, [r2, #8]
 800aff2:	da08      	bge.n	800b006 <__sfputc_r+0x1e>
 800aff4:	6994      	ldr	r4, [r2, #24]
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	db01      	blt.n	800affe <__sfputc_r+0x16>
 800affa:	290a      	cmp	r1, #10
 800affc:	d103      	bne.n	800b006 <__sfputc_r+0x1e>
 800affe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b002:	f7fd badf 	b.w	80085c4 <__swbuf_r>
 800b006:	6813      	ldr	r3, [r2, #0]
 800b008:	1c58      	adds	r0, r3, #1
 800b00a:	6010      	str	r0, [r2, #0]
 800b00c:	7019      	strb	r1, [r3, #0]
 800b00e:	4608      	mov	r0, r1
 800b010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <__sfputs_r>:
 800b016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b018:	4606      	mov	r6, r0
 800b01a:	460f      	mov	r7, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	18d5      	adds	r5, r2, r3
 800b020:	42ac      	cmp	r4, r5
 800b022:	d101      	bne.n	800b028 <__sfputs_r+0x12>
 800b024:	2000      	movs	r0, #0
 800b026:	e007      	b.n	800b038 <__sfputs_r+0x22>
 800b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02c:	463a      	mov	r2, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ffda 	bl	800afe8 <__sfputc_r>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d1f3      	bne.n	800b020 <__sfputs_r+0xa>
 800b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b03c <_vfiprintf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	460d      	mov	r5, r1
 800b042:	b09d      	sub	sp, #116	; 0x74
 800b044:	4614      	mov	r4, r2
 800b046:	4698      	mov	r8, r3
 800b048:	4606      	mov	r6, r0
 800b04a:	b118      	cbz	r0, 800b054 <_vfiprintf_r+0x18>
 800b04c:	6983      	ldr	r3, [r0, #24]
 800b04e:	b90b      	cbnz	r3, 800b054 <_vfiprintf_r+0x18>
 800b050:	f7fe fb0c 	bl	800966c <__sinit>
 800b054:	4b89      	ldr	r3, [pc, #548]	; (800b27c <_vfiprintf_r+0x240>)
 800b056:	429d      	cmp	r5, r3
 800b058:	d11b      	bne.n	800b092 <_vfiprintf_r+0x56>
 800b05a:	6875      	ldr	r5, [r6, #4]
 800b05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b05e:	07d9      	lsls	r1, r3, #31
 800b060:	d405      	bmi.n	800b06e <_vfiprintf_r+0x32>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	059a      	lsls	r2, r3, #22
 800b066:	d402      	bmi.n	800b06e <_vfiprintf_r+0x32>
 800b068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06a:	f7fe ff10 	bl	8009e8e <__retarget_lock_acquire_recursive>
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	071b      	lsls	r3, r3, #28
 800b072:	d501      	bpl.n	800b078 <_vfiprintf_r+0x3c>
 800b074:	692b      	ldr	r3, [r5, #16]
 800b076:	b9eb      	cbnz	r3, 800b0b4 <_vfiprintf_r+0x78>
 800b078:	4629      	mov	r1, r5
 800b07a:	4630      	mov	r0, r6
 800b07c:	f7fd faf4 	bl	8008668 <__swsetup_r>
 800b080:	b1c0      	cbz	r0, 800b0b4 <_vfiprintf_r+0x78>
 800b082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b084:	07dc      	lsls	r4, r3, #31
 800b086:	d50e      	bpl.n	800b0a6 <_vfiprintf_r+0x6a>
 800b088:	f04f 30ff 	mov.w	r0, #4294967295
 800b08c:	b01d      	add	sp, #116	; 0x74
 800b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b092:	4b7b      	ldr	r3, [pc, #492]	; (800b280 <_vfiprintf_r+0x244>)
 800b094:	429d      	cmp	r5, r3
 800b096:	d101      	bne.n	800b09c <_vfiprintf_r+0x60>
 800b098:	68b5      	ldr	r5, [r6, #8]
 800b09a:	e7df      	b.n	800b05c <_vfiprintf_r+0x20>
 800b09c:	4b79      	ldr	r3, [pc, #484]	; (800b284 <_vfiprintf_r+0x248>)
 800b09e:	429d      	cmp	r5, r3
 800b0a0:	bf08      	it	eq
 800b0a2:	68f5      	ldreq	r5, [r6, #12]
 800b0a4:	e7da      	b.n	800b05c <_vfiprintf_r+0x20>
 800b0a6:	89ab      	ldrh	r3, [r5, #12]
 800b0a8:	0598      	lsls	r0, r3, #22
 800b0aa:	d4ed      	bmi.n	800b088 <_vfiprintf_r+0x4c>
 800b0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ae:	f7fe feef 	bl	8009e90 <__retarget_lock_release_recursive>
 800b0b2:	e7e9      	b.n	800b088 <_vfiprintf_r+0x4c>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c2:	2330      	movs	r3, #48	; 0x30
 800b0c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b288 <_vfiprintf_r+0x24c>
 800b0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0cc:	f04f 0901 	mov.w	r9, #1
 800b0d0:	4623      	mov	r3, r4
 800b0d2:	469a      	mov	sl, r3
 800b0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0d8:	b10a      	cbz	r2, 800b0de <_vfiprintf_r+0xa2>
 800b0da:	2a25      	cmp	r2, #37	; 0x25
 800b0dc:	d1f9      	bne.n	800b0d2 <_vfiprintf_r+0x96>
 800b0de:	ebba 0b04 	subs.w	fp, sl, r4
 800b0e2:	d00b      	beq.n	800b0fc <_vfiprintf_r+0xc0>
 800b0e4:	465b      	mov	r3, fp
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff93 	bl	800b016 <__sfputs_r>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f000 80aa 	beq.w	800b24a <_vfiprintf_r+0x20e>
 800b0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0f8:	445a      	add	r2, fp
 800b0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 80a2 	beq.w	800b24a <_vfiprintf_r+0x20e>
 800b106:	2300      	movs	r3, #0
 800b108:	f04f 32ff 	mov.w	r2, #4294967295
 800b10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b110:	f10a 0a01 	add.w	sl, sl, #1
 800b114:	9304      	str	r3, [sp, #16]
 800b116:	9307      	str	r3, [sp, #28]
 800b118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b11c:	931a      	str	r3, [sp, #104]	; 0x68
 800b11e:	4654      	mov	r4, sl
 800b120:	2205      	movs	r2, #5
 800b122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b126:	4858      	ldr	r0, [pc, #352]	; (800b288 <_vfiprintf_r+0x24c>)
 800b128:	f7f5 f87a 	bl	8000220 <memchr>
 800b12c:	9a04      	ldr	r2, [sp, #16]
 800b12e:	b9d8      	cbnz	r0, 800b168 <_vfiprintf_r+0x12c>
 800b130:	06d1      	lsls	r1, r2, #27
 800b132:	bf44      	itt	mi
 800b134:	2320      	movmi	r3, #32
 800b136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b13a:	0713      	lsls	r3, r2, #28
 800b13c:	bf44      	itt	mi
 800b13e:	232b      	movmi	r3, #43	; 0x2b
 800b140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b144:	f89a 3000 	ldrb.w	r3, [sl]
 800b148:	2b2a      	cmp	r3, #42	; 0x2a
 800b14a:	d015      	beq.n	800b178 <_vfiprintf_r+0x13c>
 800b14c:	9a07      	ldr	r2, [sp, #28]
 800b14e:	4654      	mov	r4, sl
 800b150:	2000      	movs	r0, #0
 800b152:	f04f 0c0a 	mov.w	ip, #10
 800b156:	4621      	mov	r1, r4
 800b158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b15c:	3b30      	subs	r3, #48	; 0x30
 800b15e:	2b09      	cmp	r3, #9
 800b160:	d94e      	bls.n	800b200 <_vfiprintf_r+0x1c4>
 800b162:	b1b0      	cbz	r0, 800b192 <_vfiprintf_r+0x156>
 800b164:	9207      	str	r2, [sp, #28]
 800b166:	e014      	b.n	800b192 <_vfiprintf_r+0x156>
 800b168:	eba0 0308 	sub.w	r3, r0, r8
 800b16c:	fa09 f303 	lsl.w	r3, r9, r3
 800b170:	4313      	orrs	r3, r2
 800b172:	9304      	str	r3, [sp, #16]
 800b174:	46a2      	mov	sl, r4
 800b176:	e7d2      	b.n	800b11e <_vfiprintf_r+0xe2>
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	1d19      	adds	r1, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	9103      	str	r1, [sp, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	bfbb      	ittet	lt
 800b184:	425b      	neglt	r3, r3
 800b186:	f042 0202 	orrlt.w	r2, r2, #2
 800b18a:	9307      	strge	r3, [sp, #28]
 800b18c:	9307      	strlt	r3, [sp, #28]
 800b18e:	bfb8      	it	lt
 800b190:	9204      	strlt	r2, [sp, #16]
 800b192:	7823      	ldrb	r3, [r4, #0]
 800b194:	2b2e      	cmp	r3, #46	; 0x2e
 800b196:	d10c      	bne.n	800b1b2 <_vfiprintf_r+0x176>
 800b198:	7863      	ldrb	r3, [r4, #1]
 800b19a:	2b2a      	cmp	r3, #42	; 0x2a
 800b19c:	d135      	bne.n	800b20a <_vfiprintf_r+0x1ce>
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	1d1a      	adds	r2, r3, #4
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	9203      	str	r2, [sp, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfb8      	it	lt
 800b1aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ae:	3402      	adds	r4, #2
 800b1b0:	9305      	str	r3, [sp, #20]
 800b1b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b298 <_vfiprintf_r+0x25c>
 800b1b6:	7821      	ldrb	r1, [r4, #0]
 800b1b8:	2203      	movs	r2, #3
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	f7f5 f830 	bl	8000220 <memchr>
 800b1c0:	b140      	cbz	r0, 800b1d4 <_vfiprintf_r+0x198>
 800b1c2:	2340      	movs	r3, #64	; 0x40
 800b1c4:	eba0 000a 	sub.w	r0, r0, sl
 800b1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	4303      	orrs	r3, r0
 800b1d0:	3401      	adds	r4, #1
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d8:	482c      	ldr	r0, [pc, #176]	; (800b28c <_vfiprintf_r+0x250>)
 800b1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1de:	2206      	movs	r2, #6
 800b1e0:	f7f5 f81e 	bl	8000220 <memchr>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d03f      	beq.n	800b268 <_vfiprintf_r+0x22c>
 800b1e8:	4b29      	ldr	r3, [pc, #164]	; (800b290 <_vfiprintf_r+0x254>)
 800b1ea:	bb1b      	cbnz	r3, 800b234 <_vfiprintf_r+0x1f8>
 800b1ec:	9b03      	ldr	r3, [sp, #12]
 800b1ee:	3307      	adds	r3, #7
 800b1f0:	f023 0307 	bic.w	r3, r3, #7
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	9303      	str	r3, [sp, #12]
 800b1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fa:	443b      	add	r3, r7
 800b1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fe:	e767      	b.n	800b0d0 <_vfiprintf_r+0x94>
 800b200:	fb0c 3202 	mla	r2, ip, r2, r3
 800b204:	460c      	mov	r4, r1
 800b206:	2001      	movs	r0, #1
 800b208:	e7a5      	b.n	800b156 <_vfiprintf_r+0x11a>
 800b20a:	2300      	movs	r3, #0
 800b20c:	3401      	adds	r4, #1
 800b20e:	9305      	str	r3, [sp, #20]
 800b210:	4619      	mov	r1, r3
 800b212:	f04f 0c0a 	mov.w	ip, #10
 800b216:	4620      	mov	r0, r4
 800b218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b21c:	3a30      	subs	r2, #48	; 0x30
 800b21e:	2a09      	cmp	r2, #9
 800b220:	d903      	bls.n	800b22a <_vfiprintf_r+0x1ee>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0c5      	beq.n	800b1b2 <_vfiprintf_r+0x176>
 800b226:	9105      	str	r1, [sp, #20]
 800b228:	e7c3      	b.n	800b1b2 <_vfiprintf_r+0x176>
 800b22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b22e:	4604      	mov	r4, r0
 800b230:	2301      	movs	r3, #1
 800b232:	e7f0      	b.n	800b216 <_vfiprintf_r+0x1da>
 800b234:	ab03      	add	r3, sp, #12
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	462a      	mov	r2, r5
 800b23a:	4b16      	ldr	r3, [pc, #88]	; (800b294 <_vfiprintf_r+0x258>)
 800b23c:	a904      	add	r1, sp, #16
 800b23e:	4630      	mov	r0, r6
 800b240:	f7fb fc98 	bl	8006b74 <_printf_float>
 800b244:	4607      	mov	r7, r0
 800b246:	1c78      	adds	r0, r7, #1
 800b248:	d1d6      	bne.n	800b1f8 <_vfiprintf_r+0x1bc>
 800b24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b24c:	07d9      	lsls	r1, r3, #31
 800b24e:	d405      	bmi.n	800b25c <_vfiprintf_r+0x220>
 800b250:	89ab      	ldrh	r3, [r5, #12]
 800b252:	059a      	lsls	r2, r3, #22
 800b254:	d402      	bmi.n	800b25c <_vfiprintf_r+0x220>
 800b256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b258:	f7fe fe1a 	bl	8009e90 <__retarget_lock_release_recursive>
 800b25c:	89ab      	ldrh	r3, [r5, #12]
 800b25e:	065b      	lsls	r3, r3, #25
 800b260:	f53f af12 	bmi.w	800b088 <_vfiprintf_r+0x4c>
 800b264:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b266:	e711      	b.n	800b08c <_vfiprintf_r+0x50>
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	462a      	mov	r2, r5
 800b26e:	4b09      	ldr	r3, [pc, #36]	; (800b294 <_vfiprintf_r+0x258>)
 800b270:	a904      	add	r1, sp, #16
 800b272:	4630      	mov	r0, r6
 800b274:	f7fb ff22 	bl	80070bc <_printf_i>
 800b278:	e7e4      	b.n	800b244 <_vfiprintf_r+0x208>
 800b27a:	bf00      	nop
 800b27c:	0800ba28 	.word	0x0800ba28
 800b280:	0800ba48 	.word	0x0800ba48
 800b284:	0800ba08 	.word	0x0800ba08
 800b288:	0800bc44 	.word	0x0800bc44
 800b28c:	0800bc4e 	.word	0x0800bc4e
 800b290:	08006b75 	.word	0x08006b75
 800b294:	0800b017 	.word	0x0800b017
 800b298:	0800bc4a 	.word	0x0800bc4a

0800b29c <_read_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d07      	ldr	r5, [pc, #28]	; (800b2bc <_read_r+0x20>)
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	602a      	str	r2, [r5, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f7f7 fb20 	bl	80028f0 <_read>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_read_r+0x1e>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_read_r+0x1e>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	200009f0 	.word	0x200009f0

0800b2c0 <abort>:
 800b2c0:	b508      	push	{r3, lr}
 800b2c2:	2006      	movs	r0, #6
 800b2c4:	f000 f834 	bl	800b330 <raise>
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	f7f7 fb07 	bl	80028dc <_exit>

0800b2ce <_malloc_usable_size_r>:
 800b2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d2:	1f18      	subs	r0, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfbc      	itt	lt
 800b2d8:	580b      	ldrlt	r3, [r1, r0]
 800b2da:	18c0      	addlt	r0, r0, r3
 800b2dc:	4770      	bx	lr

0800b2de <_raise_r>:
 800b2de:	291f      	cmp	r1, #31
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	d904      	bls.n	800b2f2 <_raise_r+0x14>
 800b2e8:	2316      	movs	r3, #22
 800b2ea:	6003      	str	r3, [r0, #0]
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2f4:	b112      	cbz	r2, 800b2fc <_raise_r+0x1e>
 800b2f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2fa:	b94b      	cbnz	r3, 800b310 <_raise_r+0x32>
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 f831 	bl	800b364 <_getpid_r>
 800b302:	462a      	mov	r2, r5
 800b304:	4601      	mov	r1, r0
 800b306:	4620      	mov	r0, r4
 800b308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b30c:	f000 b818 	b.w	800b340 <_kill_r>
 800b310:	2b01      	cmp	r3, #1
 800b312:	d00a      	beq.n	800b32a <_raise_r+0x4c>
 800b314:	1c59      	adds	r1, r3, #1
 800b316:	d103      	bne.n	800b320 <_raise_r+0x42>
 800b318:	2316      	movs	r3, #22
 800b31a:	6003      	str	r3, [r0, #0]
 800b31c:	2001      	movs	r0, #1
 800b31e:	e7e7      	b.n	800b2f0 <_raise_r+0x12>
 800b320:	2400      	movs	r4, #0
 800b322:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b326:	4628      	mov	r0, r5
 800b328:	4798      	blx	r3
 800b32a:	2000      	movs	r0, #0
 800b32c:	e7e0      	b.n	800b2f0 <_raise_r+0x12>
	...

0800b330 <raise>:
 800b330:	4b02      	ldr	r3, [pc, #8]	; (800b33c <raise+0xc>)
 800b332:	4601      	mov	r1, r0
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	f7ff bfd2 	b.w	800b2de <_raise_r>
 800b33a:	bf00      	nop
 800b33c:	20000090 	.word	0x20000090

0800b340 <_kill_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	4d07      	ldr	r5, [pc, #28]	; (800b360 <_kill_r+0x20>)
 800b344:	2300      	movs	r3, #0
 800b346:	4604      	mov	r4, r0
 800b348:	4608      	mov	r0, r1
 800b34a:	4611      	mov	r1, r2
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	f7f7 fab5 	bl	80028bc <_kill>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	d102      	bne.n	800b35c <_kill_r+0x1c>
 800b356:	682b      	ldr	r3, [r5, #0]
 800b358:	b103      	cbz	r3, 800b35c <_kill_r+0x1c>
 800b35a:	6023      	str	r3, [r4, #0]
 800b35c:	bd38      	pop	{r3, r4, r5, pc}
 800b35e:	bf00      	nop
 800b360:	200009f0 	.word	0x200009f0

0800b364 <_getpid_r>:
 800b364:	f7f7 baa2 	b.w	80028ac <_getpid>

0800b368 <_init>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	bf00      	nop
 800b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b36e:	bc08      	pop	{r3}
 800b370:	469e      	mov	lr, r3
 800b372:	4770      	bx	lr

0800b374 <_fini>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	bf00      	nop
 800b378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37a:	bc08      	pop	{r3}
 800b37c:	469e      	mov	lr, r3
 800b37e:	4770      	bx	lr
