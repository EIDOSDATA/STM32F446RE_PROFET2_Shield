
PROFET2_12V_Shield_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  08008bf0  08008bf0  00018bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009474  08009474  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800947c  0800947c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009480  08009480  00019480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  200001e0  08009664  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000095c  08009664  0002095c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014af2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c30  00000000  00000000  00034d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b463  00000000  00000000  00037932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00042d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e10  00000000  00000000  00043c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239fc  00000000  00000000  00044a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a04  00000000  00000000  0006844c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d65af  00000000  00000000  0007be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001523ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cc0  00000000  00000000  00152454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008bd8 	.word	0x08008bd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008bd8 	.word	0x08008bd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct =
 8001032:	2400      	movs	r4, #0
 8001034:	9405      	str	r4, [sp, #20]
 8001036:	9406      	str	r4, [sp, #24]
 8001038:	9407      	str	r4, [sp, #28]
 800103a:	9408      	str	r4, [sp, #32]
 800103c:	9409      	str	r4, [sp, #36]	; 0x24
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	9401      	str	r4, [sp, #4]
 8001040:	4b38      	ldr	r3, [pc, #224]	; (8001124 <MX_GPIO_Init+0xf8>)
 8001042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001044:	f042 0204 	orr.w	r2, r2, #4
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
 800104a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104c:	f002 0204 	and.w	r2, r2, #4
 8001050:	9201      	str	r2, [sp, #4]
 8001052:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001054:	9402      	str	r4, [sp, #8]
 8001056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
 800105e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001060:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001064:	9202      	str	r2, [sp, #8]
 8001066:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	9403      	str	r4, [sp, #12]
 800106a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	f002 0201 	and.w	r2, r2, #1
 8001078:	9203      	str	r2, [sp, #12]
 800107a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	9404      	str	r4, [sp, #16]
 800107e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001080:	f042 0202 	orr.w	r2, r2, #2
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	9304      	str	r3, [sp, #16]
 800108e:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001090:	4f25      	ldr	r7, [pc, #148]	; (8001128 <MX_GPIO_Init+0xfc>)
 8001092:	4622      	mov	r2, r4
 8001094:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001098:	4638      	mov	r0, r7
 800109a:	f001 ffd7 	bl	800304c <HAL_GPIO_WritePin>
	LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin | DEN2_DEN4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800109e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001134 <MX_GPIO_Init+0x108>
 80010a2:	4622      	mov	r2, r4
 80010a4:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80010a8:	4640      	mov	r0, r8
 80010aa:	f001 ffcf 	bl	800304c <HAL_GPIO_WritePin>
	DEN1_DEN3_Pin | IN4_Pin | LED2_Pin | LED1_Pin | IN2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80010ae:	4d1f      	ldr	r5, [pc, #124]	; (800112c <MX_GPIO_Init+0x100>)
 80010b0:	4622      	mov	r2, r4
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4628      	mov	r0, r5
 80010b6:	f001 ffc9 	bl	800304c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_GPIO_Init+0x104>)
 80010c2:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c6:	a905      	add	r1, sp, #20
 80010c8:	4628      	mov	r0, r5
 80010ca:	f001 fedf 	bl	8002e8c <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 80010ce:	f240 4301 	movw	r3, #1025	; 0x401
 80010d2:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	a905      	add	r1, sp, #20
 80010da:	4638      	mov	r0, r7
 80010dc:	f001 fed6 	bl	8002e8c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED4_Pin LED3_Pin IN3_Pin OLOFF_Pin
	 DEN2_DEN4_Pin */
	GPIO_InitStruct.Pin = LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin
 80010e0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80010e4:	9305      	str	r3, [sp, #20]
			| DEN2_DEN4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2601      	movs	r6, #1
 80010e8:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	a905      	add	r1, sp, #20
 80010f0:	4638      	mov	r0, r7
 80010f2:	f001 fecb 	bl	8002e8c <HAL_GPIO_Init>

	/*Configure GPIO pins : DEN1_DEN3_Pin IN4_Pin LED2_Pin LED1_Pin
	 IN2_Pin */
	GPIO_InitStruct.Pin = DEN1_DEN3_Pin | IN4_Pin | LED2_Pin | LED1_Pin
 80010f6:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80010fa:	9305      	str	r3, [sp, #20]
			| IN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	a905      	add	r1, sp, #20
 8001104:	4640      	mov	r0, r8
 8001106:	f001 fec1 	bl	8002e8c <HAL_GPIO_Init>

	/*Configure GPIO pin : IN1_Pin */
	GPIO_InitStruct.Pin = IN1_Pin;
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8001114:	a905      	add	r1, sp, #20
 8001116:	4628      	mov	r0, r5
 8001118:	f001 feb8 	bl	8002e8c <HAL_GPIO_Init>

}
 800111c:	b00a      	add	sp, #40	; 0x28
 800111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020800 	.word	0x40020800
 8001130:	10210000 	.word	0x10210000
 8001134:	40020400 	.word	0x40020400

08001138 <MX_DMA_Init>:
{
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12
	__HAL_RCC_DMA2_CLK_ENABLE();
 800113c:	2100      	movs	r1, #0
 800113e:	9101      	str	r1, [sp, #4]
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DMA_Init+0x30>)
 8001142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001144:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001154:	460a      	mov	r2, r1
 8001156:	2038      	movs	r0, #56	; 0x38
 8001158:	f001 fb46 	bl	80027e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800115c:	2038      	movs	r0, #56	; 0x38
 800115e:	f001 fb77 	bl	8002850 <HAL_NVIC_EnableIRQ>
}
 8001162:	b003      	add	sp, #12
 8001164:	f85d fb04 	ldr.w	pc, [sp], #4
 8001168:	40023800 	.word	0x40023800

0800116c <WriteShieldLED>:
{
 800116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001170:	460f      	mov	r7, r1
 8001172:	4616      	mov	r6, r2
 8001174:	461d      	mov	r5, r3
 8001176:	9c06      	ldr	r4, [sp, #24]
	if (_LED1 == 0)
 8001178:	4680      	mov	r8, r0
 800117a:	bb00      	cbnz	r0, 80011be <WriteShieldLED+0x52>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001184:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001188:	f001 ff60 	bl	800304c <HAL_GPIO_WritePin>
	if (_LED2 == 0)
 800118c:	b9ef      	cbnz	r7, 80011ca <WriteShieldLED+0x5e>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2110      	movs	r1, #16
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <WriteShieldLED+0x84>)
 8001194:	f001 ff5a 	bl	800304c <HAL_GPIO_WritePin>
	if (_LED3 == 0)
 8001198:	b9ee      	cbnz	r6, 80011d6 <WriteShieldLED+0x6a>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <WriteShieldLED+0x88>)
 80011a0:	f001 ff54 	bl	800304c <HAL_GPIO_WritePin>
	if (_LED4 == 0)
 80011a4:	b9ed      	cbnz	r5, 80011e2 <WriteShieldLED+0x76>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2120      	movs	r1, #32
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <WriteShieldLED+0x88>)
 80011ac:	f001 ff4e 	bl	800304c <HAL_GPIO_WritePin>
	Shield->status_LED1 = _LED1;   // remember LED1 status
 80011b0:	f884 8004 	strb.w	r8, [r4, #4]
	Shield->status_LED2 = _LED2;   // remember LED" status
 80011b4:	7167      	strb	r7, [r4, #5]
	Shield->status_LED3 = _LED3;   // remember LED3 status
 80011b6:	71a6      	strb	r6, [r4, #6]
	Shield->status_LED4 = _LED4;   // remember LED4 status
 80011b8:	71e5      	strb	r5, [r4, #7]
}
 80011ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2120      	movs	r1, #32
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <WriteShieldLED+0x84>)
 80011c4:	f001 ff42 	bl	800304c <HAL_GPIO_WritePin>
 80011c8:	e7e0      	b.n	800118c <WriteShieldLED+0x20>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2110      	movs	r1, #16
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <WriteShieldLED+0x84>)
 80011d0:	f001 ff3c 	bl	800304c <HAL_GPIO_WritePin>
 80011d4:	e7e0      	b.n	8001198 <WriteShieldLED+0x2c>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <WriteShieldLED+0x88>)
 80011dc:	f001 ff36 	bl	800304c <HAL_GPIO_WritePin>
 80011e0:	e7e0      	b.n	80011a4 <WriteShieldLED+0x38>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2120      	movs	r1, #32
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <WriteShieldLED+0x88>)
 80011e8:	f001 ff30 	bl	800304c <HAL_GPIO_WritePin>
 80011ec:	e7e0      	b.n	80011b0 <WriteShieldLED+0x44>
 80011ee:	bf00      	nop
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020000 	.word	0x40020000

080011f8 <WriteShieldIN>:
{
 80011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fc:	460f      	mov	r7, r1
 80011fe:	4616      	mov	r6, r2
 8001200:	461d      	mov	r5, r3
 8001202:	9c06      	ldr	r4, [sp, #24]
	if (_In1 == 0)
 8001204:	4680      	mov	r8, r0
 8001206:	bb00      	cbnz	r0, 800124a <WriteShieldIN+0x52>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001210:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8001214:	f001 ff1a 	bl	800304c <HAL_GPIO_WritePin>
	if (_In2 == 0)
 8001218:	b9ef      	cbnz	r7, 8001256 <WriteShieldIN+0x5e>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	4817      	ldr	r0, [pc, #92]	; (800127c <WriteShieldIN+0x84>)
 8001220:	f001 ff14 	bl	800304c <HAL_GPIO_WritePin>
	if (_In3 == 0)
 8001224:	b9ee      	cbnz	r6, 8001262 <WriteShieldIN+0x6a>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <WriteShieldIN+0x88>)
 800122c:	f001 ff0e 	bl	800304c <HAL_GPIO_WritePin>
	if (_In4 == 0)
 8001230:	b9ed      	cbnz	r5, 800126e <WriteShieldIN+0x76>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2108      	movs	r1, #8
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <WriteShieldIN+0x84>)
 8001238:	f001 ff08 	bl	800304c <HAL_GPIO_WritePin>
	Shield->status_In_U1 = _In1; // remember PROFET U1 output status
 800123c:	f884 8000 	strb.w	r8, [r4]
	Shield->status_In_U2 = _In2; // remember PROFET U2 output status
 8001240:	7067      	strb	r7, [r4, #1]
	Shield->status_In_U3 = _In3; // remember PROFET U3 output status
 8001242:	70a6      	strb	r6, [r4, #2]
	Shield->status_In_U4 = _In4; // remember PROFET U4 output status
 8001244:	70e5      	strb	r5, [r4, #3]
}
 8001246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <WriteShieldIN+0x8c>)
 8001250:	f001 fefc 	bl	800304c <HAL_GPIO_WritePin>
 8001254:	e7e0      	b.n	8001218 <WriteShieldIN+0x20>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <WriteShieldIN+0x84>)
 800125c:	f001 fef6 	bl	800304c <HAL_GPIO_WritePin>
 8001260:	e7e0      	b.n	8001224 <WriteShieldIN+0x2c>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <WriteShieldIN+0x88>)
 8001268:	f001 fef0 	bl	800304c <HAL_GPIO_WritePin>
 800126c:	e7e0      	b.n	8001230 <WriteShieldIN+0x38>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2108      	movs	r1, #8
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <WriteShieldIN+0x84>)
 8001274:	f001 feea 	bl	800304c <HAL_GPIO_WritePin>
 8001278:	e7e0      	b.n	800123c <WriteShieldIN+0x44>
 800127a:	bf00      	nop
 800127c:	40020400 	.word	0x40020400
 8001280:	40020000 	.word	0x40020000
 8001284:	40020800 	.word	0x40020800

08001288 <Read_ADC>:
{
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	4604      	mov	r4, r0
	HAL_ADC_Start(&hadc1);
 800128c:	4d79      	ldr	r5, [pc, #484]	; (8001474 <Read_ADC+0x1ec>)
 800128e:	4628      	mov	r0, r5
 8001290:	f000 fed2 	bl	8002038 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001294:	2164      	movs	r1, #100	; 0x64
 8001296:	4628      	mov	r0, r5
 8001298:	f000 ff86 	bl	80021a8 <HAL_ADC_PollForConversion>
	Shield->A1_adc_raw_value_Vbb = HAL_ADC_GetValue(&hadc1);    // Vbb raw value
 800129c:	4628      	mov	r0, r5
 800129e:	f001 f8c6 	bl	800242e <HAL_ADC_GetValue>
 80012a2:	6160      	str	r0, [r4, #20]
	HAL_ADC_Stop(&hadc1);
 80012a4:	4628      	mov	r0, r5
 80012a6:	f000 ff5f 	bl	8002168 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_SET); // Select sense signal from PROFET+2 device U1 and U3 (DEN1_DEN3= high,DEN2_DEN4 = low)
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	4871      	ldr	r0, [pc, #452]	; (8001478 <Read_ADC+0x1f0>)
 80012b2:	f001 fecb 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_RESET); // Select sense signal from PROFET+2 device U1 and U3
 80012b6:	4e71      	ldr	r6, [pc, #452]	; (800147c <Read_ADC+0x1f4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	4630      	mov	r0, r6
 80012c0:	f001 fec4 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET); // open load in state OFF diagnosis disabled
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ca:	4630      	mov	r0, r6
 80012cc:	f001 febe 	bl	800304c <HAL_GPIO_WritePin>
	HAL_Delay(1); // generously delay of 1ms to give the PROFET+2 time to provide the sense signal
 80012d0:	2001      	movs	r0, #1
 80012d2:	f000 fdd7 	bl	8001e84 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 3);
 80012d6:	2203      	movs	r2, #3
 80012d8:	4969      	ldr	r1, [pc, #420]	; (8001480 <Read_ADC+0x1f8>)
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 ffba 	bl	8002254 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 3; i++)
 80012e0:	2500      	movs	r5, #0
 80012e2:	e006      	b.n	80012f2 <Read_ADC+0x6a>
		HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 80012e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e8:	2100      	movs	r1, #0
 80012ea:	4866      	ldr	r0, [pc, #408]	; (8001484 <Read_ADC+0x1fc>)
 80012ec:	f001 fc4c 	bl	8002b88 <HAL_DMA_PollForTransfer>
	for (int i = 0; i < 3; i++)
 80012f0:	3501      	adds	r5, #1
 80012f2:	2d02      	cmp	r5, #2
 80012f4:	ddf6      	ble.n	80012e4 <Read_ADC+0x5c>
	HAL_ADC_Stop_DMA(&hadc1);
 80012f6:	4e5f      	ldr	r6, [pc, #380]	; (8001474 <Read_ADC+0x1ec>)
 80012f8:	4630      	mov	r0, r6
 80012fa:	f001 f869 	bl	80023d0 <HAL_ADC_Stop_DMA>
	Shield->A2_adc_raw_value_IS_1 = ADC_Value[1]; // read analog value from analog input A2 -> device U1 -> sense IS1
 80012fe:	4d60      	ldr	r5, [pc, #384]	; (8001480 <Read_ADC+0x1f8>)
 8001300:	686b      	ldr	r3, [r5, #4]
 8001302:	61a3      	str	r3, [r4, #24]
	Shield->A3_adc_raw_value_IS_3 = ADC_Value[2]; // read analog value from analog input A3 -> device U3 -> sense IS3
 8001304:	68ab      	ldr	r3, [r5, #8]
 8001306:	6223      	str	r3, [r4, #32]
	HAL_GPIO_WritePin(DEN1_DEN3_GPIO_Port, DEN1_DEN3_Pin, GPIO_PIN_RESET); // Select sense signal from PROFET+2 device U2 and U4 (DEN1_DEN3= low, DEN2_DEN4 = high)
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130e:	485a      	ldr	r0, [pc, #360]	; (8001478 <Read_ADC+0x1f0>)
 8001310:	f001 fe9c 	bl	800304c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEN2_DEN4_GPIO_Port, DEN2_DEN4_Pin, GPIO_PIN_SET); // Select sense signal from PROFET+2 device U2 and U4
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131a:	4858      	ldr	r0, [pc, #352]	; (800147c <Read_ADC+0x1f4>)
 800131c:	f001 fe96 	bl	800304c <HAL_GPIO_WritePin>
	HAL_Delay(1); // generously delay of 1ms to give the PROFET+2 time to provide the sense signal
 8001320:	2001      	movs	r0, #1
 8001322:	f000 fdaf 	bl	8001e84 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, ADC_Value, 3);
 8001326:	2203      	movs	r2, #3
 8001328:	4629      	mov	r1, r5
 800132a:	4630      	mov	r0, r6
 800132c:	f000 ff92 	bl	8002254 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 3; i++)
 8001330:	2500      	movs	r5, #0
 8001332:	e006      	b.n	8001342 <Read_ADC+0xba>
		HAL_DMA_PollForTransfer(&hdma_adc1, HAL_DMA_FULL_TRANSFER, 1000);
 8001334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001338:	2100      	movs	r1, #0
 800133a:	4852      	ldr	r0, [pc, #328]	; (8001484 <Read_ADC+0x1fc>)
 800133c:	f001 fc24 	bl	8002b88 <HAL_DMA_PollForTransfer>
	for (int i = 0; i < 3; i++)
 8001340:	3501      	adds	r5, #1
 8001342:	2d02      	cmp	r5, #2
 8001344:	ddf6      	ble.n	8001334 <Read_ADC+0xac>
	HAL_ADC_Stop_DMA(&hadc1);
 8001346:	484b      	ldr	r0, [pc, #300]	; (8001474 <Read_ADC+0x1ec>)
 8001348:	f001 f842 	bl	80023d0 <HAL_ADC_Stop_DMA>
	Shield->A2_adc_raw_value_IS_2 = ADC_Value[1]; // read analog value from analog input A2 -> device U2 -> sense IS2
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <Read_ADC+0x1f8>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	61e2      	str	r2, [r4, #28]
	Shield->A3_adc_raw_value_IS_4 = ADC_Value[2]; // read analog value from analog input A3 -> device U4 -> sense IS4
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	6263      	str	r3, [r4, #36]	; 0x24
			/ Shield->max_adc_reading * Shield->adc_reference_voltage); // e.g. 1024/1024*5 -> 5V max
 8001356:	ed94 6a02 	vldr	s12, [r4, #8]
 800135a:	edd4 7a05 	vldr	s15, [r4, #20]
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8001366:	ed94 7a03 	vldr	s14, [r4, #12]
	Shield->A1_Vbb_ADC_Voltage = (float) (Shield->A1_adc_raw_value_Vbb
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
			- Shield->A1_Vbb_Offset) * Shield->A1_Vbb_Gain; // e.g. (5V - 0V) * 1 = 5V
 800136e:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8001372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001376:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800137a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Shield->A1_Vbb_ADC_Voltage = (Shield->A1_Vbb_ADC_Voltage
 800137e:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
			* (Shield->Vbb_Resistor_1 + Shield->Vbb_Resistor_2))
 8001382:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 8001386:	edd4 5a15 	vldr	s11, [r4, #84]	; 0x54
 800138a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800138e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Shield->A1_Vbb_Real_Voltage = (float) ((Shield->A1_Vbb_ADC_Voltage
 8001392:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001396:	edc4 6a17 	vstr	s13, [r4, #92]	; 0x5c
			/ Shield->max_adc_reading * Shield->adc_reference_voltage; // e.g. 1024/1024*5 -> 5V
 800139a:	edd4 7a06 	vldr	s15, [r4, #24]
 800139e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80013a6:	ee67 6a26 	vmul.f32	s13, s14, s13
	Shield->U1_IS_Voltage = Shield->A2_adc_raw_value_IS_1
 80013aa:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
	Shield->U1_IS_Ampere = (float) ((Shield->U1_IS_Voltage * Shield->kilis)
 80013ae:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ba:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8001488 <Read_ADC+0x200>
 80013be:	eec6 5a85 	vdiv.f32	s11, s13, s10
	Shield->U1_IS_Ampere = (Shield->U1_IS_Ampere - Shield->U1_Ampere_Offset)
 80013c2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80013c6:	ee75 6ae6 	vsub.f32	s13, s11, s13
			* Shield->U1_Ampere_Gain;             // (113.5 - 0) * 1 = 113.5A
 80013ca:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 80013ce:	ee66 6aa5 	vmul.f32	s13, s13, s11
	Shield->U1_IS_Ampere = (Shield->U1_IS_Ampere - Shield->U1_Ampere_Offset)
 80013d2:	edc4 6a1d 	vstr	s13, [r4, #116]	; 0x74
			/ Shield->max_adc_reading * Shield->adc_reference_voltage; // e.g. calculation for 10A // e.g. (91/1024)*5 = 0,4443359375
 80013d6:	ee06 2a90 	vmov	s13, r2
 80013da:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80013de:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80013e2:	ee67 6a26 	vmul.f32	s13, s14, s13
	Shield->U2_IS_Voltage = Shield->A2_adc_raw_value_IS_2
 80013e6:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
	Shield->U2_IS_Ampere = (float) ((Shield->U2_IS_Voltage * Shield->kilis)
 80013ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013ee:	eec6 5a85 	vdiv.f32	s11, s13, s10
	Shield->U2_IS_Ampere = (Shield->U2_IS_Ampere - Shield->U2_Ampere_Offset)
 80013f2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80013f6:	ee75 6ae6 	vsub.f32	s13, s11, s13
			* Shield->U2_Ampere_Gain;           // e.g. (10,086-0) * 1 = 10,086A
 80013fa:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
 80013fe:	ee66 6aa5 	vmul.f32	s13, s13, s11
	Shield->U2_IS_Ampere = (Shield->U2_IS_Ampere - Shield->U2_Ampere_Offset)
 8001402:	edc4 6a1e 	vstr	s13, [r4, #120]	; 0x78
			/ Shield->max_adc_reading * Shield->adc_reference_voltage; // e.g. calculation for 2.2A // e.g. (20/1024)*5 = 0,09765625
 8001406:	edd4 6a08 	vldr	s13, [r4, #32]
 800140a:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 800140e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8001412:	ee67 6a26 	vmul.f32	s13, s14, s13
	Shield->U3_IS_Voltage = Shield->A3_adc_raw_value_IS_3
 8001416:	edc4 6a1b 	vstr	s13, [r4, #108]	; 0x6c
	Shield->U3_IS_Ampere = (float) ((Shield->U3_IS_Voltage * Shield->kilis)
 800141a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800141e:	eec6 5a85 	vdiv.f32	s11, s13, s10
	Shield->U3_IS_Ampere = (Shield->U3_IS_Ampere - Shield->U3_Ampere_Offset)
 8001422:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 8001426:	ee75 6ae6 	vsub.f32	s13, s11, s13
			* Shield->U3_Ampere_Gain;           // e.g. (2,2167-0) * 1 = 2,2167A
 800142a:	edd4 5a11 	vldr	s11, [r4, #68]	; 0x44
 800142e:	ee66 6aa5 	vmul.f32	s13, s13, s11
	Shield->U3_IS_Ampere = (Shield->U3_IS_Ampere - Shield->U3_Ampere_Offset)
 8001432:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
			/ Shield->max_adc_reading * Shield->adc_reference_voltage;
 8001436:	ee06 3a90 	vmov	s13, r3
 800143a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800143e:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8001442:	ee27 7a25 	vmul.f32	s14, s14, s11
	Shield->U4_IS_Voltage = Shield->A3_adc_raw_value_IS_4
 8001446:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
	Shield->U4_IS_Ampere = (float) ((Shield->U4_IS_Voltage * Shield->kilis)
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	ee87 7a85 	vdiv.f32	s14, s15, s10
	Shield->U4_IS_Ampere = (Shield->U4_IS_Ampere - Shield->U4_Ampere_Offset)
 8001452:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
			* Shield->U4_Ampere_Gain;
 800145a:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
	Shield->U4_IS_Ampere = (Shield->U4_IS_Ampere - Shield->U4_Ampere_Offset)
 8001462:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
	HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <Read_ADC+0x1f4>)
 800146e:	f001 fded 	bl	800304c <HAL_GPIO_WritePin>
}
 8001472:	bd70      	pop	{r4, r5, r6, pc}
 8001474:	2000041c 	.word	0x2000041c
 8001478:	40020400 	.word	0x40020400
 800147c:	40020000 	.word	0x40020000
 8001480:	2000040c 	.word	0x2000040c
 8001484:	20000464 	.word	0x20000464
 8001488:	447a0000 	.word	0x447a0000

0800148c <PrintStatus>:
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b087      	sub	sp, #28
			Shield->status_In_U2, Shield->status_LED2, Shield->status_In_U3,
 8001490:	7843      	ldrb	r3, [r0, #1]
 8001492:	7942      	ldrb	r2, [r0, #5]
 8001494:	7881      	ldrb	r1, [r0, #2]
			Shield->status_LED3, Shield->status_In_U4, Shield->status_LED4);
 8001496:	7985      	ldrb	r5, [r0, #6]
 8001498:	78c6      	ldrb	r6, [r0, #3]
 800149a:	79c7      	ldrb	r7, [r0, #7]
	sprintf(UBuf, "=================================\r\n\r\n"
 800149c:	4c0c      	ldr	r4, [pc, #48]	; (80014d0 <PrintStatus+0x44>)
 800149e:	9705      	str	r7, [sp, #20]
 80014a0:	9604      	str	r6, [sp, #16]
 80014a2:	9503      	str	r5, [sp, #12]
 80014a4:	9102      	str	r1, [sp, #8]
 80014a6:	9201      	str	r2, [sp, #4]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	7903      	ldrb	r3, [r0, #4]
 80014ac:	7802      	ldrb	r2, [r0, #0]
 80014ae:	4909      	ldr	r1, [pc, #36]	; (80014d4 <PrintStatus+0x48>)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f003 fded 	bl	8005090 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UBuf, strlen(UBuf), 1000);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7fe feaa 	bl	8000210 <strlen>
 80014bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c0:	b282      	uxth	r2, r0
 80014c2:	4621      	mov	r1, r4
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <PrintStatus+0x4c>)
 80014c6:	f002 fcac 	bl	8003e22 <HAL_UART_Transmit>
}
 80014ca:	b007      	add	sp, #28
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000214 	.word	0x20000214
 80014d4:	08008bf0 	.word	0x08008bf0
 80014d8:	20000908 	.word	0x20000908

080014dc <PrintADC>:
{
 80014dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e0:	ed2d 8b04 	vpush	{d8-d9}
 80014e4:	b09d      	sub	sp, #116	; 0x74
 80014e6:	4604      	mov	r4, r0
	, Shield->A1_adc_raw_value_Vbb, Shield->A1_Vbb_ADC_Voltage,
 80014e8:	6d87      	ldr	r7, [r0, #88]	; 0x58
			Shield->A1_Vbb_Real_Voltage,
 80014ea:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
			Shield->A2_adc_raw_value_IS_1, Shield->U1_IS_Voltage,
 80014ee:	f8d0 9064 	ldr.w	r9, [r0, #100]	; 0x64
			Shield->U1_IS_Ampere,
 80014f2:	f8d0 a074 	ldr.w	sl, [r0, #116]	; 0x74
			Shield->A2_adc_raw_value_IS_2, Shield->U2_IS_Voltage,
 80014f6:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
			Shield->U2_IS_Ampere,
 80014fa:	ed90 8a1e 	vldr	s16, [r0, #120]	; 0x78
			Shield->A3_adc_raw_value_IS_3, Shield->U3_IS_Voltage,
 80014fe:	edd0 8a1b 	vldr	s17, [r0, #108]	; 0x6c
			Shield->U3_IS_Ampere,
 8001502:	ed90 9a1f 	vldr	s18, [r0, #124]	; 0x7c
			Shield->A3_adc_raw_value_IS_4, Shield->U4_IS_Voltage,
 8001506:	edd0 9a1c 	vldr	s19, [r0, #112]	; 0x70
	sprintf(UBuf, "Vbb - ADC raw value : %d\r\n"
 800150a:	6946      	ldr	r6, [r0, #20]
 800150c:	4d29      	ldr	r5, [pc, #164]	; (80015b4 <PrintADC+0xd8>)
 800150e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8001512:	f7ff f839 	bl	8000588 <__aeabi_f2d>
 8001516:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800151a:	ee19 0a90 	vmov	r0, s19
 800151e:	f7ff f833 	bl	8000588 <__aeabi_f2d>
 8001522:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8001526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001528:	9316      	str	r3, [sp, #88]	; 0x58
 800152a:	ee19 0a10 	vmov	r0, s18
 800152e:	f7ff f82b 	bl	8000588 <__aeabi_f2d>
 8001532:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8001536:	ee18 0a90 	vmov	r0, s17
 800153a:	f7ff f825 	bl	8000588 <__aeabi_f2d>
 800153e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001542:	6a23      	ldr	r3, [r4, #32]
 8001544:	9310      	str	r3, [sp, #64]	; 0x40
 8001546:	ee18 0a10 	vmov	r0, s16
 800154a:	f7ff f81d 	bl	8000588 <__aeabi_f2d>
 800154e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001552:	4658      	mov	r0, fp
 8001554:	f7ff f818 	bl	8000588 <__aeabi_f2d>
 8001558:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800155c:	69e3      	ldr	r3, [r4, #28]
 800155e:	930a      	str	r3, [sp, #40]	; 0x28
 8001560:	4650      	mov	r0, sl
 8001562:	f7ff f811 	bl	8000588 <__aeabi_f2d>
 8001566:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800156a:	4648      	mov	r0, r9
 800156c:	f7ff f80c 	bl	8000588 <__aeabi_f2d>
 8001570:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001574:	69a3      	ldr	r3, [r4, #24]
 8001576:	9304      	str	r3, [sp, #16]
 8001578:	4640      	mov	r0, r8
 800157a:	f7ff f805 	bl	8000588 <__aeabi_f2d>
 800157e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001582:	4638      	mov	r0, r7
 8001584:	f7ff f800 	bl	8000588 <__aeabi_f2d>
 8001588:	e9cd 0100 	strd	r0, r1, [sp]
 800158c:	4632      	mov	r2, r6
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <PrintADC+0xdc>)
 8001590:	4628      	mov	r0, r5
 8001592:	f003 fd7d 	bl	8005090 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) UBuf, strlen(UBuf), 1000);
 8001596:	4628      	mov	r0, r5
 8001598:	f7fe fe3a 	bl	8000210 <strlen>
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	b282      	uxth	r2, r0
 80015a2:	4629      	mov	r1, r5
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <PrintADC+0xe0>)
 80015a6:	f002 fc3c 	bl	8003e22 <HAL_UART_Transmit>
}
 80015aa:	b01d      	add	sp, #116	; 0x74
 80015ac:	ecbd 8b04 	vpop	{d8-d9}
 80015b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b4:	20000214 	.word	0x20000214
 80015b8:	08008c74 	.word	0x08008c74
 80015bc:	20000908 	.word	0x20000908

080015c0 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM6)
 80015c0:	6802      	ldr	r2, [r0, #0]
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d000      	beq.n	80015ca <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80015c8:	4770      	bx	lr
		tcnt++;
 80015ca:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80015cc:	7813      	ldrb	r3, [r2, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	7013      	strb	r3, [r2, #0]
}
 80015d2:	e7f9      	b.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0x8>
 80015d4:	40001000 	.word	0x40001000
 80015d8:	20000205 	.word	0x20000205

080015dc <HAL_UART_RxCpltCallback>:
	if (huart->Instance == huart2.Instance)
 80015dc:	6802      	ldr	r2, [r0, #0]
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_UART_RxCpltCallback+0x40>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d000      	beq.n	80015e8 <HAL_UART_RxCpltCallback+0xc>
 80015e6:	4770      	bx	lr
{
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4604      	mov	r4, r0
		HAL_UART_Receive_IT(&huart2, &tmpbuf, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	490c      	ldr	r1, [pc, #48]	; (8001620 <HAL_UART_RxCpltCallback+0x44>)
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_UART_RxCpltCallback+0x40>)
 80015f2:	f002 fcfc 	bl	8003fee <HAL_UART_Receive_IT>
		buf[bufTail] = huart->pRxBuffPtr[0];
 80015f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <HAL_UART_RxCpltCallback+0x48>)
 80015fa:	6803      	ldr	r3, [r0, #0]
 80015fc:	7811      	ldrb	r1, [r2, #0]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_UART_RxCpltCallback+0x4c>)
 8001600:	54d1      	strb	r1, [r2, r3]
		bufTail++;
 8001602:	3301      	adds	r3, #1
		bufTail %= 200;
 8001604:	4909      	ldr	r1, [pc, #36]	; (800162c <HAL_UART_RxCpltCallback+0x50>)
 8001606:	fb81 2103 	smull	r2, r1, r1, r3
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
 8001610:	21c8      	movs	r1, #200	; 0xc8
 8001612:	fb01 3312 	mls	r3, r1, r2, r3
 8001616:	6003      	str	r3, [r0, #0]
}
 8001618:	bd10      	pop	{r4, pc}
 800161a:	bf00      	nop
 800161c:	20000908 	.word	0x20000908
 8001620:	20000408 	.word	0x20000408
 8001624:	20000200 	.word	0x20000200
 8001628:	20000508 	.word	0x20000508
 800162c:	51eb851f 	.word	0x51eb851f

08001630 <__io_putchar>:
{
 8001630:	b500      	push	{lr}
 8001632:	b083      	sub	sp, #12
 8001634:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, &tr[0], 1, -1);
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2201      	movs	r2, #1
 800163c:	a901      	add	r1, sp, #4
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <__io_putchar+0x1c>)
 8001640:	f002 fbef 	bl	8003e22 <HAL_UART_Transmit>
}
 8001644:	9801      	ldr	r0, [sp, #4]
 8001646:	b003      	add	sp, #12
 8001648:	f85d fb04 	ldr.w	pc, [sp], #4
 800164c:	20000908 	.word	0x20000908

08001650 <__io_getchar>:
	__retry: if (bufHead != bufTail)
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <__io_getchar+0x30>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <__io_getchar+0x34>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4293      	cmp	r3, r2
 800165a:	d0f9      	beq.n	8001650 <__io_getchar>
		ret = buf[bufHead];
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <__io_getchar+0x38>)
 800165e:	5cd0      	ldrb	r0, [r2, r3]
		if (ret == '\r')
 8001660:	280d      	cmp	r0, #13
 8001662:	d00a      	beq.n	800167a <__io_getchar+0x2a>
		bufHead++;
 8001664:	3301      	adds	r3, #1
		bufHead %= MAX_BUFLEN;
 8001666:	425a      	negs	r2, r3
 8001668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800166c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001670:	bf58      	it	pl
 8001672:	4253      	negpl	r3, r2
 8001674:	4a02      	ldr	r2, [pc, #8]	; (8001680 <__io_getchar+0x30>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	4770      	bx	lr
			ret = '\n';
 800167a:	200a      	movs	r0, #10
 800167c:	e7f2      	b.n	8001664 <__io_getchar+0x14>
 800167e:	bf00      	nop
 8001680:	200001fc 	.word	0x200001fc
 8001684:	20000200 	.word	0x20000200
 8001688:	20000508 	.word	0x20000508

0800168c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800168e:	e7fe      	b.n	800168e <Error_Handler+0x2>

08001690 <MX_USART2_UART_Init>:
{
 8001690:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <MX_USART2_UART_Init+0x2c>)
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_USART2_UART_Init+0x30>)
 8001696:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 8001698:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800169c:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	2300      	movs	r3, #0
 80016a0:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016a2:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016a4:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016a6:	220c      	movs	r2, #12
 80016a8:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	f002 fb89 	bl	8003dc4 <HAL_UART_Init>
 80016b2:	b900      	cbnz	r0, 80016b6 <MX_USART2_UART_Init+0x26>
}
 80016b4:	bd08      	pop	{r3, pc}
		Error_Handler();
 80016b6:	f7ff ffe9 	bl	800168c <Error_Handler>
 80016ba:	bf00      	nop
 80016bc:	20000908 	.word	0x20000908
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_ADC1_Init>:
{
 80016c4:	b500      	push	{lr}
 80016c6:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig =
 80016c8:	2300      	movs	r3, #0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 80016d2:	481f      	ldr	r0, [pc, #124]	; (8001750 <MX_ADC1_Init+0x8c>)
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <MX_ADC1_Init+0x90>)
 80016d6:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016dc:	6042      	str	r2, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016de:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80016e0:	2201      	movs	r2, #1
 80016e2:	6102      	str	r2, [r0, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80016e4:	7602      	strb	r2, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e6:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ea:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ec:	491a      	ldr	r1, [pc, #104]	; (8001758 <MX_ADC1_Init+0x94>)
 80016ee:	6281      	str	r1, [r0, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f0:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 3;
 80016f2:	2103      	movs	r1, #3
 80016f4:	61c1      	str	r1, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80016f6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fa:	6142      	str	r2, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016fc:	f000 fc70 	bl	8001fe0 <HAL_ADC_Init>
 8001700:	b9f0      	cbnz	r0, 8001740 <MX_ADC1_Init+0x7c>
	sConfig.Channel = ADC_CHANNEL_1;
 8001702:	2301      	movs	r3, #1
 8001704:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 8001706:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001708:	2300      	movs	r3, #0
 800170a:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170c:	4669      	mov	r1, sp
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <MX_ADC1_Init+0x8c>)
 8001710:	f000 ff84 	bl	800261c <HAL_ADC_ConfigChannel>
 8001714:	b9b0      	cbnz	r0, 8001744 <MX_ADC1_Init+0x80>
	sConfig.Channel = ADC_CHANNEL_4;
 8001716:	2304      	movs	r3, #4
 8001718:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 2;
 800171a:	2302      	movs	r3, #2
 800171c:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171e:	4669      	mov	r1, sp
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <MX_ADC1_Init+0x8c>)
 8001722:	f000 ff7b 	bl	800261c <HAL_ADC_ConfigChannel>
 8001726:	b978      	cbnz	r0, 8001748 <MX_ADC1_Init+0x84>
	sConfig.Channel = ADC_CHANNEL_8;
 8001728:	2308      	movs	r3, #8
 800172a:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 3;
 800172c:	2303      	movs	r3, #3
 800172e:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	4669      	mov	r1, sp
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_ADC1_Init+0x8c>)
 8001734:	f000 ff72 	bl	800261c <HAL_ADC_ConfigChannel>
 8001738:	b940      	cbnz	r0, 800174c <MX_ADC1_Init+0x88>
}
 800173a:	b005      	add	sp, #20
 800173c:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001740:	f7ff ffa4 	bl	800168c <Error_Handler>
		Error_Handler();
 8001744:	f7ff ffa2 	bl	800168c <Error_Handler>
		Error_Handler();
 8001748:	f7ff ffa0 	bl	800168c <Error_Handler>
		Error_Handler();
 800174c:	f7ff ff9e 	bl	800168c <Error_Handler>
 8001750:	2000041c 	.word	0x2000041c
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <MX_TIM6_Init>:
{
 800175c:	b500      	push	{lr}
 800175e:	b083      	sub	sp, #12
	TIM_MasterConfigTypeDef sMasterConfig =
 8001760:	2300      	movs	r3, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	9301      	str	r3, [sp, #4]
	htim6.Instance = TIM6;
 8001766:	480f      	ldr	r0, [pc, #60]	; (80017a4 <MX_TIM6_Init+0x48>)
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <MX_TIM6_Init+0x4c>)
 800176a:	6002      	str	r2, [r0, #0]
	htim6.Init.Prescaler = 449;
 800176c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001770:	6042      	str	r2, [r0, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	6083      	str	r3, [r0, #8]
	htim6.Init.Period = 9999;
 8001774:	f242 730f 	movw	r3, #9999	; 0x270f
 8001778:	60c3      	str	r3, [r0, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800177e:	f002 f957 	bl	8003a30 <HAL_TIM_Base_Init>
 8001782:	b950      	cbnz	r0, 800179a <MX_TIM6_Init+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800178a:	4669      	mov	r1, sp
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_TIM6_Init+0x48>)
 800178e:	f002 f969 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	b920      	cbnz	r0, 800179e <MX_TIM6_Init+0x42>
}
 8001794:	b003      	add	sp, #12
 8001796:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800179a:	f7ff ff77 	bl	800168c <Error_Handler>
		Error_Handler();
 800179e:	f7ff ff75 	bl	800168c <Error_Handler>
 80017a2:	bf00      	nop
 80017a4:	200004c4 	.word	0x200004c4
 80017a8:	40001000 	.word	0x40001000

080017ac <SystemClock_Config>:
{
 80017ac:	b500      	push	{lr}
 80017ae:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80017b0:	2234      	movs	r2, #52	; 0x34
 80017b2:	2100      	movs	r1, #0
 80017b4:	a807      	add	r0, sp, #28
 80017b6:	f002 fd6d 	bl	8004294 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80017ba:	2300      	movs	r3, #0
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	9304      	str	r3, [sp, #16]
 80017c2:	9305      	str	r3, [sp, #20]
 80017c4:	9306      	str	r3, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	4a22      	ldr	r2, [pc, #136]	; (8001854 <SystemClock_Config+0xa8>)
 80017ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80017cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80017d0:	6411      	str	r1, [r2, #64]	; 0x40
 80017d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <SystemClock_Config+0xac>)
 80017e0:	6811      	ldr	r1, [r2, #0]
 80017e2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80017e6:	6011      	str	r1, [r2, #0]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80017ee:	9201      	str	r2, [sp, #4]
 80017f0:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f2:	2202      	movs	r2, #2
 80017f4:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f6:	2101      	movs	r1, #1
 80017f8:	910a      	str	r1, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fa:	2110      	movs	r1, #16
 80017fc:	910b      	str	r1, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001800:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001802:	2308      	movs	r3, #8
 8001804:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001806:	23b4      	movs	r3, #180	; 0xb4
 8001808:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800180a:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800180c:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800180e:	9213      	str	r2, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	a807      	add	r0, sp, #28
 8001812:	f001 fdf3 	bl	80033fc <HAL_RCC_OscConfig>
 8001816:	b9b0      	cbnz	r0, 8001846 <SystemClock_Config+0x9a>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001818:	f001 fc1e 	bl	8003058 <HAL_PWREx_EnableOverDrive>
 800181c:	b9a8      	cbnz	r0, 800184a <SystemClock_Config+0x9e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800181e:	230f      	movs	r3, #15
 8001820:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	2302      	movs	r3, #2
 8001824:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800182a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800182e:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001836:	2105      	movs	r1, #5
 8001838:	a802      	add	r0, sp, #8
 800183a:	f001 fc4d 	bl	80030d8 <HAL_RCC_ClockConfig>
 800183e:	b930      	cbnz	r0, 800184e <SystemClock_Config+0xa2>
}
 8001840:	b015      	add	sp, #84	; 0x54
 8001842:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001846:	f7ff ff21 	bl	800168c <Error_Handler>
		Error_Handler();
 800184a:	f7ff ff1f 	bl	800168c <Error_Handler>
		Error_Handler();
 800184e:	f7ff ff1d 	bl	800168c <Error_Handler>
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <main>:
{
 800185c:	b500      	push	{lr}
 800185e:	b0a9      	sub	sp, #164	; 0xa4
	ArduinoShield Shield =
 8001860:	ac02      	add	r4, sp, #8
 8001862:	2294      	movs	r2, #148	; 0x94
 8001864:	2100      	movs	r1, #0
 8001866:	4620      	mov	r0, r4
 8001868:	f002 fd14 	bl	8004294 <memset>
 800186c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001870:	9304      	str	r3, [sp, #16]
 8001872:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <main+0x1d0>)
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	4b6e      	ldr	r3, [pc, #440]	; (8001a30 <main+0x1d4>)
 8001878:	930d      	str	r3, [sp, #52]	; 0x34
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <main+0x1d8>)
 800187c:	930f      	str	r3, [sp, #60]	; 0x3c
 800187e:	9311      	str	r3, [sp, #68]	; 0x44
 8001880:	9313      	str	r3, [sp, #76]	; 0x4c
 8001882:	9315      	str	r3, [sp, #84]	; 0x54
 8001884:	4b6c      	ldr	r3, [pc, #432]	; (8001a38 <main+0x1dc>)
 8001886:	9316      	str	r3, [sp, #88]	; 0x58
 8001888:	4b6c      	ldr	r3, [pc, #432]	; (8001a3c <main+0x1e0>)
 800188a:	9317      	str	r3, [sp, #92]	; 0x5c
 800188c:	f645 03ac 	movw	r3, #22700	; 0x58ac
 8001890:	9327      	str	r3, [sp, #156]	; 0x9c
	HAL_Init();
 8001892:	f000 facb 	bl	8001e2c <HAL_Init>
	SystemClock_Config();
 8001896:	f7ff ff89 	bl	80017ac <SystemClock_Config>
	MX_GPIO_Init();
 800189a:	f7ff fbc7 	bl	800102c <MX_GPIO_Init>
	MX_DMA_Init();
 800189e:	f7ff fc4b 	bl	8001138 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80018a2:	f7ff fef5 	bl	8001690 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80018a6:	f7ff ff0d 	bl	80016c4 <MX_ADC1_Init>
	MX_TIM6_Init();
 80018aa:	f7ff ff57 	bl	800175c <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 80018ae:	4864      	ldr	r0, [pc, #400]	; (8001a40 <main+0x1e4>)
 80018b0:	f001 ff88 	bl	80037c4 <HAL_TIM_Base_Start_IT>
	WriteShieldIN(0, 0, 0, 0, &Shield);
 80018b4:	9400      	str	r4, [sp, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fc9b 	bl	80011f8 <WriteShieldIN>
	WriteShieldLED(0, 0, 0, 0, &Shield);
 80018c2:	9400      	str	r4, [sp, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fc4e 	bl	800116c <WriteShieldLED>
	printf("-----------------------------------------------------\r\n");
 80018d0:	4c5c      	ldr	r4, [pc, #368]	; (8001a44 <main+0x1e8>)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f003 fbce 	bl	8005074 <puts>
	printf(" Infineon PROFET+2 12V Arduino Shield HW Rev 5.0     \r\n");
 80018d8:	485b      	ldr	r0, [pc, #364]	; (8001a48 <main+0x1ec>)
 80018da:	f003 fbcb 	bl	8005074 <puts>
	printf(" Software Version 1.00                SW Button3     \r\n");
 80018de:	485b      	ldr	r0, [pc, #364]	; (8001a4c <main+0x1f0>)
 80018e0:	f003 fbc8 	bl	8005074 <puts>
	printf(" PROFET+2 BTS7002-1EPP                               \r\n");
 80018e4:	485a      	ldr	r0, [pc, #360]	; (8001a50 <main+0x1f4>)
 80018e6:	f003 fbc5 	bl	8005074 <puts>
	printf(" PROFET+2 BTS7004-1EPP                               \r\n");
 80018ea:	485a      	ldr	r0, [pc, #360]	; (8001a54 <main+0x1f8>)
 80018ec:	f003 fbc2 	bl	8005074 <puts>
	printf(" PROFET+2 BTS7006-1EPP                               \r\n");
 80018f0:	4859      	ldr	r0, [pc, #356]	; (8001a58 <main+0x1fc>)
 80018f2:	f003 fbbf 	bl	8005074 <puts>
	printf(" PROFET+2 BTS7008-1EPP                     2019-10-29\r\n");
 80018f6:	4859      	ldr	r0, [pc, #356]	; (8001a5c <main+0x200>)
 80018f8:	f003 fbbc 	bl	8005074 <puts>
	printf("-----------------------------------------------------\r\n");
 80018fc:	4620      	mov	r0, r4
 80018fe:	f003 fbb9 	bl	8005074 <puts>
 8001902:	e012      	b.n	800192a <main+0xce>
				WriteShieldLED(0, 0, 0, 0, &Shield);
 8001904:	ac02      	add	r4, sp, #8
 8001906:	9400      	str	r4, [sp, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	461a      	mov	r2, r3
 800190c:	4619      	mov	r1, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fc2c 	bl	800116c <WriteShieldLED>
				WriteShieldIN(0, 0, 0, 0, &Shield);
 8001914:	9400      	str	r4, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	461a      	mov	r2, r3
 800191a:	4619      	mov	r1, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc6b 	bl	80011f8 <WriteShieldIN>
		if (tcnt >= 30)
 8001922:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <main+0x204>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b1d      	cmp	r3, #29
 8001928:	d872      	bhi.n	8001a10 <main+0x1b4>
		rcvStat2 = HAL_UART_Receive(&huart2, &received2, 1, 10);
 800192a:	230a      	movs	r3, #10
 800192c:	2201      	movs	r2, #1
 800192e:	494d      	ldr	r1, [pc, #308]	; (8001a64 <main+0x208>)
 8001930:	484d      	ldr	r0, [pc, #308]	; (8001a68 <main+0x20c>)
 8001932:	f002 fae7 	bl	8003f04 <HAL_UART_Receive>
 8001936:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <main+0x210>)
 8001938:	7018      	strb	r0, [r3, #0]
		if (rcvStat2 == HAL_OK)
 800193a:	2800      	cmp	r0, #0
 800193c:	d1f1      	bne.n	8001922 <main+0xc6>
			HAL_UART_Transmit(&huart2, (uint8_t*) "TX UART2 : ", 11, 1000);
 800193e:	4c4a      	ldr	r4, [pc, #296]	; (8001a68 <main+0x20c>)
 8001940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001944:	220b      	movs	r2, #11
 8001946:	494a      	ldr	r1, [pc, #296]	; (8001a70 <main+0x214>)
 8001948:	4620      	mov	r0, r4
 800194a:	f002 fa6a 	bl	8003e22 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &received2, 1, 1000);
 800194e:	4d45      	ldr	r5, [pc, #276]	; (8001a64 <main+0x208>)
 8001950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001954:	2201      	movs	r2, #1
 8001956:	4629      	mov	r1, r5
 8001958:	4620      	mov	r0, r4
 800195a:	f002 fa62 	bl	8003e22 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n\r\n", 4, 1000);
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	2204      	movs	r2, #4
 8001964:	4943      	ldr	r1, [pc, #268]	; (8001a74 <main+0x218>)
 8001966:	4620      	mov	r0, r4
 8001968:	f002 fa5b 	bl	8003e22 <HAL_UART_Transmit>
			switch (received2)
 800196c:	782b      	ldrb	r3, [r5, #0]
 800196e:	3b30      	subs	r3, #48	; 0x30
 8001970:	2b04      	cmp	r3, #4
 8001972:	d8d6      	bhi.n	8001922 <main+0xc6>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <main+0x120>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	08001905 	.word	0x08001905
 8001980:	08001991 	.word	0x08001991
 8001984:	080019b1 	.word	0x080019b1
 8001988:	080019d1 	.word	0x080019d1
 800198c:	080019f1 	.word	0x080019f1
				WriteShieldLED(1, 0, 0, 0, &Shield);
 8001990:	ac02      	add	r4, sp, #8
 8001992:	9400      	str	r4, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	461a      	mov	r2, r3
 8001998:	4619      	mov	r1, r3
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fbe6 	bl	800116c <WriteShieldLED>
				WriteShieldIN(1, 0, 0, 0, &Shield);
 80019a0:	9400      	str	r4, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4619      	mov	r1, r3
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff fc25 	bl	80011f8 <WriteShieldIN>
				break;
 80019ae:	e7b8      	b.n	8001922 <main+0xc6>
				WriteShieldLED(0, 1, 0, 0, &Shield);
 80019b0:	ac02      	add	r4, sp, #8
 80019b2:	9400      	str	r4, [sp, #0]
 80019b4:	2300      	movs	r3, #0
 80019b6:	461a      	mov	r2, r3
 80019b8:	2101      	movs	r1, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fbd6 	bl	800116c <WriteShieldLED>
				WriteShieldIN(0, 1, 0, 0, &Shield);
 80019c0:	9400      	str	r4, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	461a      	mov	r2, r3
 80019c6:	2101      	movs	r1, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fc15 	bl	80011f8 <WriteShieldIN>
				break;
 80019ce:	e7a8      	b.n	8001922 <main+0xc6>
				WriteShieldLED(0, 0, 1, 0, &Shield);
 80019d0:	ac02      	add	r4, sp, #8
 80019d2:	9400      	str	r4, [sp, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	2201      	movs	r2, #1
 80019d8:	4619      	mov	r1, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fbc6 	bl	800116c <WriteShieldLED>
				WriteShieldIN(0, 0, 1, 0, &Shield);
 80019e0:	9400      	str	r4, [sp, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	2201      	movs	r2, #1
 80019e6:	4619      	mov	r1, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fc05 	bl	80011f8 <WriteShieldIN>
				break;
 80019ee:	e798      	b.n	8001922 <main+0xc6>
				WriteShieldLED(0, 0, 0, 1, &Shield);
 80019f0:	ac02      	add	r4, sp, #8
 80019f2:	9400      	str	r4, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	2200      	movs	r2, #0
 80019f8:	4611      	mov	r1, r2
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7ff fbb6 	bl	800116c <WriteShieldLED>
				WriteShieldIN(0, 0, 0, 1, &Shield);
 8001a00:	9400      	str	r4, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	2200      	movs	r2, #0
 8001a06:	4611      	mov	r1, r2
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f7ff fbf5 	bl	80011f8 <WriteShieldIN>
				break;
 8001a0e:	e788      	b.n	8001922 <main+0xc6>
			Read_ADC(&Shield);
 8001a10:	a802      	add	r0, sp, #8
 8001a12:	f7ff fc39 	bl	8001288 <Read_ADC>
			PrintStatus(&Shield);
 8001a16:	a802      	add	r0, sp, #8
 8001a18:	f7ff fd38 	bl	800148c <PrintStatus>
			PrintADC(&Shield);
 8001a1c:	a802      	add	r0, sp, #8
 8001a1e:	f7ff fd5d 	bl	80014dc <PrintADC>
			tcnt = 0;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <main+0x204>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e77f      	b.n	800192a <main+0xce>
 8001a2a:	bf00      	nop
 8001a2c:	404ae148 	.word	0x404ae148
 8001a30:	3f85c28f 	.word	0x3f85c28f
 8001a34:	3f8a3d71 	.word	0x3f8a3d71
 8001a38:	47379800 	.word	0x47379800
 8001a3c:	461c4000 	.word	0x461c4000
 8001a40:	200004c4 	.word	0x200004c4
 8001a44:	08008e00 	.word	0x08008e00
 8001a48:	08008e38 	.word	0x08008e38
 8001a4c:	08008e70 	.word	0x08008e70
 8001a50:	08008ea8 	.word	0x08008ea8
 8001a54:	08008ee0 	.word	0x08008ee0
 8001a58:	08008f18 	.word	0x08008f18
 8001a5c:	08008f50 	.word	0x08008f50
 8001a60:	20000205 	.word	0x20000205
 8001a64:	20000204 	.word	0x20000204
 8001a68:	20000908 	.word	0x20000908
 8001a6c:	20000504 	.word	0x20000504
 8001a70:	08008f88 	.word	0x08008f88
 8001a74:	08008f94 	.word	0x08008f94

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b500      	push	{lr}
 8001a7a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	9100      	str	r1, [sp, #0]
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_MspInit+0x3c>)
 8001a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	9101      	str	r1, [sp, #4]
 8001a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aa8:	2007      	movs	r0, #7
 8001aaa:	f000 fe8b 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	b003      	add	sp, #12
 8001ab0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	2300      	movs	r3, #0
 8001abe:	9303      	str	r3, [sp, #12]
 8001ac0:	9304      	str	r3, [sp, #16]
 8001ac2:	9305      	str	r3, [sp, #20]
 8001ac4:	9306      	str	r3, [sp, #24]
 8001ac6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ace:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ad6:	b008      	add	sp, #32
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001adc:	2500      	movs	r5, #0
 8001ade:	9500      	str	r5, [sp, #0]
 8001ae0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
 8001aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001af2:	9200      	str	r2, [sp, #0]
 8001af4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	9501      	str	r5, [sp, #4]
 8001af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
 8001b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b02:	f002 0201 	and.w	r2, r2, #1
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	9502      	str	r5, [sp, #8]
 8001b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0e:	f042 0202 	orr.w	r2, r2, #2
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A1_Vbb_Pin|A2_Isense_1_2_Pin;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b22:	2603      	movs	r6, #3
 8001b24:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	a903      	add	r1, sp, #12
 8001b2a:	4818      	ldr	r0, [pc, #96]	; (8001b8c <HAL_ADC_MspInit+0xd4>)
 8001b2c:	f001 f9ae 	bl	8002e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = A3_Isense_3_4_Pin;
 8001b30:	2301      	movs	r3, #1
 8001b32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b34:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(A3_Isense_3_4_GPIO_Port, &GPIO_InitStruct);
 8001b38:	a903      	add	r1, sp, #12
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <HAL_ADC_MspInit+0xd8>)
 8001b3c:	f001 f9a6 	bl	8002e8c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001b40:	4814      	ldr	r0, [pc, #80]	; (8001b94 <HAL_ADC_MspInit+0xdc>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_ADC_MspInit+0xe0>)
 8001b44:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b46:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b48:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b5c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b62:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b64:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b66:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b68:	f000 ff16 	bl	8002998 <HAL_DMA_Init>
 8001b6c:	b958      	cbnz	r0, 8001b86 <HAL_ADC_MspInit+0xce>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_ADC_MspInit+0xdc>)
 8001b70:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b72:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	4611      	mov	r1, r2
 8001b78:	2012      	movs	r0, #18
 8001b7a:	f000 fe35 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b7e:	2012      	movs	r0, #18
 8001b80:	f000 fe66 	bl	8002850 <HAL_NVIC_EnableIRQ>
}
 8001b84:	e7a7      	b.n	8001ad6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8001b86:	f7ff fd81 	bl	800168c <Error_Handler>
 8001b8a:	e7f0      	b.n	8001b6e <HAL_ADC_MspInit+0xb6>
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	20000464 	.word	0x20000464
 8001b98:	40026410 	.word	0x40026410

08001b9c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001b9c:	6802      	ldr	r2, [r0, #0]
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d000      	beq.n	8001ba6 <HAL_TIM_Base_MspInit+0xa>
 8001ba4:	4770      	bx	lr
{
 8001ba6:	b500      	push	{lr}
 8001ba8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001baa:	2100      	movs	r1, #0
 8001bac:	9101      	str	r1, [sp, #4]
 8001bae:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8001bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb4:	f042 0210 	orr.w	r2, r2, #16
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	9b01      	ldr	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	2036      	movs	r0, #54	; 0x36
 8001bc8:	f000 fe0e 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bcc:	2036      	movs	r0, #54	; 0x36
 8001bce:	f000 fe3f 	bl	8002850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001bd2:	b003      	add	sp, #12
 8001bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bd8:	40001000 	.word	0x40001000

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	2300      	movs	r3, #0
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	9304      	str	r3, [sp, #16]
 8001be6:	9305      	str	r3, [sp, #20]
 8001be8:	9306      	str	r3, [sp, #24]
 8001bea:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001bec:	6802      	ldr	r2, [r0, #0]
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_UART_MspInit+0x78>)
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bf4:	b008      	add	sp, #32
 8001bf6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	9401      	str	r4, [sp, #4]
 8001bfc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
 8001c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c0e:	9201      	str	r2, [sp, #4]
 8001c10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	9402      	str	r4, [sp, #8]
 8001c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c26:	230c      	movs	r3, #12
 8001c28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c34:	2307      	movs	r3, #7
 8001c36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	a903      	add	r1, sp, #12
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <HAL_UART_MspInit+0x7c>)
 8001c3c:	f001 f926 	bl	8002e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c40:	4622      	mov	r2, r4
 8001c42:	4621      	mov	r1, r4
 8001c44:	2026      	movs	r0, #38	; 0x26
 8001c46:	f000 fdcf 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c4a:	2026      	movs	r0, #38	; 0x26
 8001c4c:	f000 fe00 	bl	8002850 <HAL_NVIC_EnableIRQ>
}
 8001c50:	e7d0      	b.n	8001bf4 <HAL_UART_MspInit+0x18>
 8001c52:	bf00      	nop
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40020000 	.word	0x40020000

08001c5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler>

08001c5e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler>

08001c60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler>

08001c62 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler>

08001c64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler>

08001c66 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6e:	f000 f8f7 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c72:	bd08      	pop	{r3, pc}

08001c74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c76:	4802      	ldr	r0, [pc, #8]	; (8001c80 <ADC_IRQHandler+0xc>)
 8001c78:	f000 fbe5 	bl	8002446 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000041c 	.word	0x2000041c

08001c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c86:	4802      	ldr	r0, [pc, #8]	; (8001c90 <USART2_IRQHandler+0xc>)
 8001c88:	f002 fa3e 	bl	8004108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c8c:	bd08      	pop	{r3, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000908 	.word	0x20000908

08001c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c96:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM6_DAC_IRQHandler+0xc>)
 8001c98:	f001 fda9 	bl	80037ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c9c:	bd08      	pop	{r3, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200004c4 	.word	0x200004c4

08001ca4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ca6:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA2_Stream0_IRQHandler+0xc>)
 8001ca8:	f001 f802 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cac:	bd08      	pop	{r3, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000464 	.word	0x20000464

08001cb4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	4770      	bx	lr

08001cb8 <_kill>:

int _kill(int pid, int sig)
{
 8001cb8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cba:	f002 fac1 	bl	8004240 <__errno>
 8001cbe:	2316      	movs	r3, #22
 8001cc0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc6:	bd08      	pop	{r3, pc}

08001cc8 <_exit>:

void _exit (int status)
{
 8001cc8:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001cca:	f04f 31ff 	mov.w	r1, #4294967295
 8001cce:	f7ff fff3 	bl	8001cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cd2:	e7fe      	b.n	8001cd2 <_exit+0xa>

08001cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	2500      	movs	r5, #0
 8001cdc:	42b5      	cmp	r5, r6
 8001cde:	da07      	bge.n	8001cf0 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001ce0:	f7ff fcb6 	bl	8001650 <__io_getchar>
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001cec:	460c      	mov	r4, r1
 8001cee:	e7f5      	b.n	8001cdc <_read+0x8>
	}

return len;
}
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}

08001cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	2500      	movs	r5, #0
 8001cfc:	42b5      	cmp	r5, r6
 8001cfe:	da05      	bge.n	8001d0c <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001d00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d04:	f7ff fc94 	bl	8001630 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	3501      	adds	r5, #1
 8001d0a:	e7f7      	b.n	8001cfc <_write+0x8>
	}
	return len;
}
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}

08001d10 <_close>:

int _close(int file)
{
	return -1;
}
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	4770      	bx	lr

08001d20 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d20:	2001      	movs	r0, #1
 8001d22:	4770      	bx	lr

08001d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d24:	2000      	movs	r0, #0
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <_sbrk+0x38>)
 8001d2e:	490d      	ldr	r1, [pc, #52]	; (8001d64 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <_sbrk+0x40>)
 8001d32:	6800      	ldr	r0, [r0, #0]
 8001d34:	b140      	cbz	r0, 8001d48 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	480c      	ldr	r0, [pc, #48]	; (8001d68 <_sbrk+0x40>)
 8001d38:	6800      	ldr	r0, [r0, #0]
 8001d3a:	4403      	add	r3, r0
 8001d3c:	1a52      	subs	r2, r2, r1
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d806      	bhi.n	8001d50 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <_sbrk+0x40>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001d46:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <_sbrk+0x40>)
 8001d4a:	4c08      	ldr	r4, [pc, #32]	; (8001d6c <_sbrk+0x44>)
 8001d4c:	6004      	str	r4, [r0, #0]
 8001d4e:	e7f2      	b.n	8001d36 <_sbrk+0xe>
    errno = ENOMEM;
 8001d50:	f002 fa76 	bl	8004240 <__errno>
 8001d54:	230c      	movs	r3, #12
 8001d56:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	e7f3      	b.n	8001d46 <_sbrk+0x1e>
 8001d5e:	bf00      	nop
 8001d60:	20020000 	.word	0x20020000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20000208 	.word	0x20000208
 8001d6c:	20000960 	.word	0x20000960

08001d70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SystemInit+0x18>)
 8001d72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d76:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d82:	609a      	str	r2, [r3, #8]
#endif
}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d92:	e003      	b.n	8001d9c <LoopCopyDataInit>

08001d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d9a:	3104      	adds	r1, #4

08001d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001da4:	d3f6      	bcc.n	8001d94 <CopyDataInit>
  ldr  r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001da8:	e002      	b.n	8001db0 <LoopFillZerobss>

08001daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dac:	f842 3b04 	str.w	r3, [r2], #4

08001db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001db4:	d3f9      	bcc.n	8001daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db6:	f7ff ffdb 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f002 fa47 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff fd4d 	bl	800185c <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dc8:	08009484 	.word	0x08009484
  ldr  r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dd0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001dd4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001dd8:	2000095c 	.word	0x2000095c

08001ddc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <CAN1_RX0_IRQHandler>
	...

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_InitTick+0x40>)
 8001de6:	7818      	ldrb	r0, [r3, #0]
 8001de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dec:	fbb3 f3f0 	udiv	r3, r3, r0
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_InitTick+0x44>)
 8001df2:	6810      	ldr	r0, [r2, #0]
 8001df4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001df8:	f000 fd38 	bl	800286c <HAL_SYSTICK_Config>
 8001dfc:	b968      	cbnz	r0, 8001e1a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	2c0f      	cmp	r4, #15
 8001e00:	d901      	bls.n	8001e06 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e00a      	b.n	8001e1c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e06:	2200      	movs	r2, #0
 8001e08:	4621      	mov	r1, r4
 8001e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0e:	f000 fceb 	bl	80027e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_InitTick+0x48>)
 8001e14:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2000      	movs	r0, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	bd10      	pop	{r4, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_Init>:
{
 8001e2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_Init+0x30>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 fcbb 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff ffc6 	bl	8001de0 <HAL_InitTick>
  HAL_MspInit();
 8001e54:	f7ff fe10 	bl	8001a78 <HAL_MspInit>
}
 8001e58:	2000      	movs	r0, #0
 8001e5a:	bd08      	pop	{r3, pc}
 8001e5c:	40023c00 	.word	0x40023c00

08001e60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x10>)
 8001e62:	6811      	ldr	r1, [r2, #0]
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_IncTick+0x14>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	440b      	add	r3, r1
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000948 	.word	0x20000948
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <HAL_GetTick+0x8>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000948 	.word	0x20000948

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fff6 	bl	8001e78 <HAL_GetTick>
 8001e8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001e92:	d002      	beq.n	8001e9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_Delay+0x24>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9a:	f7ff ffed 	bl	8001e78 <HAL_GetTick>
 8001e9e:	1b40      	subs	r0, r0, r5
 8001ea0:	42a0      	cmp	r0, r4
 8001ea2:	d3fa      	bcc.n	8001e9a <HAL_Delay+0x16>
  {
  }
}
 8001ea4:	bd38      	pop	{r3, r4, r5, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000004 	.word	0x20000004

08001eac <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001eac:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <ADC_Init+0x12c>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001eb4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	6841      	ldr	r1, [r0, #4]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ebe:	6802      	ldr	r2, [r0, #0]
 8001ec0:	6853      	ldr	r3, [r2, #4]
 8001ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	6853      	ldr	r3, [r2, #4]
 8001ecc:	6901      	ldr	r1, [r0, #16]
 8001ece:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ed2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	6853      	ldr	r3, [r2, #4]
 8001ed8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001edc:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ede:	6802      	ldr	r2, [r0, #0]
 8001ee0:	6853      	ldr	r3, [r2, #4]
 8001ee2:	6881      	ldr	r1, [r0, #8]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee8:	6802      	ldr	r2, [r0, #0]
 8001eea:	6893      	ldr	r3, [r2, #8]
 8001eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef2:	6802      	ldr	r2, [r0, #0]
 8001ef4:	6893      	ldr	r3, [r2, #8]
 8001ef6:	68c1      	ldr	r1, [r0, #12]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <ADC_Init+0x130>)
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d057      	beq.n	8001fb4 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6893      	ldr	r3, [r2, #8]
 8001f08:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f0c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f0e:	6802      	ldr	r2, [r0, #0]
 8001f10:	6893      	ldr	r3, [r2, #8]
 8001f12:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	6893      	ldr	r3, [r2, #8]
 8001f1c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f20:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f22:	6802      	ldr	r2, [r0, #0]
 8001f24:	6893      	ldr	r3, [r2, #8]
 8001f26:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6893      	ldr	r3, [r2, #8]
 8001f30:	f023 0302 	bic.w	r3, r3, #2
 8001f34:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	6893      	ldr	r3, [r2, #8]
 8001f3a:	7e01      	ldrb	r1, [r0, #24]
 8001f3c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001f40:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f42:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03f      	beq.n	8001fca <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f4a:	6802      	ldr	r2, [r0, #0]
 8001f4c:	6853      	ldr	r3, [r2, #4]
 8001f4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f52:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f54:	6802      	ldr	r2, [r0, #0]
 8001f56:	6853      	ldr	r3, [r2, #4]
 8001f58:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f5c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f5e:	6801      	ldr	r1, [r0, #0]
 8001f60:	684b      	ldr	r3, [r1, #4]
 8001f62:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f64:	3a01      	subs	r2, #1
 8001f66:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001f6a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f6c:	6802      	ldr	r2, [r0, #0]
 8001f6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f74:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f76:	6801      	ldr	r1, [r0, #0]
 8001f78:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001f7a:	69c2      	ldr	r2, [r0, #28]
 8001f7c:	3a01      	subs	r2, #1
 8001f7e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001f82:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f84:	6802      	ldr	r2, [r0, #0]
 8001f86:	6893      	ldr	r3, [r2, #8]
 8001f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f8c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f8e:	6802      	ldr	r2, [r0, #0]
 8001f90:	6893      	ldr	r3, [r2, #8]
 8001f92:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001f96:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001f9a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f9c:	6802      	ldr	r2, [r0, #0]
 8001f9e:	6893      	ldr	r3, [r2, #8]
 8001fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fa4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa6:	6802      	ldr	r2, [r0, #0]
 8001fa8:	6893      	ldr	r3, [r2, #8]
 8001faa:	6941      	ldr	r1, [r0, #20]
 8001fac:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001fb0:	6093      	str	r3, [r2, #8]
}
 8001fb2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb4:	6802      	ldr	r2, [r0, #0]
 8001fb6:	6893      	ldr	r3, [r2, #8]
 8001fb8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001fbc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	6893      	ldr	r3, [r2, #8]
 8001fc2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001fc6:	6093      	str	r3, [r2, #8]
 8001fc8:	e7b0      	b.n	8001f2c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fca:	6802      	ldr	r2, [r0, #0]
 8001fcc:	6853      	ldr	r3, [r2, #4]
 8001fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fd2:	6053      	str	r3, [r2, #4]
 8001fd4:	e7ca      	b.n	8001f6c <ADC_Init+0xc0>
 8001fd6:	bf00      	nop
 8001fd8:	40012300 	.word	0x40012300
 8001fdc:	0f000001 	.word	0x0f000001

08001fe0 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001fe0:	b338      	cbz	r0, 8002032 <HAL_ADC_Init+0x52>
{
 8001fe2:	b510      	push	{r4, lr}
 8001fe4:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fe6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fe8:	b143      	cbz	r3, 8001ffc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fec:	f013 0f10 	tst.w	r3, #16
 8001ff0:	d00b      	beq.n	800200a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ffa:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001ffc:	f7ff fd5c 	bl	8001ab8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002000:	2300      	movs	r3, #0
 8002002:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002004:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002008:	e7ef      	b.n	8001fea <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800200c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002010:	f023 0302 	bic.w	r3, r3, #2
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff ff46 	bl	8001eac <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	2000      	movs	r0, #0
 8002022:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6423      	str	r3, [r4, #64]	; 0x40
 8002030:	e7e0      	b.n	8001ff4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_ADC_Start>:
{
 8002038:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800203e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d07d      	beq.n	8002142 <HAL_ADC_Start+0x10a>
 8002046:	2301      	movs	r3, #1
 8002048:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	f012 0f01 	tst.w	r2, #1
 8002054:	d113      	bne.n	800207e <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_ADC_Start+0x11c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <HAL_ADC_Start+0x120>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	0c9b      	lsrs	r3, r3, #18
 800206a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800206e:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8002070:	e002      	b.n	8002078 <HAL_ADC_Start+0x40>
      counter--;
 8002072:	9b01      	ldr	r3, [sp, #4]
 8002074:	3b01      	subs	r3, #1
 8002076:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8002078:	9b01      	ldr	r3, [sp, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800207e:	6802      	ldr	r2, [r0, #0]
 8002080:	6893      	ldr	r3, [r2, #8]
 8002082:	f013 0f01 	tst.w	r3, #1
 8002086:	d05e      	beq.n	8002146 <HAL_ADC_Start+0x10e>
    ADC_STATE_CLR_SET(hadc->State,
 8002088:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800208a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002098:	6853      	ldr	r3, [r2, #4]
 800209a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800209e:	d005      	beq.n	80020ac <HAL_ADC_Start+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020aa:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020ae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80020b2:	d01b      	beq.n	80020ec <HAL_ADC_Start+0xb4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80020b6:	f023 0306 	bic.w	r3, r3, #6
 80020ba:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80020bc:	2300      	movs	r3, #0
 80020be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020c2:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80020c6:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_ADC_Start+0x124>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f013 0f1f 	tst.w	r3, #31
 80020d0:	d127      	bne.n	8002122 <HAL_ADC_Start+0xea>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020d2:	6803      	ldr	r3, [r0, #0]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_ADC_Start+0x128>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d011      	beq.n	80020fe <HAL_ADC_Start+0xc6>
 80020da:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_ADC_Start+0xba>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020e2:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_ADC_Start+0x12c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d014      	beq.n	8002112 <HAL_ADC_Start+0xda>
  return HAL_OK;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e02d      	b.n	8002148 <HAL_ADC_Start+0x110>
      ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	2300      	movs	r3, #0
 80020ee:	6443      	str	r3, [r0, #68]	; 0x44
 80020f0:	e7e4      	b.n	80020bc <HAL_ADC_Start+0x84>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80020f6:	6852      	ldr	r2, [r2, #4]
 80020f8:	f012 0f1f 	tst.w	r2, #31
 80020fc:	d1f1      	bne.n	80020e2 <HAL_ADC_Start+0xaa>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002104:	d122      	bne.n	800214c <HAL_ADC_Start+0x114>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800210c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800210e:	2000      	movs	r0, #0
 8002110:	e01a      	b.n	8002148 <HAL_ADC_Start+0x110>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002112:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002116:	6852      	ldr	r2, [r2, #4]
 8002118:	f012 0f10 	tst.w	r2, #16
 800211c:	d0ef      	beq.n	80020fe <HAL_ADC_Start+0xc6>
  return HAL_OK;
 800211e:	2000      	movs	r0, #0
 8002120:	e012      	b.n	8002148 <HAL_ADC_Start+0x110>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_ADC_Start+0x128>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d001      	beq.n	800212e <HAL_ADC_Start+0xf6>
  return HAL_OK;
 800212a:	2000      	movs	r0, #0
 800212c:	e00c      	b.n	8002148 <HAL_ADC_Start+0x110>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002134:	d10c      	bne.n	8002150 <HAL_ADC_Start+0x118>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800213c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800213e:	2000      	movs	r0, #0
 8002140:	e002      	b.n	8002148 <HAL_ADC_Start+0x110>
  __HAL_LOCK(hadc);
 8002142:	2002      	movs	r0, #2
 8002144:	e000      	b.n	8002148 <HAL_ADC_Start+0x110>
  return HAL_OK;
 8002146:	2000      	movs	r0, #0
}
 8002148:	b002      	add	sp, #8
 800214a:	4770      	bx	lr
  return HAL_OK;
 800214c:	2000      	movs	r0, #0
 800214e:	e7fb      	b.n	8002148 <HAL_ADC_Start+0x110>
 8002150:	2000      	movs	r0, #0
 8002152:	e7f9      	b.n	8002148 <HAL_ADC_Start+0x110>
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83
 800215c:	40012300 	.word	0x40012300
 8002160:	40012000 	.word	0x40012000
 8002164:	40012200 	.word	0x40012200

08002168 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002168:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800216c:	2b01      	cmp	r3, #1
 800216e:	d019      	beq.n	80021a4 <HAL_ADC_Stop+0x3c>
 8002170:	2301      	movs	r3, #1
 8002172:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8002176:	6802      	ldr	r2, [r0, #0]
 8002178:	6893      	ldr	r3, [r2, #8]
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002180:	6803      	ldr	r3, [r0, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f013 0f01 	tst.w	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_ADC_Stop+0x32>
    ADC_STATE_CLR_SET(hadc->State,
 800218a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800218c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800219a:	2300      	movs	r3, #0
 800219c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80021a0:	4618      	mov	r0, r3
 80021a2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80021a4:	2002      	movs	r0, #2
}
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_PollForConversion>:
{
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ae:	6803      	ldr	r3, [r0, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80021b6:	d003      	beq.n	80021c0 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021b8:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021be:	d119      	bne.n	80021f4 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 80021c0:	f7ff fe5a 	bl	8001e78 <HAL_GetTick>
 80021c4:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f012 0f02 	tst.w	r2, #2
 80021ce:	d11a      	bne.n	8002206 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80021d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021d4:	d0f7      	beq.n	80021c6 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021d6:	b125      	cbz	r5, 80021e2 <HAL_ADC_PollForConversion+0x3a>
 80021d8:	f7ff fe4e 	bl	8001e78 <HAL_GetTick>
 80021dc:	1b80      	subs	r0, r0, r6
 80021de:	42a8      	cmp	r0, r5
 80021e0:	d9f1      	bls.n	80021c6 <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80021ea:	2300      	movs	r3, #0
 80021ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80021f0:	2003      	movs	r0, #3
 80021f2:	e02c      	b.n	800224e <HAL_ADC_PollForConversion+0xa6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021f6:	f043 0320 	orr.w	r3, r3, #32
 80021fa:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80021fc:	2300      	movs	r3, #0
 80021fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	e023      	b.n	800224e <HAL_ADC_PollForConversion+0xa6>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002206:	f06f 0212 	mvn.w	r2, #18
 800220a:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800220c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800220e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002212:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800221c:	d116      	bne.n	800224c <HAL_ADC_PollForConversion+0xa4>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221e:	7e20      	ldrb	r0, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002220:	b9b0      	cbnz	r0, 8002250 <HAL_ADC_PollForConversion+0xa8>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002224:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002228:	d003      	beq.n	8002232 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800222a:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800222c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002230:	d10d      	bne.n	800224e <HAL_ADC_PollForConversion+0xa6>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002238:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800223c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002240:	d105      	bne.n	800224e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6423      	str	r3, [r4, #64]	; 0x40
 800224a:	e000      	b.n	800224e <HAL_ADC_PollForConversion+0xa6>
  return HAL_OK;
 800224c:	2000      	movs	r0, #0
}
 800224e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002250:	2000      	movs	r0, #0
 8002252:	e7fc      	b.n	800224e <HAL_ADC_PollForConversion+0xa6>

08002254 <HAL_ADC_Start_DMA>:
{
 8002254:	b530      	push	{r4, r5, lr}
 8002256:	b083      	sub	sp, #12
 8002258:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800225a:	2200      	movs	r2, #0
 800225c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800225e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002262:	2a01      	cmp	r2, #1
 8002264:	f000 809a 	beq.w	800239c <HAL_ADC_Start_DMA+0x148>
 8002268:	4605      	mov	r5, r0
 800226a:	2201      	movs	r2, #1
 800226c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002270:	6802      	ldr	r2, [r0, #0]
 8002272:	6890      	ldr	r0, [r2, #8]
 8002274:	f010 0f01 	tst.w	r0, #1
 8002278:	d113      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 800227a:	6890      	ldr	r0, [r2, #8]
 800227c:	f040 0001 	orr.w	r0, r0, #1
 8002280:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002282:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <HAL_ADC_Start_DMA+0x15c>)
 8002284:	6810      	ldr	r0, [r2, #0]
 8002286:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_ADC_Start_DMA+0x160>)
 8002288:	fba2 2000 	umull	r2, r0, r2, r0
 800228c:	0c80      	lsrs	r0, r0, #18
 800228e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002292:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8002294:	e002      	b.n	800229c <HAL_ADC_Start_DMA+0x48>
      counter--;
 8002296:	9c01      	ldr	r4, [sp, #4]
 8002298:	3c01      	subs	r4, #1
 800229a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800229c:	9801      	ldr	r0, [sp, #4]
 800229e:	2800      	cmp	r0, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_Start_DMA+0x42>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022a2:	682a      	ldr	r2, [r5, #0]
 80022a4:	6890      	ldr	r0, [r2, #8]
 80022a6:	f010 0f01 	tst.w	r0, #1
 80022aa:	d079      	beq.n	80023a0 <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80022ae:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80022b2:	f020 0001 	bic.w	r0, r0, #1
 80022b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80022ba:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022bc:	6852      	ldr	r2, [r2, #4]
 80022be:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022c2:	d005      	beq.n	80022d0 <HAL_ADC_Start_DMA+0x7c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022c4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80022c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ce:	642a      	str	r2, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80022d2:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80022d6:	d036      	beq.n	8002346 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022d8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80022da:	f022 0206 	bic.w	r2, r2, #6
 80022de:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80022e0:	2200      	movs	r2, #0
 80022e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80022e8:	4833      	ldr	r0, [pc, #204]	; (80023b8 <HAL_ADC_Start_DMA+0x164>)
 80022ea:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ec:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80022ee:	4833      	ldr	r0, [pc, #204]	; (80023bc <HAL_ADC_Start_DMA+0x168>)
 80022f0:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80022f4:	4832      	ldr	r0, [pc, #200]	; (80023c0 <HAL_ADC_Start_DMA+0x16c>)
 80022f6:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022f8:	682a      	ldr	r2, [r5, #0]
 80022fa:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80022fe:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002300:	6828      	ldr	r0, [r5, #0]
 8002302:	6842      	ldr	r2, [r0, #4]
 8002304:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002308:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800230a:	6828      	ldr	r0, [r5, #0]
 800230c:	6882      	ldr	r2, [r0, #8]
 800230e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002312:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002314:	6828      	ldr	r0, [r5, #0]
 8002316:	460a      	mov	r2, r1
 8002318:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800231c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800231e:	f000 fba1 	bl	8002a64 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_ADC_Start_DMA+0x170>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f013 0f1f 	tst.w	r3, #31
 800232a:	d127      	bne.n	800237c <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <HAL_ADC_Start_DMA+0x174>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d011      	beq.n	8002358 <HAL_ADC_Start_DMA+0x104>
 8002334:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <HAL_ADC_Start_DMA+0x178>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d014      	beq.n	800236c <HAL_ADC_Start_DMA+0x118>
  return HAL_OK;
 8002342:	2000      	movs	r0, #0
 8002344:	e02d      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 8002346:	2200      	movs	r2, #0
 8002348:	646a      	str	r2, [r5, #68]	; 0x44
 800234a:	e7c9      	b.n	80022e0 <HAL_ADC_Start_DMA+0x8c>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800234c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002350:	6852      	ldr	r2, [r2, #4]
 8002352:	f012 0f1f 	tst.w	r2, #31
 8002356:	d1f1      	bne.n	800233c <HAL_ADC_Start_DMA+0xe8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800235e:	d122      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x152>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002368:	2000      	movs	r0, #0
 800236a:	e01a      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800236c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002370:	6852      	ldr	r2, [r2, #4]
 8002372:	f012 0f10 	tst.w	r2, #16
 8002376:	d0ef      	beq.n	8002358 <HAL_ADC_Start_DMA+0x104>
  return HAL_OK;
 8002378:	2000      	movs	r0, #0
 800237a:	e012      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_ADC_Start_DMA+0x174>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d001      	beq.n	8002388 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 8002384:	2000      	movs	r0, #0
 8002386:	e00c      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800238e:	d10c      	bne.n	80023aa <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002396:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
 800239a:	e002      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 800239c:	2002      	movs	r0, #2
 800239e:	e000      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 80023a0:	2000      	movs	r0, #0
}
 80023a2:	b003      	add	sp, #12
 80023a4:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7fb      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
 80023aa:	2000      	movs	r0, #0
 80023ac:	e7f9      	b.n	80023a2 <HAL_ADC_Start_DMA+0x14e>
 80023ae:	bf00      	nop
 80023b0:	20000000 	.word	0x20000000
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	080025ab 	.word	0x080025ab
 80023bc:	08002439 	.word	0x08002439
 80023c0:	08002595 	.word	0x08002595
 80023c4:	40012300 	.word	0x40012300
 80023c8:	40012000 	.word	0x40012000
 80023cc:	40012200 	.word	0x40012200

080023d0 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80023d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d028      	beq.n	800242a <HAL_ADC_Stop_DMA+0x5a>
{
 80023d8:	b510      	push	{r4, lr}
 80023da:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80023dc:	2301      	movs	r3, #1
 80023de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80023e2:	6802      	ldr	r2, [r0, #0]
 80023e4:	6893      	ldr	r3, [r2, #8]
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ec:	6803      	ldr	r3, [r0, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	f012 0f01 	tst.w	r2, #1
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_Stop_DMA+0x30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80023f8:	2300      	movs	r3, #0
 80023fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80023fe:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002406:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002408:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800240a:	f000 fb60 	bl	8002ace <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800240e:	6822      	ldr	r2, [r4, #0]
 8002410:	6853      	ldr	r3, [r2, #4]
 8002412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002416:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800241a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6423      	str	r3, [r4, #64]	; 0x40
 8002428:	e7e6      	b.n	80023f8 <HAL_ADC_Stop_DMA+0x28>
  __HAL_LOCK(hadc);
 800242a:	2002      	movs	r0, #2
}
 800242c:	4770      	bx	lr

0800242e <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800242e:	6803      	ldr	r3, [r0, #0]
 8002430:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002432:	4770      	bx	lr

08002434 <HAL_ADC_ConvCpltCallback>:
}
 8002434:	4770      	bx	lr

08002436 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002436:	4770      	bx	lr

08002438 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002438:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800243a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800243c:	f7ff fffb 	bl	8002436 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002440:	bd08      	pop	{r3, pc}

08002442 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002442:	4770      	bx	lr

08002444 <HAL_ADC_ErrorCallback>:
}
 8002444:	4770      	bx	lr

08002446 <HAL_ADC_IRQHandler>:
{
 8002446:	b538      	push	{r3, r4, r5, lr}
 8002448:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800244a:	6802      	ldr	r2, [r0, #0]
 800244c:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800244e:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 8002450:	f011 0f02 	tst.w	r1, #2
 8002454:	d02f      	beq.n	80024b6 <HAL_ADC_IRQHandler+0x70>
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	b363      	cbz	r3, 80024b6 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800245c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800245e:	f013 0f10 	tst.w	r3, #16
 8002462:	d103      	bne.n	800246c <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002464:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246a:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800246c:	6893      	ldr	r3, [r2, #8]
 800246e:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8002472:	d119      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002474:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002476:	b9bb      	cbnz	r3, 80024a8 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002478:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800247a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800247e:	d003      	beq.n	8002488 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002480:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002482:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002486:	d10f      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002488:	6853      	ldr	r3, [r2, #4]
 800248a:	f023 0320 	bic.w	r3, r3, #32
 800248e:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002496:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800249a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800249e:	d103      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff ffc3 	bl	8002434 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	f06f 0212 	mvn.w	r2, #18
 80024b4:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 80024c0:	f011 0f04 	tst.w	r1, #4
 80024c4:	d036      	beq.n	8002534 <HAL_ADC_IRQHandler+0xee>
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	d034      	beq.n	8002534 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024cc:	f012 0f10 	tst.w	r2, #16
 80024d0:	d103      	bne.n	80024da <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d8:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80024e0:	d121      	bne.n	8002526 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024e4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80024e8:	d003      	beq.n	80024f2 <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024ea:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024ec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024f0:	d119      	bne.n	8002526 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024f2:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024f8:	d115      	bne.n	8002526 <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024fa:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024fc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002500:	d111      	bne.n	8002526 <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002502:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002504:	b97a      	cbnz	r2, 8002526 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800250e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002514:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002518:	f413 7f80 	tst.w	r3, #256	; 0x100
 800251c:	d103      	bne.n	8002526 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002526:	4620      	mov	r0, r4
 8002528:	f000 f94a 	bl	80027c0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	f06f 020c 	mvn.w	r2, #12
 8002532:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002538:	6853      	ldr	r3, [r2, #4]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 800253e:	f011 0f01 	tst.w	r1, #1
 8002542:	d004      	beq.n	800254e <HAL_ADC_IRQHandler+0x108>
 8002544:	b11b      	cbz	r3, 800254e <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	f013 0f01 	tst.w	r3, #1
 800254c:	d109      	bne.n	8002562 <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002552:	6853      	ldr	r3, [r2, #4]
 8002554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 8002558:	f011 0f20 	tst.w	r1, #32
 800255c:	d000      	beq.n	8002560 <HAL_ADC_IRQHandler+0x11a>
 800255e:	b963      	cbnz	r3, 800257a <HAL_ADC_IRQHandler+0x134>
}
 8002560:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff69 	bl	8002442 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f06f 0201 	mvn.w	r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e7e9      	b.n	800254e <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800257a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002582:	f06f 0520 	mvn.w	r5, #32
 8002586:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002588:	4620      	mov	r0, r4
 800258a:	f7ff ff5b 	bl	8002444 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	601d      	str	r5, [r3, #0]
}
 8002592:	e7e5      	b.n	8002560 <HAL_ADC_IRQHandler+0x11a>

08002594 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002594:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002596:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800259c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025a4:	f7ff ff4e 	bl	8002444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a8:	bd08      	pop	{r3, pc}

080025aa <ADC_DMAConvCplt>:
{
 80025aa:	b508      	push	{r3, lr}
 80025ac:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80025b2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80025b6:	d125      	bne.n	8002604 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025be:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c0:	6803      	ldr	r3, [r0, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80025c8:	d119      	bne.n	80025fe <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ca:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025cc:	b9ba      	cbnz	r2, 80025fe <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80025d4:	d003      	beq.n	80025de <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025d6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025d8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80025dc:	d10f      	bne.n	80025fe <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	f022 0220 	bic.w	r2, r2, #32
 80025e4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ec:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025f0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80025f4:	d103      	bne.n	80025fe <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80025fe:	f7ff ff19 	bl	8002434 <HAL_ADC_ConvCpltCallback>
}
 8002602:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002604:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002606:	f012 0f10 	tst.w	r2, #16
 800260a:	d104      	bne.n	8002616 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800260c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800260e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002610:	4618      	mov	r0, r3
 8002612:	4790      	blx	r2
}
 8002614:	e7f5      	b.n	8002602 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8002616:	f7ff ff15 	bl	8002444 <HAL_ADC_ErrorCallback>
 800261a:	e7f2      	b.n	8002602 <ADC_DMAConvCplt+0x58>

0800261c <HAL_ADC_ConfigChannel>:
{
 800261c:	b430      	push	{r4, r5}
 800261e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002624:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	f000 80bd 	beq.w	80027a8 <HAL_ADC_ConfigChannel+0x18c>
 800262e:	2301      	movs	r3, #1
 8002630:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002634:	680b      	ldr	r3, [r1, #0]
 8002636:	2b09      	cmp	r3, #9
 8002638:	d93e      	bls.n	80026b8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800263a:	6805      	ldr	r5, [r0, #0]
 800263c:	68ea      	ldr	r2, [r5, #12]
 800263e:	b29b      	uxth	r3, r3
 8002640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002644:	3b1e      	subs	r3, #30
 8002646:	2407      	movs	r4, #7
 8002648:	fa04 f303 	lsl.w	r3, r4, r3
 800264c:	ea22 0303 	bic.w	r3, r2, r3
 8002650:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002652:	6805      	ldr	r5, [r0, #0]
 8002654:	68ea      	ldr	r2, [r5, #12]
 8002656:	688c      	ldr	r4, [r1, #8]
 8002658:	880b      	ldrh	r3, [r1, #0]
 800265a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800265e:	3b1e      	subs	r3, #30
 8002660:	fa04 f303 	lsl.w	r3, r4, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8002668:	684b      	ldr	r3, [r1, #4]
 800266a:	2b06      	cmp	r3, #6
 800266c:	d83a      	bhi.n	80026e4 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800266e:	6805      	ldr	r5, [r0, #0]
 8002670:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002676:	3b05      	subs	r3, #5
 8002678:	241f      	movs	r4, #31
 800267a:	fa04 f303 	lsl.w	r3, r4, r3
 800267e:	ea22 0303 	bic.w	r3, r2, r3
 8002682:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002684:	6805      	ldr	r5, [r0, #0]
 8002686:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002688:	684b      	ldr	r3, [r1, #4]
 800268a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800268e:	3b05      	subs	r3, #5
 8002690:	880c      	ldrh	r4, [r1, #0]
 8002692:	fa04 f303 	lsl.w	r3, r4, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800269a:	6802      	ldr	r2, [r0, #0]
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_ADC_ConfigChannel+0x190>)
 800269e:	429a      	cmp	r2, r3
 80026a0:	d050      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a2:	6802      	ldr	r2, [r0, #0]
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_ADC_ConfigChannel+0x190>)
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d059      	beq.n	800275e <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80026aa:	2300      	movs	r3, #0
 80026ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80026b0:	4618      	mov	r0, r3
}
 80026b2:	b002      	add	sp, #8
 80026b4:	bc30      	pop	{r4, r5}
 80026b6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b8:	6805      	ldr	r5, [r0, #0]
 80026ba:	692a      	ldr	r2, [r5, #16]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026c2:	2407      	movs	r4, #7
 80026c4:	fa04 f303 	lsl.w	r3, r4, r3
 80026c8:	ea22 0303 	bic.w	r3, r2, r3
 80026cc:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ce:	6805      	ldr	r5, [r0, #0]
 80026d0:	692a      	ldr	r2, [r5, #16]
 80026d2:	688c      	ldr	r4, [r1, #8]
 80026d4:	880b      	ldrh	r3, [r1, #0]
 80026d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026da:	fa04 f303 	lsl.w	r3, r4, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	612b      	str	r3, [r5, #16]
 80026e2:	e7c1      	b.n	8002668 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d816      	bhi.n	8002716 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e8:	6805      	ldr	r5, [r0, #0]
 80026ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80026ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026f0:	3b23      	subs	r3, #35	; 0x23
 80026f2:	241f      	movs	r4, #31
 80026f4:	fa04 f303 	lsl.w	r3, r4, r3
 80026f8:	ea22 0303 	bic.w	r3, r2, r3
 80026fc:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026fe:	6805      	ldr	r5, [r0, #0]
 8002700:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002702:	684b      	ldr	r3, [r1, #4]
 8002704:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002708:	3b23      	subs	r3, #35	; 0x23
 800270a:	880c      	ldrh	r4, [r1, #0]
 800270c:	fa04 f303 	lsl.w	r3, r4, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	632b      	str	r3, [r5, #48]	; 0x30
 8002714:	e7c1      	b.n	800269a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002716:	6805      	ldr	r5, [r0, #0]
 8002718:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800271a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800271e:	3b41      	subs	r3, #65	; 0x41
 8002720:	241f      	movs	r4, #31
 8002722:	fa04 f303 	lsl.w	r3, r4, r3
 8002726:	ea22 0303 	bic.w	r3, r2, r3
 800272a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800272c:	6805      	ldr	r5, [r0, #0]
 800272e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002730:	684b      	ldr	r3, [r1, #4]
 8002732:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002736:	3b41      	subs	r3, #65	; 0x41
 8002738:	880c      	ldrh	r4, [r1, #0]
 800273a:	fa04 f303 	lsl.w	r3, r4, r3
 800273e:	4313      	orrs	r3, r2
 8002740:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002742:	e7aa      	b.n	800269a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002744:	680b      	ldr	r3, [r1, #0]
 8002746:	2b12      	cmp	r3, #18
 8002748:	d1ab      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_ADC_ConfigChannel+0x194>)
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002752:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	e7a1      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800275e:	680b      	ldr	r3, [r1, #0]
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_ADC_ConfigChannel+0x198>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d001      	beq.n	800276a <HAL_ADC_ConfigChannel+0x14e>
 8002766:	2b11      	cmp	r3, #17
 8002768:	d19f      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_ADC_ConfigChannel+0x194>)
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002772:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800277a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800277c:	680a      	ldr	r2, [r1, #0]
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_ADC_ConfigChannel+0x198>)
 8002780:	429a      	cmp	r2, r3
 8002782:	d192      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_ADC_ConfigChannel+0x19c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_ADC_ConfigChannel+0x1a0>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002798:	e002      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 800279a:	9b01      	ldr	r3, [sp, #4]
 800279c:	3b01      	subs	r3, #1
 800279e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80027a0:	9b01      	ldr	r3, [sp, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f9      	bne.n	800279a <HAL_ADC_ConfigChannel+0x17e>
 80027a6:	e780      	b.n	80026aa <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80027a8:	2002      	movs	r0, #2
 80027aa:	e782      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x96>
 80027ac:	40012000 	.word	0x40012000
 80027b0:	40012300 	.word	0x40012300
 80027b4:	10000012 	.word	0x10000012
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83

080027c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	0200      	lsls	r0, r0, #8
 80027d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80027e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_NVIC_SetPriority+0x60>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f2:	f1c3 0407 	rsb	r4, r3, #7
 80027f6:	2c04      	cmp	r4, #4
 80027f8:	bf28      	it	cs
 80027fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fc:	1d1d      	adds	r5, r3, #4
 80027fe:	2d06      	cmp	r5, #6
 8002800:	d918      	bls.n	8002834 <HAL_NVIC_SetPriority+0x4c>
 8002802:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 35ff 	mov.w	r5, #4294967295
 8002808:	fa05 f404 	lsl.w	r4, r5, r4
 800280c:	ea21 0104 	bic.w	r1, r1, r4
 8002810:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002812:	fa05 f303 	lsl.w	r3, r5, r3
 8002816:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800281c:	2800      	cmp	r0, #0
 800281e:	db0b      	blt.n	8002838 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	0109      	lsls	r1, r1, #4
 8002822:	b2c9      	uxtb	r1, r1
 8002824:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002828:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800282c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002830:	bc30      	pop	{r4, r5}
 8002832:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002834:	2300      	movs	r3, #0
 8002836:	e7e5      	b.n	8002804 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	f000 000f 	and.w	r0, r0, #15
 800283c:	0109      	lsls	r1, r1, #4
 800283e:	b2c9      	uxtb	r1, r1
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <HAL_NVIC_SetPriority+0x64>)
 8002842:	5419      	strb	r1, [r3, r0]
 8002844:	e7f4      	b.n	8002830 <HAL_NVIC_SetPriority+0x48>
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00
 800284c:	e000ed14 	.word	0xe000ed14

08002850 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002850:	2800      	cmp	r0, #0
 8002852:	db07      	blt.n	8002864 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002854:	f000 021f 	and.w	r2, r0, #31
 8002858:	0940      	lsrs	r0, r0, #5
 800285a:	2301      	movs	r3, #1
 800285c:	4093      	lsls	r3, r2
 800285e:	4a02      	ldr	r2, [pc, #8]	; (8002868 <HAL_NVIC_EnableIRQ+0x18>)
 8002860:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	3801      	subs	r0, #1
 800286e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002872:	d20a      	bcs.n	800288a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_SYSTICK_Config+0x24>)
 8002876:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_SYSTICK_Config+0x28>)
 800287a:	21f0      	movs	r1, #240	; 0xf0
 800287c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	2000      	movs	r0, #0
 8002882:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800289a:	6805      	ldr	r5, [r0, #0]
 800289c:	682c      	ldr	r4, [r5, #0]
 800289e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80028a2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028a4:	6804      	ldr	r4, [r0, #0]
 80028a6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a8:	6883      	ldr	r3, [r0, #8]
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d005      	beq.n	80028ba <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80028ae:	6803      	ldr	r3, [r0, #0]
 80028b0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	60da      	str	r2, [r3, #12]
  }
}
 80028b6:	bc30      	pop	{r4, r5}
 80028b8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80028ba:	6803      	ldr	r3, [r0, #0]
 80028bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80028be:	6803      	ldr	r3, [r0, #0]
 80028c0:	60d9      	str	r1, [r3, #12]
 80028c2:	e7f8      	b.n	80028b6 <DMA_SetConfig+0x1e>

080028c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028c4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028c6:	6803      	ldr	r3, [r0, #0]
 80028c8:	b2d9      	uxtb	r1, r3
 80028ca:	3910      	subs	r1, #16
 80028cc:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <DMA_CalcBaseAndBitshift+0x3c>)
 80028ce:	fba2 4201 	umull	r4, r2, r2, r1
 80028d2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028d4:	4c0b      	ldr	r4, [pc, #44]	; (8002904 <DMA_CalcBaseAndBitshift+0x40>)
 80028d6:	5ca2      	ldrb	r2, [r4, r2]
 80028d8:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028da:	295f      	cmp	r1, #95	; 0x5f
 80028dc:	d909      	bls.n	80028f2 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	3304      	adds	r3, #4
 80028e8:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80028ea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80028ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028f0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	6583      	str	r3, [r0, #88]	; 0x58
 80028fc:	e7f5      	b.n	80028ea <DMA_CalcBaseAndBitshift+0x26>
 80028fe:	bf00      	nop
 8002900:	aaaaaaab 	.word	0xaaaaaaab
 8002904:	08008fb4 	.word	0x08008fb4

08002908 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002908:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800290a:	6982      	ldr	r2, [r0, #24]
 800290c:	b992      	cbnz	r2, 8002934 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800290e:	2b01      	cmp	r3, #1
 8002910:	d00a      	beq.n	8002928 <DMA_CheckFifoParam+0x20>
 8002912:	2b02      	cmp	r3, #2
 8002914:	d002      	beq.n	800291c <DMA_CheckFifoParam+0x14>
 8002916:	b10b      	cbz	r3, 800291c <DMA_CheckFifoParam+0x14>
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800291e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002922:	d128      	bne.n	8002976 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002928:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800292a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800292e:	d024      	beq.n	800297a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2000      	movs	r0, #0
 8002932:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002934:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002938:	d009      	beq.n	800294e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800293a:	2b02      	cmp	r3, #2
 800293c:	d925      	bls.n	800298a <DMA_CheckFifoParam+0x82>
 800293e:	2b03      	cmp	r3, #3
 8002940:	d125      	bne.n	800298e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002942:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002944:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002948:	d123      	bne.n	8002992 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	2000      	movs	r0, #0
 800294c:	4770      	bx	lr
    switch (tmp)
 800294e:	2b03      	cmp	r3, #3
 8002950:	d803      	bhi.n	800295a <DMA_CheckFifoParam+0x52>
 8002952:	e8df f003 	tbb	[pc, r3]
 8002956:	0414      	.short	0x0414
 8002958:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295a:	2000      	movs	r0, #0
 800295c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002960:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002964:	d10d      	bne.n	8002982 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2000      	movs	r0, #0
 8002968:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800296c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002970:	d009      	beq.n	8002986 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2000      	movs	r0, #0
 8002974:	4770      	bx	lr
        status = HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	4770      	bx	lr
        status = HAL_ERROR;
 800297a:	2001      	movs	r0, #1
 800297c:	4770      	bx	lr
      status = HAL_ERROR;
 800297e:	2001      	movs	r0, #1
 8002980:	4770      	bx	lr
        status = HAL_ERROR;
 8002982:	2001      	movs	r0, #1
 8002984:	4770      	bx	lr
        status = HAL_ERROR;
 8002986:	2001      	movs	r0, #1
 8002988:	4770      	bx	lr
      status = HAL_ERROR;
 800298a:	2001      	movs	r0, #1
 800298c:	4770      	bx	lr
    switch (tmp)
 800298e:	2000      	movs	r0, #0
 8002990:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002992:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002994:	4770      	bx	lr
	...

08002998 <HAL_DMA_Init>:
{
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff fa6c 	bl	8001e78 <HAL_GetTick>
  if(hdma == NULL)
 80029a0:	2c00      	cmp	r4, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_DMA_Init+0xc4>
 80029a4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80029a6:	2300      	movs	r3, #0
 80029a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80029ac:	2302      	movs	r3, #2
 80029ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80029b2:	6822      	ldr	r2, [r4, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f012 0f01 	tst.w	r2, #1
 80029c4:	d00a      	beq.n	80029dc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c6:	f7ff fa57 	bl	8001e78 <HAL_GetTick>
 80029ca:	1b43      	subs	r3, r0, r5
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d9f5      	bls.n	80029bc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d0:	2320      	movs	r3, #32
 80029d2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d4:	2003      	movs	r0, #3
 80029d6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80029da:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80029dc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029de:	4820      	ldr	r0, [pc, #128]	; (8002a60 <HAL_DMA_Init+0xc8>)
 80029e0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e2:	6861      	ldr	r1, [r4, #4]
 80029e4:	68a2      	ldr	r2, [r4, #8]
 80029e6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ea:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	6921      	ldr	r1, [r4, #16]
 80029ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f0:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	69a1      	ldr	r1, [r4, #24]
 80029f6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fc:	6a21      	ldr	r1, [r4, #32]
 80029fe:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a00:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a04:	2904      	cmp	r1, #4
 8002a06:	d01e      	beq.n	8002a46 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002a08:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002a0a:	6826      	ldr	r6, [r4, #0]
 8002a0c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a0e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a14:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d107      	bne.n	8002a2a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a1c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a20:	b11b      	cbz	r3, 8002a2a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff ff70 	bl	8002908 <DMA_CheckFifoParam>
 8002a28:	b990      	cbnz	r0, 8002a50 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002a2a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff ff49 	bl	80028c4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a34:	233f      	movs	r3, #63	; 0x3f
 8002a36:	4093      	lsls	r3, r2
 8002a38:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002a44:	e7c9      	b.n	80029da <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002a4a:	4301      	orrs	r1, r0
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	e7db      	b.n	8002a08 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a50:	2340      	movs	r3, #64	; 0x40
 8002a52:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002a54:	2001      	movs	r0, #1
 8002a56:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002a5a:	e7be      	b.n	80029da <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	e7bc      	b.n	80029da <HAL_DMA_Init+0x42>
 8002a60:	f010803f 	.word	0xf010803f

08002a64 <HAL_DMA_Start_IT>:
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a68:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002a6a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002a6e:	2801      	cmp	r0, #1
 8002a70:	d02b      	beq.n	8002aca <HAL_DMA_Start_IT+0x66>
 8002a72:	2001      	movs	r0, #1
 8002a74:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a78:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8002a7c:	b2c0      	uxtb	r0, r0
 8002a7e:	2801      	cmp	r0, #1
 8002a80:	d004      	beq.n	8002a8c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8002a82:	2300      	movs	r3, #0
 8002a84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8002a88:	2002      	movs	r0, #2
}
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a92:	2000      	movs	r0, #0
 8002a94:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff fefe 	bl	8002898 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a9e:	233f      	movs	r3, #63	; 0x3f
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aa4:	6822      	ldr	r2, [r4, #0]
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	f043 0316 	orr.w	r3, r3, #22
 8002aac:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab0:	b123      	cbz	r3, 8002abc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e7df      	b.n	8002a8a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8002aca:	2002      	movs	r0, #2
 8002acc:	e7dd      	b.n	8002a8a <HAL_DMA_Start_IT+0x26>

08002ace <HAL_DMA_Abort>:
{
 8002ace:	b570      	push	{r4, r5, r6, lr}
 8002ad0:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff f9d0 	bl	8001e78 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d006      	beq.n	8002af0 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002aec:	2001      	movs	r0, #1
}
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	f023 0316 	bic.w	r3, r3, #22
 8002afa:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afc:	6822      	ldr	r2, [r4, #0]
 8002afe:	6953      	ldr	r3, [r2, #20]
 8002b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b04:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b08:	b1e3      	cbz	r3, 8002b44 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	6813      	ldr	r3, [r2, #0]
 8002b0e:	f023 0308 	bic.w	r3, r3, #8
 8002b12:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f013 0f01 	tst.w	r3, #1
 8002b26:	d011      	beq.n	8002b4c <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b28:	f7ff f9a6 	bl	8001e78 <HAL_GetTick>
 8002b2c:	1b43      	subs	r3, r0, r5
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d9f5      	bls.n	8002b1e <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b32:	2320      	movs	r3, #32
 8002b34:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002b36:	2300      	movs	r3, #0
 8002b38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002b42:	e7d4      	b.n	8002aee <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1df      	bne.n	8002b0a <HAL_DMA_Abort+0x3c>
 8002b4a:	e7e3      	b.n	8002b14 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b4e:	233f      	movs	r3, #63	; 0x3f
 8002b50:	4093      	lsls	r3, r2
 8002b52:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002b60:	e7c5      	b.n	8002aee <HAL_DMA_Abort+0x20>

08002b62 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b62:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002b70:	2001      	movs	r0, #1
 8002b72:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b74:	2305      	movs	r3, #5
 8002b76:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002b7a:	6802      	ldr	r2, [r0, #0]
 8002b7c:	6813      	ldr	r3, [r2, #0]
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002b84:	2000      	movs	r0, #0
}
 8002b86:	4770      	bx	lr

08002b88 <HAL_DMA_PollForTransfer>:
{
 8002b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	4688      	mov	r8, r1
 8002b90:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick(); 
 8002b92:	f7ff f971 	bl	8001e78 <HAL_GetTick>
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b96:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d007      	beq.n	8002bb0 <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
}
 8002bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb0:	4681      	mov	r9, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bba:	d13b      	bne.n	8002c34 <HAL_DMA_PollForTransfer+0xac>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002bbc:	f1b8 0f00 	cmp.w	r8, #0
 8002bc0:	d13d      	bne.n	8002c3e <HAL_DMA_PollForTransfer+0xb6>
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bc4:	f04f 0a20 	mov.w	sl, #32
 8002bc8:	fa0a fa03 	lsl.w	sl, sl, r3
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bcc:	6da7      	ldr	r7, [r4, #88]	; 0x58
  tmpisr = regs->ISR;
 8002bce:	683b      	ldr	r3, [r7, #0]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002bd0:	ea1a 0f03 	tst.w	sl, r3
 8002bd4:	d143      	bne.n	8002c5e <HAL_DMA_PollForTransfer+0xd6>
 8002bd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bd8:	f013 0f01 	tst.w	r3, #1
 8002bdc:	d13f      	bne.n	8002c5e <HAL_DMA_PollForTransfer+0xd6>
    if(Timeout != HAL_MAX_DELAY)
 8002bde:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002be2:	d007      	beq.n	8002bf4 <HAL_DMA_PollForTransfer+0x6c>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002be4:	2e00      	cmp	r6, #0
 8002be6:	d030      	beq.n	8002c4a <HAL_DMA_PollForTransfer+0xc2>
 8002be8:	f7ff f946 	bl	8001e78 <HAL_GetTick>
 8002bec:	eba0 0009 	sub.w	r0, r0, r9
 8002bf0:	42b0      	cmp	r0, r6
 8002bf2:	d82a      	bhi.n	8002c4a <HAL_DMA_PollForTransfer+0xc2>
    tmpisr = regs->ISR;
 8002bf4:	683b      	ldr	r3, [r7, #0]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	408a      	lsls	r2, r1
 8002bfc:	421a      	tst	r2, r3
 8002bfe:	d004      	beq.n	8002c0a <HAL_DMA_PollForTransfer+0x82>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c00:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002c02:	f041 0101 	orr.w	r1, r1, #1
 8002c06:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c08:	60ba      	str	r2, [r7, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	408a      	lsls	r2, r1
 8002c10:	421a      	tst	r2, r3
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_PollForTransfer+0x96>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c14:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002c16:	f041 0102 	orr.w	r1, r1, #2
 8002c1a:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c1c:	60ba      	str	r2, [r7, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c20:	2504      	movs	r5, #4
 8002c22:	4095      	lsls	r5, r2
 8002c24:	421d      	tst	r5, r3
 8002c26:	d0d3      	beq.n	8002bd0 <HAL_DMA_PollForTransfer+0x48>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c2a:	f042 0204 	orr.w	r2, r2, #4
 8002c2e:	6562      	str	r2, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c30:	60bd      	str	r5, [r7, #8]
 8002c32:	e7cd      	b.n	8002bd0 <HAL_DMA_PollForTransfer+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c38:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	e7b6      	b.n	8002bac <HAL_DMA_PollForTransfer+0x24>
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c40:	f04f 0a10 	mov.w	sl, #16
 8002c44:	fa0a fa03 	lsl.w	sl, sl, r3
 8002c48:	e7c0      	b.n	8002bcc <HAL_DMA_PollForTransfer+0x44>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002c5a:	2003      	movs	r0, #3
 8002c5c:	e7a6      	b.n	8002bac <HAL_DMA_PollForTransfer+0x24>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c60:	b11b      	cbz	r3, 8002c6a <HAL_DMA_PollForTransfer+0xe2>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c64:	f013 0f01 	tst.w	r3, #1
 8002c68:	d10e      	bne.n	8002c88 <HAL_DMA_PollForTransfer+0x100>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002c6a:	f1b8 0f00 	cmp.w	r8, #0
 8002c6e:	d119      	bne.n	8002ca4 <HAL_DMA_PollForTransfer+0x11c>
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002c70:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c72:	2330      	movs	r3, #48	; 0x30
 8002c74:	4093      	lsls	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
    __HAL_UNLOCK(hdma);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return status;
 8002c84:	4640      	mov	r0, r8
 8002c86:	e791      	b.n	8002bac <HAL_DMA_PollForTransfer+0x24>
      HAL_DMA_Abort(hdma);
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff ff20 	bl	8002ace <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002c8e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c90:	2330      	movs	r3, #48	; 0x30
 8002c92:	4093      	lsls	r3, r2
 8002c94:	60bb      	str	r3, [r7, #8]
      __HAL_UNLOCK(hdma);
 8002c96:	2300      	movs	r3, #0
 8002c98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_ERROR;
 8002ca2:	e783      	b.n	8002bac <HAL_DMA_PollForTransfer+0x24>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002ca4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
  return status;
 8002cac:	2000      	movs	r0, #0
 8002cae:	e77d      	b.n	8002bac <HAL_DMA_PollForTransfer+0x24>

08002cb0 <HAL_DMA_IRQHandler>:
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <HAL_DMA_IRQHandler+0x1d4>)
 8002cbc:	681d      	ldr	r5, [r3, #0]
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_DMA_IRQHandler+0x1d8>)
 8002cc0:	fba3 3505 	umull	r3, r5, r3, r5
 8002cc4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002cc8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002ccc:	2308      	movs	r3, #8
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	4233      	tst	r3, r6
 8002cd2:	d010      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f012 0f04 	tst.w	r2, #4
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f022 0204 	bic.w	r2, r2, #4
 8002ce4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002ce8:	2308      	movs	r3, #8
 8002cea:	4093      	lsls	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	4233      	tst	r3, r6
 8002cfe:	d009      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	6952      	ldr	r2, [r2, #20]
 8002d04:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d08:	d004      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d0a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d16:	2304      	movs	r3, #4
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	4233      	tst	r3, r6
 8002d1c:	d009      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	f012 0f02 	tst.w	r2, #2
 8002d26:	d004      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d28:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d34:	2310      	movs	r3, #16
 8002d36:	4093      	lsls	r3, r2
 8002d38:	4233      	tst	r3, r6
 8002d3a:	d024      	beq.n	8002d86 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f012 0f08 	tst.w	r2, #8
 8002d44:	d01f      	beq.n	8002d86 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d46:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002d50:	d00d      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d58:	d104      	bne.n	8002d64 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d5c:	b19b      	cbz	r3, 8002d86 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002d5e:	4620      	mov	r0, r4
 8002d60:	4798      	blx	r3
 8002d62:	e010      	b.n	8002d86 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d66:	b173      	cbz	r3, 8002d86 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4798      	blx	r3
 8002d6c:	e00b      	b.n	8002d86 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d74:	d103      	bne.n	8002d7e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f022 0208 	bic.w	r2, r2, #8
 8002d7c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d80:	b10b      	cbz	r3, 8002d86 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002d82:	4620      	mov	r0, r4
 8002d84:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d88:	2320      	movs	r3, #32
 8002d8a:	4093      	lsls	r3, r2
 8002d8c:	4233      	tst	r3, r6
 8002d8e:	d055      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	f012 0f10 	tst.w	r2, #16
 8002d98:	d050      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d9a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d9c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002dae:	d033      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002db6:	d12a      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002db8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d03e      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4798      	blx	r3
 8002dc2:	e03b      	b.n	8002e3c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	f023 0316 	bic.w	r3, r3, #22
 8002dcc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	6953      	ldr	r3, [r2, #20]
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dda:	b1a3      	cbz	r3, 8002e06 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	f023 0308 	bic.w	r3, r3, #8
 8002de4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002de8:	233f      	movs	r3, #63	; 0x3f
 8002dea:	4093      	lsls	r3, r2
 8002dec:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002dee:	2300      	movs	r3, #0
 8002df0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002dfa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03f      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002e00:	4620      	mov	r0, r4
 8002e02:	4798      	blx	r3
        return;
 8002e04:	e03c      	b.n	8002e80 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e7      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x12c>
 8002e0c:	e7eb      	b.n	8002de6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002e0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e10:	b1a3      	cbz	r3, 8002e3c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002e12:	4620      	mov	r0, r4
 8002e14:	4798      	blx	r3
 8002e16:	e011      	b.n	8002e3c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002e1e:	d109      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f022 0210 	bic.w	r2, r2, #16
 8002e26:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e36:	b10b      	cbz	r3, 8002e3c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002e38:	4620      	mov	r0, r4
 8002e3a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e3e:	b1fb      	cbz	r3, 8002e80 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e42:	f013 0f01 	tst.w	r3, #1
 8002e46:	d017      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e48:	2305      	movs	r3, #5
 8002e4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002e58:	9b01      	ldr	r3, [sp, #4]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	42ab      	cmp	r3, r5
 8002e60:	d804      	bhi.n	8002e6c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f013 0f01 	tst.w	r3, #1
 8002e6a:	d1f5      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002e78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e7a:	b10b      	cbz	r3, 8002e80 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4798      	blx	r3
}
 8002e80:	b003      	add	sp, #12
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	1b4e81b5 	.word	0x1b4e81b5

08002e8c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	f200 80d3 	bhi.w	800303a <HAL_GPIO_Init+0x1ae>
{
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b083      	sub	sp, #12
 8002e98:	e039      	b.n	8002f0e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	40b2      	lsls	r2, r6
 8002ea2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea4:	3402      	adds	r4, #2
 8002ea6:	4e65      	ldr	r6, [pc, #404]	; (800303c <HAL_GPIO_Init+0x1b0>)
 8002ea8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eac:	4a64      	ldr	r2, [pc, #400]	; (8003040 <HAL_GPIO_Init+0x1b4>)
 8002eae:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	43ea      	mvns	r2, r5
 8002eb2:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb6:	684f      	ldr	r7, [r1, #4]
 8002eb8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002ebc:	d001      	beq.n	8002ec2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002ebe:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002ec2:	4c5f      	ldr	r4, [pc, #380]	; (8003040 <HAL_GPIO_Init+0x1b4>)
 8002ec4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002ec6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ecc:	684f      	ldr	r7, [r1, #4]
 8002ece:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002ed2:	d001      	beq.n	8002ed8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002ed4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002ed8:	4c59      	ldr	r4, [pc, #356]	; (8003040 <HAL_GPIO_Init+0x1b4>)
 8002eda:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002edc:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee2:	684f      	ldr	r7, [r1, #4]
 8002ee4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002ee8:	d001      	beq.n	8002eee <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002eea:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002eee:	4c54      	ldr	r4, [pc, #336]	; (8003040 <HAL_GPIO_Init+0x1b4>)
 8002ef0:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002ef2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef6:	684e      	ldr	r6, [r1, #4]
 8002ef8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002efc:	d001      	beq.n	8002f02 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002efe:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002f02:	4c4f      	ldr	r4, [pc, #316]	; (8003040 <HAL_GPIO_Init+0x1b4>)
 8002f04:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	3301      	adds	r3, #1
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	f200 8094 	bhi.w	8003036 <HAL_GPIO_Init+0x1aa>
    ioposition = 0x01U << position;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	680c      	ldr	r4, [r1, #0]
 8002f14:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002f18:	ea32 0404 	bics.w	r4, r2, r4
 8002f1c:	d1f3      	bne.n	8002f06 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f1e:	684c      	ldr	r4, [r1, #4]
 8002f20:	1e66      	subs	r6, r4, #1
 8002f22:	2e01      	cmp	r6, #1
 8002f24:	d903      	bls.n	8002f2e <HAL_GPIO_Init+0xa2>
 8002f26:	2c11      	cmp	r4, #17
 8002f28:	d001      	beq.n	8002f2e <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f2a:	2c12      	cmp	r4, #18
 8002f2c:	d112      	bne.n	8002f54 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8002f2e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f30:	005f      	lsls	r7, r3, #1
 8002f32:	2403      	movs	r4, #3
 8002f34:	40bc      	lsls	r4, r7
 8002f36:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	68cc      	ldr	r4, [r1, #12]
 8002f3c:	40bc      	lsls	r4, r7
 8002f3e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002f40:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f42:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f44:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f48:	684c      	ldr	r4, [r1, #4]
 8002f4a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002f52:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002f54:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f56:	005e      	lsls	r6, r3, #1
 8002f58:	2403      	movs	r4, #3
 8002f5a:	40b4      	lsls	r4, r6
 8002f5c:	43e2      	mvns	r2, r4
 8002f5e:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f62:	688c      	ldr	r4, [r1, #8]
 8002f64:	40b4      	lsls	r4, r6
 8002f66:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8002f68:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f6a:	684c      	ldr	r4, [r1, #4]
 8002f6c:	2c02      	cmp	r4, #2
 8002f6e:	d001      	beq.n	8002f74 <HAL_GPIO_Init+0xe8>
 8002f70:	2c12      	cmp	r4, #18
 8002f72:	d113      	bne.n	8002f9c <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8002f74:	08df      	lsrs	r7, r3, #3
 8002f76:	3708      	adds	r7, #8
 8002f78:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7c:	f003 0407 	and.w	r4, r3, #7
 8002f80:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002f84:	240f      	movs	r4, #15
 8002f86:	fa04 f40c 	lsl.w	r4, r4, ip
 8002f8a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f8e:	690c      	ldr	r4, [r1, #16]
 8002f90:	fa04 f40c 	lsl.w	r4, r4, ip
 8002f94:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002f98:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8002f9c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa0:	684a      	ldr	r2, [r1, #4]
 8002fa2:	f002 0203 	and.w	r2, r2, #3
 8002fa6:	40b2      	lsls	r2, r6
 8002fa8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002faa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fac:	684a      	ldr	r2, [r1, #4]
 8002fae:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002fb2:	d0a8      	beq.n	8002f06 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	9201      	str	r2, [sp, #4]
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <HAL_GPIO_Init+0x1b8>)
 8002fba:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002fbc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002fc0:	6454      	str	r4, [r2, #68]	; 0x44
 8002fc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fc4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002fc8:	9201      	str	r2, [sp, #4]
 8002fca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fcc:	089c      	lsrs	r4, r3, #2
 8002fce:	1ca6      	adds	r6, r4, #2
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_GPIO_Init+0x1b0>)
 8002fd2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd6:	f003 0203 	and.w	r2, r3, #3
 8002fda:	0096      	lsls	r6, r2, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	40b2      	lsls	r2, r6
 8002fe0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <HAL_GPIO_Init+0x1bc>)
 8002fe6:	4290      	cmp	r0, r2
 8002fe8:	f43f af59 	beq.w	8002e9e <HAL_GPIO_Init+0x12>
 8002fec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff0:	4290      	cmp	r0, r2
 8002ff2:	d016      	beq.n	8003022 <HAL_GPIO_Init+0x196>
 8002ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff8:	4290      	cmp	r0, r2
 8002ffa:	d014      	beq.n	8003026 <HAL_GPIO_Init+0x19a>
 8002ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003000:	4290      	cmp	r0, r2
 8003002:	d012      	beq.n	800302a <HAL_GPIO_Init+0x19e>
 8003004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003008:	4290      	cmp	r0, r2
 800300a:	d010      	beq.n	800302e <HAL_GPIO_Init+0x1a2>
 800300c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003010:	4290      	cmp	r0, r2
 8003012:	d00e      	beq.n	8003032 <HAL_GPIO_Init+0x1a6>
 8003014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003018:	4290      	cmp	r0, r2
 800301a:	f43f af3e 	beq.w	8002e9a <HAL_GPIO_Init+0xe>
 800301e:	2207      	movs	r2, #7
 8003020:	e73e      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
 8003022:	2201      	movs	r2, #1
 8003024:	e73c      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
 8003026:	2202      	movs	r2, #2
 8003028:	e73a      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
 800302a:	2203      	movs	r2, #3
 800302c:	e738      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
 800302e:	2204      	movs	r2, #4
 8003030:	e736      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
 8003032:	2205      	movs	r2, #5
 8003034:	e734      	b.n	8002ea0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003036:	b003      	add	sp, #12
 8003038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303a:	4770      	bx	lr
 800303c:	40013800 	.word	0x40013800
 8003040:	40013c00 	.word	0x40013c00
 8003044:	40023800 	.word	0x40023800
 8003048:	40020000 	.word	0x40020000

0800304c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800304c:	b10a      	cbz	r2, 8003052 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304e:	6181      	str	r1, [r0, #24]
 8003050:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003052:	0409      	lsls	r1, r1, #16
 8003054:	6181      	str	r1, [r0, #24]
  }
}
 8003056:	4770      	bx	lr

08003058 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003058:	b510      	push	{r4, lr}
 800305a:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x70>)
 8003062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003064:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_PWREx_EnableOverDrive+0x74>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800307a:	f7fe fefd 	bl	8001e78 <HAL_GetTick>
 800307e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x78>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003088:	d108      	bne.n	800309c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800308a:	f7fe fef5 	bl	8001e78 <HAL_GetTick>
 800308e:	1b00      	subs	r0, r0, r4
 8003090:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003094:	d9f4      	bls.n	8003080 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003096:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003098:	b002      	add	sp, #8
 800309a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x7c>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80030a2:	f7fe fee9 	bl	8001e78 <HAL_GetTick>
 80030a6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x78>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030b0:	d107      	bne.n	80030c2 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030b2:	f7fe fee1 	bl	8001e78 <HAL_GetTick>
 80030b6:	1b00      	subs	r0, r0, r4
 80030b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030bc:	d9f4      	bls.n	80030a8 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 80030be:	2003      	movs	r0, #3
 80030c0:	e7ea      	b.n	8003098 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80030c2:	2000      	movs	r0, #0
 80030c4:	e7e8      	b.n	8003098 <HAL_PWREx_EnableOverDrive+0x40>
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	420e0040 	.word	0x420e0040
 80030d0:	40007000 	.word	0x40007000
 80030d4:	420e0044 	.word	0x420e0044

080030d8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d8:	2800      	cmp	r0, #0
 80030da:	f000 809b 	beq.w	8003214 <HAL_RCC_ClockConfig+0x13c>
{
 80030de:	b570      	push	{r4, r5, r6, lr}
 80030e0:	460d      	mov	r5, r1
 80030e2:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <HAL_RCC_ClockConfig+0x14c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	428b      	cmp	r3, r1
 80030ee:	d208      	bcs.n	8003102 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f0:	b2cb      	uxtb	r3, r1
 80030f2:	4a4c      	ldr	r2, [pc, #304]	; (8003224 <HAL_RCC_ClockConfig+0x14c>)
 80030f4:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	428b      	cmp	r3, r1
 80030fe:	f040 808b 	bne.w	8003218 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	f013 0f02 	tst.w	r3, #2
 8003108:	d017      	beq.n	800313a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310a:	f013 0f04 	tst.w	r3, #4
 800310e:	d004      	beq.n	800311a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003110:	4a45      	ldr	r2, [pc, #276]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003118:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	f013 0f08 	tst.w	r3, #8
 8003120:	d004      	beq.n	800312c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003122:	4a41      	ldr	r2, [pc, #260]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 8003124:	6893      	ldr	r3, [r2, #8]
 8003126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4a3e      	ldr	r2, [pc, #248]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 800312e:	6893      	ldr	r3, [r2, #8]
 8003130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003134:	68a1      	ldr	r1, [r4, #8]
 8003136:	430b      	orrs	r3, r1
 8003138:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	f013 0f01 	tst.w	r3, #1
 8003140:	d032      	beq.n	80031a8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	6863      	ldr	r3, [r4, #4]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d021      	beq.n	800318c <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003148:	1e9a      	subs	r2, r3, #2
 800314a:	2a01      	cmp	r2, #1
 800314c:	d925      	bls.n	800319a <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4a36      	ldr	r2, [pc, #216]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f012 0f02 	tst.w	r2, #2
 8003156:	d061      	beq.n	800321c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003158:	4933      	ldr	r1, [pc, #204]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 800315a:	688a      	ldr	r2, [r1, #8]
 800315c:	f022 0203 	bic.w	r2, r2, #3
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe fe88 	bl	8001e78 <HAL_GetTick>
 8003168:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	6862      	ldr	r2, [r4, #4]
 8003174:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003178:	d016      	beq.n	80031a8 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317a:	f7fe fe7d 	bl	8001e78 <HAL_GetTick>
 800317e:	1b80      	subs	r0, r0, r6
 8003180:	f241 3388 	movw	r3, #5000	; 0x1388
 8003184:	4298      	cmp	r0, r3
 8003186:	d9f0      	bls.n	800316a <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8003188:	2003      	movs	r0, #3
 800318a:	e042      	b.n	8003212 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003194:	d1e0      	bne.n	8003158 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	e03b      	b.n	8003212 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4a23      	ldr	r2, [pc, #140]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80031a2:	d1d9      	bne.n	8003158 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
 80031a6:	e034      	b.n	8003212 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <HAL_RCC_ClockConfig+0x14c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	42ab      	cmp	r3, r5
 80031b2:	d907      	bls.n	80031c4 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b4:	b2ea      	uxtb	r2, r5
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_ClockConfig+0x14c>)
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	42ab      	cmp	r3, r5
 80031c2:	d12d      	bne.n	8003220 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	f013 0f04 	tst.w	r3, #4
 80031ca:	d006      	beq.n	80031da <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 80031ce:	6893      	ldr	r3, [r2, #8]
 80031d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80031d4:	68e1      	ldr	r1, [r4, #12]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	f013 0f08 	tst.w	r3, #8
 80031e0:	d007      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 80031e4:	6893      	ldr	r3, [r2, #8]
 80031e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80031ea:	6921      	ldr	r1, [r4, #16]
 80031ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031f0:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f847 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_ClockConfig+0x150>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x154>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	40d8      	lsrs	r0, r3
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x158>)
 8003206:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x15c>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	f7fe fde8 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 8003210:	2000      	movs	r0, #0
}
 8003212:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003214:	2001      	movs	r0, #1
}
 8003216:	4770      	bx	lr
      return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
 800321a:	e7fa      	b.n	8003212 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800321c:	2001      	movs	r0, #1
 800321e:	e7f8      	b.n	8003212 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003220:	2001      	movs	r0, #1
 8003222:	e7f6      	b.n	8003212 <HAL_RCC_ClockConfig+0x13a>
 8003224:	40023c00 	.word	0x40023c00
 8003228:	40023800 	.word	0x40023800
 800322c:	08008f9c 	.word	0x08008f9c
 8003230:	20000000 	.word	0x20000000
 8003234:	20000008 	.word	0x20000008

08003238 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003238:	4b01      	ldr	r3, [pc, #4]	; (8003240 <HAL_RCC_GetHCLKFreq+0x8>)
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003246:	f7ff fff7 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_GetPCLK1Freq+0x18>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003252:	4a03      	ldr	r2, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
}
 8003256:	40d8      	lsrs	r0, r3
 8003258:	bd08      	pop	{r3, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	08008fac 	.word	0x08008fac

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003266:	f7ff ffe7 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_GetPCLK2Freq+0x18>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003272:	4a03      	ldr	r2, [pc, #12]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
}
 8003276:	40d8      	lsrs	r0, r3
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	08008fac 	.word	0x08008fac

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x22>
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d05b      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0xcc>
 8003298:	2b04      	cmp	r3, #4
 800329a:	d002      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x1e>
 800329c:	4855      	ldr	r0, [pc, #340]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x170>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800329e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sysclockfreq = HSE_VALUE;
 80032a2:	4855      	ldr	r0, [pc, #340]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80032a4:	e7fb      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1a>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a6:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032b4:	d02b      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x8a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80032be:	0158      	lsls	r0, r3, #5
 80032c0:	2100      	movs	r1, #0
 80032c2:	1ac0      	subs	r0, r0, r3
 80032c4:	f161 0100 	sbc.w	r1, r1, #0
 80032c8:	018c      	lsls	r4, r1, #6
 80032ca:	ea44 6490 	orr.w	r4, r4, r0, lsr #26
 80032ce:	0185      	lsls	r5, r0, #6
 80032d0:	ebb5 0800 	subs.w	r8, r5, r0
 80032d4:	eb64 0901 	sbc.w	r9, r4, r1
 80032d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032dc:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
 80032e0:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 80032e4:	18c0      	adds	r0, r0, r3
 80032e6:	f141 0100 	adc.w	r1, r1, #0
 80032ea:	024b      	lsls	r3, r1, #9
 80032ec:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80032f0:	0244      	lsls	r4, r0, #9
 80032f2:	4620      	mov	r0, r4
 80032f4:	4619      	mov	r1, r3
 80032f6:	2300      	movs	r3, #0
 80032f8:	f7fd fce6 	bl	8000cc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032fc:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003304:	3301      	adds	r3, #1
 8003306:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003308:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800330c:	e7c7      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003316:	0158      	lsls	r0, r3, #5
 8003318:	2100      	movs	r1, #0
 800331a:	1ac0      	subs	r0, r0, r3
 800331c:	f161 0100 	sbc.w	r1, r1, #0
 8003320:	018c      	lsls	r4, r1, #6
 8003322:	ea44 6490 	orr.w	r4, r4, r0, lsr #26
 8003326:	0185      	lsls	r5, r0, #6
 8003328:	1a2e      	subs	r6, r5, r0
 800332a:	eb64 0701 	sbc.w	r7, r4, r1
 800332e:	00f9      	lsls	r1, r7, #3
 8003330:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
 8003334:	00f0      	lsls	r0, r6, #3
 8003336:	18c0      	adds	r0, r0, r3
 8003338:	f141 0100 	adc.w	r1, r1, #0
 800333c:	028b      	lsls	r3, r1, #10
 800333e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003342:	0284      	lsls	r4, r0, #10
 8003344:	4620      	mov	r0, r4
 8003346:	4619      	mov	r1, r3
 8003348:	2300      	movs	r3, #0
 800334a:	f7fd fcbd 	bl	8000cc8 <__aeabi_uldivmod>
 800334e:	e7d5      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x78>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800335e:	d026      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x12a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003368:	0158      	lsls	r0, r3, #5
 800336a:	2100      	movs	r1, #0
 800336c:	1ac0      	subs	r0, r0, r3
 800336e:	f161 0100 	sbc.w	r1, r1, #0
 8003372:	018e      	lsls	r6, r1, #6
 8003374:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8003378:	0187      	lsls	r7, r0, #6
 800337a:	1a3c      	subs	r4, r7, r0
 800337c:	eb66 0501 	sbc.w	r5, r6, r1
 8003380:	00e9      	lsls	r1, r5, #3
 8003382:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8003386:	00e0      	lsls	r0, r4, #3
 8003388:	18c0      	adds	r0, r0, r3
 800338a:	f141 0100 	adc.w	r1, r1, #0
 800338e:	024b      	lsls	r3, r1, #9
 8003390:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003394:	0244      	lsls	r4, r0, #9
 8003396:	4620      	mov	r0, r4
 8003398:	4619      	mov	r1, r3
 800339a:	2300      	movs	r3, #0
 800339c:	f7fd fc94 	bl	8000cc8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80033a8:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80033ac:	e777      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80033b6:	015c      	lsls	r4, r3, #5
 80033b8:	2500      	movs	r5, #0
 80033ba:	1ae4      	subs	r4, r4, r3
 80033bc:	f165 0500 	sbc.w	r5, r5, #0
 80033c0:	01ae      	lsls	r6, r5, #6
 80033c2:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80033c6:	01a7      	lsls	r7, r4, #6
 80033c8:	1b38      	subs	r0, r7, r4
 80033ca:	eb66 0105 	sbc.w	r1, r6, r5
 80033ce:	00cc      	lsls	r4, r1, #3
 80033d0:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80033d4:	00c5      	lsls	r5, r0, #3
 80033d6:	18e8      	adds	r0, r5, r3
 80033d8:	f144 0100 	adc.w	r1, r4, #0
 80033dc:	028b      	lsls	r3, r1, #10
 80033de:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80033e2:	0284      	lsls	r4, r0, #10
 80033e4:	4620      	mov	r0, r4
 80033e6:	4619      	mov	r1, r3
 80033e8:	2300      	movs	r3, #0
 80033ea:	f7fd fc6d 	bl	8000cc8 <__aeabi_uldivmod>
 80033ee:	e7d7      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x11c>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	6803      	ldr	r3, [r0, #0]
 8003404:	f013 0f01 	tst.w	r3, #1
 8003408:	d041      	beq.n	800348e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800340a:	4ba6      	ldr	r3, [pc, #664]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d032      	beq.n	800347c <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003416:	4ba3      	ldr	r3, [pc, #652]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800341e:	2b08      	cmp	r3, #8
 8003420:	d027      	beq.n	8003472 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4ba0      	ldr	r3, [pc, #640]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d059      	beq.n	80034e2 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	6863      	ldr	r3, [r4, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d05b      	beq.n	80034ee <HAL_RCC_OscConfig+0xf2>
 8003436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800343a:	d05e      	beq.n	80034fa <HAL_RCC_OscConfig+0xfe>
 800343c:	4b99      	ldr	r3, [pc, #612]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800344c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800344e:	6863      	ldr	r3, [r4, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05c      	beq.n	800350e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fd10 	bl	8001e78 <HAL_GetTick>
 8003458:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b92      	ldr	r3, [pc, #584]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003462:	d114      	bne.n	800348e <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fd08 	bl	8001e78 <HAL_GetTick>
 8003468:	1b40      	subs	r0, r0, r5
 800346a:	2864      	cmp	r0, #100	; 0x64
 800346c:	d9f5      	bls.n	800345a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800346e:	2003      	movs	r0, #3
 8003470:	e19f      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003472:	4b8c      	ldr	r3, [pc, #560]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800347a:	d0d2      	beq.n	8003422 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b89      	ldr	r3, [pc, #548]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003484:	d003      	beq.n	800348e <HAL_RCC_OscConfig+0x92>
 8003486:	6863      	ldr	r3, [r4, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 818d 	beq.w	80037a8 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f013 0f02 	tst.w	r3, #2
 8003494:	d060      	beq.n	8003558 <HAL_RCC_OscConfig+0x15c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003496:	4b83      	ldr	r3, [pc, #524]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f013 0f0c 	tst.w	r3, #12
 800349e:	d04a      	beq.n	8003536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034a0:	4b80      	ldr	r3, [pc, #512]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d03f      	beq.n	800352c <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ac:	4b7d      	ldr	r3, [pc, #500]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d068      	beq.n	800358a <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	68e3      	ldr	r3, [r4, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d074      	beq.n	80035a8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034be:	4b7a      	ldr	r3, [pc, #488]	; (80036a8 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fcd8 	bl	8001e78 <HAL_GetTick>
 80034c8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f013 0f02 	tst.w	r3, #2
 80034d2:	d160      	bne.n	8003596 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fe fcd0 	bl	8001e78 <HAL_GetTick>
 80034d8:	1b40      	subs	r0, r0, r5
 80034da:	2802      	cmp	r0, #2
 80034dc:	d9f5      	bls.n	80034ca <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80034de:	2003      	movs	r0, #3
 80034e0:	e167      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e2:	4b70      	ldr	r3, [pc, #448]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034ea:	d0a0      	beq.n	800342e <HAL_RCC_OscConfig+0x32>
 80034ec:	e7c6      	b.n	800347c <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ee:	4a6d      	ldr	r2, [pc, #436]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e7a9      	b.n	800344e <HAL_RCC_OscConfig+0x52>
 80034fa:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e79f      	b.n	800344e <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 800350e:	f7fe fcb3 	bl	8001e78 <HAL_GetTick>
 8003512:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003514:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800351c:	d0b7      	beq.n	800348e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351e:	f7fe fcab 	bl	8001e78 <HAL_GetTick>
 8003522:	1b40      	subs	r0, r0, r5
 8003524:	2864      	cmp	r0, #100	; 0x64
 8003526:	d9f5      	bls.n	8003514 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8003528:	2003      	movs	r0, #3
 800352a:	e142      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800352c:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003534:	d1ba      	bne.n	80034ac <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	4b5b      	ldr	r3, [pc, #364]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f013 0f02 	tst.w	r3, #2
 800353e:	d003      	beq.n	8003548 <HAL_RCC_OscConfig+0x14c>
 8003540:	68e3      	ldr	r3, [r4, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	f040 8132 	bne.w	80037ac <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4a56      	ldr	r2, [pc, #344]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003550:	6921      	ldr	r1, [r4, #16]
 8003552:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003556:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	f013 0f08 	tst.w	r3, #8
 800355e:	d047      	beq.n	80035f0 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003560:	6963      	ldr	r3, [r4, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d032      	beq.n	80035cc <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_RCC_OscConfig+0x2b0>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fc84 	bl	8001e78 <HAL_GetTick>
 8003570:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	4b4c      	ldr	r3, [pc, #304]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003576:	f013 0f02 	tst.w	r3, #2
 800357a:	d139      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357c:	f7fe fc7c 	bl	8001e78 <HAL_GetTick>
 8003580:	1b40      	subs	r0, r0, r5
 8003582:	2802      	cmp	r0, #2
 8003584:	d9f5      	bls.n	8003572 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8003586:	2003      	movs	r0, #3
 8003588:	e113      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003592:	d191      	bne.n	80034b8 <HAL_RCC_OscConfig+0xbc>
 8003594:	e7cf      	b.n	8003536 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800359e:	6921      	ldr	r1, [r4, #16]
 80035a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e7d7      	b.n	8003558 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035ae:	f7fe fc63 	bl	8001e78 <HAL_GetTick>
 80035b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f013 0f02 	tst.w	r3, #2
 80035bc:	d0cc      	beq.n	8003558 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035be:	f7fe fc5b 	bl	8001e78 <HAL_GetTick>
 80035c2:	1b40      	subs	r0, r0, r5
 80035c4:	2802      	cmp	r0, #2
 80035c6:	d9f5      	bls.n	80035b4 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80035c8:	2003      	movs	r0, #3
 80035ca:	e0f2      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_OscConfig+0x2b0>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fe fc51 	bl	8001e78 <HAL_GetTick>
 80035d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f013 0f02 	tst.w	r3, #2
 80035e0:	d006      	beq.n	80035f0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe fc49 	bl	8001e78 <HAL_GetTick>
 80035e6:	1b40      	subs	r0, r0, r5
 80035e8:	2802      	cmp	r0, #2
 80035ea:	d9f5      	bls.n	80035d8 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80035ec:	2003      	movs	r0, #3
 80035ee:	e0e0      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	f013 0f04 	tst.w	r3, #4
 80035f6:	d079      	beq.n	80036ec <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003600:	d10d      	bne.n	800361e <HAL_RCC_OscConfig+0x222>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800361a:	2501      	movs	r5, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_RCC_OscConfig+0x2b4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003628:	d021      	beq.n	800366e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	68a3      	ldr	r3, [r4, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d032      	beq.n	8003696 <HAL_RCC_OscConfig+0x29a>
 8003630:	2b05      	cmp	r3, #5
 8003632:	d03f      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2b8>
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	671a      	str	r2, [r3, #112]	; 0x70
 800363e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003640:	f022 0204 	bic.w	r2, r2, #4
 8003644:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003646:	68a3      	ldr	r3, [r4, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d03d      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fe fc14 	bl	8001e78 <HAL_GetTick>
 8003650:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f013 0f02 	tst.w	r3, #2
 800365a:	d146      	bne.n	80036ea <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fc0c 	bl	8001e78 <HAL_GetTick>
 8003660:	1b80      	subs	r0, r0, r6
 8003662:	f241 3388 	movw	r3, #5000	; 0x1388
 8003666:	4298      	cmp	r0, r3
 8003668:	d9f3      	bls.n	8003652 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 800366a:	2003      	movs	r0, #3
 800366c:	e0a1      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_RCC_OscConfig+0x2b4>)
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003678:	f7fe fbfe 	bl	8001e78 <HAL_GetTick>
 800367c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_RCC_OscConfig+0x2b4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003686:	d1d0      	bne.n	800362a <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fe fbf6 	bl	8001e78 <HAL_GetTick>
 800368c:	1b80      	subs	r0, r0, r6
 800368e:	2802      	cmp	r0, #2
 8003690:	d9f5      	bls.n	800367e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8003692:	2003      	movs	r0, #3
 8003694:	e08d      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003698:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	e7d1      	b.n	8003646 <HAL_RCC_OscConfig+0x24a>
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	42470000 	.word	0x42470000
 80036ac:	42470e80 	.word	0x42470e80
 80036b0:	40007000 	.word	0x40007000
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 80036b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b8:	f042 0204 	orr.w	r2, r2, #4
 80036bc:	671a      	str	r2, [r3, #112]	; 0x70
 80036be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	671a      	str	r2, [r3, #112]	; 0x70
 80036c6:	e7be      	b.n	8003646 <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe fbd6 	bl	8001e78 <HAL_GetTick>
 80036cc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	f013 0f02 	tst.w	r3, #2
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe fbce 	bl	8001e78 <HAL_GetTick>
 80036dc:	1b80      	subs	r0, r0, r6
 80036de:	f241 3388 	movw	r3, #5000	; 0x1388
 80036e2:	4298      	cmp	r0, r3
 80036e4:	d9f3      	bls.n	80036ce <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80036e6:	2003      	movs	r0, #3
 80036e8:	e063      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ea:	b9e5      	cbnz	r5, 8003726 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ec:	69a3      	ldr	r3, [r4, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d05e      	beq.n	80037b0 <HAL_RCC_OscConfig+0x3b4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f2:	4a32      	ldr	r2, [pc, #200]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 80036f4:	6892      	ldr	r2, [r2, #8]
 80036f6:	f002 020c 	and.w	r2, r2, #12
 80036fa:	2a08      	cmp	r2, #8
 80036fc:	d05b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x3ba>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d017      	beq.n	8003732 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCC_OscConfig+0x3c4>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe fbb6 	bl	8001e78 <HAL_GetTick>
 800370c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003716:	d045      	beq.n	80037a4 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003718:	f7fe fbae 	bl	8001e78 <HAL_GetTick>
 800371c:	1b00      	subs	r0, r0, r4
 800371e:	2802      	cmp	r0, #2
 8003720:	d9f5      	bls.n	800370e <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8003722:	2003      	movs	r0, #3
 8003724:	e045      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 8003728:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800372a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372e:	6413      	str	r3, [r2, #64]	; 0x40
 8003730:	e7dc      	b.n	80036ec <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <HAL_RCC_OscConfig+0x3c4>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003738:	f7fe fb9e 	bl	8001e78 <HAL_GetTick>
 800373c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003746:	d006      	beq.n	8003756 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe fb96 	bl	8001e78 <HAL_GetTick>
 800374c:	1b40      	subs	r0, r0, r5
 800374e:	2802      	cmp	r0, #2
 8003750:	d9f5      	bls.n	800373e <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8003752:	2003      	movs	r0, #3
 8003754:	e02d      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003756:	69e3      	ldr	r3, [r4, #28]
 8003758:	6a22      	ldr	r2, [r4, #32]
 800375a:	4313      	orrs	r3, r2
 800375c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800375e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003762:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003764:	0852      	lsrs	r2, r2, #1
 8003766:	3a01      	subs	r2, #1
 8003768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800376c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800376e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003772:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003774:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003778:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 800377a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x3c4>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003782:	f7fe fb79 	bl	8001e78 <HAL_GetTick>
 8003786:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_RCC_OscConfig+0x3c0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fb71 	bl	8001e78 <HAL_GetTick>
 8003796:	1b00      	subs	r0, r0, r4
 8003798:	2802      	cmp	r0, #2
 800379a:	d9f5      	bls.n	8003788 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 800379c:	2003      	movs	r0, #3
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80037a0:	2000      	movs	r0, #0
 80037a2:	e006      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
 80037a4:	2000      	movs	r0, #0
 80037a6:	e004      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 80037a8:	2001      	movs	r0, #1
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
  return HAL_OK;
 80037b0:	2000      	movs	r0, #0
}
 80037b2:	b002      	add	sp, #8
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
 80037b8:	e7fb      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470060 	.word	0x42470060

080037c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c4:	6802      	ldr	r2, [r0, #0]
 80037c6:	68d3      	ldr	r3, [r2, #12]
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ce:	6802      	ldr	r2, [r0, #0]
 80037d0:	6893      	ldr	r3, [r2, #8]
 80037d2:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80037e2:	2000      	movs	r0, #0
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e8:	4770      	bx	lr

080037ea <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_IRQHandler>:
{
 80037ee:	b510      	push	{r4, lr}
 80037f0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	f012 0f02 	tst.w	r2, #2
 80037fa:	d011      	beq.n	8003820 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	f012 0f02 	tst.w	r2, #2
 8003802:	d00d      	beq.n	8003820 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	2301      	movs	r3, #1
 800380c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380e:	6803      	ldr	r3, [r0, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f013 0f03 	tst.w	r3, #3
 8003816:	d070      	beq.n	80038fa <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003818:	f7ff ffe6 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381c:	2300      	movs	r3, #0
 800381e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	f012 0f04 	tst.w	r2, #4
 8003828:	d012      	beq.n	8003850 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	f012 0f04 	tst.w	r2, #4
 8003830:	d00e      	beq.n	8003850 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003832:	f06f 0204 	mvn.w	r2, #4
 8003836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003838:	2302      	movs	r3, #2
 800383a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003844:	d05f      	beq.n	8003906 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	4620      	mov	r0, r4
 8003848:	f7ff ffce 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384c:	2300      	movs	r3, #0
 800384e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	f012 0f08 	tst.w	r2, #8
 8003858:	d012      	beq.n	8003880 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	f012 0f08 	tst.w	r2, #8
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003862:	f06f 0208 	mvn.w	r2, #8
 8003866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003868:	2304      	movs	r3, #4
 800386a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f013 0f03 	tst.w	r3, #3
 8003874:	d04e      	beq.n	8003914 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	4620      	mov	r0, r4
 8003878:	f7ff ffb6 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387c:	2300      	movs	r3, #0
 800387e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	f012 0f10 	tst.w	r2, #16
 8003888:	d012      	beq.n	80038b0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	f012 0f10 	tst.w	r2, #16
 8003890:	d00e      	beq.n	80038b0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003892:	f06f 0210 	mvn.w	r2, #16
 8003896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003898:	2308      	movs	r3, #8
 800389a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80038a4:	d03d      	beq.n	8003922 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff ff9e 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ac:	2300      	movs	r3, #0
 80038ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	f012 0f01 	tst.w	r2, #1
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	f012 0f01 	tst.w	r2, #1
 80038c0:	d136      	bne.n	8003930 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038ca:	d003      	beq.n	80038d4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038d2:	d134      	bne.n	800393e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038e4:	d132      	bne.n	800394c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	f012 0f20 	tst.w	r2, #32
 80038ee:	d003      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	f012 0f20 	tst.w	r2, #32
 80038f6:	d130      	bne.n	800395a <HAL_TIM_IRQHandler+0x16c>
}
 80038f8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	f7ff ff74 	bl	80037e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff ff73 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
 8003904:	e78a      	b.n	800381c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	4620      	mov	r0, r4
 8003908:	f7ff ff6d 	bl	80037e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff ff6c 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
 8003912:	e79b      	b.n	800384c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff ff66 	bl	80037e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391a:	4620      	mov	r0, r4
 800391c:	f7ff ff65 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
 8003920:	e7ac      	b.n	800387c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff ff5f 	bl	80037e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff ff5e 	bl	80037ea <HAL_TIM_PWM_PulseFinishedCallback>
 800392e:	e7bd      	b.n	80038ac <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003930:	f06f 0201 	mvn.w	r2, #1
 8003934:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003936:	4620      	mov	r0, r4
 8003938:	f7fd fe42 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
 800393c:	e7c1      	b.n	80038c2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800393e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003942:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f8d2 	bl	8003aee <HAL_TIMEx_BreakCallback>
 800394a:	e7c3      	b.n	80038d4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003950:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff ff4a 	bl	80037ec <HAL_TIM_TriggerCallback>
 8003958:	e7c5      	b.n	80038e6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800395a:	f06f 0220 	mvn.w	r2, #32
 800395e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003960:	4620      	mov	r0, r4
 8003962:	f000 f8c3 	bl	8003aec <HAL_TIMEx_CommutCallback>
}
 8003966:	e7c7      	b.n	80038f8 <HAL_TIM_IRQHandler+0x10a>

08003968 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003968:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396a:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <TIM_Base_SetConfig+0xc4>)
 800396c:	4290      	cmp	r0, r2
 800396e:	d012      	beq.n	8003996 <TIM_Base_SetConfig+0x2e>
 8003970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003974:	d00f      	beq.n	8003996 <TIM_Base_SetConfig+0x2e>
 8003976:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800397a:	4290      	cmp	r0, r2
 800397c:	d00b      	beq.n	8003996 <TIM_Base_SetConfig+0x2e>
 800397e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003982:	4290      	cmp	r0, r2
 8003984:	d007      	beq.n	8003996 <TIM_Base_SetConfig+0x2e>
 8003986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800398a:	4290      	cmp	r0, r2
 800398c:	d003      	beq.n	8003996 <TIM_Base_SetConfig+0x2e>
 800398e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003992:	4290      	cmp	r0, r2
 8003994:	d103      	bne.n	800399e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800399a:	684a      	ldr	r2, [r1, #4]
 800399c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <TIM_Base_SetConfig+0xc4>)
 80039a0:	4290      	cmp	r0, r2
 80039a2:	d02a      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039a8:	d027      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80039ae:	4290      	cmp	r0, r2
 80039b0:	d023      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039b6:	4290      	cmp	r0, r2
 80039b8:	d01f      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039be:	4290      	cmp	r0, r2
 80039c0:	d01b      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80039c6:	4290      	cmp	r0, r2
 80039c8:	d017      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039ca:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80039ce:	4290      	cmp	r0, r2
 80039d0:	d013      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039d6:	4290      	cmp	r0, r2
 80039d8:	d00f      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039de:	4290      	cmp	r0, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039e2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80039e6:	4290      	cmp	r0, r2
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ee:	4290      	cmp	r0, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x92>
 80039f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f6:	4290      	cmp	r0, r2
 80039f8:	d103      	bne.n	8003a02 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fe:	68ca      	ldr	r2, [r1, #12]
 8003a00:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a06:	694a      	ldr	r2, [r1, #20]
 8003a08:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003a0a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	688b      	ldr	r3, [r1, #8]
 8003a0e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a10:	680b      	ldr	r3, [r1, #0]
 8003a12:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <TIM_Base_SetConfig+0xc4>)
 8003a16:	4298      	cmp	r0, r3
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0xba>
 8003a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a1e:	4298      	cmp	r0, r3
 8003a20:	d101      	bne.n	8003a26 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a22:	690b      	ldr	r3, [r1, #16]
 8003a24:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a26:	2301      	movs	r3, #1
 8003a28:	6143      	str	r3, [r0, #20]
}
 8003a2a:	4770      	bx	lr
 8003a2c:	40010000 	.word	0x40010000

08003a30 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003a30:	b1b0      	cbz	r0, 8003a60 <HAL_TIM_Base_Init+0x30>
{
 8003a32:	b510      	push	{r4, lr}
 8003a34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a3a:	b163      	cbz	r3, 8003a56 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a42:	4621      	mov	r1, r4
 8003a44:	f851 0b04 	ldr.w	r0, [r1], #4
 8003a48:	f7ff ff8e 	bl	8003968 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a52:	2000      	movs	r0, #0
}
 8003a54:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a5a:	f7fe f89f 	bl	8001b9c <HAL_TIM_Base_MspInit>
 8003a5e:	e7ed      	b.n	8003a3c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003a60:	2001      	movs	r0, #1
}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d03b      	beq.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8003a6c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	2302      	movs	r3, #2
 8003a76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a7a:	6803      	ldr	r3, [r0, #0]
 8003a7c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a80:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a84:	680a      	ldr	r2, [r1, #0]
 8003a86:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	6803      	ldr	r3, [r0, #0]
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01a      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d017      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a98:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00f      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003aa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003ab0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003ab8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003ac0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003acc:	684a      	ldr	r2, [r1, #4]
 8003ace:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003ade:	4618      	mov	r0, r3
}
 8003ae0:	bc30      	pop	{r4, r5}
 8003ae2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ae4:	2002      	movs	r0, #2
}
 8003ae6:	4770      	bx	lr
 8003ae8:	40010000 	.word	0x40010000

08003aec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aec:	4770      	bx	lr

08003aee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aee:	4770      	bx	lr

08003af0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af0:	6802      	ldr	r2, [r0, #0]
 8003af2:	68d3      	ldr	r3, [r2, #12]
 8003af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	6802      	ldr	r2, [r0, #0]
 8003afc:	6953      	ldr	r3, [r2, #20]
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	2320      	movs	r3, #32
 8003b06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003b0a:	4770      	bx	lr

08003b0c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b0c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b21      	cmp	r3, #33	; 0x21
 8003b14:	d001      	beq.n	8003b1a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2002      	movs	r0, #2
  }
}
 8003b18:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b1a:	6883      	ldr	r3, [r0, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d017      	beq.n	8003b52 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b22:	6a03      	ldr	r3, [r0, #32]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	6202      	str	r2, [r0, #32]
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003b2e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003b38:	b94b      	cbnz	r3, 8003b4e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b3a:	6802      	ldr	r2, [r0, #0]
 8003b3c:	68d3      	ldr	r3, [r2, #12]
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b42:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b44:	6802      	ldr	r2, [r0, #0]
 8003b46:	68d3      	ldr	r3, [r2, #12]
 8003b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b52:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	6802      	ldr	r2, [r0, #0]
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b5e:	6903      	ldr	r3, [r0, #16]
 8003b60:	b91b      	cbnz	r3, 8003b6a <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8003b62:	6a03      	ldr	r3, [r0, #32]
 8003b64:	3302      	adds	r3, #2
 8003b66:	6203      	str	r3, [r0, #32]
 8003b68:	e7e1      	b.n	8003b2e <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8003b6a:	6a03      	ldr	r3, [r0, #32]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	6203      	str	r3, [r0, #32]
 8003b70:	e7dd      	b.n	8003b2e <UART_Transmit_IT+0x22>
	...

08003b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	6802      	ldr	r2, [r0, #0]
 8003b7a:	6913      	ldr	r3, [r2, #16]
 8003b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b80:	68c1      	ldr	r1, [r0, #12]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b86:	6883      	ldr	r3, [r0, #8]
 8003b88:	6902      	ldr	r2, [r0, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	6942      	ldr	r2, [r0, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	69c2      	ldr	r2, [r0, #28]
 8003b92:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003b94:	6801      	ldr	r1, [r0, #0]
 8003b96:	68cb      	ldr	r3, [r1, #12]
 8003b98:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b9c:	f023 030c 	bic.w	r3, r3, #12
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba4:	6802      	ldr	r2, [r0, #0]
 8003ba6:	6953      	ldr	r3, [r2, #20]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	6981      	ldr	r1, [r0, #24]
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb2:	69c3      	ldr	r3, [r0, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d036      	beq.n	8003c28 <UART_SetConfig+0xb4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bba:	6803      	ldr	r3, [r0, #0]
 8003bbc:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <UART_SetConfig+0x1e0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	f000 809a 	beq.w	8003cf8 <UART_SetConfig+0x184>
 8003bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	f000 8095 	beq.w	8003cf8 <UART_SetConfig+0x184>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bce:	f7ff fb39 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	1805      	adds	r5, r0, r0
 8003bd6:	eb46 0106 	adc.w	r1, r6, r6
 8003bda:	182d      	adds	r5, r5, r0
 8003bdc:	eb46 0101 	adc.w	r1, r6, r1
 8003be0:	00cb      	lsls	r3, r1, #3
 8003be2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003be6:	00ea      	lsls	r2, r5, #3
 8003be8:	4615      	mov	r5, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	0f9b      	lsrs	r3, r3, #30
 8003bf2:	1828      	adds	r0, r5, r0
 8003bf4:	eb46 0101 	adc.w	r1, r6, r1
 8003bf8:	f7fd f866 	bl	8000cc8 <__aeabi_uldivmod>
 8003bfc:	4d56      	ldr	r5, [pc, #344]	; (8003d58 <UART_SetConfig+0x1e4>)
 8003bfe:	fba5 3200 	umull	r3, r2, r5, r0
 8003c02:	0951      	lsrs	r1, r2, #5
 8003c04:	2364      	movs	r3, #100	; 0x64
 8003c06:	fb03 0311 	mls	r3, r3, r1, r0
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	3332      	adds	r3, #50	; 0x32
 8003c0e:	fba5 2303 	umull	r2, r3, r5, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c18:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	6821      	ldr	r1, [r4, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
    }
  }
}
 8003c26:	e093      	b.n	8003d50 <UART_SetConfig+0x1dc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c28:	6803      	ldr	r3, [r0, #0]
 8003c2a:	4a4a      	ldr	r2, [pc, #296]	; (8003d54 <UART_SetConfig+0x1e0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d033      	beq.n	8003c98 <UART_SetConfig+0x124>
 8003c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d02f      	beq.n	8003c98 <UART_SetConfig+0x124>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7ff fb04 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	1805      	adds	r5, r0, r0
 8003c40:	eb46 0106 	adc.w	r1, r6, r6
 8003c44:	182d      	adds	r5, r5, r0
 8003c46:	eb46 0101 	adc.w	r1, r6, r1
 8003c4a:	00cb      	lsls	r3, r1, #3
 8003c4c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003c50:	00ea      	lsls	r2, r5, #3
 8003c52:	4615      	mov	r5, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	6862      	ldr	r2, [r4, #4]
 8003c58:	4633      	mov	r3, r6
 8003c5a:	1892      	adds	r2, r2, r2
 8003c5c:	eb46 0303 	adc.w	r3, r6, r3
 8003c60:	1828      	adds	r0, r5, r0
 8003c62:	eb46 0101 	adc.w	r1, r6, r1
 8003c66:	f7fd f82f 	bl	8000cc8 <__aeabi_uldivmod>
 8003c6a:	4d3b      	ldr	r5, [pc, #236]	; (8003d58 <UART_SetConfig+0x1e4>)
 8003c6c:	fba5 3200 	umull	r3, r2, r5, r0
 8003c70:	0951      	lsrs	r1, r2, #5
 8003c72:	2364      	movs	r3, #100	; 0x64
 8003c74:	fb03 0311 	mls	r3, r3, r1, r0
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	fba5 2303 	umull	r2, r3, r5, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	005a      	lsls	r2, r3, #1
 8003c84:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003c88:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	6821      	ldr	r1, [r4, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
 8003c96:	e05b      	b.n	8003d50 <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7ff fae4 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	1805      	adds	r5, r0, r0
 8003ca0:	eb46 0106 	adc.w	r1, r6, r6
 8003ca4:	182d      	adds	r5, r5, r0
 8003ca6:	eb46 0101 	adc.w	r1, r6, r1
 8003caa:	00cb      	lsls	r3, r1, #3
 8003cac:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003cb0:	00ea      	lsls	r2, r5, #3
 8003cb2:	4615      	mov	r5, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	4633      	mov	r3, r6
 8003cba:	1892      	adds	r2, r2, r2
 8003cbc:	eb46 0303 	adc.w	r3, r6, r3
 8003cc0:	1828      	adds	r0, r5, r0
 8003cc2:	eb46 0101 	adc.w	r1, r6, r1
 8003cc6:	f7fc ffff 	bl	8000cc8 <__aeabi_uldivmod>
 8003cca:	4d23      	ldr	r5, [pc, #140]	; (8003d58 <UART_SetConfig+0x1e4>)
 8003ccc:	fba5 3200 	umull	r3, r2, r5, r0
 8003cd0:	0951      	lsrs	r1, r2, #5
 8003cd2:	2364      	movs	r3, #100	; 0x64
 8003cd4:	fb03 0311 	mls	r3, r3, r1, r0
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	3332      	adds	r3, #50	; 0x32
 8003cdc:	fba5 2303 	umull	r2, r3, r5, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	005a      	lsls	r2, r3, #1
 8003ce4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003ce8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	6821      	ldr	r1, [r4, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
 8003cf6:	e02b      	b.n	8003d50 <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf8:	f7ff fab4 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	1805      	adds	r5, r0, r0
 8003d00:	eb46 0106 	adc.w	r1, r6, r6
 8003d04:	182d      	adds	r5, r5, r0
 8003d06:	eb46 0101 	adc.w	r1, r6, r1
 8003d0a:	00cb      	lsls	r3, r1, #3
 8003d0c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003d10:	00ea      	lsls	r2, r5, #3
 8003d12:	4615      	mov	r5, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	009a      	lsls	r2, r3, #2
 8003d1a:	0f9b      	lsrs	r3, r3, #30
 8003d1c:	1828      	adds	r0, r5, r0
 8003d1e:	eb46 0101 	adc.w	r1, r6, r1
 8003d22:	f7fc ffd1 	bl	8000cc8 <__aeabi_uldivmod>
 8003d26:	4d0c      	ldr	r5, [pc, #48]	; (8003d58 <UART_SetConfig+0x1e4>)
 8003d28:	fba5 3200 	umull	r3, r2, r5, r0
 8003d2c:	0951      	lsrs	r1, r2, #5
 8003d2e:	2364      	movs	r3, #100	; 0x64
 8003d30:	fb03 0311 	mls	r3, r3, r1, r0
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	3332      	adds	r3, #50	; 0x32
 8003d38:	fba5 2303 	umull	r2, r3, r5, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d42:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	6821      	ldr	r1, [r4, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]
}
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	bf00      	nop
 8003d54:	40011000 	.word	0x40011000
 8003d58:	51eb851f 	.word	0x51eb851f

08003d5c <UART_WaitOnFlagUntilTimeout>:
{
 8003d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d60:	4605      	mov	r5, r0
 8003d62:	460f      	mov	r7, r1
 8003d64:	4616      	mov	r6, r2
 8003d66:	4699      	mov	r9, r3
 8003d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6c:	682c      	ldr	r4, [r5, #0]
 8003d6e:	6824      	ldr	r4, [r4, #0]
 8003d70:	ea37 0304 	bics.w	r3, r7, r4
 8003d74:	bf0c      	ite	eq
 8003d76:	2401      	moveq	r4, #1
 8003d78:	2400      	movne	r4, #0
 8003d7a:	42b4      	cmp	r4, r6
 8003d7c:	d11f      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003d82:	d0f3      	beq.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d84:	f1b8 0f00 	cmp.w	r8, #0
 8003d88:	d005      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x3a>
 8003d8a:	f7fe f875 	bl	8001e78 <HAL_GetTick>
 8003d8e:	eba0 0009 	sub.w	r0, r0, r9
 8003d92:	4540      	cmp	r0, r8
 8003d94:	d9ea      	bls.n	8003d6c <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d96:	682a      	ldr	r2, [r5, #0]
 8003d98:	68d3      	ldr	r3, [r2, #12]
 8003d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d9e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	682a      	ldr	r2, [r5, #0]
 8003da2:	6953      	ldr	r3, [r2, #20]
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003daa:	2320      	movs	r3, #32
 8003dac:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003db0:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003db4:	2300      	movs	r3, #0
 8003db6:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003dba:	2003      	movs	r0, #3
 8003dbc:	e000      	b.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8003dbe:	2000      	movs	r0, #0
}
 8003dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003dc4 <HAL_UART_Init>:
  if (huart == NULL)
 8003dc4:	b358      	cbz	r0, 8003e1e <HAL_UART_Init+0x5a>
{
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003dce:	b30b      	cbz	r3, 8003e14 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	2324      	movs	r3, #36	; 0x24
 8003dd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	68d3      	ldr	r3, [r2, #12]
 8003dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dde:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff fec7 	bl	8003b74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	6913      	ldr	r3, [r2, #16]
 8003dea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003dee:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	6953      	ldr	r3, [r2, #20]
 8003df4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003df8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	68d3      	ldr	r3, [r2, #12]
 8003dfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e02:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	2000      	movs	r0, #0
 8003e06:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003e12:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003e14:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003e18:	f7fd fee0 	bl	8001bdc <HAL_UART_MspInit>
 8003e1c:	e7d8      	b.n	8003dd0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
}
 8003e20:	4770      	bx	lr

08003e22 <HAL_UART_Transmit>:
{
 8003e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e26:	b083      	sub	sp, #12
 8003e28:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d159      	bne.n	8003ee8 <HAL_UART_Transmit+0xc6>
 8003e34:	4604      	mov	r4, r0
 8003e36:	460d      	mov	r5, r1
 8003e38:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003e3a:	2900      	cmp	r1, #0
 8003e3c:	d058      	beq.n	8003ef0 <HAL_UART_Transmit+0xce>
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d058      	beq.n	8003ef4 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8003e42:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d056      	beq.n	8003ef8 <HAL_UART_Transmit+0xd6>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e58:	2321      	movs	r3, #33	; 0x21
 8003e5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003e5e:	f7fe f80b 	bl	8001e78 <HAL_GetTick>
 8003e62:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003e64:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e68:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003e6c:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8003e70:	e017      	b.n	8003ea2 <HAL_UART_Transmit+0x80>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	9600      	str	r6, [sp, #0]
 8003e74:	463b      	mov	r3, r7
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff ff6e 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d13b      	bne.n	8003efc <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e84:	882b      	ldrh	r3, [r5, #0]
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	b90b      	cbnz	r3, 8003e96 <HAL_UART_Transmit+0x74>
          pData += 2U;
 8003e92:	3502      	adds	r5, #2
 8003e94:	e005      	b.n	8003ea2 <HAL_UART_Transmit+0x80>
          pData += 1U;
 8003e96:	3501      	adds	r5, #1
 8003e98:	e003      	b.n	8003ea2 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e9a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ea2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b19b      	cbz	r3, 8003ed0 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8003ea8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	3a01      	subs	r2, #1
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d0db      	beq.n	8003e72 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	9600      	str	r6, [sp, #0]
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff ff4a 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d0e6      	beq.n	8003e9a <HAL_UART_Transmit+0x78>
          return HAL_TIMEOUT;
 8003ecc:	2003      	movs	r0, #3
 8003ece:	e00c      	b.n	8003eea <HAL_UART_Transmit+0xc8>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed0:	9600      	str	r6, [sp, #0]
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2140      	movs	r1, #64	; 0x40
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f7ff ff3f 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003ede:	b978      	cbnz	r0, 8003f00 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003ee6:	e000      	b.n	8003eea <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 8003ee8:	2002      	movs	r0, #2
}
 8003eea:	b003      	add	sp, #12
 8003eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e7fa      	b.n	8003eea <HAL_UART_Transmit+0xc8>
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	e7f8      	b.n	8003eea <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8003ef8:	2002      	movs	r0, #2
 8003efa:	e7f6      	b.n	8003eea <HAL_UART_Transmit+0xc8>
          return HAL_TIMEOUT;
 8003efc:	2003      	movs	r0, #3
 8003efe:	e7f4      	b.n	8003eea <HAL_UART_Transmit+0xc8>
      return HAL_TIMEOUT;
 8003f00:	2003      	movs	r0, #3
 8003f02:	e7f2      	b.n	8003eea <HAL_UART_Transmit+0xc8>

08003f04 <HAL_UART_Receive>:
{
 8003f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f0c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d15d      	bne.n	8003fd2 <HAL_UART_Receive+0xce>
 8003f16:	4604      	mov	r4, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	d05c      	beq.n	8003fda <HAL_UART_Receive+0xd6>
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	d05c      	beq.n	8003fde <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8003f24:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d05a      	beq.n	8003fe2 <HAL_UART_Receive+0xde>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	f04f 0900 	mov.w	r9, #0
 8003f36:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f3a:	2322      	movs	r3, #34	; 0x22
 8003f3c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8003f40:	f7fd ff9a 	bl	8001e78 <HAL_GetTick>
 8003f44:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8003f46:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f4a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8003f4e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8003f52:	e01d      	b.n	8003f90 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f54:	9600      	str	r6, [sp, #0]
 8003f56:	463b      	mov	r3, r7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2120      	movs	r1, #32
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff fefd 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d13f      	bne.n	8003fe6 <HAL_UART_Receive+0xe2>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f66:	6923      	ldr	r3, [r4, #16]
 8003f68:	b933      	cbnz	r3, 8003f78 <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	f825 3b02 	strh.w	r3, [r5], #2
          pData += 2U;
 8003f76:	e00b      	b.n	8003f90 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f825 3b01 	strh.w	r3, [r5], #1
          pData += 1U;
 8003f82:	e005      	b.n	8003f90 <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8c:	f805 3b01 	strb.w	r3, [r5], #1
    while (huart->RxXferCount > 0U)
 8003f90:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	b1c3      	cbz	r3, 8003fc8 <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 8003f96:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	b292      	uxth	r2, r2
 8003f9e:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	d0d5      	beq.n	8003f54 <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa8:	9600      	str	r6, [sp, #0]
 8003faa:	463b      	mov	r3, r7
 8003fac:	2200      	movs	r2, #0
 8003fae:	2120      	movs	r1, #32
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff fed3 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 8003fb6:	b9c0      	cbnz	r0, 8003fea <HAL_UART_Receive+0xe6>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb8:	6923      	ldr	r3, [r4, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e2      	bne.n	8003f84 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f805 3b01 	strb.w	r3, [r5], #1
 8003fc6:	e7e3      	b.n	8003f90 <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	2320      	movs	r3, #32
 8003fca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_UART_Receive+0xd0>
    return HAL_BUSY;
 8003fd2:	2002      	movs	r0, #2
}
 8003fd4:	b003      	add	sp, #12
 8003fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e7fa      	b.n	8003fd4 <HAL_UART_Receive+0xd0>
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e7f8      	b.n	8003fd4 <HAL_UART_Receive+0xd0>
    __HAL_LOCK(huart);
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	e7f6      	b.n	8003fd4 <HAL_UART_Receive+0xd0>
          return HAL_TIMEOUT;
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	e7f4      	b.n	8003fd4 <HAL_UART_Receive+0xd0>
          return HAL_TIMEOUT;
 8003fea:	2003      	movs	r0, #3
 8003fec:	e7f2      	b.n	8003fd4 <HAL_UART_Receive+0xd0>

08003fee <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fee:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d120      	bne.n	800403a <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8003ff8:	b309      	cbz	r1, 800403e <HAL_UART_Receive_IT+0x50>
 8003ffa:	b312      	cbz	r2, 8004042 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8003ffc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004000:	2b01      	cmp	r3, #1
 8004002:	d020      	beq.n	8004046 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8004004:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004006:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004008:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	2300      	movs	r3, #0
 800400c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800400e:	2222      	movs	r2, #34	; 0x22
 8004010:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8004014:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004018:	6801      	ldr	r1, [r0, #0]
 800401a:	68ca      	ldr	r2, [r1, #12]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004022:	6801      	ldr	r1, [r0, #0]
 8004024:	694a      	ldr	r2, [r1, #20]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800402c:	6801      	ldr	r1, [r0, #0]
 800402e:	68ca      	ldr	r2, [r1, #12]
 8004030:	f042 0220 	orr.w	r2, r2, #32
 8004034:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004036:	4618      	mov	r0, r3
 8004038:	4770      	bx	lr
    return HAL_BUSY;
 800403a:	2002      	movs	r0, #2
 800403c:	4770      	bx	lr
      return HAL_ERROR;
 800403e:	2001      	movs	r0, #1
 8004040:	4770      	bx	lr
 8004042:	2001      	movs	r0, #1
 8004044:	4770      	bx	lr
    __HAL_LOCK(huart);
 8004046:	2002      	movs	r0, #2
}
 8004048:	4770      	bx	lr

0800404a <HAL_UART_TxCpltCallback>:
}
 800404a:	4770      	bx	lr

0800404c <UART_EndTransmit_IT>:
{
 800404c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800404e:	6801      	ldr	r1, [r0, #0]
 8004050:	68ca      	ldr	r2, [r1, #12]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004058:	2220      	movs	r2, #32
 800405a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800405e:	f7ff fff4 	bl	800404a <HAL_UART_TxCpltCallback>
}
 8004062:	2000      	movs	r0, #0
 8004064:	bd08      	pop	{r3, pc}

08004066 <UART_Receive_IT>:
{
 8004066:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004068:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b22      	cmp	r3, #34	; 0x22
 8004070:	d146      	bne.n	8004100 <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004072:	6883      	ldr	r3, [r0, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d00f      	beq.n	800409a <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800407a:	6903      	ldr	r3, [r0, #16]
 800407c:	bb0b      	cbnz	r3, 80040c2 <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800407e:	6803      	ldr	r3, [r0, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004084:	1c59      	adds	r1, r3, #1
 8004086:	6281      	str	r1, [r0, #40]	; 0x28
 8004088:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800408a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004094:	b1f3      	cbz	r3, 80040d4 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8004096:	2000      	movs	r0, #0
}
 8004098:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800409a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800409c:	6903      	ldr	r3, [r0, #16]
 800409e:	b943      	cbnz	r3, 80040b2 <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a0:	6803      	ldr	r3, [r0, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a8:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80040aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040ac:	3302      	adds	r3, #2
 80040ae:	6283      	str	r3, [r0, #40]	; 0x28
 80040b0:	e7eb      	b.n	800408a <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80040b2:	6803      	ldr	r3, [r0, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80040ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040bc:	3301      	adds	r3, #1
 80040be:	6283      	str	r3, [r0, #40]	; 0x28
 80040c0:	e7e3      	b.n	800408a <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040c2:	6803      	ldr	r3, [r0, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80040c8:	1c51      	adds	r1, r2, #1
 80040ca:	6281      	str	r1, [r0, #40]	; 0x28
 80040cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d0:	7013      	strb	r3, [r2, #0]
 80040d2:	e7da      	b.n	800408a <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040d4:	6802      	ldr	r2, [r0, #0]
 80040d6:	68d3      	ldr	r3, [r2, #12]
 80040d8:	f023 0320 	bic.w	r3, r3, #32
 80040dc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040de:	6802      	ldr	r2, [r0, #0]
 80040e0:	68d3      	ldr	r3, [r2, #12]
 80040e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040e8:	6802      	ldr	r2, [r0, #0]
 80040ea:	6953      	ldr	r3, [r2, #20]
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80040f2:	2320      	movs	r3, #32
 80040f4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80040f8:	f7fd fa70 	bl	80015dc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80040fc:	2000      	movs	r0, #0
 80040fe:	e7cb      	b.n	8004098 <UART_Receive_IT+0x32>
    return HAL_BUSY;
 8004100:	2002      	movs	r0, #2
 8004102:	e7c9      	b.n	8004098 <UART_Receive_IT+0x32>

08004104 <HAL_UART_ErrorCallback>:
}
 8004104:	4770      	bx	lr
	...

08004108 <HAL_UART_IRQHandler>:
{
 8004108:	b510      	push	{r4, lr}
 800410a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800410c:	6802      	ldr	r2, [r0, #0]
 800410e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004110:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004112:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8004114:	f013 000f 	ands.w	r0, r3, #15
 8004118:	d105      	bne.n	8004126 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411a:	f013 0f20 	tst.w	r3, #32
 800411e:	d002      	beq.n	8004126 <HAL_UART_IRQHandler+0x1e>
 8004120:	f011 0f20 	tst.w	r1, #32
 8004124:	d113      	bne.n	800414e <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004126:	b128      	cbz	r0, 8004134 <HAL_UART_IRQHandler+0x2c>
 8004128:	f012 0201 	ands.w	r2, r2, #1
 800412c:	d113      	bne.n	8004156 <HAL_UART_IRQHandler+0x4e>
 800412e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004132:	d110      	bne.n	8004156 <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004134:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004138:	d002      	beq.n	8004140 <HAL_UART_IRQHandler+0x38>
 800413a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800413e:	d16c      	bne.n	800421a <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004140:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004144:	d002      	beq.n	800414c <HAL_UART_IRQHandler+0x44>
 8004146:	f011 0f40 	tst.w	r1, #64	; 0x40
 800414a:	d16a      	bne.n	8004222 <HAL_UART_IRQHandler+0x11a>
}
 800414c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff ff89 	bl	8004066 <UART_Receive_IT>
      return;
 8004154:	e7fa      	b.n	800414c <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004156:	f013 0f01 	tst.w	r3, #1
 800415a:	d006      	beq.n	800416a <HAL_UART_IRQHandler+0x62>
 800415c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004160:	d003      	beq.n	800416a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004162:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004164:	f040 0001 	orr.w	r0, r0, #1
 8004168:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416a:	f013 0f04 	tst.w	r3, #4
 800416e:	d004      	beq.n	800417a <HAL_UART_IRQHandler+0x72>
 8004170:	b11a      	cbz	r2, 800417a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004172:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004174:	f040 0002 	orr.w	r0, r0, #2
 8004178:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417a:	f013 0f02 	tst.w	r3, #2
 800417e:	d004      	beq.n	800418a <HAL_UART_IRQHandler+0x82>
 8004180:	b11a      	cbz	r2, 800418a <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004182:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004184:	f040 0004 	orr.w	r0, r0, #4
 8004188:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800418a:	f013 0f08 	tst.w	r3, #8
 800418e:	d007      	beq.n	80041a0 <HAL_UART_IRQHandler+0x98>
 8004190:	f011 0f20 	tst.w	r1, #32
 8004194:	d100      	bne.n	8004198 <HAL_UART_IRQHandler+0x90>
 8004196:	b11a      	cbz	r2, 80041a0 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004198:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	d0d2      	beq.n	800414c <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a6:	f013 0f20 	tst.w	r3, #32
 80041aa:	d002      	beq.n	80041b2 <HAL_UART_IRQHandler+0xaa>
 80041ac:	f011 0f20 	tst.w	r1, #32
 80041b0:	d121      	bne.n	80041f6 <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041bc:	f012 0f08 	tst.w	r2, #8
 80041c0:	d100      	bne.n	80041c4 <HAL_UART_IRQHandler+0xbc>
 80041c2:	b323      	cbz	r3, 800420e <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7ff fc93 	bl	8003af0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80041d2:	d018      	beq.n	8004206 <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041da:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80041dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041de:	b173      	cbz	r3, 80041fe <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041e0:	4a12      	ldr	r2, [pc, #72]	; (800422c <HAL_UART_IRQHandler+0x124>)
 80041e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80041e6:	f7fe fcbc 	bl	8002b62 <HAL_DMA_Abort_IT>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d0ae      	beq.n	800414c <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80041f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80041f2:	4798      	blx	r3
 80041f4:	e7aa      	b.n	800414c <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7ff ff35 	bl	8004066 <UART_Receive_IT>
 80041fc:	e7d9      	b.n	80041b2 <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 80041fe:	4620      	mov	r0, r4
 8004200:	f7ff ff80 	bl	8004104 <HAL_UART_ErrorCallback>
 8004204:	e7a2      	b.n	800414c <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff ff7c 	bl	8004104 <HAL_UART_ErrorCallback>
 800420c:	e79e      	b.n	800414c <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff ff78 	bl	8004104 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	2300      	movs	r3, #0
 8004216:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 8004218:	e798      	b.n	800414c <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 800421a:	4620      	mov	r0, r4
 800421c:	f7ff fc76 	bl	8003b0c <UART_Transmit_IT>
    return;
 8004220:	e794      	b.n	800414c <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 8004222:	4620      	mov	r0, r4
 8004224:	f7ff ff12 	bl	800404c <UART_EndTransmit_IT>
    return;
 8004228:	e790      	b.n	800414c <HAL_UART_IRQHandler+0x44>
 800422a:	bf00      	nop
 800422c:	08004231 	.word	0x08004231

08004230 <UART_DMAAbortOnError>:
{
 8004230:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004232:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004234:	2300      	movs	r3, #0
 8004236:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004238:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800423a:	f7ff ff63 	bl	8004104 <HAL_UART_ErrorCallback>
}
 800423e:	bd08      	pop	{r3, pc}

08004240 <__errno>:
 8004240:	4b01      	ldr	r3, [pc, #4]	; (8004248 <__errno+0x8>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4d0d      	ldr	r5, [pc, #52]	; (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2600      	movs	r6, #0
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4d0b      	ldr	r5, [pc, #44]	; (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	; (8004290 <__libc_init_array+0x44>)
 8004260:	f004 fcba 	bl	8008bd8 <_init>
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2600      	movs	r6, #0
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	0800947c 	.word	0x0800947c
 8004288:	0800947c 	.word	0x0800947c
 800428c:	0800947c 	.word	0x0800947c
 8004290:	08009480 	.word	0x08009480

08004294 <memset>:
 8004294:	4402      	add	r2, r0
 8004296:	4603      	mov	r3, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	f803 1b01 	strb.w	r1, [r3], #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <__cvt>:
 80042a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	ec55 4b10 	vmov	r4, r5, d0
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	460e      	mov	r6, r1
 80042b0:	4619      	mov	r1, r3
 80042b2:	462b      	mov	r3, r5
 80042b4:	bfbb      	ittet	lt
 80042b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042ba:	461d      	movlt	r5, r3
 80042bc:	2300      	movge	r3, #0
 80042be:	232d      	movlt	r3, #45	; 0x2d
 80042c0:	700b      	strb	r3, [r1, #0]
 80042c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042c8:	4691      	mov	r9, r2
 80042ca:	f023 0820 	bic.w	r8, r3, #32
 80042ce:	bfbc      	itt	lt
 80042d0:	4622      	movlt	r2, r4
 80042d2:	4614      	movlt	r4, r2
 80042d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042d8:	d005      	beq.n	80042e6 <__cvt+0x42>
 80042da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042de:	d100      	bne.n	80042e2 <__cvt+0x3e>
 80042e0:	3601      	adds	r6, #1
 80042e2:	2102      	movs	r1, #2
 80042e4:	e000      	b.n	80042e8 <__cvt+0x44>
 80042e6:	2103      	movs	r1, #3
 80042e8:	ab03      	add	r3, sp, #12
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	ab02      	add	r3, sp, #8
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	ec45 4b10 	vmov	d0, r4, r5
 80042f4:	4653      	mov	r3, sl
 80042f6:	4632      	mov	r2, r6
 80042f8:	f001 feea 	bl	80060d0 <_dtoa_r>
 80042fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004300:	4607      	mov	r7, r0
 8004302:	d102      	bne.n	800430a <__cvt+0x66>
 8004304:	f019 0f01 	tst.w	r9, #1
 8004308:	d022      	beq.n	8004350 <__cvt+0xac>
 800430a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800430e:	eb07 0906 	add.w	r9, r7, r6
 8004312:	d110      	bne.n	8004336 <__cvt+0x92>
 8004314:	783b      	ldrb	r3, [r7, #0]
 8004316:	2b30      	cmp	r3, #48	; 0x30
 8004318:	d10a      	bne.n	8004330 <__cvt+0x8c>
 800431a:	2200      	movs	r2, #0
 800431c:	2300      	movs	r3, #0
 800431e:	4620      	mov	r0, r4
 8004320:	4629      	mov	r1, r5
 8004322:	f7fc fbf1 	bl	8000b08 <__aeabi_dcmpeq>
 8004326:	b918      	cbnz	r0, 8004330 <__cvt+0x8c>
 8004328:	f1c6 0601 	rsb	r6, r6, #1
 800432c:	f8ca 6000 	str.w	r6, [sl]
 8004330:	f8da 3000 	ldr.w	r3, [sl]
 8004334:	4499      	add	r9, r3
 8004336:	2200      	movs	r2, #0
 8004338:	2300      	movs	r3, #0
 800433a:	4620      	mov	r0, r4
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 8004342:	b108      	cbz	r0, 8004348 <__cvt+0xa4>
 8004344:	f8cd 900c 	str.w	r9, [sp, #12]
 8004348:	2230      	movs	r2, #48	; 0x30
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	454b      	cmp	r3, r9
 800434e:	d307      	bcc.n	8004360 <__cvt+0xbc>
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004354:	1bdb      	subs	r3, r3, r7
 8004356:	4638      	mov	r0, r7
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	b004      	add	sp, #16
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004360:	1c59      	adds	r1, r3, #1
 8004362:	9103      	str	r1, [sp, #12]
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e7f0      	b.n	800434a <__cvt+0xa6>

08004368 <__exponent>:
 8004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436a:	4603      	mov	r3, r0
 800436c:	2900      	cmp	r1, #0
 800436e:	bfb8      	it	lt
 8004370:	4249      	neglt	r1, r1
 8004372:	f803 2b02 	strb.w	r2, [r3], #2
 8004376:	bfb4      	ite	lt
 8004378:	222d      	movlt	r2, #45	; 0x2d
 800437a:	222b      	movge	r2, #43	; 0x2b
 800437c:	2909      	cmp	r1, #9
 800437e:	7042      	strb	r2, [r0, #1]
 8004380:	dd2a      	ble.n	80043d8 <__exponent+0x70>
 8004382:	f10d 0407 	add.w	r4, sp, #7
 8004386:	46a4      	mov	ip, r4
 8004388:	270a      	movs	r7, #10
 800438a:	46a6      	mov	lr, r4
 800438c:	460a      	mov	r2, r1
 800438e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004392:	fb07 1516 	mls	r5, r7, r6, r1
 8004396:	3530      	adds	r5, #48	; 0x30
 8004398:	2a63      	cmp	r2, #99	; 0x63
 800439a:	f104 34ff 	add.w	r4, r4, #4294967295
 800439e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043a2:	4631      	mov	r1, r6
 80043a4:	dcf1      	bgt.n	800438a <__exponent+0x22>
 80043a6:	3130      	adds	r1, #48	; 0x30
 80043a8:	f1ae 0502 	sub.w	r5, lr, #2
 80043ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043b0:	1c44      	adds	r4, r0, #1
 80043b2:	4629      	mov	r1, r5
 80043b4:	4561      	cmp	r1, ip
 80043b6:	d30a      	bcc.n	80043ce <__exponent+0x66>
 80043b8:	f10d 0209 	add.w	r2, sp, #9
 80043bc:	eba2 020e 	sub.w	r2, r2, lr
 80043c0:	4565      	cmp	r5, ip
 80043c2:	bf88      	it	hi
 80043c4:	2200      	movhi	r2, #0
 80043c6:	4413      	add	r3, r2
 80043c8:	1a18      	subs	r0, r3, r0
 80043ca:	b003      	add	sp, #12
 80043cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043d6:	e7ed      	b.n	80043b4 <__exponent+0x4c>
 80043d8:	2330      	movs	r3, #48	; 0x30
 80043da:	3130      	adds	r1, #48	; 0x30
 80043dc:	7083      	strb	r3, [r0, #2]
 80043de:	70c1      	strb	r1, [r0, #3]
 80043e0:	1d03      	adds	r3, r0, #4
 80043e2:	e7f1      	b.n	80043c8 <__exponent+0x60>

080043e4 <_printf_float>:
 80043e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	ed2d 8b02 	vpush	{d8}
 80043ec:	b08d      	sub	sp, #52	; 0x34
 80043ee:	460c      	mov	r4, r1
 80043f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043f4:	4616      	mov	r6, r2
 80043f6:	461f      	mov	r7, r3
 80043f8:	4605      	mov	r5, r0
 80043fa:	f003 f97b 	bl	80076f4 <_localeconv_r>
 80043fe:	f8d0 a000 	ldr.w	sl, [r0]
 8004402:	4650      	mov	r0, sl
 8004404:	f7fb ff04 	bl	8000210 <strlen>
 8004408:	2300      	movs	r3, #0
 800440a:	930a      	str	r3, [sp, #40]	; 0x28
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	9305      	str	r3, [sp, #20]
 8004410:	f8d8 3000 	ldr.w	r3, [r8]
 8004414:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004418:	3307      	adds	r3, #7
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	f103 0208 	add.w	r2, r3, #8
 8004422:	f8c8 2000 	str.w	r2, [r8]
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800442e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004436:	9307      	str	r3, [sp, #28]
 8004438:	f8cd 8018 	str.w	r8, [sp, #24]
 800443c:	ee08 0a10 	vmov	s16, r0
 8004440:	4b9f      	ldr	r3, [pc, #636]	; (80046c0 <_printf_float+0x2dc>)
 8004442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	f7fc fb8f 	bl	8000b6c <__aeabi_dcmpun>
 800444e:	bb88      	cbnz	r0, 80044b4 <_printf_float+0xd0>
 8004450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004454:	4b9a      	ldr	r3, [pc, #616]	; (80046c0 <_printf_float+0x2dc>)
 8004456:	f04f 32ff 	mov.w	r2, #4294967295
 800445a:	f7fc fb69 	bl	8000b30 <__aeabi_dcmple>
 800445e:	bb48      	cbnz	r0, 80044b4 <_printf_float+0xd0>
 8004460:	2200      	movs	r2, #0
 8004462:	2300      	movs	r3, #0
 8004464:	4640      	mov	r0, r8
 8004466:	4649      	mov	r1, r9
 8004468:	f7fc fb58 	bl	8000b1c <__aeabi_dcmplt>
 800446c:	b110      	cbz	r0, 8004474 <_printf_float+0x90>
 800446e:	232d      	movs	r3, #45	; 0x2d
 8004470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004474:	4b93      	ldr	r3, [pc, #588]	; (80046c4 <_printf_float+0x2e0>)
 8004476:	4894      	ldr	r0, [pc, #592]	; (80046c8 <_printf_float+0x2e4>)
 8004478:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800447c:	bf94      	ite	ls
 800447e:	4698      	movls	r8, r3
 8004480:	4680      	movhi	r8, r0
 8004482:	2303      	movs	r3, #3
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	9b05      	ldr	r3, [sp, #20]
 8004488:	f023 0204 	bic.w	r2, r3, #4
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	f04f 0900 	mov.w	r9, #0
 8004492:	9700      	str	r7, [sp, #0]
 8004494:	4633      	mov	r3, r6
 8004496:	aa0b      	add	r2, sp, #44	; 0x2c
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f000 f9d8 	bl	8004850 <_printf_common>
 80044a0:	3001      	adds	r0, #1
 80044a2:	f040 8090 	bne.w	80045c6 <_printf_float+0x1e2>
 80044a6:	f04f 30ff 	mov.w	r0, #4294967295
 80044aa:	b00d      	add	sp, #52	; 0x34
 80044ac:	ecbd 8b02 	vpop	{d8}
 80044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fc fb56 	bl	8000b6c <__aeabi_dcmpun>
 80044c0:	b140      	cbz	r0, 80044d4 <_printf_float+0xf0>
 80044c2:	464b      	mov	r3, r9
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bfbc      	itt	lt
 80044c8:	232d      	movlt	r3, #45	; 0x2d
 80044ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044ce:	487f      	ldr	r0, [pc, #508]	; (80046cc <_printf_float+0x2e8>)
 80044d0:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <_printf_float+0x2ec>)
 80044d2:	e7d1      	b.n	8004478 <_printf_float+0x94>
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044da:	9206      	str	r2, [sp, #24]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	d13f      	bne.n	8004560 <_printf_float+0x17c>
 80044e0:	2306      	movs	r3, #6
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	9b05      	ldr	r3, [sp, #20]
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044ec:	2300      	movs	r3, #0
 80044ee:	9303      	str	r3, [sp, #12]
 80044f0:	ab0a      	add	r3, sp, #40	; 0x28
 80044f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044f6:	ab09      	add	r3, sp, #36	; 0x24
 80044f8:	ec49 8b10 	vmov	d0, r8, r9
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	6022      	str	r2, [r4, #0]
 8004500:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004504:	4628      	mov	r0, r5
 8004506:	f7ff fecd 	bl	80042a4 <__cvt>
 800450a:	9b06      	ldr	r3, [sp, #24]
 800450c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800450e:	2b47      	cmp	r3, #71	; 0x47
 8004510:	4680      	mov	r8, r0
 8004512:	d108      	bne.n	8004526 <_printf_float+0x142>
 8004514:	1cc8      	adds	r0, r1, #3
 8004516:	db02      	blt.n	800451e <_printf_float+0x13a>
 8004518:	6863      	ldr	r3, [r4, #4]
 800451a:	4299      	cmp	r1, r3
 800451c:	dd41      	ble.n	80045a2 <_printf_float+0x1be>
 800451e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004522:	fa5f fb8b 	uxtb.w	fp, fp
 8004526:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800452a:	d820      	bhi.n	800456e <_printf_float+0x18a>
 800452c:	3901      	subs	r1, #1
 800452e:	465a      	mov	r2, fp
 8004530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004534:	9109      	str	r1, [sp, #36]	; 0x24
 8004536:	f7ff ff17 	bl	8004368 <__exponent>
 800453a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800453c:	1813      	adds	r3, r2, r0
 800453e:	2a01      	cmp	r2, #1
 8004540:	4681      	mov	r9, r0
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	dc02      	bgt.n	800454c <_printf_float+0x168>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	07d2      	lsls	r2, r2, #31
 800454a:	d501      	bpl.n	8004550 <_printf_float+0x16c>
 800454c:	3301      	adds	r3, #1
 800454e:	6123      	str	r3, [r4, #16]
 8004550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004554:	2b00      	cmp	r3, #0
 8004556:	d09c      	beq.n	8004492 <_printf_float+0xae>
 8004558:	232d      	movs	r3, #45	; 0x2d
 800455a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455e:	e798      	b.n	8004492 <_printf_float+0xae>
 8004560:	9a06      	ldr	r2, [sp, #24]
 8004562:	2a47      	cmp	r2, #71	; 0x47
 8004564:	d1be      	bne.n	80044e4 <_printf_float+0x100>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1bc      	bne.n	80044e4 <_printf_float+0x100>
 800456a:	2301      	movs	r3, #1
 800456c:	e7b9      	b.n	80044e2 <_printf_float+0xfe>
 800456e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004572:	d118      	bne.n	80045a6 <_printf_float+0x1c2>
 8004574:	2900      	cmp	r1, #0
 8004576:	6863      	ldr	r3, [r4, #4]
 8004578:	dd0b      	ble.n	8004592 <_printf_float+0x1ae>
 800457a:	6121      	str	r1, [r4, #16]
 800457c:	b913      	cbnz	r3, 8004584 <_printf_float+0x1a0>
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	07d0      	lsls	r0, r2, #31
 8004582:	d502      	bpl.n	800458a <_printf_float+0x1a6>
 8004584:	3301      	adds	r3, #1
 8004586:	440b      	add	r3, r1
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	65a1      	str	r1, [r4, #88]	; 0x58
 800458c:	f04f 0900 	mov.w	r9, #0
 8004590:	e7de      	b.n	8004550 <_printf_float+0x16c>
 8004592:	b913      	cbnz	r3, 800459a <_printf_float+0x1b6>
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	07d2      	lsls	r2, r2, #31
 8004598:	d501      	bpl.n	800459e <_printf_float+0x1ba>
 800459a:	3302      	adds	r3, #2
 800459c:	e7f4      	b.n	8004588 <_printf_float+0x1a4>
 800459e:	2301      	movs	r3, #1
 80045a0:	e7f2      	b.n	8004588 <_printf_float+0x1a4>
 80045a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80045a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a8:	4299      	cmp	r1, r3
 80045aa:	db05      	blt.n	80045b8 <_printf_float+0x1d4>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	6121      	str	r1, [r4, #16]
 80045b0:	07d8      	lsls	r0, r3, #31
 80045b2:	d5ea      	bpl.n	800458a <_printf_float+0x1a6>
 80045b4:	1c4b      	adds	r3, r1, #1
 80045b6:	e7e7      	b.n	8004588 <_printf_float+0x1a4>
 80045b8:	2900      	cmp	r1, #0
 80045ba:	bfd4      	ite	le
 80045bc:	f1c1 0202 	rsble	r2, r1, #2
 80045c0:	2201      	movgt	r2, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	e7e0      	b.n	8004588 <_printf_float+0x1a4>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	055a      	lsls	r2, r3, #21
 80045ca:	d407      	bmi.n	80045dc <_printf_float+0x1f8>
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	4642      	mov	r2, r8
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	d12c      	bne.n	8004634 <_printf_float+0x250>
 80045da:	e764      	b.n	80044a6 <_printf_float+0xc2>
 80045dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045e0:	f240 80e0 	bls.w	80047a4 <_printf_float+0x3c0>
 80045e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045e8:	2200      	movs	r2, #0
 80045ea:	2300      	movs	r3, #0
 80045ec:	f7fc fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d034      	beq.n	800465e <_printf_float+0x27a>
 80045f4:	4a37      	ldr	r2, [pc, #220]	; (80046d4 <_printf_float+0x2f0>)
 80045f6:	2301      	movs	r3, #1
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af51 	beq.w	80044a6 <_printf_float+0xc2>
 8004604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004608:	429a      	cmp	r2, r3
 800460a:	db02      	blt.n	8004612 <_printf_float+0x22e>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	07d8      	lsls	r0, r3, #31
 8004610:	d510      	bpl.n	8004634 <_printf_float+0x250>
 8004612:	ee18 3a10 	vmov	r3, s16
 8004616:	4652      	mov	r2, sl
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f af41 	beq.w	80044a6 <_printf_float+0xc2>
 8004624:	f04f 0800 	mov.w	r8, #0
 8004628:	f104 091a 	add.w	r9, r4, #26
 800462c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	4543      	cmp	r3, r8
 8004632:	dc09      	bgt.n	8004648 <_printf_float+0x264>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	079b      	lsls	r3, r3, #30
 8004638:	f100 8105 	bmi.w	8004846 <_printf_float+0x462>
 800463c:	68e0      	ldr	r0, [r4, #12]
 800463e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004640:	4298      	cmp	r0, r3
 8004642:	bfb8      	it	lt
 8004644:	4618      	movlt	r0, r3
 8004646:	e730      	b.n	80044aa <_printf_float+0xc6>
 8004648:	2301      	movs	r3, #1
 800464a:	464a      	mov	r2, r9
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f af27 	beq.w	80044a6 <_printf_float+0xc2>
 8004658:	f108 0801 	add.w	r8, r8, #1
 800465c:	e7e6      	b.n	800462c <_printf_float+0x248>
 800465e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004660:	2b00      	cmp	r3, #0
 8004662:	dc39      	bgt.n	80046d8 <_printf_float+0x2f4>
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <_printf_float+0x2f0>)
 8004666:	2301      	movs	r3, #1
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	47b8      	blx	r7
 800466e:	3001      	adds	r0, #1
 8004670:	f43f af19 	beq.w	80044a6 <_printf_float+0xc2>
 8004674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004678:	4313      	orrs	r3, r2
 800467a:	d102      	bne.n	8004682 <_printf_float+0x29e>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	07d9      	lsls	r1, r3, #31
 8004680:	d5d8      	bpl.n	8004634 <_printf_float+0x250>
 8004682:	ee18 3a10 	vmov	r3, s16
 8004686:	4652      	mov	r2, sl
 8004688:	4631      	mov	r1, r6
 800468a:	4628      	mov	r0, r5
 800468c:	47b8      	blx	r7
 800468e:	3001      	adds	r0, #1
 8004690:	f43f af09 	beq.w	80044a6 <_printf_float+0xc2>
 8004694:	f04f 0900 	mov.w	r9, #0
 8004698:	f104 0a1a 	add.w	sl, r4, #26
 800469c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469e:	425b      	negs	r3, r3
 80046a0:	454b      	cmp	r3, r9
 80046a2:	dc01      	bgt.n	80046a8 <_printf_float+0x2c4>
 80046a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a6:	e792      	b.n	80045ce <_printf_float+0x1ea>
 80046a8:	2301      	movs	r3, #1
 80046aa:	4652      	mov	r2, sl
 80046ac:	4631      	mov	r1, r6
 80046ae:	4628      	mov	r0, r5
 80046b0:	47b8      	blx	r7
 80046b2:	3001      	adds	r0, #1
 80046b4:	f43f aef7 	beq.w	80044a6 <_printf_float+0xc2>
 80046b8:	f109 0901 	add.w	r9, r9, #1
 80046bc:	e7ee      	b.n	800469c <_printf_float+0x2b8>
 80046be:	bf00      	nop
 80046c0:	7fefffff 	.word	0x7fefffff
 80046c4:	08008fc0 	.word	0x08008fc0
 80046c8:	08008fc4 	.word	0x08008fc4
 80046cc:	08008fcc 	.word	0x08008fcc
 80046d0:	08008fc8 	.word	0x08008fc8
 80046d4:	08008fd0 	.word	0x08008fd0
 80046d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046dc:	429a      	cmp	r2, r3
 80046de:	bfa8      	it	ge
 80046e0:	461a      	movge	r2, r3
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	4691      	mov	r9, r2
 80046e6:	dc37      	bgt.n	8004758 <_printf_float+0x374>
 80046e8:	f04f 0b00 	mov.w	fp, #0
 80046ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046f0:	f104 021a 	add.w	r2, r4, #26
 80046f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046f6:	9305      	str	r3, [sp, #20]
 80046f8:	eba3 0309 	sub.w	r3, r3, r9
 80046fc:	455b      	cmp	r3, fp
 80046fe:	dc33      	bgt.n	8004768 <_printf_float+0x384>
 8004700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004704:	429a      	cmp	r2, r3
 8004706:	db3b      	blt.n	8004780 <_printf_float+0x39c>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	07da      	lsls	r2, r3, #31
 800470c:	d438      	bmi.n	8004780 <_printf_float+0x39c>
 800470e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004710:	9b05      	ldr	r3, [sp, #20]
 8004712:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	eba2 0901 	sub.w	r9, r2, r1
 800471a:	4599      	cmp	r9, r3
 800471c:	bfa8      	it	ge
 800471e:	4699      	movge	r9, r3
 8004720:	f1b9 0f00 	cmp.w	r9, #0
 8004724:	dc35      	bgt.n	8004792 <_printf_float+0x3ae>
 8004726:	f04f 0800 	mov.w	r8, #0
 800472a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800472e:	f104 0a1a 	add.w	sl, r4, #26
 8004732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	eba3 0309 	sub.w	r3, r3, r9
 800473c:	4543      	cmp	r3, r8
 800473e:	f77f af79 	ble.w	8004634 <_printf_float+0x250>
 8004742:	2301      	movs	r3, #1
 8004744:	4652      	mov	r2, sl
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	f43f aeaa 	beq.w	80044a6 <_printf_float+0xc2>
 8004752:	f108 0801 	add.w	r8, r8, #1
 8004756:	e7ec      	b.n	8004732 <_printf_float+0x34e>
 8004758:	4613      	mov	r3, r2
 800475a:	4631      	mov	r1, r6
 800475c:	4642      	mov	r2, r8
 800475e:	4628      	mov	r0, r5
 8004760:	47b8      	blx	r7
 8004762:	3001      	adds	r0, #1
 8004764:	d1c0      	bne.n	80046e8 <_printf_float+0x304>
 8004766:	e69e      	b.n	80044a6 <_printf_float+0xc2>
 8004768:	2301      	movs	r3, #1
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	9205      	str	r2, [sp, #20]
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f ae97 	beq.w	80044a6 <_printf_float+0xc2>
 8004778:	9a05      	ldr	r2, [sp, #20]
 800477a:	f10b 0b01 	add.w	fp, fp, #1
 800477e:	e7b9      	b.n	80046f4 <_printf_float+0x310>
 8004780:	ee18 3a10 	vmov	r3, s16
 8004784:	4652      	mov	r2, sl
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	d1be      	bne.n	800470e <_printf_float+0x32a>
 8004790:	e689      	b.n	80044a6 <_printf_float+0xc2>
 8004792:	9a05      	ldr	r2, [sp, #20]
 8004794:	464b      	mov	r3, r9
 8004796:	4442      	add	r2, r8
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	47b8      	blx	r7
 800479e:	3001      	adds	r0, #1
 80047a0:	d1c1      	bne.n	8004726 <_printf_float+0x342>
 80047a2:	e680      	b.n	80044a6 <_printf_float+0xc2>
 80047a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047a6:	2a01      	cmp	r2, #1
 80047a8:	dc01      	bgt.n	80047ae <_printf_float+0x3ca>
 80047aa:	07db      	lsls	r3, r3, #31
 80047ac:	d538      	bpl.n	8004820 <_printf_float+0x43c>
 80047ae:	2301      	movs	r3, #1
 80047b0:	4642      	mov	r2, r8
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f ae74 	beq.w	80044a6 <_printf_float+0xc2>
 80047be:	ee18 3a10 	vmov	r3, s16
 80047c2:	4652      	mov	r2, sl
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	f43f ae6b 	beq.w	80044a6 <_printf_float+0xc2>
 80047d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047d4:	2200      	movs	r2, #0
 80047d6:	2300      	movs	r3, #0
 80047d8:	f7fc f996 	bl	8000b08 <__aeabi_dcmpeq>
 80047dc:	b9d8      	cbnz	r0, 8004816 <_printf_float+0x432>
 80047de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e0:	f108 0201 	add.w	r2, r8, #1
 80047e4:	3b01      	subs	r3, #1
 80047e6:	4631      	mov	r1, r6
 80047e8:	4628      	mov	r0, r5
 80047ea:	47b8      	blx	r7
 80047ec:	3001      	adds	r0, #1
 80047ee:	d10e      	bne.n	800480e <_printf_float+0x42a>
 80047f0:	e659      	b.n	80044a6 <_printf_float+0xc2>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b8      	blx	r7
 80047fc:	3001      	adds	r0, #1
 80047fe:	f43f ae52 	beq.w	80044a6 <_printf_float+0xc2>
 8004802:	f108 0801 	add.w	r8, r8, #1
 8004806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004808:	3b01      	subs	r3, #1
 800480a:	4543      	cmp	r3, r8
 800480c:	dcf1      	bgt.n	80047f2 <_printf_float+0x40e>
 800480e:	464b      	mov	r3, r9
 8004810:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004814:	e6dc      	b.n	80045d0 <_printf_float+0x1ec>
 8004816:	f04f 0800 	mov.w	r8, #0
 800481a:	f104 0a1a 	add.w	sl, r4, #26
 800481e:	e7f2      	b.n	8004806 <_printf_float+0x422>
 8004820:	2301      	movs	r3, #1
 8004822:	4642      	mov	r2, r8
 8004824:	e7df      	b.n	80047e6 <_printf_float+0x402>
 8004826:	2301      	movs	r3, #1
 8004828:	464a      	mov	r2, r9
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f ae38 	beq.w	80044a6 <_printf_float+0xc2>
 8004836:	f108 0801 	add.w	r8, r8, #1
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800483e:	1a5b      	subs	r3, r3, r1
 8004840:	4543      	cmp	r3, r8
 8004842:	dcf0      	bgt.n	8004826 <_printf_float+0x442>
 8004844:	e6fa      	b.n	800463c <_printf_float+0x258>
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	f104 0919 	add.w	r9, r4, #25
 800484e:	e7f4      	b.n	800483a <_printf_float+0x456>

08004850 <_printf_common>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	4616      	mov	r6, r2
 8004856:	4699      	mov	r9, r3
 8004858:	688a      	ldr	r2, [r1, #8]
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	4293      	cmp	r3, r2
 8004862:	bfb8      	it	lt
 8004864:	4613      	movlt	r3, r2
 8004866:	6033      	str	r3, [r6, #0]
 8004868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486c:	4607      	mov	r7, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b10a      	cbz	r2, 8004876 <_printf_common+0x26>
 8004872:	3301      	adds	r3, #1
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	0699      	lsls	r1, r3, #26
 800487a:	bf42      	ittt	mi
 800487c:	6833      	ldrmi	r3, [r6, #0]
 800487e:	3302      	addmi	r3, #2
 8004880:	6033      	strmi	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	f015 0506 	ands.w	r5, r5, #6
 8004888:	d106      	bne.n	8004898 <_printf_common+0x48>
 800488a:	f104 0a19 	add.w	sl, r4, #25
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	6832      	ldr	r2, [r6, #0]
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	42ab      	cmp	r3, r5
 8004896:	dc26      	bgt.n	80048e6 <_printf_common+0x96>
 8004898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800489c:	1e13      	subs	r3, r2, #0
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	0692      	lsls	r2, r2, #26
 80048a6:	d42b      	bmi.n	8004900 <_printf_common+0xb0>
 80048a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ac:	4649      	mov	r1, r9
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c0      	blx	r8
 80048b2:	3001      	adds	r0, #1
 80048b4:	d01e      	beq.n	80048f4 <_printf_common+0xa4>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	68e5      	ldr	r5, [r4, #12]
 80048ba:	6832      	ldr	r2, [r6, #0]
 80048bc:	f003 0306 	and.w	r3, r3, #6
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	bf08      	it	eq
 80048c4:	1aad      	subeq	r5, r5, r2
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	6922      	ldr	r2, [r4, #16]
 80048ca:	bf0c      	ite	eq
 80048cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d0:	2500      	movne	r5, #0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfc4      	itt	gt
 80048d6:	1a9b      	subgt	r3, r3, r2
 80048d8:	18ed      	addgt	r5, r5, r3
 80048da:	2600      	movs	r6, #0
 80048dc:	341a      	adds	r4, #26
 80048de:	42b5      	cmp	r5, r6
 80048e0:	d11a      	bne.n	8004918 <_printf_common+0xc8>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e008      	b.n	80048f8 <_printf_common+0xa8>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	4649      	mov	r1, r9
 80048ec:	4638      	mov	r0, r7
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d103      	bne.n	80048fc <_printf_common+0xac>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7c6      	b.n	800488e <_printf_common+0x3e>
 8004900:	18e1      	adds	r1, r4, r3
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	2030      	movs	r0, #48	; 0x30
 8004906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800490a:	4422      	add	r2, r4
 800490c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004914:	3302      	adds	r3, #2
 8004916:	e7c7      	b.n	80048a8 <_printf_common+0x58>
 8004918:	2301      	movs	r3, #1
 800491a:	4622      	mov	r2, r4
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e6      	beq.n	80048f4 <_printf_common+0xa4>
 8004926:	3601      	adds	r6, #1
 8004928:	e7d9      	b.n	80048de <_printf_common+0x8e>
	...

0800492c <_printf_i>:
 800492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	460c      	mov	r4, r1
 8004932:	4691      	mov	r9, r2
 8004934:	7e27      	ldrb	r7, [r4, #24]
 8004936:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004938:	2f78      	cmp	r7, #120	; 0x78
 800493a:	4680      	mov	r8, r0
 800493c:	469a      	mov	sl, r3
 800493e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004942:	d807      	bhi.n	8004954 <_printf_i+0x28>
 8004944:	2f62      	cmp	r7, #98	; 0x62
 8004946:	d80a      	bhi.n	800495e <_printf_i+0x32>
 8004948:	2f00      	cmp	r7, #0
 800494a:	f000 80d8 	beq.w	8004afe <_printf_i+0x1d2>
 800494e:	2f58      	cmp	r7, #88	; 0x58
 8004950:	f000 80a3 	beq.w	8004a9a <_printf_i+0x16e>
 8004954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800495c:	e03a      	b.n	80049d4 <_printf_i+0xa8>
 800495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004962:	2b15      	cmp	r3, #21
 8004964:	d8f6      	bhi.n	8004954 <_printf_i+0x28>
 8004966:	a001      	add	r0, pc, #4	; (adr r0, 800496c <_printf_i+0x40>)
 8004968:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004955 	.word	0x08004955
 8004978:	08004955 	.word	0x08004955
 800497c:	08004955 	.word	0x08004955
 8004980:	08004955 	.word	0x08004955
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004955 	.word	0x08004955
 800498c:	08004955 	.word	0x08004955
 8004990:	08004955 	.word	0x08004955
 8004994:	08004955 	.word	0x08004955
 8004998:	08004ae5 	.word	0x08004ae5
 800499c:	08004a09 	.word	0x08004a09
 80049a0:	08004ac7 	.word	0x08004ac7
 80049a4:	08004955 	.word	0x08004955
 80049a8:	08004955 	.word	0x08004955
 80049ac:	08004b07 	.word	0x08004b07
 80049b0:	08004955 	.word	0x08004955
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004955 	.word	0x08004955
 80049bc:	08004955 	.word	0x08004955
 80049c0:	08004acf 	.word	0x08004acf
 80049c4:	680b      	ldr	r3, [r1, #0]
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	600a      	str	r2, [r1, #0]
 80049cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0a3      	b.n	8004b20 <_printf_i+0x1f4>
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	6808      	ldr	r0, [r1, #0]
 80049dc:	062e      	lsls	r6, r5, #24
 80049de:	f100 0304 	add.w	r3, r0, #4
 80049e2:	d50a      	bpl.n	80049fa <_printf_i+0xce>
 80049e4:	6805      	ldr	r5, [r0, #0]
 80049e6:	600b      	str	r3, [r1, #0]
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	da03      	bge.n	80049f4 <_printf_i+0xc8>
 80049ec:	232d      	movs	r3, #45	; 0x2d
 80049ee:	426d      	negs	r5, r5
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f4:	485e      	ldr	r0, [pc, #376]	; (8004b70 <_printf_i+0x244>)
 80049f6:	230a      	movs	r3, #10
 80049f8:	e019      	b.n	8004a2e <_printf_i+0x102>
 80049fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049fe:	6805      	ldr	r5, [r0, #0]
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	bf18      	it	ne
 8004a04:	b22d      	sxthne	r5, r5
 8004a06:	e7ef      	b.n	80049e8 <_printf_i+0xbc>
 8004a08:	680b      	ldr	r3, [r1, #0]
 8004a0a:	6825      	ldr	r5, [r4, #0]
 8004a0c:	1d18      	adds	r0, r3, #4
 8004a0e:	6008      	str	r0, [r1, #0]
 8004a10:	0628      	lsls	r0, r5, #24
 8004a12:	d501      	bpl.n	8004a18 <_printf_i+0xec>
 8004a14:	681d      	ldr	r5, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <_printf_i+0xf2>
 8004a18:	0669      	lsls	r1, r5, #25
 8004a1a:	d5fb      	bpl.n	8004a14 <_printf_i+0xe8>
 8004a1c:	881d      	ldrh	r5, [r3, #0]
 8004a1e:	4854      	ldr	r0, [pc, #336]	; (8004b70 <_printf_i+0x244>)
 8004a20:	2f6f      	cmp	r7, #111	; 0x6f
 8004a22:	bf0c      	ite	eq
 8004a24:	2308      	moveq	r3, #8
 8004a26:	230a      	movne	r3, #10
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2e:	6866      	ldr	r6, [r4, #4]
 8004a30:	60a6      	str	r6, [r4, #8]
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	bfa2      	ittt	ge
 8004a36:	6821      	ldrge	r1, [r4, #0]
 8004a38:	f021 0104 	bicge.w	r1, r1, #4
 8004a3c:	6021      	strge	r1, [r4, #0]
 8004a3e:	b90d      	cbnz	r5, 8004a44 <_printf_i+0x118>
 8004a40:	2e00      	cmp	r6, #0
 8004a42:	d04d      	beq.n	8004ae0 <_printf_i+0x1b4>
 8004a44:	4616      	mov	r6, r2
 8004a46:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a4a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a4e:	5dc7      	ldrb	r7, [r0, r7]
 8004a50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a54:	462f      	mov	r7, r5
 8004a56:	42bb      	cmp	r3, r7
 8004a58:	460d      	mov	r5, r1
 8004a5a:	d9f4      	bls.n	8004a46 <_printf_i+0x11a>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10b      	bne.n	8004a78 <_printf_i+0x14c>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	07df      	lsls	r7, r3, #31
 8004a64:	d508      	bpl.n	8004a78 <_printf_i+0x14c>
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	6861      	ldr	r1, [r4, #4]
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	bfde      	ittt	le
 8004a6e:	2330      	movle	r3, #48	; 0x30
 8004a70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a78:	1b92      	subs	r2, r2, r6
 8004a7a:	6122      	str	r2, [r4, #16]
 8004a7c:	f8cd a000 	str.w	sl, [sp]
 8004a80:	464b      	mov	r3, r9
 8004a82:	aa03      	add	r2, sp, #12
 8004a84:	4621      	mov	r1, r4
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff fee2 	bl	8004850 <_printf_common>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d14c      	bne.n	8004b2a <_printf_i+0x1fe>
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	b004      	add	sp, #16
 8004a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9a:	4835      	ldr	r0, [pc, #212]	; (8004b70 <_printf_i+0x244>)
 8004a9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	680e      	ldr	r6, [r1, #0]
 8004aa4:	061f      	lsls	r7, r3, #24
 8004aa6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004aaa:	600e      	str	r6, [r1, #0]
 8004aac:	d514      	bpl.n	8004ad8 <_printf_i+0x1ac>
 8004aae:	07d9      	lsls	r1, r3, #31
 8004ab0:	bf44      	itt	mi
 8004ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab6:	6023      	strmi	r3, [r4, #0]
 8004ab8:	b91d      	cbnz	r5, 8004ac2 <_printf_i+0x196>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f023 0320 	bic.w	r3, r3, #32
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	e7b0      	b.n	8004a28 <_printf_i+0xfc>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f043 0320 	orr.w	r3, r3, #32
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	2378      	movs	r3, #120	; 0x78
 8004ad0:	4828      	ldr	r0, [pc, #160]	; (8004b74 <_printf_i+0x248>)
 8004ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ad6:	e7e3      	b.n	8004aa0 <_printf_i+0x174>
 8004ad8:	065e      	lsls	r6, r3, #25
 8004ada:	bf48      	it	mi
 8004adc:	b2ad      	uxthmi	r5, r5
 8004ade:	e7e6      	b.n	8004aae <_printf_i+0x182>
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	e7bb      	b.n	8004a5c <_printf_i+0x130>
 8004ae4:	680b      	ldr	r3, [r1, #0]
 8004ae6:	6826      	ldr	r6, [r4, #0]
 8004ae8:	6960      	ldr	r0, [r4, #20]
 8004aea:	1d1d      	adds	r5, r3, #4
 8004aec:	600d      	str	r5, [r1, #0]
 8004aee:	0635      	lsls	r5, r6, #24
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	d501      	bpl.n	8004af8 <_printf_i+0x1cc>
 8004af4:	6018      	str	r0, [r3, #0]
 8004af6:	e002      	b.n	8004afe <_printf_i+0x1d2>
 8004af8:	0671      	lsls	r1, r6, #25
 8004afa:	d5fb      	bpl.n	8004af4 <_printf_i+0x1c8>
 8004afc:	8018      	strh	r0, [r3, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	4616      	mov	r6, r2
 8004b04:	e7ba      	b.n	8004a7c <_printf_i+0x150>
 8004b06:	680b      	ldr	r3, [r1, #0]
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	600a      	str	r2, [r1, #0]
 8004b0c:	681e      	ldr	r6, [r3, #0]
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7fb fb84 	bl	8000220 <memchr>
 8004b18:	b108      	cbz	r0, 8004b1e <_printf_i+0x1f2>
 8004b1a:	1b80      	subs	r0, r0, r6
 8004b1c:	6060      	str	r0, [r4, #4]
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	2300      	movs	r3, #0
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	e7a8      	b.n	8004a7c <_printf_i+0x150>
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	47d0      	blx	sl
 8004b34:	3001      	adds	r0, #1
 8004b36:	d0ab      	beq.n	8004a90 <_printf_i+0x164>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	079b      	lsls	r3, r3, #30
 8004b3c:	d413      	bmi.n	8004b66 <_printf_i+0x23a>
 8004b3e:	68e0      	ldr	r0, [r4, #12]
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	4298      	cmp	r0, r3
 8004b44:	bfb8      	it	lt
 8004b46:	4618      	movlt	r0, r3
 8004b48:	e7a4      	b.n	8004a94 <_printf_i+0x168>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d09b      	beq.n	8004a90 <_printf_i+0x164>
 8004b58:	3501      	adds	r5, #1
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	9903      	ldr	r1, [sp, #12]
 8004b5e:	1a5b      	subs	r3, r3, r1
 8004b60:	42ab      	cmp	r3, r5
 8004b62:	dcf2      	bgt.n	8004b4a <_printf_i+0x21e>
 8004b64:	e7eb      	b.n	8004b3e <_printf_i+0x212>
 8004b66:	2500      	movs	r5, #0
 8004b68:	f104 0619 	add.w	r6, r4, #25
 8004b6c:	e7f5      	b.n	8004b5a <_printf_i+0x22e>
 8004b6e:	bf00      	nop
 8004b70:	08008fd2 	.word	0x08008fd2
 8004b74:	08008fe3 	.word	0x08008fe3

08004b78 <_scanf_float>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	4617      	mov	r7, r2
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	688b      	ldr	r3, [r1, #8]
 8004b84:	1e5a      	subs	r2, r3, #1
 8004b86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b8a:	bf83      	ittte	hi
 8004b8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004b90:	195b      	addhi	r3, r3, r5
 8004b92:	9302      	strhi	r3, [sp, #8]
 8004b94:	2300      	movls	r3, #0
 8004b96:	bf86      	itte	hi
 8004b98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b9c:	608b      	strhi	r3, [r1, #8]
 8004b9e:	9302      	strls	r3, [sp, #8]
 8004ba0:	680b      	ldr	r3, [r1, #0]
 8004ba2:	468b      	mov	fp, r1
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004baa:	f84b 3b1c 	str.w	r3, [fp], #28
 8004bae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004bb2:	4680      	mov	r8, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	465e      	mov	r6, fp
 8004bb8:	46aa      	mov	sl, r5
 8004bba:	46a9      	mov	r9, r5
 8004bbc:	9501      	str	r5, [sp, #4]
 8004bbe:	68a2      	ldr	r2, [r4, #8]
 8004bc0:	b152      	cbz	r2, 8004bd8 <_scanf_float+0x60>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b4e      	cmp	r3, #78	; 0x4e
 8004bc8:	d864      	bhi.n	8004c94 <_scanf_float+0x11c>
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d83c      	bhi.n	8004c48 <_scanf_float+0xd0>
 8004bce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004bd2:	b2c8      	uxtb	r0, r1
 8004bd4:	280e      	cmp	r0, #14
 8004bd6:	d93a      	bls.n	8004c4e <_scanf_float+0xd6>
 8004bd8:	f1b9 0f00 	cmp.w	r9, #0
 8004bdc:	d003      	beq.n	8004be6 <_scanf_float+0x6e>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bea:	f1ba 0f01 	cmp.w	sl, #1
 8004bee:	f200 8113 	bhi.w	8004e18 <_scanf_float+0x2a0>
 8004bf2:	455e      	cmp	r6, fp
 8004bf4:	f200 8105 	bhi.w	8004e02 <_scanf_float+0x28a>
 8004bf8:	2501      	movs	r5, #1
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	b007      	add	sp, #28
 8004bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c06:	2a0d      	cmp	r2, #13
 8004c08:	d8e6      	bhi.n	8004bd8 <_scanf_float+0x60>
 8004c0a:	a101      	add	r1, pc, #4	; (adr r1, 8004c10 <_scanf_float+0x98>)
 8004c0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c10:	08004d4f 	.word	0x08004d4f
 8004c14:	08004bd9 	.word	0x08004bd9
 8004c18:	08004bd9 	.word	0x08004bd9
 8004c1c:	08004bd9 	.word	0x08004bd9
 8004c20:	08004daf 	.word	0x08004daf
 8004c24:	08004d87 	.word	0x08004d87
 8004c28:	08004bd9 	.word	0x08004bd9
 8004c2c:	08004bd9 	.word	0x08004bd9
 8004c30:	08004d5d 	.word	0x08004d5d
 8004c34:	08004bd9 	.word	0x08004bd9
 8004c38:	08004bd9 	.word	0x08004bd9
 8004c3c:	08004bd9 	.word	0x08004bd9
 8004c40:	08004bd9 	.word	0x08004bd9
 8004c44:	08004d15 	.word	0x08004d15
 8004c48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c4c:	e7db      	b.n	8004c06 <_scanf_float+0x8e>
 8004c4e:	290e      	cmp	r1, #14
 8004c50:	d8c2      	bhi.n	8004bd8 <_scanf_float+0x60>
 8004c52:	a001      	add	r0, pc, #4	; (adr r0, 8004c58 <_scanf_float+0xe0>)
 8004c54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c58:	08004d07 	.word	0x08004d07
 8004c5c:	08004bd9 	.word	0x08004bd9
 8004c60:	08004d07 	.word	0x08004d07
 8004c64:	08004d9b 	.word	0x08004d9b
 8004c68:	08004bd9 	.word	0x08004bd9
 8004c6c:	08004cb5 	.word	0x08004cb5
 8004c70:	08004cf1 	.word	0x08004cf1
 8004c74:	08004cf1 	.word	0x08004cf1
 8004c78:	08004cf1 	.word	0x08004cf1
 8004c7c:	08004cf1 	.word	0x08004cf1
 8004c80:	08004cf1 	.word	0x08004cf1
 8004c84:	08004cf1 	.word	0x08004cf1
 8004c88:	08004cf1 	.word	0x08004cf1
 8004c8c:	08004cf1 	.word	0x08004cf1
 8004c90:	08004cf1 	.word	0x08004cf1
 8004c94:	2b6e      	cmp	r3, #110	; 0x6e
 8004c96:	d809      	bhi.n	8004cac <_scanf_float+0x134>
 8004c98:	2b60      	cmp	r3, #96	; 0x60
 8004c9a:	d8b2      	bhi.n	8004c02 <_scanf_float+0x8a>
 8004c9c:	2b54      	cmp	r3, #84	; 0x54
 8004c9e:	d077      	beq.n	8004d90 <_scanf_float+0x218>
 8004ca0:	2b59      	cmp	r3, #89	; 0x59
 8004ca2:	d199      	bne.n	8004bd8 <_scanf_float+0x60>
 8004ca4:	2d07      	cmp	r5, #7
 8004ca6:	d197      	bne.n	8004bd8 <_scanf_float+0x60>
 8004ca8:	2508      	movs	r5, #8
 8004caa:	e029      	b.n	8004d00 <_scanf_float+0x188>
 8004cac:	2b74      	cmp	r3, #116	; 0x74
 8004cae:	d06f      	beq.n	8004d90 <_scanf_float+0x218>
 8004cb0:	2b79      	cmp	r3, #121	; 0x79
 8004cb2:	e7f6      	b.n	8004ca2 <_scanf_float+0x12a>
 8004cb4:	6821      	ldr	r1, [r4, #0]
 8004cb6:	05c8      	lsls	r0, r1, #23
 8004cb8:	d51a      	bpl.n	8004cf0 <_scanf_float+0x178>
 8004cba:	9b02      	ldr	r3, [sp, #8]
 8004cbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004cc0:	6021      	str	r1, [r4, #0]
 8004cc2:	f109 0901 	add.w	r9, r9, #1
 8004cc6:	b11b      	cbz	r3, 8004cd0 <_scanf_float+0x158>
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	3201      	adds	r2, #1
 8004ccc:	9302      	str	r3, [sp, #8]
 8004cce:	60a2      	str	r2, [r4, #8]
 8004cd0:	68a3      	ldr	r3, [r4, #8]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	f340 8084 	ble.w	8004df0 <_scanf_float+0x278>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	e766      	b.n	8004bbe <_scanf_float+0x46>
 8004cf0:	eb1a 0f05 	cmn.w	sl, r5
 8004cf4:	f47f af70 	bne.w	8004bd8 <_scanf_float+0x60>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004cfe:	6022      	str	r2, [r4, #0]
 8004d00:	f806 3b01 	strb.w	r3, [r6], #1
 8004d04:	e7e4      	b.n	8004cd0 <_scanf_float+0x158>
 8004d06:	6822      	ldr	r2, [r4, #0]
 8004d08:	0610      	lsls	r0, r2, #24
 8004d0a:	f57f af65 	bpl.w	8004bd8 <_scanf_float+0x60>
 8004d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d12:	e7f4      	b.n	8004cfe <_scanf_float+0x186>
 8004d14:	f1ba 0f00 	cmp.w	sl, #0
 8004d18:	d10e      	bne.n	8004d38 <_scanf_float+0x1c0>
 8004d1a:	f1b9 0f00 	cmp.w	r9, #0
 8004d1e:	d10e      	bne.n	8004d3e <_scanf_float+0x1c6>
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d2a:	d108      	bne.n	8004d3e <_scanf_float+0x1c6>
 8004d2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	f04f 0a01 	mov.w	sl, #1
 8004d36:	e7e3      	b.n	8004d00 <_scanf_float+0x188>
 8004d38:	f1ba 0f02 	cmp.w	sl, #2
 8004d3c:	d055      	beq.n	8004dea <_scanf_float+0x272>
 8004d3e:	2d01      	cmp	r5, #1
 8004d40:	d002      	beq.n	8004d48 <_scanf_float+0x1d0>
 8004d42:	2d04      	cmp	r5, #4
 8004d44:	f47f af48 	bne.w	8004bd8 <_scanf_float+0x60>
 8004d48:	3501      	adds	r5, #1
 8004d4a:	b2ed      	uxtb	r5, r5
 8004d4c:	e7d8      	b.n	8004d00 <_scanf_float+0x188>
 8004d4e:	f1ba 0f01 	cmp.w	sl, #1
 8004d52:	f47f af41 	bne.w	8004bd8 <_scanf_float+0x60>
 8004d56:	f04f 0a02 	mov.w	sl, #2
 8004d5a:	e7d1      	b.n	8004d00 <_scanf_float+0x188>
 8004d5c:	b97d      	cbnz	r5, 8004d7e <_scanf_float+0x206>
 8004d5e:	f1b9 0f00 	cmp.w	r9, #0
 8004d62:	f47f af3c 	bne.w	8004bde <_scanf_float+0x66>
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d70:	f47f af39 	bne.w	8004be6 <_scanf_float+0x6e>
 8004d74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d78:	6022      	str	r2, [r4, #0]
 8004d7a:	2501      	movs	r5, #1
 8004d7c:	e7c0      	b.n	8004d00 <_scanf_float+0x188>
 8004d7e:	2d03      	cmp	r5, #3
 8004d80:	d0e2      	beq.n	8004d48 <_scanf_float+0x1d0>
 8004d82:	2d05      	cmp	r5, #5
 8004d84:	e7de      	b.n	8004d44 <_scanf_float+0x1cc>
 8004d86:	2d02      	cmp	r5, #2
 8004d88:	f47f af26 	bne.w	8004bd8 <_scanf_float+0x60>
 8004d8c:	2503      	movs	r5, #3
 8004d8e:	e7b7      	b.n	8004d00 <_scanf_float+0x188>
 8004d90:	2d06      	cmp	r5, #6
 8004d92:	f47f af21 	bne.w	8004bd8 <_scanf_float+0x60>
 8004d96:	2507      	movs	r5, #7
 8004d98:	e7b2      	b.n	8004d00 <_scanf_float+0x188>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	0591      	lsls	r1, r2, #22
 8004d9e:	f57f af1b 	bpl.w	8004bd8 <_scanf_float+0x60>
 8004da2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004da6:	6022      	str	r2, [r4, #0]
 8004da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004dac:	e7a8      	b.n	8004d00 <_scanf_float+0x188>
 8004dae:	6822      	ldr	r2, [r4, #0]
 8004db0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004db4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004db8:	d006      	beq.n	8004dc8 <_scanf_float+0x250>
 8004dba:	0550      	lsls	r0, r2, #21
 8004dbc:	f57f af0c 	bpl.w	8004bd8 <_scanf_float+0x60>
 8004dc0:	f1b9 0f00 	cmp.w	r9, #0
 8004dc4:	f43f af0f 	beq.w	8004be6 <_scanf_float+0x6e>
 8004dc8:	0591      	lsls	r1, r2, #22
 8004dca:	bf58      	it	pl
 8004dcc:	9901      	ldrpl	r1, [sp, #4]
 8004dce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dd2:	bf58      	it	pl
 8004dd4:	eba9 0101 	subpl.w	r1, r9, r1
 8004dd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004ddc:	bf58      	it	pl
 8004dde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004de2:	6022      	str	r2, [r4, #0]
 8004de4:	f04f 0900 	mov.w	r9, #0
 8004de8:	e78a      	b.n	8004d00 <_scanf_float+0x188>
 8004dea:	f04f 0a03 	mov.w	sl, #3
 8004dee:	e787      	b.n	8004d00 <_scanf_float+0x188>
 8004df0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004df4:	4639      	mov	r1, r7
 8004df6:	4640      	mov	r0, r8
 8004df8:	4798      	blx	r3
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f43f aedf 	beq.w	8004bbe <_scanf_float+0x46>
 8004e00:	e6ea      	b.n	8004bd8 <_scanf_float+0x60>
 8004e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e0a:	463a      	mov	r2, r7
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	4798      	blx	r3
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	6123      	str	r3, [r4, #16]
 8004e16:	e6ec      	b.n	8004bf2 <_scanf_float+0x7a>
 8004e18:	1e6b      	subs	r3, r5, #1
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d825      	bhi.n	8004e6a <_scanf_float+0x2f2>
 8004e1e:	2d02      	cmp	r5, #2
 8004e20:	d836      	bhi.n	8004e90 <_scanf_float+0x318>
 8004e22:	455e      	cmp	r6, fp
 8004e24:	f67f aee8 	bls.w	8004bf8 <_scanf_float+0x80>
 8004e28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e30:	463a      	mov	r2, r7
 8004e32:	4640      	mov	r0, r8
 8004e34:	4798      	blx	r3
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	e7f1      	b.n	8004e22 <_scanf_float+0x2aa>
 8004e3e:	9802      	ldr	r0, [sp, #8]
 8004e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004e48:	9002      	str	r0, [sp, #8]
 8004e4a:	463a      	mov	r2, r7
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4798      	blx	r3
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e5a:	fa5f fa8a 	uxtb.w	sl, sl
 8004e5e:	f1ba 0f02 	cmp.w	sl, #2
 8004e62:	d1ec      	bne.n	8004e3e <_scanf_float+0x2c6>
 8004e64:	3d03      	subs	r5, #3
 8004e66:	b2ed      	uxtb	r5, r5
 8004e68:	1b76      	subs	r6, r6, r5
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	05da      	lsls	r2, r3, #23
 8004e6e:	d52f      	bpl.n	8004ed0 <_scanf_float+0x358>
 8004e70:	055b      	lsls	r3, r3, #21
 8004e72:	d510      	bpl.n	8004e96 <_scanf_float+0x31e>
 8004e74:	455e      	cmp	r6, fp
 8004e76:	f67f aebf 	bls.w	8004bf8 <_scanf_float+0x80>
 8004e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e82:	463a      	mov	r2, r7
 8004e84:	4640      	mov	r0, r8
 8004e86:	4798      	blx	r3
 8004e88:	6923      	ldr	r3, [r4, #16]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	e7f1      	b.n	8004e74 <_scanf_float+0x2fc>
 8004e90:	46aa      	mov	sl, r5
 8004e92:	9602      	str	r6, [sp, #8]
 8004e94:	e7df      	b.n	8004e56 <_scanf_float+0x2de>
 8004e96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	2965      	cmp	r1, #101	; 0x65
 8004e9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ea2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	d00c      	beq.n	8004ec4 <_scanf_float+0x34c>
 8004eaa:	2945      	cmp	r1, #69	; 0x45
 8004eac:	d00a      	beq.n	8004ec4 <_scanf_float+0x34c>
 8004eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eb2:	463a      	mov	r2, r7
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4798      	blx	r3
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	1eb5      	subs	r5, r6, #2
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ec8:	463a      	mov	r2, r7
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4798      	blx	r3
 8004ece:	462e      	mov	r6, r5
 8004ed0:	6825      	ldr	r5, [r4, #0]
 8004ed2:	f015 0510 	ands.w	r5, r5, #16
 8004ed6:	d158      	bne.n	8004f8a <_scanf_float+0x412>
 8004ed8:	7035      	strb	r5, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d11c      	bne.n	8004f20 <_scanf_float+0x3a8>
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	454b      	cmp	r3, r9
 8004eea:	eba3 0209 	sub.w	r2, r3, r9
 8004eee:	d124      	bne.n	8004f3a <_scanf_float+0x3c2>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	f000 ff11 	bl	8005d1c <_strtod_r>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	6821      	ldr	r1, [r4, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f011 0f02 	tst.w	r1, #2
 8004f04:	ec57 6b10 	vmov	r6, r7, d0
 8004f08:	f103 0204 	add.w	r2, r3, #4
 8004f0c:	d020      	beq.n	8004f50 <_scanf_float+0x3d8>
 8004f0e:	9903      	ldr	r1, [sp, #12]
 8004f10:	600a      	str	r2, [r1, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	e9c3 6700 	strd	r6, r7, [r3]
 8004f18:	68e3      	ldr	r3, [r4, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60e3      	str	r3, [r4, #12]
 8004f1e:	e66c      	b.n	8004bfa <_scanf_float+0x82>
 8004f20:	9b04      	ldr	r3, [sp, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0e4      	beq.n	8004ef0 <_scanf_float+0x378>
 8004f26:	9905      	ldr	r1, [sp, #20]
 8004f28:	230a      	movs	r3, #10
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	3101      	adds	r1, #1
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f000 ff7e 	bl	8005e30 <_strtol_r>
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	9e05      	ldr	r6, [sp, #20]
 8004f38:	1ac2      	subs	r2, r0, r3
 8004f3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f3e:	429e      	cmp	r6, r3
 8004f40:	bf28      	it	cs
 8004f42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004f46:	4912      	ldr	r1, [pc, #72]	; (8004f90 <_scanf_float+0x418>)
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f000 f8a1 	bl	8005090 <siprintf>
 8004f4e:	e7cf      	b.n	8004ef0 <_scanf_float+0x378>
 8004f50:	f011 0f04 	tst.w	r1, #4
 8004f54:	9903      	ldr	r1, [sp, #12]
 8004f56:	600a      	str	r2, [r1, #0]
 8004f58:	d1db      	bne.n	8004f12 <_scanf_float+0x39a>
 8004f5a:	f8d3 8000 	ldr.w	r8, [r3]
 8004f5e:	ee10 2a10 	vmov	r2, s0
 8004f62:	ee10 0a10 	vmov	r0, s0
 8004f66:	463b      	mov	r3, r7
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb fdff 	bl	8000b6c <__aeabi_dcmpun>
 8004f6e:	b128      	cbz	r0, 8004f7c <_scanf_float+0x404>
 8004f70:	4808      	ldr	r0, [pc, #32]	; (8004f94 <_scanf_float+0x41c>)
 8004f72:	f000 f887 	bl	8005084 <nanf>
 8004f76:	ed88 0a00 	vstr	s0, [r8]
 8004f7a:	e7cd      	b.n	8004f18 <_scanf_float+0x3a0>
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fe52 	bl	8000c28 <__aeabi_d2f>
 8004f84:	f8c8 0000 	str.w	r0, [r8]
 8004f88:	e7c6      	b.n	8004f18 <_scanf_float+0x3a0>
 8004f8a:	2500      	movs	r5, #0
 8004f8c:	e635      	b.n	8004bfa <_scanf_float+0x82>
 8004f8e:	bf00      	nop
 8004f90:	08008ff4 	.word	0x08008ff4
 8004f94:	08009470 	.word	0x08009470

08004f98 <_puts_r>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	460e      	mov	r6, r1
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	b118      	cbz	r0, 8004fa8 <_puts_r+0x10>
 8004fa0:	6983      	ldr	r3, [r0, #24]
 8004fa2:	b90b      	cbnz	r3, 8004fa8 <_puts_r+0x10>
 8004fa4:	f001 ff9a 	bl	8006edc <__sinit>
 8004fa8:	69ab      	ldr	r3, [r5, #24]
 8004faa:	68ac      	ldr	r4, [r5, #8]
 8004fac:	b913      	cbnz	r3, 8004fb4 <_puts_r+0x1c>
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f001 ff94 	bl	8006edc <__sinit>
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <_puts_r+0xd0>)
 8004fb6:	429c      	cmp	r4, r3
 8004fb8:	d120      	bne.n	8004ffc <_puts_r+0x64>
 8004fba:	686c      	ldr	r4, [r5, #4]
 8004fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fbe:	07db      	lsls	r3, r3, #31
 8004fc0:	d405      	bmi.n	8004fce <_puts_r+0x36>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	0598      	lsls	r0, r3, #22
 8004fc6:	d402      	bmi.n	8004fce <_puts_r+0x36>
 8004fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fca:	f002 fb98 	bl	80076fe <__retarget_lock_acquire_recursive>
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	0719      	lsls	r1, r3, #28
 8004fd2:	d51d      	bpl.n	8005010 <_puts_r+0x78>
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	b1db      	cbz	r3, 8005010 <_puts_r+0x78>
 8004fd8:	3e01      	subs	r6, #1
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	60a3      	str	r3, [r4, #8]
 8004fe4:	bb39      	cbnz	r1, 8005036 <_puts_r+0x9e>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da38      	bge.n	800505c <_puts_r+0xc4>
 8004fea:	4622      	mov	r2, r4
 8004fec:	210a      	movs	r1, #10
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 ff20 	bl	8005e34 <__swbuf_r>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d011      	beq.n	800501c <_puts_r+0x84>
 8004ff8:	250a      	movs	r5, #10
 8004ffa:	e011      	b.n	8005020 <_puts_r+0x88>
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <_puts_r+0xd4>)
 8004ffe:	429c      	cmp	r4, r3
 8005000:	d101      	bne.n	8005006 <_puts_r+0x6e>
 8005002:	68ac      	ldr	r4, [r5, #8]
 8005004:	e7da      	b.n	8004fbc <_puts_r+0x24>
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <_puts_r+0xd8>)
 8005008:	429c      	cmp	r4, r3
 800500a:	bf08      	it	eq
 800500c:	68ec      	ldreq	r4, [r5, #12]
 800500e:	e7d5      	b.n	8004fbc <_puts_r+0x24>
 8005010:	4621      	mov	r1, r4
 8005012:	4628      	mov	r0, r5
 8005014:	f000 ff60 	bl	8005ed8 <__swsetup_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	d0dd      	beq.n	8004fd8 <_puts_r+0x40>
 800501c:	f04f 35ff 	mov.w	r5, #4294967295
 8005020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005022:	07da      	lsls	r2, r3, #31
 8005024:	d405      	bmi.n	8005032 <_puts_r+0x9a>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	059b      	lsls	r3, r3, #22
 800502a:	d402      	bmi.n	8005032 <_puts_r+0x9a>
 800502c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800502e:	f002 fb67 	bl	8007700 <__retarget_lock_release_recursive>
 8005032:	4628      	mov	r0, r5
 8005034:	bd70      	pop	{r4, r5, r6, pc}
 8005036:	2b00      	cmp	r3, #0
 8005038:	da04      	bge.n	8005044 <_puts_r+0xac>
 800503a:	69a2      	ldr	r2, [r4, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	dc06      	bgt.n	800504e <_puts_r+0xb6>
 8005040:	290a      	cmp	r1, #10
 8005042:	d004      	beq.n	800504e <_puts_r+0xb6>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	6022      	str	r2, [r4, #0]
 800504a:	7019      	strb	r1, [r3, #0]
 800504c:	e7c5      	b.n	8004fda <_puts_r+0x42>
 800504e:	4622      	mov	r2, r4
 8005050:	4628      	mov	r0, r5
 8005052:	f000 feef 	bl	8005e34 <__swbuf_r>
 8005056:	3001      	adds	r0, #1
 8005058:	d1bf      	bne.n	8004fda <_puts_r+0x42>
 800505a:	e7df      	b.n	800501c <_puts_r+0x84>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	250a      	movs	r5, #10
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	701d      	strb	r5, [r3, #0]
 8005066:	e7db      	b.n	8005020 <_puts_r+0x88>
 8005068:	08009208 	.word	0x08009208
 800506c:	08009228 	.word	0x08009228
 8005070:	080091e8 	.word	0x080091e8

08005074 <puts>:
 8005074:	4b02      	ldr	r3, [pc, #8]	; (8005080 <puts+0xc>)
 8005076:	4601      	mov	r1, r0
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f7ff bf8d 	b.w	8004f98 <_puts_r>
 800507e:	bf00      	nop
 8005080:	2000000c 	.word	0x2000000c

08005084 <nanf>:
 8005084:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800508c <nanf+0x8>
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	7fc00000 	.word	0x7fc00000

08005090 <siprintf>:
 8005090:	b40e      	push	{r1, r2, r3}
 8005092:	b500      	push	{lr}
 8005094:	b09c      	sub	sp, #112	; 0x70
 8005096:	ab1d      	add	r3, sp, #116	; 0x74
 8005098:	9002      	str	r0, [sp, #8]
 800509a:	9006      	str	r0, [sp, #24]
 800509c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050a0:	4809      	ldr	r0, [pc, #36]	; (80050c8 <siprintf+0x38>)
 80050a2:	9107      	str	r1, [sp, #28]
 80050a4:	9104      	str	r1, [sp, #16]
 80050a6:	4909      	ldr	r1, [pc, #36]	; (80050cc <siprintf+0x3c>)
 80050a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ac:	9105      	str	r1, [sp, #20]
 80050ae:	6800      	ldr	r0, [r0, #0]
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	a902      	add	r1, sp, #8
 80050b4:	f003 f982 	bl	80083bc <_svfiprintf_r>
 80050b8:	9b02      	ldr	r3, [sp, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	b01c      	add	sp, #112	; 0x70
 80050c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c4:	b003      	add	sp, #12
 80050c6:	4770      	bx	lr
 80050c8:	2000000c 	.word	0x2000000c
 80050cc:	ffff0208 	.word	0xffff0208

080050d0 <sulp>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4604      	mov	r4, r0
 80050d4:	460d      	mov	r5, r1
 80050d6:	ec45 4b10 	vmov	d0, r4, r5
 80050da:	4616      	mov	r6, r2
 80050dc:	f002 ff0a 	bl	8007ef4 <__ulp>
 80050e0:	ec51 0b10 	vmov	r0, r1, d0
 80050e4:	b17e      	cbz	r6, 8005106 <sulp+0x36>
 80050e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80050ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dd09      	ble.n	8005106 <sulp+0x36>
 80050f2:	051b      	lsls	r3, r3, #20
 80050f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80050f8:	2400      	movs	r4, #0
 80050fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80050fe:	4622      	mov	r2, r4
 8005100:	462b      	mov	r3, r5
 8005102:	f7fb fa99 	bl	8000638 <__aeabi_dmul>
 8005106:	bd70      	pop	{r4, r5, r6, pc}

08005108 <_strtod_l>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	b0a3      	sub	sp, #140	; 0x8c
 800510e:	461f      	mov	r7, r3
 8005110:	2300      	movs	r3, #0
 8005112:	931e      	str	r3, [sp, #120]	; 0x78
 8005114:	4ba4      	ldr	r3, [pc, #656]	; (80053a8 <_strtod_l+0x2a0>)
 8005116:	9219      	str	r2, [sp, #100]	; 0x64
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	9307      	str	r3, [sp, #28]
 800511c:	4604      	mov	r4, r0
 800511e:	4618      	mov	r0, r3
 8005120:	4688      	mov	r8, r1
 8005122:	f7fb f875 	bl	8000210 <strlen>
 8005126:	f04f 0a00 	mov.w	sl, #0
 800512a:	4605      	mov	r5, r0
 800512c:	f04f 0b00 	mov.w	fp, #0
 8005130:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	2a2b      	cmp	r2, #43	; 0x2b
 800513a:	d04c      	beq.n	80051d6 <_strtod_l+0xce>
 800513c:	d839      	bhi.n	80051b2 <_strtod_l+0xaa>
 800513e:	2a0d      	cmp	r2, #13
 8005140:	d832      	bhi.n	80051a8 <_strtod_l+0xa0>
 8005142:	2a08      	cmp	r2, #8
 8005144:	d832      	bhi.n	80051ac <_strtod_l+0xa4>
 8005146:	2a00      	cmp	r2, #0
 8005148:	d03c      	beq.n	80051c4 <_strtod_l+0xbc>
 800514a:	2300      	movs	r3, #0
 800514c:	930e      	str	r3, [sp, #56]	; 0x38
 800514e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005150:	7833      	ldrb	r3, [r6, #0]
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	f040 80b4 	bne.w	80052c0 <_strtod_l+0x1b8>
 8005158:	7873      	ldrb	r3, [r6, #1]
 800515a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800515e:	2b58      	cmp	r3, #88	; 0x58
 8005160:	d16c      	bne.n	800523c <_strtod_l+0x134>
 8005162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	ab1e      	add	r3, sp, #120	; 0x78
 8005168:	9702      	str	r7, [sp, #8]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4a8f      	ldr	r2, [pc, #572]	; (80053ac <_strtod_l+0x2a4>)
 800516e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005170:	a91d      	add	r1, sp, #116	; 0x74
 8005172:	4620      	mov	r0, r4
 8005174:	f001 ffb6 	bl	80070e4 <__gethex>
 8005178:	f010 0707 	ands.w	r7, r0, #7
 800517c:	4605      	mov	r5, r0
 800517e:	d005      	beq.n	800518c <_strtod_l+0x84>
 8005180:	2f06      	cmp	r7, #6
 8005182:	d12a      	bne.n	80051da <_strtod_l+0xd2>
 8005184:	3601      	adds	r6, #1
 8005186:	2300      	movs	r3, #0
 8005188:	961d      	str	r6, [sp, #116]	; 0x74
 800518a:	930e      	str	r3, [sp, #56]	; 0x38
 800518c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 8596 	bne.w	8005cc0 <_strtod_l+0xbb8>
 8005194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005196:	b1db      	cbz	r3, 80051d0 <_strtod_l+0xc8>
 8005198:	4652      	mov	r2, sl
 800519a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800519e:	ec43 2b10 	vmov	d0, r2, r3
 80051a2:	b023      	add	sp, #140	; 0x8c
 80051a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a8:	2a20      	cmp	r2, #32
 80051aa:	d1ce      	bne.n	800514a <_strtod_l+0x42>
 80051ac:	3301      	adds	r3, #1
 80051ae:	931d      	str	r3, [sp, #116]	; 0x74
 80051b0:	e7c0      	b.n	8005134 <_strtod_l+0x2c>
 80051b2:	2a2d      	cmp	r2, #45	; 0x2d
 80051b4:	d1c9      	bne.n	800514a <_strtod_l+0x42>
 80051b6:	2201      	movs	r2, #1
 80051b8:	920e      	str	r2, [sp, #56]	; 0x38
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	921d      	str	r2, [sp, #116]	; 0x74
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1c4      	bne.n	800514e <_strtod_l+0x46>
 80051c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 8576 	bne.w	8005cbc <_strtod_l+0xbb4>
 80051d0:	4652      	mov	r2, sl
 80051d2:	465b      	mov	r3, fp
 80051d4:	e7e3      	b.n	800519e <_strtod_l+0x96>
 80051d6:	2200      	movs	r2, #0
 80051d8:	e7ee      	b.n	80051b8 <_strtod_l+0xb0>
 80051da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80051dc:	b13a      	cbz	r2, 80051ee <_strtod_l+0xe6>
 80051de:	2135      	movs	r1, #53	; 0x35
 80051e0:	a820      	add	r0, sp, #128	; 0x80
 80051e2:	f002 ff92 	bl	800810a <__copybits>
 80051e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80051e8:	4620      	mov	r0, r4
 80051ea:	f002 fb57 	bl	800789c <_Bfree>
 80051ee:	3f01      	subs	r7, #1
 80051f0:	2f05      	cmp	r7, #5
 80051f2:	d807      	bhi.n	8005204 <_strtod_l+0xfc>
 80051f4:	e8df f007 	tbb	[pc, r7]
 80051f8:	1d180b0e 	.word	0x1d180b0e
 80051fc:	030e      	.short	0x030e
 80051fe:	f04f 0b00 	mov.w	fp, #0
 8005202:	46da      	mov	sl, fp
 8005204:	0728      	lsls	r0, r5, #28
 8005206:	d5c1      	bpl.n	800518c <_strtod_l+0x84>
 8005208:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800520c:	e7be      	b.n	800518c <_strtod_l+0x84>
 800520e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005212:	e7f7      	b.n	8005204 <_strtod_l+0xfc>
 8005214:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005218:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800521a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800521e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005222:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005226:	e7ed      	b.n	8005204 <_strtod_l+0xfc>
 8005228:	f8df b184 	ldr.w	fp, [pc, #388]	; 80053b0 <_strtod_l+0x2a8>
 800522c:	f04f 0a00 	mov.w	sl, #0
 8005230:	e7e8      	b.n	8005204 <_strtod_l+0xfc>
 8005232:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005236:	f04f 3aff 	mov.w	sl, #4294967295
 800523a:	e7e3      	b.n	8005204 <_strtod_l+0xfc>
 800523c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	921d      	str	r2, [sp, #116]	; 0x74
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d0f9      	beq.n	800523c <_strtod_l+0x134>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d09f      	beq.n	800518c <_strtod_l+0x84>
 800524c:	2301      	movs	r3, #1
 800524e:	f04f 0900 	mov.w	r9, #0
 8005252:	9304      	str	r3, [sp, #16]
 8005254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005256:	930a      	str	r3, [sp, #40]	; 0x28
 8005258:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800525c:	464f      	mov	r7, r9
 800525e:	220a      	movs	r2, #10
 8005260:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005262:	7806      	ldrb	r6, [r0, #0]
 8005264:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005268:	b2d9      	uxtb	r1, r3
 800526a:	2909      	cmp	r1, #9
 800526c:	d92a      	bls.n	80052c4 <_strtod_l+0x1bc>
 800526e:	9907      	ldr	r1, [sp, #28]
 8005270:	462a      	mov	r2, r5
 8005272:	f003 fa00 	bl	8008676 <strncmp>
 8005276:	b398      	cbz	r0, 80052e0 <_strtod_l+0x1d8>
 8005278:	2000      	movs	r0, #0
 800527a:	4633      	mov	r3, r6
 800527c:	463d      	mov	r5, r7
 800527e:	9007      	str	r0, [sp, #28]
 8005280:	4602      	mov	r2, r0
 8005282:	2b65      	cmp	r3, #101	; 0x65
 8005284:	d001      	beq.n	800528a <_strtod_l+0x182>
 8005286:	2b45      	cmp	r3, #69	; 0x45
 8005288:	d118      	bne.n	80052bc <_strtod_l+0x1b4>
 800528a:	b91d      	cbnz	r5, 8005294 <_strtod_l+0x18c>
 800528c:	9b04      	ldr	r3, [sp, #16]
 800528e:	4303      	orrs	r3, r0
 8005290:	d098      	beq.n	80051c4 <_strtod_l+0xbc>
 8005292:	2500      	movs	r5, #0
 8005294:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005298:	f108 0301 	add.w	r3, r8, #1
 800529c:	931d      	str	r3, [sp, #116]	; 0x74
 800529e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80052a2:	2b2b      	cmp	r3, #43	; 0x2b
 80052a4:	d075      	beq.n	8005392 <_strtod_l+0x28a>
 80052a6:	2b2d      	cmp	r3, #45	; 0x2d
 80052a8:	d07b      	beq.n	80053a2 <_strtod_l+0x29a>
 80052aa:	f04f 0c00 	mov.w	ip, #0
 80052ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052b2:	2909      	cmp	r1, #9
 80052b4:	f240 8082 	bls.w	80053bc <_strtod_l+0x2b4>
 80052b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80052bc:	2600      	movs	r6, #0
 80052be:	e09d      	b.n	80053fc <_strtod_l+0x2f4>
 80052c0:	2300      	movs	r3, #0
 80052c2:	e7c4      	b.n	800524e <_strtod_l+0x146>
 80052c4:	2f08      	cmp	r7, #8
 80052c6:	bfd8      	it	le
 80052c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80052ca:	f100 0001 	add.w	r0, r0, #1
 80052ce:	bfda      	itte	le
 80052d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80052d4:	9309      	strle	r3, [sp, #36]	; 0x24
 80052d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80052da:	3701      	adds	r7, #1
 80052dc:	901d      	str	r0, [sp, #116]	; 0x74
 80052de:	e7bf      	b.n	8005260 <_strtod_l+0x158>
 80052e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052e2:	195a      	adds	r2, r3, r5
 80052e4:	921d      	str	r2, [sp, #116]	; 0x74
 80052e6:	5d5b      	ldrb	r3, [r3, r5]
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	d037      	beq.n	800535c <_strtod_l+0x254>
 80052ec:	9007      	str	r0, [sp, #28]
 80052ee:	463d      	mov	r5, r7
 80052f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80052f4:	2a09      	cmp	r2, #9
 80052f6:	d912      	bls.n	800531e <_strtod_l+0x216>
 80052f8:	2201      	movs	r2, #1
 80052fa:	e7c2      	b.n	8005282 <_strtod_l+0x17a>
 80052fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	921d      	str	r2, [sp, #116]	; 0x74
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	3001      	adds	r0, #1
 8005306:	2b30      	cmp	r3, #48	; 0x30
 8005308:	d0f8      	beq.n	80052fc <_strtod_l+0x1f4>
 800530a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800530e:	2a08      	cmp	r2, #8
 8005310:	f200 84db 	bhi.w	8005cca <_strtod_l+0xbc2>
 8005314:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005316:	9007      	str	r0, [sp, #28]
 8005318:	2000      	movs	r0, #0
 800531a:	920a      	str	r2, [sp, #40]	; 0x28
 800531c:	4605      	mov	r5, r0
 800531e:	3b30      	subs	r3, #48	; 0x30
 8005320:	f100 0201 	add.w	r2, r0, #1
 8005324:	d014      	beq.n	8005350 <_strtod_l+0x248>
 8005326:	9907      	ldr	r1, [sp, #28]
 8005328:	4411      	add	r1, r2
 800532a:	9107      	str	r1, [sp, #28]
 800532c:	462a      	mov	r2, r5
 800532e:	eb00 0e05 	add.w	lr, r0, r5
 8005332:	210a      	movs	r1, #10
 8005334:	4572      	cmp	r2, lr
 8005336:	d113      	bne.n	8005360 <_strtod_l+0x258>
 8005338:	182a      	adds	r2, r5, r0
 800533a:	2a08      	cmp	r2, #8
 800533c:	f105 0501 	add.w	r5, r5, #1
 8005340:	4405      	add	r5, r0
 8005342:	dc1c      	bgt.n	800537e <_strtod_l+0x276>
 8005344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005346:	220a      	movs	r2, #10
 8005348:	fb02 3301 	mla	r3, r2, r1, r3
 800534c:	9309      	str	r3, [sp, #36]	; 0x24
 800534e:	2200      	movs	r2, #0
 8005350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	911d      	str	r1, [sp, #116]	; 0x74
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	4610      	mov	r0, r2
 800535a:	e7c9      	b.n	80052f0 <_strtod_l+0x1e8>
 800535c:	4638      	mov	r0, r7
 800535e:	e7d2      	b.n	8005306 <_strtod_l+0x1fe>
 8005360:	2a08      	cmp	r2, #8
 8005362:	dc04      	bgt.n	800536e <_strtod_l+0x266>
 8005364:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005366:	434e      	muls	r6, r1
 8005368:	9609      	str	r6, [sp, #36]	; 0x24
 800536a:	3201      	adds	r2, #1
 800536c:	e7e2      	b.n	8005334 <_strtod_l+0x22c>
 800536e:	f102 0c01 	add.w	ip, r2, #1
 8005372:	f1bc 0f10 	cmp.w	ip, #16
 8005376:	bfd8      	it	le
 8005378:	fb01 f909 	mulle.w	r9, r1, r9
 800537c:	e7f5      	b.n	800536a <_strtod_l+0x262>
 800537e:	2d10      	cmp	r5, #16
 8005380:	bfdc      	itt	le
 8005382:	220a      	movle	r2, #10
 8005384:	fb02 3909 	mlale	r9, r2, r9, r3
 8005388:	e7e1      	b.n	800534e <_strtod_l+0x246>
 800538a:	2300      	movs	r3, #0
 800538c:	9307      	str	r3, [sp, #28]
 800538e:	2201      	movs	r2, #1
 8005390:	e77c      	b.n	800528c <_strtod_l+0x184>
 8005392:	f04f 0c00 	mov.w	ip, #0
 8005396:	f108 0302 	add.w	r3, r8, #2
 800539a:	931d      	str	r3, [sp, #116]	; 0x74
 800539c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80053a0:	e785      	b.n	80052ae <_strtod_l+0x1a6>
 80053a2:	f04f 0c01 	mov.w	ip, #1
 80053a6:	e7f6      	b.n	8005396 <_strtod_l+0x28e>
 80053a8:	080092b4 	.word	0x080092b4
 80053ac:	08008ffc 	.word	0x08008ffc
 80053b0:	7ff00000 	.word	0x7ff00000
 80053b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	911d      	str	r1, [sp, #116]	; 0x74
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d0f9      	beq.n	80053b4 <_strtod_l+0x2ac>
 80053c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80053c4:	2908      	cmp	r1, #8
 80053c6:	f63f af79 	bhi.w	80052bc <_strtod_l+0x1b4>
 80053ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053d0:	9308      	str	r3, [sp, #32]
 80053d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	911d      	str	r1, [sp, #116]	; 0x74
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80053de:	2e09      	cmp	r6, #9
 80053e0:	d937      	bls.n	8005452 <_strtod_l+0x34a>
 80053e2:	9e08      	ldr	r6, [sp, #32]
 80053e4:	1b89      	subs	r1, r1, r6
 80053e6:	2908      	cmp	r1, #8
 80053e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80053ec:	dc02      	bgt.n	80053f4 <_strtod_l+0x2ec>
 80053ee:	4576      	cmp	r6, lr
 80053f0:	bfa8      	it	ge
 80053f2:	4676      	movge	r6, lr
 80053f4:	f1bc 0f00 	cmp.w	ip, #0
 80053f8:	d000      	beq.n	80053fc <_strtod_l+0x2f4>
 80053fa:	4276      	negs	r6, r6
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	d14f      	bne.n	80054a0 <_strtod_l+0x398>
 8005400:	9904      	ldr	r1, [sp, #16]
 8005402:	4301      	orrs	r1, r0
 8005404:	f47f aec2 	bne.w	800518c <_strtod_l+0x84>
 8005408:	2a00      	cmp	r2, #0
 800540a:	f47f aedb 	bne.w	80051c4 <_strtod_l+0xbc>
 800540e:	2b69      	cmp	r3, #105	; 0x69
 8005410:	d027      	beq.n	8005462 <_strtod_l+0x35a>
 8005412:	dc24      	bgt.n	800545e <_strtod_l+0x356>
 8005414:	2b49      	cmp	r3, #73	; 0x49
 8005416:	d024      	beq.n	8005462 <_strtod_l+0x35a>
 8005418:	2b4e      	cmp	r3, #78	; 0x4e
 800541a:	f47f aed3 	bne.w	80051c4 <_strtod_l+0xbc>
 800541e:	499e      	ldr	r1, [pc, #632]	; (8005698 <_strtod_l+0x590>)
 8005420:	a81d      	add	r0, sp, #116	; 0x74
 8005422:	f002 f8b7 	bl	8007594 <__match>
 8005426:	2800      	cmp	r0, #0
 8005428:	f43f aecc 	beq.w	80051c4 <_strtod_l+0xbc>
 800542c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b28      	cmp	r3, #40	; 0x28
 8005432:	d12d      	bne.n	8005490 <_strtod_l+0x388>
 8005434:	4999      	ldr	r1, [pc, #612]	; (800569c <_strtod_l+0x594>)
 8005436:	aa20      	add	r2, sp, #128	; 0x80
 8005438:	a81d      	add	r0, sp, #116	; 0x74
 800543a:	f002 f8bf 	bl	80075bc <__hexnan>
 800543e:	2805      	cmp	r0, #5
 8005440:	d126      	bne.n	8005490 <_strtod_l+0x388>
 8005442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005444:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005448:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800544c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005450:	e69c      	b.n	800518c <_strtod_l+0x84>
 8005452:	210a      	movs	r1, #10
 8005454:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005458:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800545c:	e7b9      	b.n	80053d2 <_strtod_l+0x2ca>
 800545e:	2b6e      	cmp	r3, #110	; 0x6e
 8005460:	e7db      	b.n	800541a <_strtod_l+0x312>
 8005462:	498f      	ldr	r1, [pc, #572]	; (80056a0 <_strtod_l+0x598>)
 8005464:	a81d      	add	r0, sp, #116	; 0x74
 8005466:	f002 f895 	bl	8007594 <__match>
 800546a:	2800      	cmp	r0, #0
 800546c:	f43f aeaa 	beq.w	80051c4 <_strtod_l+0xbc>
 8005470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005472:	498c      	ldr	r1, [pc, #560]	; (80056a4 <_strtod_l+0x59c>)
 8005474:	3b01      	subs	r3, #1
 8005476:	a81d      	add	r0, sp, #116	; 0x74
 8005478:	931d      	str	r3, [sp, #116]	; 0x74
 800547a:	f002 f88b 	bl	8007594 <__match>
 800547e:	b910      	cbnz	r0, 8005486 <_strtod_l+0x37e>
 8005480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005482:	3301      	adds	r3, #1
 8005484:	931d      	str	r3, [sp, #116]	; 0x74
 8005486:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80056b4 <_strtod_l+0x5ac>
 800548a:	f04f 0a00 	mov.w	sl, #0
 800548e:	e67d      	b.n	800518c <_strtod_l+0x84>
 8005490:	4885      	ldr	r0, [pc, #532]	; (80056a8 <_strtod_l+0x5a0>)
 8005492:	f003 f895 	bl	80085c0 <nan>
 8005496:	ed8d 0b04 	vstr	d0, [sp, #16]
 800549a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800549e:	e675      	b.n	800518c <_strtod_l+0x84>
 80054a0:	9b07      	ldr	r3, [sp, #28]
 80054a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a4:	1af3      	subs	r3, r6, r3
 80054a6:	2f00      	cmp	r7, #0
 80054a8:	bf08      	it	eq
 80054aa:	462f      	moveq	r7, r5
 80054ac:	2d10      	cmp	r5, #16
 80054ae:	9308      	str	r3, [sp, #32]
 80054b0:	46a8      	mov	r8, r5
 80054b2:	bfa8      	it	ge
 80054b4:	f04f 0810 	movge.w	r8, #16
 80054b8:	f7fb f844 	bl	8000544 <__aeabi_ui2d>
 80054bc:	2d09      	cmp	r5, #9
 80054be:	4682      	mov	sl, r0
 80054c0:	468b      	mov	fp, r1
 80054c2:	dd13      	ble.n	80054ec <_strtod_l+0x3e4>
 80054c4:	4b79      	ldr	r3, [pc, #484]	; (80056ac <_strtod_l+0x5a4>)
 80054c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054ce:	f7fb f8b3 	bl	8000638 <__aeabi_dmul>
 80054d2:	4682      	mov	sl, r0
 80054d4:	4648      	mov	r0, r9
 80054d6:	468b      	mov	fp, r1
 80054d8:	f7fb f834 	bl	8000544 <__aeabi_ui2d>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4650      	mov	r0, sl
 80054e2:	4659      	mov	r1, fp
 80054e4:	f7fa fef2 	bl	80002cc <__adddf3>
 80054e8:	4682      	mov	sl, r0
 80054ea:	468b      	mov	fp, r1
 80054ec:	2d0f      	cmp	r5, #15
 80054ee:	dc38      	bgt.n	8005562 <_strtod_l+0x45a>
 80054f0:	9b08      	ldr	r3, [sp, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f43f ae4a 	beq.w	800518c <_strtod_l+0x84>
 80054f8:	dd24      	ble.n	8005544 <_strtod_l+0x43c>
 80054fa:	2b16      	cmp	r3, #22
 80054fc:	dc0b      	bgt.n	8005516 <_strtod_l+0x40e>
 80054fe:	4d6b      	ldr	r5, [pc, #428]	; (80056ac <_strtod_l+0x5a4>)
 8005500:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005504:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005508:	4652      	mov	r2, sl
 800550a:	465b      	mov	r3, fp
 800550c:	f7fb f894 	bl	8000638 <__aeabi_dmul>
 8005510:	4682      	mov	sl, r0
 8005512:	468b      	mov	fp, r1
 8005514:	e63a      	b.n	800518c <_strtod_l+0x84>
 8005516:	9a08      	ldr	r2, [sp, #32]
 8005518:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800551c:	4293      	cmp	r3, r2
 800551e:	db20      	blt.n	8005562 <_strtod_l+0x45a>
 8005520:	4c62      	ldr	r4, [pc, #392]	; (80056ac <_strtod_l+0x5a4>)
 8005522:	f1c5 050f 	rsb	r5, r5, #15
 8005526:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800552a:	4652      	mov	r2, sl
 800552c:	465b      	mov	r3, fp
 800552e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005532:	f7fb f881 	bl	8000638 <__aeabi_dmul>
 8005536:	9b08      	ldr	r3, [sp, #32]
 8005538:	1b5d      	subs	r5, r3, r5
 800553a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800553e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005542:	e7e3      	b.n	800550c <_strtod_l+0x404>
 8005544:	9b08      	ldr	r3, [sp, #32]
 8005546:	3316      	adds	r3, #22
 8005548:	db0b      	blt.n	8005562 <_strtod_l+0x45a>
 800554a:	9b07      	ldr	r3, [sp, #28]
 800554c:	4a57      	ldr	r2, [pc, #348]	; (80056ac <_strtod_l+0x5a4>)
 800554e:	1b9e      	subs	r6, r3, r6
 8005550:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005554:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005558:	4650      	mov	r0, sl
 800555a:	4659      	mov	r1, fp
 800555c:	f7fb f996 	bl	800088c <__aeabi_ddiv>
 8005560:	e7d6      	b.n	8005510 <_strtod_l+0x408>
 8005562:	9b08      	ldr	r3, [sp, #32]
 8005564:	eba5 0808 	sub.w	r8, r5, r8
 8005568:	4498      	add	r8, r3
 800556a:	f1b8 0f00 	cmp.w	r8, #0
 800556e:	dd71      	ble.n	8005654 <_strtod_l+0x54c>
 8005570:	f018 030f 	ands.w	r3, r8, #15
 8005574:	d00a      	beq.n	800558c <_strtod_l+0x484>
 8005576:	494d      	ldr	r1, [pc, #308]	; (80056ac <_strtod_l+0x5a4>)
 8005578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800557c:	4652      	mov	r2, sl
 800557e:	465b      	mov	r3, fp
 8005580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005584:	f7fb f858 	bl	8000638 <__aeabi_dmul>
 8005588:	4682      	mov	sl, r0
 800558a:	468b      	mov	fp, r1
 800558c:	f038 080f 	bics.w	r8, r8, #15
 8005590:	d04d      	beq.n	800562e <_strtod_l+0x526>
 8005592:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005596:	dd22      	ble.n	80055de <_strtod_l+0x4d6>
 8005598:	2500      	movs	r5, #0
 800559a:	462e      	mov	r6, r5
 800559c:	9509      	str	r5, [sp, #36]	; 0x24
 800559e:	9507      	str	r5, [sp, #28]
 80055a0:	2322      	movs	r3, #34	; 0x22
 80055a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80056b4 <_strtod_l+0x5ac>
 80055a6:	6023      	str	r3, [r4, #0]
 80055a8:	f04f 0a00 	mov.w	sl, #0
 80055ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f43f adec 	beq.w	800518c <_strtod_l+0x84>
 80055b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80055b6:	4620      	mov	r0, r4
 80055b8:	f002 f970 	bl	800789c <_Bfree>
 80055bc:	9907      	ldr	r1, [sp, #28]
 80055be:	4620      	mov	r0, r4
 80055c0:	f002 f96c 	bl	800789c <_Bfree>
 80055c4:	4631      	mov	r1, r6
 80055c6:	4620      	mov	r0, r4
 80055c8:	f002 f968 	bl	800789c <_Bfree>
 80055cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ce:	4620      	mov	r0, r4
 80055d0:	f002 f964 	bl	800789c <_Bfree>
 80055d4:	4629      	mov	r1, r5
 80055d6:	4620      	mov	r0, r4
 80055d8:	f002 f960 	bl	800789c <_Bfree>
 80055dc:	e5d6      	b.n	800518c <_strtod_l+0x84>
 80055de:	2300      	movs	r3, #0
 80055e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055e4:	4650      	mov	r0, sl
 80055e6:	4659      	mov	r1, fp
 80055e8:	4699      	mov	r9, r3
 80055ea:	f1b8 0f01 	cmp.w	r8, #1
 80055ee:	dc21      	bgt.n	8005634 <_strtod_l+0x52c>
 80055f0:	b10b      	cbz	r3, 80055f6 <_strtod_l+0x4ee>
 80055f2:	4682      	mov	sl, r0
 80055f4:	468b      	mov	fp, r1
 80055f6:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <_strtod_l+0x5a8>)
 80055f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80055fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005600:	4652      	mov	r2, sl
 8005602:	465b      	mov	r3, fp
 8005604:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005608:	f7fb f816 	bl	8000638 <__aeabi_dmul>
 800560c:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <_strtod_l+0x5ac>)
 800560e:	460a      	mov	r2, r1
 8005610:	400b      	ands	r3, r1
 8005612:	4929      	ldr	r1, [pc, #164]	; (80056b8 <_strtod_l+0x5b0>)
 8005614:	428b      	cmp	r3, r1
 8005616:	4682      	mov	sl, r0
 8005618:	d8be      	bhi.n	8005598 <_strtod_l+0x490>
 800561a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800561e:	428b      	cmp	r3, r1
 8005620:	bf86      	itte	hi
 8005622:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80056bc <_strtod_l+0x5b4>
 8005626:	f04f 3aff 	movhi.w	sl, #4294967295
 800562a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800562e:	2300      	movs	r3, #0
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	e081      	b.n	8005738 <_strtod_l+0x630>
 8005634:	f018 0f01 	tst.w	r8, #1
 8005638:	d007      	beq.n	800564a <_strtod_l+0x542>
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <_strtod_l+0x5a8>)
 800563c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f7fa fff8 	bl	8000638 <__aeabi_dmul>
 8005648:	2301      	movs	r3, #1
 800564a:	f109 0901 	add.w	r9, r9, #1
 800564e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005652:	e7ca      	b.n	80055ea <_strtod_l+0x4e2>
 8005654:	d0eb      	beq.n	800562e <_strtod_l+0x526>
 8005656:	f1c8 0800 	rsb	r8, r8, #0
 800565a:	f018 020f 	ands.w	r2, r8, #15
 800565e:	d00a      	beq.n	8005676 <_strtod_l+0x56e>
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <_strtod_l+0x5a4>)
 8005662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005666:	4650      	mov	r0, sl
 8005668:	4659      	mov	r1, fp
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fb f90d 	bl	800088c <__aeabi_ddiv>
 8005672:	4682      	mov	sl, r0
 8005674:	468b      	mov	fp, r1
 8005676:	ea5f 1828 	movs.w	r8, r8, asr #4
 800567a:	d0d8      	beq.n	800562e <_strtod_l+0x526>
 800567c:	f1b8 0f1f 	cmp.w	r8, #31
 8005680:	dd1e      	ble.n	80056c0 <_strtod_l+0x5b8>
 8005682:	2500      	movs	r5, #0
 8005684:	462e      	mov	r6, r5
 8005686:	9509      	str	r5, [sp, #36]	; 0x24
 8005688:	9507      	str	r5, [sp, #28]
 800568a:	2322      	movs	r3, #34	; 0x22
 800568c:	f04f 0a00 	mov.w	sl, #0
 8005690:	f04f 0b00 	mov.w	fp, #0
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	e789      	b.n	80055ac <_strtod_l+0x4a4>
 8005698:	08008fcd 	.word	0x08008fcd
 800569c:	08009010 	.word	0x08009010
 80056a0:	08008fc5 	.word	0x08008fc5
 80056a4:	08009154 	.word	0x08009154
 80056a8:	08009470 	.word	0x08009470
 80056ac:	08009350 	.word	0x08009350
 80056b0:	08009328 	.word	0x08009328
 80056b4:	7ff00000 	.word	0x7ff00000
 80056b8:	7ca00000 	.word	0x7ca00000
 80056bc:	7fefffff 	.word	0x7fefffff
 80056c0:	f018 0310 	ands.w	r3, r8, #16
 80056c4:	bf18      	it	ne
 80056c6:	236a      	movne	r3, #106	; 0x6a
 80056c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005a80 <_strtod_l+0x978>
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	4650      	mov	r0, sl
 80056d0:	4659      	mov	r1, fp
 80056d2:	2300      	movs	r3, #0
 80056d4:	f018 0f01 	tst.w	r8, #1
 80056d8:	d004      	beq.n	80056e4 <_strtod_l+0x5dc>
 80056da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056de:	f7fa ffab 	bl	8000638 <__aeabi_dmul>
 80056e2:	2301      	movs	r3, #1
 80056e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80056e8:	f109 0908 	add.w	r9, r9, #8
 80056ec:	d1f2      	bne.n	80056d4 <_strtod_l+0x5cc>
 80056ee:	b10b      	cbz	r3, 80056f4 <_strtod_l+0x5ec>
 80056f0:	4682      	mov	sl, r0
 80056f2:	468b      	mov	fp, r1
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	b1bb      	cbz	r3, 8005728 <_strtod_l+0x620>
 80056f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80056fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005700:	2b00      	cmp	r3, #0
 8005702:	4659      	mov	r1, fp
 8005704:	dd10      	ble.n	8005728 <_strtod_l+0x620>
 8005706:	2b1f      	cmp	r3, #31
 8005708:	f340 8128 	ble.w	800595c <_strtod_l+0x854>
 800570c:	2b34      	cmp	r3, #52	; 0x34
 800570e:	bfde      	ittt	le
 8005710:	3b20      	suble	r3, #32
 8005712:	f04f 32ff 	movle.w	r2, #4294967295
 8005716:	fa02 f303 	lslle.w	r3, r2, r3
 800571a:	f04f 0a00 	mov.w	sl, #0
 800571e:	bfcc      	ite	gt
 8005720:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005724:	ea03 0b01 	andle.w	fp, r3, r1
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	4650      	mov	r0, sl
 800572e:	4659      	mov	r1, fp
 8005730:	f7fb f9ea 	bl	8000b08 <__aeabi_dcmpeq>
 8005734:	2800      	cmp	r0, #0
 8005736:	d1a4      	bne.n	8005682 <_strtod_l+0x57a>
 8005738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800573e:	462b      	mov	r3, r5
 8005740:	463a      	mov	r2, r7
 8005742:	4620      	mov	r0, r4
 8005744:	f002 f916 	bl	8007974 <__s2b>
 8005748:	9009      	str	r0, [sp, #36]	; 0x24
 800574a:	2800      	cmp	r0, #0
 800574c:	f43f af24 	beq.w	8005598 <_strtod_l+0x490>
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	1b9e      	subs	r6, r3, r6
 8005754:	9b08      	ldr	r3, [sp, #32]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfb4      	ite	lt
 800575a:	4633      	movlt	r3, r6
 800575c:	2300      	movge	r3, #0
 800575e:	9310      	str	r3, [sp, #64]	; 0x40
 8005760:	9b08      	ldr	r3, [sp, #32]
 8005762:	2500      	movs	r5, #0
 8005764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005768:	9318      	str	r3, [sp, #96]	; 0x60
 800576a:	462e      	mov	r6, r5
 800576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576e:	4620      	mov	r0, r4
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	f002 f853 	bl	800781c <_Balloc>
 8005776:	9007      	str	r0, [sp, #28]
 8005778:	2800      	cmp	r0, #0
 800577a:	f43f af11 	beq.w	80055a0 <_strtod_l+0x498>
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	3202      	adds	r2, #2
 8005784:	f103 010c 	add.w	r1, r3, #12
 8005788:	0092      	lsls	r2, r2, #2
 800578a:	300c      	adds	r0, #12
 800578c:	f002 f838 	bl	8007800 <memcpy>
 8005790:	ec4b ab10 	vmov	d0, sl, fp
 8005794:	aa20      	add	r2, sp, #128	; 0x80
 8005796:	a91f      	add	r1, sp, #124	; 0x7c
 8005798:	4620      	mov	r0, r4
 800579a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800579e:	f002 fc25 	bl	8007fec <__d2b>
 80057a2:	901e      	str	r0, [sp, #120]	; 0x78
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f43f aefb 	beq.w	80055a0 <_strtod_l+0x498>
 80057aa:	2101      	movs	r1, #1
 80057ac:	4620      	mov	r0, r4
 80057ae:	f002 f97b 	bl	8007aa8 <__i2b>
 80057b2:	4606      	mov	r6, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f43f aef3 	beq.w	80055a0 <_strtod_l+0x498>
 80057ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057bc:	9904      	ldr	r1, [sp, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bfab      	itete	ge
 80057c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80057c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80057c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80057c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80057cc:	bfac      	ite	ge
 80057ce:	eb03 0902 	addge.w	r9, r3, r2
 80057d2:	1ad7      	sublt	r7, r2, r3
 80057d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057d6:	eba3 0801 	sub.w	r8, r3, r1
 80057da:	4490      	add	r8, r2
 80057dc:	4ba3      	ldr	r3, [pc, #652]	; (8005a6c <_strtod_l+0x964>)
 80057de:	f108 38ff 	add.w	r8, r8, #4294967295
 80057e2:	4598      	cmp	r8, r3
 80057e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057e8:	f280 80cc 	bge.w	8005984 <_strtod_l+0x87c>
 80057ec:	eba3 0308 	sub.w	r3, r3, r8
 80057f0:	2b1f      	cmp	r3, #31
 80057f2:	eba2 0203 	sub.w	r2, r2, r3
 80057f6:	f04f 0101 	mov.w	r1, #1
 80057fa:	f300 80b6 	bgt.w	800596a <_strtod_l+0x862>
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	9311      	str	r3, [sp, #68]	; 0x44
 8005804:	2300      	movs	r3, #0
 8005806:	930c      	str	r3, [sp, #48]	; 0x30
 8005808:	eb09 0802 	add.w	r8, r9, r2
 800580c:	9b04      	ldr	r3, [sp, #16]
 800580e:	45c1      	cmp	r9, r8
 8005810:	4417      	add	r7, r2
 8005812:	441f      	add	r7, r3
 8005814:	464b      	mov	r3, r9
 8005816:	bfa8      	it	ge
 8005818:	4643      	movge	r3, r8
 800581a:	42bb      	cmp	r3, r7
 800581c:	bfa8      	it	ge
 800581e:	463b      	movge	r3, r7
 8005820:	2b00      	cmp	r3, #0
 8005822:	bfc2      	ittt	gt
 8005824:	eba8 0803 	subgt.w	r8, r8, r3
 8005828:	1aff      	subgt	r7, r7, r3
 800582a:	eba9 0903 	subgt.w	r9, r9, r3
 800582e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	dd17      	ble.n	8005864 <_strtod_l+0x75c>
 8005834:	4631      	mov	r1, r6
 8005836:	461a      	mov	r2, r3
 8005838:	4620      	mov	r0, r4
 800583a:	f002 f9f1 	bl	8007c20 <__pow5mult>
 800583e:	4606      	mov	r6, r0
 8005840:	2800      	cmp	r0, #0
 8005842:	f43f aead 	beq.w	80055a0 <_strtod_l+0x498>
 8005846:	4601      	mov	r1, r0
 8005848:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800584a:	4620      	mov	r0, r4
 800584c:	f002 f942 	bl	8007ad4 <__multiply>
 8005850:	900f      	str	r0, [sp, #60]	; 0x3c
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f aea4 	beq.w	80055a0 <_strtod_l+0x498>
 8005858:	991e      	ldr	r1, [sp, #120]	; 0x78
 800585a:	4620      	mov	r0, r4
 800585c:	f002 f81e 	bl	800789c <_Bfree>
 8005860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005862:	931e      	str	r3, [sp, #120]	; 0x78
 8005864:	f1b8 0f00 	cmp.w	r8, #0
 8005868:	f300 8091 	bgt.w	800598e <_strtod_l+0x886>
 800586c:	9b08      	ldr	r3, [sp, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd08      	ble.n	8005884 <_strtod_l+0x77c>
 8005872:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005874:	9907      	ldr	r1, [sp, #28]
 8005876:	4620      	mov	r0, r4
 8005878:	f002 f9d2 	bl	8007c20 <__pow5mult>
 800587c:	9007      	str	r0, [sp, #28]
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f ae8e 	beq.w	80055a0 <_strtod_l+0x498>
 8005884:	2f00      	cmp	r7, #0
 8005886:	dd08      	ble.n	800589a <_strtod_l+0x792>
 8005888:	9907      	ldr	r1, [sp, #28]
 800588a:	463a      	mov	r2, r7
 800588c:	4620      	mov	r0, r4
 800588e:	f002 fa21 	bl	8007cd4 <__lshift>
 8005892:	9007      	str	r0, [sp, #28]
 8005894:	2800      	cmp	r0, #0
 8005896:	f43f ae83 	beq.w	80055a0 <_strtod_l+0x498>
 800589a:	f1b9 0f00 	cmp.w	r9, #0
 800589e:	dd08      	ble.n	80058b2 <_strtod_l+0x7aa>
 80058a0:	4631      	mov	r1, r6
 80058a2:	464a      	mov	r2, r9
 80058a4:	4620      	mov	r0, r4
 80058a6:	f002 fa15 	bl	8007cd4 <__lshift>
 80058aa:	4606      	mov	r6, r0
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f43f ae77 	beq.w	80055a0 <_strtod_l+0x498>
 80058b2:	9a07      	ldr	r2, [sp, #28]
 80058b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80058b6:	4620      	mov	r0, r4
 80058b8:	f002 fa94 	bl	8007de4 <__mdiff>
 80058bc:	4605      	mov	r5, r0
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f ae6e 	beq.w	80055a0 <_strtod_l+0x498>
 80058c4:	68c3      	ldr	r3, [r0, #12]
 80058c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058c8:	2300      	movs	r3, #0
 80058ca:	60c3      	str	r3, [r0, #12]
 80058cc:	4631      	mov	r1, r6
 80058ce:	f002 fa6d 	bl	8007dac <__mcmp>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	da65      	bge.n	80059a2 <_strtod_l+0x89a>
 80058d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058d8:	ea53 030a 	orrs.w	r3, r3, sl
 80058dc:	f040 8087 	bne.w	80059ee <_strtod_l+0x8e6>
 80058e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 8082 	bne.w	80059ee <_strtod_l+0x8e6>
 80058ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058ee:	0d1b      	lsrs	r3, r3, #20
 80058f0:	051b      	lsls	r3, r3, #20
 80058f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058f6:	d97a      	bls.n	80059ee <_strtod_l+0x8e6>
 80058f8:	696b      	ldr	r3, [r5, #20]
 80058fa:	b913      	cbnz	r3, 8005902 <_strtod_l+0x7fa>
 80058fc:	692b      	ldr	r3, [r5, #16]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	dd75      	ble.n	80059ee <_strtod_l+0x8e6>
 8005902:	4629      	mov	r1, r5
 8005904:	2201      	movs	r2, #1
 8005906:	4620      	mov	r0, r4
 8005908:	f002 f9e4 	bl	8007cd4 <__lshift>
 800590c:	4631      	mov	r1, r6
 800590e:	4605      	mov	r5, r0
 8005910:	f002 fa4c 	bl	8007dac <__mcmp>
 8005914:	2800      	cmp	r0, #0
 8005916:	dd6a      	ble.n	80059ee <_strtod_l+0x8e6>
 8005918:	9904      	ldr	r1, [sp, #16]
 800591a:	4a55      	ldr	r2, [pc, #340]	; (8005a70 <_strtod_l+0x968>)
 800591c:	465b      	mov	r3, fp
 800591e:	2900      	cmp	r1, #0
 8005920:	f000 8085 	beq.w	8005a2e <_strtod_l+0x926>
 8005924:	ea02 010b 	and.w	r1, r2, fp
 8005928:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800592c:	dc7f      	bgt.n	8005a2e <_strtod_l+0x926>
 800592e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005932:	f77f aeaa 	ble.w	800568a <_strtod_l+0x582>
 8005936:	4a4f      	ldr	r2, [pc, #316]	; (8005a74 <_strtod_l+0x96c>)
 8005938:	2300      	movs	r3, #0
 800593a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800593e:	4650      	mov	r0, sl
 8005940:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005944:	4659      	mov	r1, fp
 8005946:	f7fa fe77 	bl	8000638 <__aeabi_dmul>
 800594a:	460b      	mov	r3, r1
 800594c:	4303      	orrs	r3, r0
 800594e:	bf08      	it	eq
 8005950:	2322      	moveq	r3, #34	; 0x22
 8005952:	4682      	mov	sl, r0
 8005954:	468b      	mov	fp, r1
 8005956:	bf08      	it	eq
 8005958:	6023      	streq	r3, [r4, #0]
 800595a:	e62b      	b.n	80055b4 <_strtod_l+0x4ac>
 800595c:	f04f 32ff 	mov.w	r2, #4294967295
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	ea03 0a0a 	and.w	sl, r3, sl
 8005968:	e6de      	b.n	8005728 <_strtod_l+0x620>
 800596a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800596e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005972:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005976:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800597a:	fa01 f308 	lsl.w	r3, r1, r8
 800597e:	930c      	str	r3, [sp, #48]	; 0x30
 8005980:	9111      	str	r1, [sp, #68]	; 0x44
 8005982:	e741      	b.n	8005808 <_strtod_l+0x700>
 8005984:	2300      	movs	r3, #0
 8005986:	930c      	str	r3, [sp, #48]	; 0x30
 8005988:	2301      	movs	r3, #1
 800598a:	9311      	str	r3, [sp, #68]	; 0x44
 800598c:	e73c      	b.n	8005808 <_strtod_l+0x700>
 800598e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005990:	4642      	mov	r2, r8
 8005992:	4620      	mov	r0, r4
 8005994:	f002 f99e 	bl	8007cd4 <__lshift>
 8005998:	901e      	str	r0, [sp, #120]	; 0x78
 800599a:	2800      	cmp	r0, #0
 800599c:	f47f af66 	bne.w	800586c <_strtod_l+0x764>
 80059a0:	e5fe      	b.n	80055a0 <_strtod_l+0x498>
 80059a2:	465f      	mov	r7, fp
 80059a4:	d16e      	bne.n	8005a84 <_strtod_l+0x97c>
 80059a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059ac:	b342      	cbz	r2, 8005a00 <_strtod_l+0x8f8>
 80059ae:	4a32      	ldr	r2, [pc, #200]	; (8005a78 <_strtod_l+0x970>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d128      	bne.n	8005a06 <_strtod_l+0x8fe>
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	4650      	mov	r0, sl
 80059b8:	b1eb      	cbz	r3, 80059f6 <_strtod_l+0x8ee>
 80059ba:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <_strtod_l+0x968>)
 80059bc:	403a      	ands	r2, r7
 80059be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80059c2:	f04f 31ff 	mov.w	r1, #4294967295
 80059c6:	d819      	bhi.n	80059fc <_strtod_l+0x8f4>
 80059c8:	0d12      	lsrs	r2, r2, #20
 80059ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80059ce:	fa01 f303 	lsl.w	r3, r1, r3
 80059d2:	4298      	cmp	r0, r3
 80059d4:	d117      	bne.n	8005a06 <_strtod_l+0x8fe>
 80059d6:	4b29      	ldr	r3, [pc, #164]	; (8005a7c <_strtod_l+0x974>)
 80059d8:	429f      	cmp	r7, r3
 80059da:	d102      	bne.n	80059e2 <_strtod_l+0x8da>
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f addf 	beq.w	80055a0 <_strtod_l+0x498>
 80059e2:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <_strtod_l+0x968>)
 80059e4:	403b      	ands	r3, r7
 80059e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80059ea:	f04f 0a00 	mov.w	sl, #0
 80059ee:	9b04      	ldr	r3, [sp, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1a0      	bne.n	8005936 <_strtod_l+0x82e>
 80059f4:	e5de      	b.n	80055b4 <_strtod_l+0x4ac>
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	e7ea      	b.n	80059d2 <_strtod_l+0x8ca>
 80059fc:	460b      	mov	r3, r1
 80059fe:	e7e8      	b.n	80059d2 <_strtod_l+0x8ca>
 8005a00:	ea53 030a 	orrs.w	r3, r3, sl
 8005a04:	d088      	beq.n	8005918 <_strtod_l+0x810>
 8005a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a08:	b1db      	cbz	r3, 8005a42 <_strtod_l+0x93a>
 8005a0a:	423b      	tst	r3, r7
 8005a0c:	d0ef      	beq.n	80059ee <_strtod_l+0x8e6>
 8005a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a10:	9a04      	ldr	r2, [sp, #16]
 8005a12:	4650      	mov	r0, sl
 8005a14:	4659      	mov	r1, fp
 8005a16:	b1c3      	cbz	r3, 8005a4a <_strtod_l+0x942>
 8005a18:	f7ff fb5a 	bl	80050d0 <sulp>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a24:	f7fa fc52 	bl	80002cc <__adddf3>
 8005a28:	4682      	mov	sl, r0
 8005a2a:	468b      	mov	fp, r1
 8005a2c:	e7df      	b.n	80059ee <_strtod_l+0x8e6>
 8005a2e:	4013      	ands	r3, r2
 8005a30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a3c:	f04f 3aff 	mov.w	sl, #4294967295
 8005a40:	e7d5      	b.n	80059ee <_strtod_l+0x8e6>
 8005a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a44:	ea13 0f0a 	tst.w	r3, sl
 8005a48:	e7e0      	b.n	8005a0c <_strtod_l+0x904>
 8005a4a:	f7ff fb41 	bl	80050d0 <sulp>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a56:	f7fa fc37 	bl	80002c8 <__aeabi_dsub>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4682      	mov	sl, r0
 8005a60:	468b      	mov	fp, r1
 8005a62:	f7fb f851 	bl	8000b08 <__aeabi_dcmpeq>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0c1      	beq.n	80059ee <_strtod_l+0x8e6>
 8005a6a:	e60e      	b.n	800568a <_strtod_l+0x582>
 8005a6c:	fffffc02 	.word	0xfffffc02
 8005a70:	7ff00000 	.word	0x7ff00000
 8005a74:	39500000 	.word	0x39500000
 8005a78:	000fffff 	.word	0x000fffff
 8005a7c:	7fefffff 	.word	0x7fefffff
 8005a80:	08009028 	.word	0x08009028
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	f002 fb0c 	bl	80080a4 <__ratio>
 8005a8c:	ec59 8b10 	vmov	r8, r9, d0
 8005a90:	ee10 0a10 	vmov	r0, s0
 8005a94:	2200      	movs	r2, #0
 8005a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	f7fb f848 	bl	8000b30 <__aeabi_dcmple>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d07c      	beq.n	8005b9e <_strtod_l+0xa96>
 8005aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04c      	beq.n	8005b44 <_strtod_l+0xa3c>
 8005aaa:	4b95      	ldr	r3, [pc, #596]	; (8005d00 <_strtod_l+0xbf8>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005ab2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005d00 <_strtod_l+0xbf8>
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <_strtod_l+0xbfc>)
 8005abc:	403b      	ands	r3, r7
 8005abe:	9311      	str	r3, [sp, #68]	; 0x44
 8005ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ac2:	4b91      	ldr	r3, [pc, #580]	; (8005d08 <_strtod_l+0xc00>)
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f040 80b2 	bne.w	8005c2e <_strtod_l+0xb26>
 8005aca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005ad6:	ec4b ab10 	vmov	d0, sl, fp
 8005ada:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005ade:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ae2:	f002 fa07 	bl	8007ef4 <__ulp>
 8005ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aea:	ec53 2b10 	vmov	r2, r3, d0
 8005aee:	f7fa fda3 	bl	8000638 <__aeabi_dmul>
 8005af2:	4652      	mov	r2, sl
 8005af4:	465b      	mov	r3, fp
 8005af6:	f7fa fbe9 	bl	80002cc <__adddf3>
 8005afa:	460b      	mov	r3, r1
 8005afc:	4981      	ldr	r1, [pc, #516]	; (8005d04 <_strtod_l+0xbfc>)
 8005afe:	4a83      	ldr	r2, [pc, #524]	; (8005d0c <_strtod_l+0xc04>)
 8005b00:	4019      	ands	r1, r3
 8005b02:	4291      	cmp	r1, r2
 8005b04:	4682      	mov	sl, r0
 8005b06:	d95e      	bls.n	8005bc6 <_strtod_l+0xabe>
 8005b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d103      	bne.n	8005b1a <_strtod_l+0xa12>
 8005b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b14:	3301      	adds	r3, #1
 8005b16:	f43f ad43 	beq.w	80055a0 <_strtod_l+0x498>
 8005b1a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005d18 <_strtod_l+0xc10>
 8005b1e:	f04f 3aff 	mov.w	sl, #4294967295
 8005b22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b24:	4620      	mov	r0, r4
 8005b26:	f001 feb9 	bl	800789c <_Bfree>
 8005b2a:	9907      	ldr	r1, [sp, #28]
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f001 feb5 	bl	800789c <_Bfree>
 8005b32:	4631      	mov	r1, r6
 8005b34:	4620      	mov	r0, r4
 8005b36:	f001 feb1 	bl	800789c <_Bfree>
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f001 fead 	bl	800789c <_Bfree>
 8005b42:	e613      	b.n	800576c <_strtod_l+0x664>
 8005b44:	f1ba 0f00 	cmp.w	sl, #0
 8005b48:	d11b      	bne.n	8005b82 <_strtod_l+0xa7a>
 8005b4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b4e:	b9f3      	cbnz	r3, 8005b8e <_strtod_l+0xa86>
 8005b50:	4b6b      	ldr	r3, [pc, #428]	; (8005d00 <_strtod_l+0xbf8>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f7fa ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8005b5c:	b9d0      	cbnz	r0, 8005b94 <_strtod_l+0xa8c>
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	4b6b      	ldr	r3, [pc, #428]	; (8005d10 <_strtod_l+0xc08>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	f7fa fd67 	bl	8000638 <__aeabi_dmul>
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	4689      	mov	r9, r1
 8005b6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b72:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005b76:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b78:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005b7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005b80:	e79b      	b.n	8005aba <_strtod_l+0x9b2>
 8005b82:	f1ba 0f01 	cmp.w	sl, #1
 8005b86:	d102      	bne.n	8005b8e <_strtod_l+0xa86>
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	f43f ad7e 	beq.w	800568a <_strtod_l+0x582>
 8005b8e:	4b61      	ldr	r3, [pc, #388]	; (8005d14 <_strtod_l+0xc0c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	e78c      	b.n	8005aae <_strtod_l+0x9a6>
 8005b94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005d10 <_strtod_l+0xc08>
 8005b98:	f04f 0800 	mov.w	r8, #0
 8005b9c:	e7e7      	b.n	8005b6e <_strtod_l+0xa66>
 8005b9e:	4b5c      	ldr	r3, [pc, #368]	; (8005d10 <_strtod_l+0xc08>)
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f7fa fd47 	bl	8000638 <__aeabi_dmul>
 8005baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bac:	4680      	mov	r8, r0
 8005bae:	4689      	mov	r9, r1
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_strtod_l+0xab8>
 8005bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bb6:	9012      	str	r0, [sp, #72]	; 0x48
 8005bb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005bbe:	e7dd      	b.n	8005b7c <_strtod_l+0xa74>
 8005bc0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005bc4:	e7f9      	b.n	8005bba <_strtod_l+0xab2>
 8005bc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1a8      	bne.n	8005b22 <_strtod_l+0xa1a>
 8005bd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bd6:	0d1b      	lsrs	r3, r3, #20
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d1a1      	bne.n	8005b22 <_strtod_l+0xa1a>
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fb f889 	bl	8000cf8 <__aeabi_d2lz>
 8005be6:	f7fa fcf9 	bl	80005dc <__aeabi_l2d>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fb69 	bl	80002c8 <__aeabi_dsub>
 8005bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bfc:	ea43 030a 	orr.w	r3, r3, sl
 8005c00:	4313      	orrs	r3, r2
 8005c02:	4680      	mov	r8, r0
 8005c04:	4689      	mov	r9, r1
 8005c06:	d053      	beq.n	8005cb0 <_strtod_l+0xba8>
 8005c08:	a335      	add	r3, pc, #212	; (adr r3, 8005ce0 <_strtod_l+0xbd8>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f7fa ff85 	bl	8000b1c <__aeabi_dcmplt>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f47f acce 	bne.w	80055b4 <_strtod_l+0x4ac>
 8005c18:	a333      	add	r3, pc, #204	; (adr r3, 8005ce8 <_strtod_l+0xbe0>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	4640      	mov	r0, r8
 8005c20:	4649      	mov	r1, r9
 8005c22:	f7fa ff99 	bl	8000b58 <__aeabi_dcmpgt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f43f af7b 	beq.w	8005b22 <_strtod_l+0xa1a>
 8005c2c:	e4c2      	b.n	80055b4 <_strtod_l+0x4ac>
 8005c2e:	9b04      	ldr	r3, [sp, #16]
 8005c30:	b333      	cbz	r3, 8005c80 <_strtod_l+0xb78>
 8005c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c38:	d822      	bhi.n	8005c80 <_strtod_l+0xb78>
 8005c3a:	a32d      	add	r3, pc, #180	; (adr r3, 8005cf0 <_strtod_l+0xbe8>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa ff74 	bl	8000b30 <__aeabi_dcmple>
 8005c48:	b1a0      	cbz	r0, 8005c74 <_strtod_l+0xb6c>
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	f7fa ffcb 	bl	8000be8 <__aeabi_d2uiz>
 8005c52:	2801      	cmp	r0, #1
 8005c54:	bf38      	it	cc
 8005c56:	2001      	movcc	r0, #1
 8005c58:	f7fa fc74 	bl	8000544 <__aeabi_ui2d>
 8005c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c5e:	4680      	mov	r8, r0
 8005c60:	4689      	mov	r9, r1
 8005c62:	bb13      	cbnz	r3, 8005caa <_strtod_l+0xba2>
 8005c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c68:	9014      	str	r0, [sp, #80]	; 0x50
 8005c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8005c6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005c88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c8c:	f002 f932 	bl	8007ef4 <__ulp>
 8005c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c94:	ec53 2b10 	vmov	r2, r3, d0
 8005c98:	f7fa fcce 	bl	8000638 <__aeabi_dmul>
 8005c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ca0:	f7fa fb14 	bl	80002cc <__adddf3>
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	468b      	mov	fp, r1
 8005ca8:	e78f      	b.n	8005bca <_strtod_l+0xac2>
 8005caa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005cae:	e7dd      	b.n	8005c6c <_strtod_l+0xb64>
 8005cb0:	a311      	add	r3, pc, #68	; (adr r3, 8005cf8 <_strtod_l+0xbf0>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa ff31 	bl	8000b1c <__aeabi_dcmplt>
 8005cba:	e7b4      	b.n	8005c26 <_strtod_l+0xb1e>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8005cc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	f7ff ba65 	b.w	8005194 <_strtod_l+0x8c>
 8005cca:	2b65      	cmp	r3, #101	; 0x65
 8005ccc:	f43f ab5d 	beq.w	800538a <_strtod_l+0x282>
 8005cd0:	2b45      	cmp	r3, #69	; 0x45
 8005cd2:	f43f ab5a 	beq.w	800538a <_strtod_l+0x282>
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f7ff bb92 	b.w	8005400 <_strtod_l+0x2f8>
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	94a03595 	.word	0x94a03595
 8005ce4:	3fdfffff 	.word	0x3fdfffff
 8005ce8:	35afe535 	.word	0x35afe535
 8005cec:	3fe00000 	.word	0x3fe00000
 8005cf0:	ffc00000 	.word	0xffc00000
 8005cf4:	41dfffff 	.word	0x41dfffff
 8005cf8:	94a03595 	.word	0x94a03595
 8005cfc:	3fcfffff 	.word	0x3fcfffff
 8005d00:	3ff00000 	.word	0x3ff00000
 8005d04:	7ff00000 	.word	0x7ff00000
 8005d08:	7fe00000 	.word	0x7fe00000
 8005d0c:	7c9fffff 	.word	0x7c9fffff
 8005d10:	3fe00000 	.word	0x3fe00000
 8005d14:	bff00000 	.word	0xbff00000
 8005d18:	7fefffff 	.word	0x7fefffff

08005d1c <_strtod_r>:
 8005d1c:	4b01      	ldr	r3, [pc, #4]	; (8005d24 <_strtod_r+0x8>)
 8005d1e:	f7ff b9f3 	b.w	8005108 <_strtod_l>
 8005d22:	bf00      	nop
 8005d24:	20000074 	.word	0x20000074

08005d28 <_strtol_l.isra.0>:
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2e:	d001      	beq.n	8005d34 <_strtol_l.isra.0+0xc>
 8005d30:	2b24      	cmp	r3, #36	; 0x24
 8005d32:	d906      	bls.n	8005d42 <_strtol_l.isra.0+0x1a>
 8005d34:	f7fe fa84 	bl	8004240 <__errno>
 8005d38:	2316      	movs	r3, #22
 8005d3a:	6003      	str	r3, [r0, #0]
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	4f3a      	ldr	r7, [pc, #232]	; (8005e2c <_strtol_l.isra.0+0x104>)
 8005d44:	468e      	mov	lr, r1
 8005d46:	4676      	mov	r6, lr
 8005d48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005d4c:	5de5      	ldrb	r5, [r4, r7]
 8005d4e:	f015 0508 	ands.w	r5, r5, #8
 8005d52:	d1f8      	bne.n	8005d46 <_strtol_l.isra.0+0x1e>
 8005d54:	2c2d      	cmp	r4, #45	; 0x2d
 8005d56:	d134      	bne.n	8005dc2 <_strtol_l.isra.0+0x9a>
 8005d58:	f89e 4000 	ldrb.w	r4, [lr]
 8005d5c:	f04f 0801 	mov.w	r8, #1
 8005d60:	f106 0e02 	add.w	lr, r6, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d05c      	beq.n	8005e22 <_strtol_l.isra.0+0xfa>
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d10c      	bne.n	8005d86 <_strtol_l.isra.0+0x5e>
 8005d6c:	2c30      	cmp	r4, #48	; 0x30
 8005d6e:	d10a      	bne.n	8005d86 <_strtol_l.isra.0+0x5e>
 8005d70:	f89e 4000 	ldrb.w	r4, [lr]
 8005d74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d78:	2c58      	cmp	r4, #88	; 0x58
 8005d7a:	d14d      	bne.n	8005e18 <_strtol_l.isra.0+0xf0>
 8005d7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005d80:	2310      	movs	r3, #16
 8005d82:	f10e 0e02 	add.w	lr, lr, #2
 8005d86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005d8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d8e:	2600      	movs	r6, #0
 8005d90:	fbbc f9f3 	udiv	r9, ip, r3
 8005d94:	4635      	mov	r5, r6
 8005d96:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005d9e:	2f09      	cmp	r7, #9
 8005da0:	d818      	bhi.n	8005dd4 <_strtol_l.isra.0+0xac>
 8005da2:	463c      	mov	r4, r7
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	dd24      	ble.n	8005df2 <_strtol_l.isra.0+0xca>
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	db1f      	blt.n	8005dec <_strtol_l.isra.0+0xc4>
 8005dac:	45a9      	cmp	r9, r5
 8005dae:	d31d      	bcc.n	8005dec <_strtol_l.isra.0+0xc4>
 8005db0:	d101      	bne.n	8005db6 <_strtol_l.isra.0+0x8e>
 8005db2:	45a2      	cmp	sl, r4
 8005db4:	db1a      	blt.n	8005dec <_strtol_l.isra.0+0xc4>
 8005db6:	fb05 4503 	mla	r5, r5, r3, r4
 8005dba:	2601      	movs	r6, #1
 8005dbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005dc0:	e7eb      	b.n	8005d9a <_strtol_l.isra.0+0x72>
 8005dc2:	2c2b      	cmp	r4, #43	; 0x2b
 8005dc4:	bf08      	it	eq
 8005dc6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005dca:	46a8      	mov	r8, r5
 8005dcc:	bf08      	it	eq
 8005dce:	f106 0e02 	addeq.w	lr, r6, #2
 8005dd2:	e7c7      	b.n	8005d64 <_strtol_l.isra.0+0x3c>
 8005dd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005dd8:	2f19      	cmp	r7, #25
 8005dda:	d801      	bhi.n	8005de0 <_strtol_l.isra.0+0xb8>
 8005ddc:	3c37      	subs	r4, #55	; 0x37
 8005dde:	e7e1      	b.n	8005da4 <_strtol_l.isra.0+0x7c>
 8005de0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005de4:	2f19      	cmp	r7, #25
 8005de6:	d804      	bhi.n	8005df2 <_strtol_l.isra.0+0xca>
 8005de8:	3c57      	subs	r4, #87	; 0x57
 8005dea:	e7db      	b.n	8005da4 <_strtol_l.isra.0+0x7c>
 8005dec:	f04f 36ff 	mov.w	r6, #4294967295
 8005df0:	e7e4      	b.n	8005dbc <_strtol_l.isra.0+0x94>
 8005df2:	2e00      	cmp	r6, #0
 8005df4:	da05      	bge.n	8005e02 <_strtol_l.isra.0+0xda>
 8005df6:	2322      	movs	r3, #34	; 0x22
 8005df8:	6003      	str	r3, [r0, #0]
 8005dfa:	4665      	mov	r5, ip
 8005dfc:	b942      	cbnz	r2, 8005e10 <_strtol_l.isra.0+0xe8>
 8005dfe:	4628      	mov	r0, r5
 8005e00:	e79d      	b.n	8005d3e <_strtol_l.isra.0+0x16>
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	d000      	beq.n	8005e0a <_strtol_l.isra.0+0xe2>
 8005e08:	426d      	negs	r5, r5
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	d0f7      	beq.n	8005dfe <_strtol_l.isra.0+0xd6>
 8005e0e:	b10e      	cbz	r6, 8005e14 <_strtol_l.isra.0+0xec>
 8005e10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	e7f2      	b.n	8005dfe <_strtol_l.isra.0+0xd6>
 8005e18:	2430      	movs	r4, #48	; 0x30
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1b3      	bne.n	8005d86 <_strtol_l.isra.0+0x5e>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	e7b1      	b.n	8005d86 <_strtol_l.isra.0+0x5e>
 8005e22:	2c30      	cmp	r4, #48	; 0x30
 8005e24:	d0a4      	beq.n	8005d70 <_strtol_l.isra.0+0x48>
 8005e26:	230a      	movs	r3, #10
 8005e28:	e7ad      	b.n	8005d86 <_strtol_l.isra.0+0x5e>
 8005e2a:	bf00      	nop
 8005e2c:	08009051 	.word	0x08009051

08005e30 <_strtol_r>:
 8005e30:	f7ff bf7a 	b.w	8005d28 <_strtol_l.isra.0>

08005e34 <__swbuf_r>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	460e      	mov	r6, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	b118      	cbz	r0, 8005e46 <__swbuf_r+0x12>
 8005e3e:	6983      	ldr	r3, [r0, #24]
 8005e40:	b90b      	cbnz	r3, 8005e46 <__swbuf_r+0x12>
 8005e42:	f001 f84b 	bl	8006edc <__sinit>
 8005e46:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <__swbuf_r+0x98>)
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d12b      	bne.n	8005ea4 <__swbuf_r+0x70>
 8005e4c:	686c      	ldr	r4, [r5, #4]
 8005e4e:	69a3      	ldr	r3, [r4, #24]
 8005e50:	60a3      	str	r3, [r4, #8]
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	071a      	lsls	r2, r3, #28
 8005e56:	d52f      	bpl.n	8005eb8 <__swbuf_r+0x84>
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	b36b      	cbz	r3, 8005eb8 <__swbuf_r+0x84>
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	1ac0      	subs	r0, r0, r3
 8005e62:	6963      	ldr	r3, [r4, #20]
 8005e64:	b2f6      	uxtb	r6, r6
 8005e66:	4283      	cmp	r3, r0
 8005e68:	4637      	mov	r7, r6
 8005e6a:	dc04      	bgt.n	8005e76 <__swbuf_r+0x42>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 ffa0 	bl	8006db4 <_fflush_r>
 8005e74:	bb30      	cbnz	r0, 8005ec4 <__swbuf_r+0x90>
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	60a3      	str	r3, [r4, #8]
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	701e      	strb	r6, [r3, #0]
 8005e84:	6963      	ldr	r3, [r4, #20]
 8005e86:	3001      	adds	r0, #1
 8005e88:	4283      	cmp	r3, r0
 8005e8a:	d004      	beq.n	8005e96 <__swbuf_r+0x62>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d506      	bpl.n	8005ea0 <__swbuf_r+0x6c>
 8005e92:	2e0a      	cmp	r6, #10
 8005e94:	d104      	bne.n	8005ea0 <__swbuf_r+0x6c>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 ff8b 	bl	8006db4 <_fflush_r>
 8005e9e:	b988      	cbnz	r0, 8005ec4 <__swbuf_r+0x90>
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <__swbuf_r+0x9c>)
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	d101      	bne.n	8005eae <__swbuf_r+0x7a>
 8005eaa:	68ac      	ldr	r4, [r5, #8]
 8005eac:	e7cf      	b.n	8005e4e <__swbuf_r+0x1a>
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <__swbuf_r+0xa0>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	bf08      	it	eq
 8005eb4:	68ec      	ldreq	r4, [r5, #12]
 8005eb6:	e7ca      	b.n	8005e4e <__swbuf_r+0x1a>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f80c 	bl	8005ed8 <__swsetup_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d0cb      	beq.n	8005e5c <__swbuf_r+0x28>
 8005ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ec8:	e7ea      	b.n	8005ea0 <__swbuf_r+0x6c>
 8005eca:	bf00      	nop
 8005ecc:	08009208 	.word	0x08009208
 8005ed0:	08009228 	.word	0x08009228
 8005ed4:	080091e8 	.word	0x080091e8

08005ed8 <__swsetup_r>:
 8005ed8:	4b32      	ldr	r3, [pc, #200]	; (8005fa4 <__swsetup_r+0xcc>)
 8005eda:	b570      	push	{r4, r5, r6, lr}
 8005edc:	681d      	ldr	r5, [r3, #0]
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	b125      	cbz	r5, 8005eee <__swsetup_r+0x16>
 8005ee4:	69ab      	ldr	r3, [r5, #24]
 8005ee6:	b913      	cbnz	r3, 8005eee <__swsetup_r+0x16>
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 fff7 	bl	8006edc <__sinit>
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <__swsetup_r+0xd0>)
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	d10f      	bne.n	8005f14 <__swsetup_r+0x3c>
 8005ef4:	686c      	ldr	r4, [r5, #4]
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005efc:	0719      	lsls	r1, r3, #28
 8005efe:	d42c      	bmi.n	8005f5a <__swsetup_r+0x82>
 8005f00:	06dd      	lsls	r5, r3, #27
 8005f02:	d411      	bmi.n	8005f28 <__swsetup_r+0x50>
 8005f04:	2309      	movs	r3, #9
 8005f06:	6033      	str	r3, [r6, #0]
 8005f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	e03e      	b.n	8005f92 <__swsetup_r+0xba>
 8005f14:	4b25      	ldr	r3, [pc, #148]	; (8005fac <__swsetup_r+0xd4>)
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d101      	bne.n	8005f1e <__swsetup_r+0x46>
 8005f1a:	68ac      	ldr	r4, [r5, #8]
 8005f1c:	e7eb      	b.n	8005ef6 <__swsetup_r+0x1e>
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <__swsetup_r+0xd8>)
 8005f20:	429c      	cmp	r4, r3
 8005f22:	bf08      	it	eq
 8005f24:	68ec      	ldreq	r4, [r5, #12]
 8005f26:	e7e6      	b.n	8005ef6 <__swsetup_r+0x1e>
 8005f28:	0758      	lsls	r0, r3, #29
 8005f2a:	d512      	bpl.n	8005f52 <__swsetup_r+0x7a>
 8005f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f2e:	b141      	cbz	r1, 8005f42 <__swsetup_r+0x6a>
 8005f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f34:	4299      	cmp	r1, r3
 8005f36:	d002      	beq.n	8005f3e <__swsetup_r+0x66>
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f002 f939 	bl	80081b0 <_free_r>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6363      	str	r3, [r4, #52]	; 0x34
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f043 0308 	orr.w	r3, r3, #8
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	b94b      	cbnz	r3, 8005f72 <__swsetup_r+0x9a>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d003      	beq.n	8005f72 <__swsetup_r+0x9a>
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f001 fbed 	bl	800774c <__smakebuf_r>
 8005f72:	89a0      	ldrh	r0, [r4, #12]
 8005f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f78:	f010 0301 	ands.w	r3, r0, #1
 8005f7c:	d00a      	beq.n	8005f94 <__swsetup_r+0xbc>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60a3      	str	r3, [r4, #8]
 8005f82:	6963      	ldr	r3, [r4, #20]
 8005f84:	425b      	negs	r3, r3
 8005f86:	61a3      	str	r3, [r4, #24]
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	b943      	cbnz	r3, 8005f9e <__swsetup_r+0xc6>
 8005f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f90:	d1ba      	bne.n	8005f08 <__swsetup_r+0x30>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	0781      	lsls	r1, r0, #30
 8005f96:	bf58      	it	pl
 8005f98:	6963      	ldrpl	r3, [r4, #20]
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	e7f4      	b.n	8005f88 <__swsetup_r+0xb0>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e7f7      	b.n	8005f92 <__swsetup_r+0xba>
 8005fa2:	bf00      	nop
 8005fa4:	2000000c 	.word	0x2000000c
 8005fa8:	08009208 	.word	0x08009208
 8005fac:	08009228 	.word	0x08009228
 8005fb0:	080091e8 	.word	0x080091e8

08005fb4 <quorem>:
 8005fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	6903      	ldr	r3, [r0, #16]
 8005fba:	690c      	ldr	r4, [r1, #16]
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	f2c0 8081 	blt.w	80060c6 <quorem+0x112>
 8005fc4:	3c01      	subs	r4, #1
 8005fc6:	f101 0814 	add.w	r8, r1, #20
 8005fca:	f100 0514 	add.w	r5, r0, #20
 8005fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fe8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fec:	d331      	bcc.n	8006052 <quorem+0x9e>
 8005fee:	f04f 0e00 	mov.w	lr, #0
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	46ac      	mov	ip, r5
 8005ff6:	46f2      	mov	sl, lr
 8005ff8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ffc:	b293      	uxth	r3, r2
 8005ffe:	fb06 e303 	mla	r3, r6, r3, lr
 8006002:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006006:	b29b      	uxth	r3, r3
 8006008:	ebaa 0303 	sub.w	r3, sl, r3
 800600c:	0c12      	lsrs	r2, r2, #16
 800600e:	f8dc a000 	ldr.w	sl, [ip]
 8006012:	fb06 e202 	mla	r2, r6, r2, lr
 8006016:	fa13 f38a 	uxtah	r3, r3, sl
 800601a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800601e:	fa1f fa82 	uxth.w	sl, r2
 8006022:	f8dc 2000 	ldr.w	r2, [ip]
 8006026:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800602a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800602e:	b29b      	uxth	r3, r3
 8006030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006034:	4581      	cmp	r9, r0
 8006036:	f84c 3b04 	str.w	r3, [ip], #4
 800603a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800603e:	d2db      	bcs.n	8005ff8 <quorem+0x44>
 8006040:	f855 300b 	ldr.w	r3, [r5, fp]
 8006044:	b92b      	cbnz	r3, 8006052 <quorem+0x9e>
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	3b04      	subs	r3, #4
 800604a:	429d      	cmp	r5, r3
 800604c:	461a      	mov	r2, r3
 800604e:	d32e      	bcc.n	80060ae <quorem+0xfa>
 8006050:	613c      	str	r4, [r7, #16]
 8006052:	4638      	mov	r0, r7
 8006054:	f001 feaa 	bl	8007dac <__mcmp>
 8006058:	2800      	cmp	r0, #0
 800605a:	db24      	blt.n	80060a6 <quorem+0xf2>
 800605c:	3601      	adds	r6, #1
 800605e:	4628      	mov	r0, r5
 8006060:	f04f 0c00 	mov.w	ip, #0
 8006064:	f858 2b04 	ldr.w	r2, [r8], #4
 8006068:	f8d0 e000 	ldr.w	lr, [r0]
 800606c:	b293      	uxth	r3, r2
 800606e:	ebac 0303 	sub.w	r3, ip, r3
 8006072:	0c12      	lsrs	r2, r2, #16
 8006074:	fa13 f38e 	uxtah	r3, r3, lr
 8006078:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800607c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006086:	45c1      	cmp	r9, r8
 8006088:	f840 3b04 	str.w	r3, [r0], #4
 800608c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006090:	d2e8      	bcs.n	8006064 <quorem+0xb0>
 8006092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800609a:	b922      	cbnz	r2, 80060a6 <quorem+0xf2>
 800609c:	3b04      	subs	r3, #4
 800609e:	429d      	cmp	r5, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	d30a      	bcc.n	80060ba <quorem+0x106>
 80060a4:	613c      	str	r4, [r7, #16]
 80060a6:	4630      	mov	r0, r6
 80060a8:	b003      	add	sp, #12
 80060aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d1cc      	bne.n	8006050 <quorem+0x9c>
 80060b6:	3c01      	subs	r4, #1
 80060b8:	e7c7      	b.n	800604a <quorem+0x96>
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	3b04      	subs	r3, #4
 80060be:	2a00      	cmp	r2, #0
 80060c0:	d1f0      	bne.n	80060a4 <quorem+0xf0>
 80060c2:	3c01      	subs	r4, #1
 80060c4:	e7eb      	b.n	800609e <quorem+0xea>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e7ee      	b.n	80060a8 <quorem+0xf4>
 80060ca:	0000      	movs	r0, r0
 80060cc:	0000      	movs	r0, r0
	...

080060d0 <_dtoa_r>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	ed2d 8b02 	vpush	{d8}
 80060d8:	ec57 6b10 	vmov	r6, r7, d0
 80060dc:	b095      	sub	sp, #84	; 0x54
 80060de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060e4:	9105      	str	r1, [sp, #20]
 80060e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060ea:	4604      	mov	r4, r0
 80060ec:	9209      	str	r2, [sp, #36]	; 0x24
 80060ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80060f0:	b975      	cbnz	r5, 8006110 <_dtoa_r+0x40>
 80060f2:	2010      	movs	r0, #16
 80060f4:	f001 fb6a 	bl	80077cc <malloc>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6260      	str	r0, [r4, #36]	; 0x24
 80060fc:	b920      	cbnz	r0, 8006108 <_dtoa_r+0x38>
 80060fe:	4bb2      	ldr	r3, [pc, #712]	; (80063c8 <_dtoa_r+0x2f8>)
 8006100:	21ea      	movs	r1, #234	; 0xea
 8006102:	48b2      	ldr	r0, [pc, #712]	; (80063cc <_dtoa_r+0x2fc>)
 8006104:	f002 fae8 	bl	80086d8 <__assert_func>
 8006108:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800610c:	6005      	str	r5, [r0, #0]
 800610e:	60c5      	str	r5, [r0, #12]
 8006110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	b151      	cbz	r1, 800612c <_dtoa_r+0x5c>
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	604a      	str	r2, [r1, #4]
 800611a:	2301      	movs	r3, #1
 800611c:	4093      	lsls	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
 8006120:	4620      	mov	r0, r4
 8006122:	f001 fbbb 	bl	800789c <_Bfree>
 8006126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	1e3b      	subs	r3, r7, #0
 800612e:	bfb9      	ittee	lt
 8006130:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006134:	9303      	strlt	r3, [sp, #12]
 8006136:	2300      	movge	r3, #0
 8006138:	f8c8 3000 	strge.w	r3, [r8]
 800613c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006140:	4ba3      	ldr	r3, [pc, #652]	; (80063d0 <_dtoa_r+0x300>)
 8006142:	bfbc      	itt	lt
 8006144:	2201      	movlt	r2, #1
 8006146:	f8c8 2000 	strlt.w	r2, [r8]
 800614a:	ea33 0309 	bics.w	r3, r3, r9
 800614e:	d11b      	bne.n	8006188 <_dtoa_r+0xb8>
 8006150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006152:	f242 730f 	movw	r3, #9999	; 0x270f
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800615c:	4333      	orrs	r3, r6
 800615e:	f000 857a 	beq.w	8006c56 <_dtoa_r+0xb86>
 8006162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006164:	b963      	cbnz	r3, 8006180 <_dtoa_r+0xb0>
 8006166:	4b9b      	ldr	r3, [pc, #620]	; (80063d4 <_dtoa_r+0x304>)
 8006168:	e024      	b.n	80061b4 <_dtoa_r+0xe4>
 800616a:	4b9b      	ldr	r3, [pc, #620]	; (80063d8 <_dtoa_r+0x308>)
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	3308      	adds	r3, #8
 8006170:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	9800      	ldr	r0, [sp, #0]
 8006176:	b015      	add	sp, #84	; 0x54
 8006178:	ecbd 8b02 	vpop	{d8}
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	4b94      	ldr	r3, [pc, #592]	; (80063d4 <_dtoa_r+0x304>)
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	3303      	adds	r3, #3
 8006186:	e7f3      	b.n	8006170 <_dtoa_r+0xa0>
 8006188:	ed9d 7b02 	vldr	d7, [sp, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	ec51 0b17 	vmov	r0, r1, d7
 8006192:	2300      	movs	r3, #0
 8006194:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006198:	f7fa fcb6 	bl	8000b08 <__aeabi_dcmpeq>
 800619c:	4680      	mov	r8, r0
 800619e:	b158      	cbz	r0, 80061b8 <_dtoa_r+0xe8>
 80061a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061a2:	2301      	movs	r3, #1
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8551 	beq.w	8006c50 <_dtoa_r+0xb80>
 80061ae:	488b      	ldr	r0, [pc, #556]	; (80063dc <_dtoa_r+0x30c>)
 80061b0:	6018      	str	r0, [r3, #0]
 80061b2:	1e43      	subs	r3, r0, #1
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	e7dd      	b.n	8006174 <_dtoa_r+0xa4>
 80061b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80061bc:	aa12      	add	r2, sp, #72	; 0x48
 80061be:	a913      	add	r1, sp, #76	; 0x4c
 80061c0:	4620      	mov	r0, r4
 80061c2:	f001 ff13 	bl	8007fec <__d2b>
 80061c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061ca:	4683      	mov	fp, r0
 80061cc:	2d00      	cmp	r5, #0
 80061ce:	d07c      	beq.n	80062ca <_dtoa_r+0x1fa>
 80061d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80061d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80061de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061ea:	4b7d      	ldr	r3, [pc, #500]	; (80063e0 <_dtoa_r+0x310>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7fa f869 	bl	80002c8 <__aeabi_dsub>
 80061f6:	a36e      	add	r3, pc, #440	; (adr r3, 80063b0 <_dtoa_r+0x2e0>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa fa1c 	bl	8000638 <__aeabi_dmul>
 8006200:	a36d      	add	r3, pc, #436	; (adr r3, 80063b8 <_dtoa_r+0x2e8>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa f861 	bl	80002cc <__adddf3>
 800620a:	4606      	mov	r6, r0
 800620c:	4628      	mov	r0, r5
 800620e:	460f      	mov	r7, r1
 8006210:	f7fa f9a8 	bl	8000564 <__aeabi_i2d>
 8006214:	a36a      	add	r3, pc, #424	; (adr r3, 80063c0 <_dtoa_r+0x2f0>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f7fa fa0d 	bl	8000638 <__aeabi_dmul>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	f7fa f851 	bl	80002cc <__adddf3>
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	f7fa fcb3 	bl	8000b98 <__aeabi_d2iz>
 8006232:	2200      	movs	r2, #0
 8006234:	4682      	mov	sl, r0
 8006236:	2300      	movs	r3, #0
 8006238:	4630      	mov	r0, r6
 800623a:	4639      	mov	r1, r7
 800623c:	f7fa fc6e 	bl	8000b1c <__aeabi_dcmplt>
 8006240:	b148      	cbz	r0, 8006256 <_dtoa_r+0x186>
 8006242:	4650      	mov	r0, sl
 8006244:	f7fa f98e 	bl	8000564 <__aeabi_i2d>
 8006248:	4632      	mov	r2, r6
 800624a:	463b      	mov	r3, r7
 800624c:	f7fa fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8006250:	b908      	cbnz	r0, 8006256 <_dtoa_r+0x186>
 8006252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006256:	f1ba 0f16 	cmp.w	sl, #22
 800625a:	d854      	bhi.n	8006306 <_dtoa_r+0x236>
 800625c:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <_dtoa_r+0x314>)
 800625e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800626a:	f7fa fc57 	bl	8000b1c <__aeabi_dcmplt>
 800626e:	2800      	cmp	r0, #0
 8006270:	d04b      	beq.n	800630a <_dtoa_r+0x23a>
 8006272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006276:	2300      	movs	r3, #0
 8006278:	930e      	str	r3, [sp, #56]	; 0x38
 800627a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800627c:	1b5d      	subs	r5, r3, r5
 800627e:	1e6b      	subs	r3, r5, #1
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	bf43      	ittte	mi
 8006284:	2300      	movmi	r3, #0
 8006286:	f1c5 0801 	rsbmi	r8, r5, #1
 800628a:	9304      	strmi	r3, [sp, #16]
 800628c:	f04f 0800 	movpl.w	r8, #0
 8006290:	f1ba 0f00 	cmp.w	sl, #0
 8006294:	db3b      	blt.n	800630e <_dtoa_r+0x23e>
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800629c:	4453      	add	r3, sl
 800629e:	9304      	str	r3, [sp, #16]
 80062a0:	2300      	movs	r3, #0
 80062a2:	9306      	str	r3, [sp, #24]
 80062a4:	9b05      	ldr	r3, [sp, #20]
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d869      	bhi.n	800637e <_dtoa_r+0x2ae>
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	bfc4      	itt	gt
 80062ae:	3b04      	subgt	r3, #4
 80062b0:	9305      	strgt	r3, [sp, #20]
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	f1a3 0302 	sub.w	r3, r3, #2
 80062b8:	bfcc      	ite	gt
 80062ba:	2500      	movgt	r5, #0
 80062bc:	2501      	movle	r5, #1
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d869      	bhi.n	8006396 <_dtoa_r+0x2c6>
 80062c2:	e8df f003 	tbb	[pc, r3]
 80062c6:	4e2c      	.short	0x4e2c
 80062c8:	5a4c      	.short	0x5a4c
 80062ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80062ce:	441d      	add	r5, r3
 80062d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	bfc1      	itttt	gt
 80062d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80062e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062e8:	bfda      	itte	le
 80062ea:	f1c3 0320 	rsble	r3, r3, #32
 80062ee:	fa06 f003 	lslle.w	r0, r6, r3
 80062f2:	4318      	orrgt	r0, r3
 80062f4:	f7fa f926 	bl	8000544 <__aeabi_ui2d>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4606      	mov	r6, r0
 80062fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006300:	3d01      	subs	r5, #1
 8006302:	9310      	str	r3, [sp, #64]	; 0x40
 8006304:	e771      	b.n	80061ea <_dtoa_r+0x11a>
 8006306:	2301      	movs	r3, #1
 8006308:	e7b6      	b.n	8006278 <_dtoa_r+0x1a8>
 800630a:	900e      	str	r0, [sp, #56]	; 0x38
 800630c:	e7b5      	b.n	800627a <_dtoa_r+0x1aa>
 800630e:	f1ca 0300 	rsb	r3, sl, #0
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	2300      	movs	r3, #0
 8006316:	eba8 080a 	sub.w	r8, r8, sl
 800631a:	930d      	str	r3, [sp, #52]	; 0x34
 800631c:	e7c2      	b.n	80062a4 <_dtoa_r+0x1d4>
 800631e:	2300      	movs	r3, #0
 8006320:	9308      	str	r3, [sp, #32]
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc39      	bgt.n	800639c <_dtoa_r+0x2cc>
 8006328:	f04f 0901 	mov.w	r9, #1
 800632c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006330:	464b      	mov	r3, r9
 8006332:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006336:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006338:	2200      	movs	r2, #0
 800633a:	6042      	str	r2, [r0, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	f102 0614 	add.w	r6, r2, #20
 8006342:	429e      	cmp	r6, r3
 8006344:	6841      	ldr	r1, [r0, #4]
 8006346:	d92f      	bls.n	80063a8 <_dtoa_r+0x2d8>
 8006348:	4620      	mov	r0, r4
 800634a:	f001 fa67 	bl	800781c <_Balloc>
 800634e:	9000      	str	r0, [sp, #0]
 8006350:	2800      	cmp	r0, #0
 8006352:	d14b      	bne.n	80063ec <_dtoa_r+0x31c>
 8006354:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <_dtoa_r+0x318>)
 8006356:	4602      	mov	r2, r0
 8006358:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800635c:	e6d1      	b.n	8006102 <_dtoa_r+0x32>
 800635e:	2301      	movs	r3, #1
 8006360:	e7de      	b.n	8006320 <_dtoa_r+0x250>
 8006362:	2300      	movs	r3, #0
 8006364:	9308      	str	r3, [sp, #32]
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	eb0a 0903 	add.w	r9, sl, r3
 800636c:	f109 0301 	add.w	r3, r9, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	bfb8      	it	lt
 8006376:	2301      	movlt	r3, #1
 8006378:	e7dd      	b.n	8006336 <_dtoa_r+0x266>
 800637a:	2301      	movs	r3, #1
 800637c:	e7f2      	b.n	8006364 <_dtoa_r+0x294>
 800637e:	2501      	movs	r5, #1
 8006380:	2300      	movs	r3, #0
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	9508      	str	r5, [sp, #32]
 8006386:	f04f 39ff 	mov.w	r9, #4294967295
 800638a:	2200      	movs	r2, #0
 800638c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006390:	2312      	movs	r3, #18
 8006392:	9209      	str	r2, [sp, #36]	; 0x24
 8006394:	e7cf      	b.n	8006336 <_dtoa_r+0x266>
 8006396:	2301      	movs	r3, #1
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	e7f4      	b.n	8006386 <_dtoa_r+0x2b6>
 800639c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80063a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80063a4:	464b      	mov	r3, r9
 80063a6:	e7c6      	b.n	8006336 <_dtoa_r+0x266>
 80063a8:	3101      	adds	r1, #1
 80063aa:	6041      	str	r1, [r0, #4]
 80063ac:	0052      	lsls	r2, r2, #1
 80063ae:	e7c6      	b.n	800633e <_dtoa_r+0x26e>
 80063b0:	636f4361 	.word	0x636f4361
 80063b4:	3fd287a7 	.word	0x3fd287a7
 80063b8:	8b60c8b3 	.word	0x8b60c8b3
 80063bc:	3fc68a28 	.word	0x3fc68a28
 80063c0:	509f79fb 	.word	0x509f79fb
 80063c4:	3fd34413 	.word	0x3fd34413
 80063c8:	0800915e 	.word	0x0800915e
 80063cc:	08009175 	.word	0x08009175
 80063d0:	7ff00000 	.word	0x7ff00000
 80063d4:	0800915a 	.word	0x0800915a
 80063d8:	08009151 	.word	0x08009151
 80063dc:	08008fd1 	.word	0x08008fd1
 80063e0:	3ff80000 	.word	0x3ff80000
 80063e4:	08009350 	.word	0x08009350
 80063e8:	080091d4 	.word	0x080091d4
 80063ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ee:	9a00      	ldr	r2, [sp, #0]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	2b0e      	cmp	r3, #14
 80063f6:	f200 80ad 	bhi.w	8006554 <_dtoa_r+0x484>
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	f000 80aa 	beq.w	8006554 <_dtoa_r+0x484>
 8006400:	f1ba 0f00 	cmp.w	sl, #0
 8006404:	dd36      	ble.n	8006474 <_dtoa_r+0x3a4>
 8006406:	4ac3      	ldr	r2, [pc, #780]	; (8006714 <_dtoa_r+0x644>)
 8006408:	f00a 030f 	and.w	r3, sl, #15
 800640c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006410:	ed93 7b00 	vldr	d7, [r3]
 8006414:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006418:	ea4f 172a 	mov.w	r7, sl, asr #4
 800641c:	eeb0 8a47 	vmov.f32	s16, s14
 8006420:	eef0 8a67 	vmov.f32	s17, s15
 8006424:	d016      	beq.n	8006454 <_dtoa_r+0x384>
 8006426:	4bbc      	ldr	r3, [pc, #752]	; (8006718 <_dtoa_r+0x648>)
 8006428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800642c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006430:	f7fa fa2c 	bl	800088c <__aeabi_ddiv>
 8006434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006438:	f007 070f 	and.w	r7, r7, #15
 800643c:	2503      	movs	r5, #3
 800643e:	4eb6      	ldr	r6, [pc, #728]	; (8006718 <_dtoa_r+0x648>)
 8006440:	b957      	cbnz	r7, 8006458 <_dtoa_r+0x388>
 8006442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006446:	ec53 2b18 	vmov	r2, r3, d8
 800644a:	f7fa fa1f 	bl	800088c <__aeabi_ddiv>
 800644e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006452:	e029      	b.n	80064a8 <_dtoa_r+0x3d8>
 8006454:	2502      	movs	r5, #2
 8006456:	e7f2      	b.n	800643e <_dtoa_r+0x36e>
 8006458:	07f9      	lsls	r1, r7, #31
 800645a:	d508      	bpl.n	800646e <_dtoa_r+0x39e>
 800645c:	ec51 0b18 	vmov	r0, r1, d8
 8006460:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006464:	f7fa f8e8 	bl	8000638 <__aeabi_dmul>
 8006468:	ec41 0b18 	vmov	d8, r0, r1
 800646c:	3501      	adds	r5, #1
 800646e:	107f      	asrs	r7, r7, #1
 8006470:	3608      	adds	r6, #8
 8006472:	e7e5      	b.n	8006440 <_dtoa_r+0x370>
 8006474:	f000 80a6 	beq.w	80065c4 <_dtoa_r+0x4f4>
 8006478:	f1ca 0600 	rsb	r6, sl, #0
 800647c:	4ba5      	ldr	r3, [pc, #660]	; (8006714 <_dtoa_r+0x644>)
 800647e:	4fa6      	ldr	r7, [pc, #664]	; (8006718 <_dtoa_r+0x648>)
 8006480:	f006 020f 	and.w	r2, r6, #15
 8006484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006490:	f7fa f8d2 	bl	8000638 <__aeabi_dmul>
 8006494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006498:	1136      	asrs	r6, r6, #4
 800649a:	2300      	movs	r3, #0
 800649c:	2502      	movs	r5, #2
 800649e:	2e00      	cmp	r6, #0
 80064a0:	f040 8085 	bne.w	80065ae <_dtoa_r+0x4de>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1d2      	bne.n	800644e <_dtoa_r+0x37e>
 80064a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 808c 	beq.w	80065c8 <_dtoa_r+0x4f8>
 80064b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064b4:	4b99      	ldr	r3, [pc, #612]	; (800671c <_dtoa_r+0x64c>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	4630      	mov	r0, r6
 80064ba:	4639      	mov	r1, r7
 80064bc:	f7fa fb2e 	bl	8000b1c <__aeabi_dcmplt>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f000 8081 	beq.w	80065c8 <_dtoa_r+0x4f8>
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d07d      	beq.n	80065c8 <_dtoa_r+0x4f8>
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	dd3c      	ble.n	800654c <_dtoa_r+0x47c>
 80064d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	2200      	movs	r2, #0
 80064da:	4b91      	ldr	r3, [pc, #580]	; (8006720 <_dtoa_r+0x650>)
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7fa f8aa 	bl	8000638 <__aeabi_dmul>
 80064e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e8:	3501      	adds	r5, #1
 80064ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80064ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7fa f836 	bl	8000564 <__aeabi_i2d>
 80064f8:	4632      	mov	r2, r6
 80064fa:	463b      	mov	r3, r7
 80064fc:	f7fa f89c 	bl	8000638 <__aeabi_dmul>
 8006500:	4b88      	ldr	r3, [pc, #544]	; (8006724 <_dtoa_r+0x654>)
 8006502:	2200      	movs	r2, #0
 8006504:	f7f9 fee2 	bl	80002cc <__adddf3>
 8006508:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800650c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006514:	2b00      	cmp	r3, #0
 8006516:	d15c      	bne.n	80065d2 <_dtoa_r+0x502>
 8006518:	4b83      	ldr	r3, [pc, #524]	; (8006728 <_dtoa_r+0x658>)
 800651a:	2200      	movs	r2, #0
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7f9 fed2 	bl	80002c8 <__aeabi_dsub>
 8006524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	f7fa fb14 	bl	8000b58 <__aeabi_dcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	f040 8296 	bne.w	8006a62 <_dtoa_r+0x992>
 8006536:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800653a:	4630      	mov	r0, r6
 800653c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa faeb 	bl	8000b1c <__aeabi_dcmplt>
 8006546:	2800      	cmp	r0, #0
 8006548:	f040 8288 	bne.w	8006a5c <_dtoa_r+0x98c>
 800654c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006550:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006556:	2b00      	cmp	r3, #0
 8006558:	f2c0 8158 	blt.w	800680c <_dtoa_r+0x73c>
 800655c:	f1ba 0f0e 	cmp.w	sl, #14
 8006560:	f300 8154 	bgt.w	800680c <_dtoa_r+0x73c>
 8006564:	4b6b      	ldr	r3, [pc, #428]	; (8006714 <_dtoa_r+0x644>)
 8006566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800656a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	f280 80e3 	bge.w	800673c <_dtoa_r+0x66c>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f300 80df 	bgt.w	800673c <_dtoa_r+0x66c>
 800657e:	f040 826d 	bne.w	8006a5c <_dtoa_r+0x98c>
 8006582:	4b69      	ldr	r3, [pc, #420]	; (8006728 <_dtoa_r+0x658>)
 8006584:	2200      	movs	r2, #0
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	f7fa f855 	bl	8000638 <__aeabi_dmul>
 800658e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006592:	f7fa fad7 	bl	8000b44 <__aeabi_dcmpge>
 8006596:	9e01      	ldr	r6, [sp, #4]
 8006598:	4637      	mov	r7, r6
 800659a:	2800      	cmp	r0, #0
 800659c:	f040 8243 	bne.w	8006a26 <_dtoa_r+0x956>
 80065a0:	9d00      	ldr	r5, [sp, #0]
 80065a2:	2331      	movs	r3, #49	; 0x31
 80065a4:	f805 3b01 	strb.w	r3, [r5], #1
 80065a8:	f10a 0a01 	add.w	sl, sl, #1
 80065ac:	e23f      	b.n	8006a2e <_dtoa_r+0x95e>
 80065ae:	07f2      	lsls	r2, r6, #31
 80065b0:	d505      	bpl.n	80065be <_dtoa_r+0x4ee>
 80065b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b6:	f7fa f83f 	bl	8000638 <__aeabi_dmul>
 80065ba:	3501      	adds	r5, #1
 80065bc:	2301      	movs	r3, #1
 80065be:	1076      	asrs	r6, r6, #1
 80065c0:	3708      	adds	r7, #8
 80065c2:	e76c      	b.n	800649e <_dtoa_r+0x3ce>
 80065c4:	2502      	movs	r5, #2
 80065c6:	e76f      	b.n	80064a8 <_dtoa_r+0x3d8>
 80065c8:	9b01      	ldr	r3, [sp, #4]
 80065ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80065ce:	930c      	str	r3, [sp, #48]	; 0x30
 80065d0:	e78d      	b.n	80064ee <_dtoa_r+0x41e>
 80065d2:	9900      	ldr	r1, [sp, #0]
 80065d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d8:	4b4e      	ldr	r3, [pc, #312]	; (8006714 <_dtoa_r+0x644>)
 80065da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065de:	4401      	add	r1, r0
 80065e0:	9102      	str	r1, [sp, #8]
 80065e2:	9908      	ldr	r1, [sp, #32]
 80065e4:	eeb0 8a47 	vmov.f32	s16, s14
 80065e8:	eef0 8a67 	vmov.f32	s17, s15
 80065ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d045      	beq.n	8006684 <_dtoa_r+0x5b4>
 80065f8:	494c      	ldr	r1, [pc, #304]	; (800672c <_dtoa_r+0x65c>)
 80065fa:	2000      	movs	r0, #0
 80065fc:	f7fa f946 	bl	800088c <__aeabi_ddiv>
 8006600:	ec53 2b18 	vmov	r2, r3, d8
 8006604:	f7f9 fe60 	bl	80002c8 <__aeabi_dsub>
 8006608:	9d00      	ldr	r5, [sp, #0]
 800660a:	ec41 0b18 	vmov	d8, r0, r1
 800660e:	4639      	mov	r1, r7
 8006610:	4630      	mov	r0, r6
 8006612:	f7fa fac1 	bl	8000b98 <__aeabi_d2iz>
 8006616:	900c      	str	r0, [sp, #48]	; 0x30
 8006618:	f7f9 ffa4 	bl	8000564 <__aeabi_i2d>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4630      	mov	r0, r6
 8006622:	4639      	mov	r1, r7
 8006624:	f7f9 fe50 	bl	80002c8 <__aeabi_dsub>
 8006628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800662a:	3330      	adds	r3, #48	; 0x30
 800662c:	f805 3b01 	strb.w	r3, [r5], #1
 8006630:	ec53 2b18 	vmov	r2, r3, d8
 8006634:	4606      	mov	r6, r0
 8006636:	460f      	mov	r7, r1
 8006638:	f7fa fa70 	bl	8000b1c <__aeabi_dcmplt>
 800663c:	2800      	cmp	r0, #0
 800663e:	d165      	bne.n	800670c <_dtoa_r+0x63c>
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	4935      	ldr	r1, [pc, #212]	; (800671c <_dtoa_r+0x64c>)
 8006646:	2000      	movs	r0, #0
 8006648:	f7f9 fe3e 	bl	80002c8 <__aeabi_dsub>
 800664c:	ec53 2b18 	vmov	r2, r3, d8
 8006650:	f7fa fa64 	bl	8000b1c <__aeabi_dcmplt>
 8006654:	2800      	cmp	r0, #0
 8006656:	f040 80b9 	bne.w	80067cc <_dtoa_r+0x6fc>
 800665a:	9b02      	ldr	r3, [sp, #8]
 800665c:	429d      	cmp	r5, r3
 800665e:	f43f af75 	beq.w	800654c <_dtoa_r+0x47c>
 8006662:	4b2f      	ldr	r3, [pc, #188]	; (8006720 <_dtoa_r+0x650>)
 8006664:	ec51 0b18 	vmov	r0, r1, d8
 8006668:	2200      	movs	r2, #0
 800666a:	f7f9 ffe5 	bl	8000638 <__aeabi_dmul>
 800666e:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <_dtoa_r+0x650>)
 8006670:	ec41 0b18 	vmov	d8, r0, r1
 8006674:	2200      	movs	r2, #0
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	f7f9 ffdd 	bl	8000638 <__aeabi_dmul>
 800667e:	4606      	mov	r6, r0
 8006680:	460f      	mov	r7, r1
 8006682:	e7c4      	b.n	800660e <_dtoa_r+0x53e>
 8006684:	ec51 0b17 	vmov	r0, r1, d7
 8006688:	f7f9 ffd6 	bl	8000638 <__aeabi_dmul>
 800668c:	9b02      	ldr	r3, [sp, #8]
 800668e:	9d00      	ldr	r5, [sp, #0]
 8006690:	930c      	str	r3, [sp, #48]	; 0x30
 8006692:	ec41 0b18 	vmov	d8, r0, r1
 8006696:	4639      	mov	r1, r7
 8006698:	4630      	mov	r0, r6
 800669a:	f7fa fa7d 	bl	8000b98 <__aeabi_d2iz>
 800669e:	9011      	str	r0, [sp, #68]	; 0x44
 80066a0:	f7f9 ff60 	bl	8000564 <__aeabi_i2d>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7f9 fe0c 	bl	80002c8 <__aeabi_dsub>
 80066b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b2:	3330      	adds	r3, #48	; 0x30
 80066b4:	f805 3b01 	strb.w	r3, [r5], #1
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	429d      	cmp	r5, r3
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	d134      	bne.n	8006730 <_dtoa_r+0x660>
 80066c6:	4b19      	ldr	r3, [pc, #100]	; (800672c <_dtoa_r+0x65c>)
 80066c8:	ec51 0b18 	vmov	r0, r1, d8
 80066cc:	f7f9 fdfe 	bl	80002cc <__adddf3>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4630      	mov	r0, r6
 80066d6:	4639      	mov	r1, r7
 80066d8:	f7fa fa3e 	bl	8000b58 <__aeabi_dcmpgt>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d175      	bne.n	80067cc <_dtoa_r+0x6fc>
 80066e0:	ec53 2b18 	vmov	r2, r3, d8
 80066e4:	4911      	ldr	r1, [pc, #68]	; (800672c <_dtoa_r+0x65c>)
 80066e6:	2000      	movs	r0, #0
 80066e8:	f7f9 fdee 	bl	80002c8 <__aeabi_dsub>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7fa fa12 	bl	8000b1c <__aeabi_dcmplt>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f43f af27 	beq.w	800654c <_dtoa_r+0x47c>
 80066fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006700:	1e6b      	subs	r3, r5, #1
 8006702:	930c      	str	r3, [sp, #48]	; 0x30
 8006704:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d0f8      	beq.n	80066fe <_dtoa_r+0x62e>
 800670c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006710:	e04a      	b.n	80067a8 <_dtoa_r+0x6d8>
 8006712:	bf00      	nop
 8006714:	08009350 	.word	0x08009350
 8006718:	08009328 	.word	0x08009328
 800671c:	3ff00000 	.word	0x3ff00000
 8006720:	40240000 	.word	0x40240000
 8006724:	401c0000 	.word	0x401c0000
 8006728:	40140000 	.word	0x40140000
 800672c:	3fe00000 	.word	0x3fe00000
 8006730:	4baf      	ldr	r3, [pc, #700]	; (80069f0 <_dtoa_r+0x920>)
 8006732:	f7f9 ff81 	bl	8000638 <__aeabi_dmul>
 8006736:	4606      	mov	r6, r0
 8006738:	460f      	mov	r7, r1
 800673a:	e7ac      	b.n	8006696 <_dtoa_r+0x5c6>
 800673c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006740:	9d00      	ldr	r5, [sp, #0]
 8006742:	4642      	mov	r2, r8
 8006744:	464b      	mov	r3, r9
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7fa f89f 	bl	800088c <__aeabi_ddiv>
 800674e:	f7fa fa23 	bl	8000b98 <__aeabi_d2iz>
 8006752:	9002      	str	r0, [sp, #8]
 8006754:	f7f9 ff06 	bl	8000564 <__aeabi_i2d>
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	f7f9 ff6c 	bl	8000638 <__aeabi_dmul>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7f9 fdae 	bl	80002c8 <__aeabi_dsub>
 800676c:	9e02      	ldr	r6, [sp, #8]
 800676e:	9f01      	ldr	r7, [sp, #4]
 8006770:	3630      	adds	r6, #48	; 0x30
 8006772:	f805 6b01 	strb.w	r6, [r5], #1
 8006776:	9e00      	ldr	r6, [sp, #0]
 8006778:	1bae      	subs	r6, r5, r6
 800677a:	42b7      	cmp	r7, r6
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	d137      	bne.n	80067f2 <_dtoa_r+0x722>
 8006782:	f7f9 fda3 	bl	80002cc <__adddf3>
 8006786:	4642      	mov	r2, r8
 8006788:	464b      	mov	r3, r9
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	f7fa f9e3 	bl	8000b58 <__aeabi_dcmpgt>
 8006792:	b9c8      	cbnz	r0, 80067c8 <_dtoa_r+0x6f8>
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7fa f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 80067a0:	b110      	cbz	r0, 80067a8 <_dtoa_r+0x6d8>
 80067a2:	9b02      	ldr	r3, [sp, #8]
 80067a4:	07d9      	lsls	r1, r3, #31
 80067a6:	d40f      	bmi.n	80067c8 <_dtoa_r+0x6f8>
 80067a8:	4620      	mov	r0, r4
 80067aa:	4659      	mov	r1, fp
 80067ac:	f001 f876 	bl	800789c <_Bfree>
 80067b0:	2300      	movs	r3, #0
 80067b2:	702b      	strb	r3, [r5, #0]
 80067b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067b6:	f10a 0001 	add.w	r0, sl, #1
 80067ba:	6018      	str	r0, [r3, #0]
 80067bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f43f acd8 	beq.w	8006174 <_dtoa_r+0xa4>
 80067c4:	601d      	str	r5, [r3, #0]
 80067c6:	e4d5      	b.n	8006174 <_dtoa_r+0xa4>
 80067c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80067cc:	462b      	mov	r3, r5
 80067ce:	461d      	mov	r5, r3
 80067d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067d4:	2a39      	cmp	r2, #57	; 0x39
 80067d6:	d108      	bne.n	80067ea <_dtoa_r+0x71a>
 80067d8:	9a00      	ldr	r2, [sp, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d1f7      	bne.n	80067ce <_dtoa_r+0x6fe>
 80067de:	9a07      	ldr	r2, [sp, #28]
 80067e0:	9900      	ldr	r1, [sp, #0]
 80067e2:	3201      	adds	r2, #1
 80067e4:	9207      	str	r2, [sp, #28]
 80067e6:	2230      	movs	r2, #48	; 0x30
 80067e8:	700a      	strb	r2, [r1, #0]
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	3201      	adds	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e78c      	b.n	800670c <_dtoa_r+0x63c>
 80067f2:	4b7f      	ldr	r3, [pc, #508]	; (80069f0 <_dtoa_r+0x920>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	f7f9 ff1f 	bl	8000638 <__aeabi_dmul>
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4606      	mov	r6, r0
 8006800:	460f      	mov	r7, r1
 8006802:	f7fa f981 	bl	8000b08 <__aeabi_dcmpeq>
 8006806:	2800      	cmp	r0, #0
 8006808:	d09b      	beq.n	8006742 <_dtoa_r+0x672>
 800680a:	e7cd      	b.n	80067a8 <_dtoa_r+0x6d8>
 800680c:	9a08      	ldr	r2, [sp, #32]
 800680e:	2a00      	cmp	r2, #0
 8006810:	f000 80c4 	beq.w	800699c <_dtoa_r+0x8cc>
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	2a01      	cmp	r2, #1
 8006818:	f300 80a8 	bgt.w	800696c <_dtoa_r+0x89c>
 800681c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800681e:	2a00      	cmp	r2, #0
 8006820:	f000 80a0 	beq.w	8006964 <_dtoa_r+0x894>
 8006824:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006828:	9e06      	ldr	r6, [sp, #24]
 800682a:	4645      	mov	r5, r8
 800682c:	9a04      	ldr	r2, [sp, #16]
 800682e:	2101      	movs	r1, #1
 8006830:	441a      	add	r2, r3
 8006832:	4620      	mov	r0, r4
 8006834:	4498      	add	r8, r3
 8006836:	9204      	str	r2, [sp, #16]
 8006838:	f001 f936 	bl	8007aa8 <__i2b>
 800683c:	4607      	mov	r7, r0
 800683e:	2d00      	cmp	r5, #0
 8006840:	dd0b      	ble.n	800685a <_dtoa_r+0x78a>
 8006842:	9b04      	ldr	r3, [sp, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd08      	ble.n	800685a <_dtoa_r+0x78a>
 8006848:	42ab      	cmp	r3, r5
 800684a:	9a04      	ldr	r2, [sp, #16]
 800684c:	bfa8      	it	ge
 800684e:	462b      	movge	r3, r5
 8006850:	eba8 0803 	sub.w	r8, r8, r3
 8006854:	1aed      	subs	r5, r5, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	b1fb      	cbz	r3, 800689e <_dtoa_r+0x7ce>
 800685e:	9b08      	ldr	r3, [sp, #32]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 809f 	beq.w	80069a4 <_dtoa_r+0x8d4>
 8006866:	2e00      	cmp	r6, #0
 8006868:	dd11      	ble.n	800688e <_dtoa_r+0x7be>
 800686a:	4639      	mov	r1, r7
 800686c:	4632      	mov	r2, r6
 800686e:	4620      	mov	r0, r4
 8006870:	f001 f9d6 	bl	8007c20 <__pow5mult>
 8006874:	465a      	mov	r2, fp
 8006876:	4601      	mov	r1, r0
 8006878:	4607      	mov	r7, r0
 800687a:	4620      	mov	r0, r4
 800687c:	f001 f92a 	bl	8007ad4 <__multiply>
 8006880:	4659      	mov	r1, fp
 8006882:	9007      	str	r0, [sp, #28]
 8006884:	4620      	mov	r0, r4
 8006886:	f001 f809 	bl	800789c <_Bfree>
 800688a:	9b07      	ldr	r3, [sp, #28]
 800688c:	469b      	mov	fp, r3
 800688e:	9b06      	ldr	r3, [sp, #24]
 8006890:	1b9a      	subs	r2, r3, r6
 8006892:	d004      	beq.n	800689e <_dtoa_r+0x7ce>
 8006894:	4659      	mov	r1, fp
 8006896:	4620      	mov	r0, r4
 8006898:	f001 f9c2 	bl	8007c20 <__pow5mult>
 800689c:	4683      	mov	fp, r0
 800689e:	2101      	movs	r1, #1
 80068a0:	4620      	mov	r0, r4
 80068a2:	f001 f901 	bl	8007aa8 <__i2b>
 80068a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	4606      	mov	r6, r0
 80068ac:	dd7c      	ble.n	80069a8 <_dtoa_r+0x8d8>
 80068ae:	461a      	mov	r2, r3
 80068b0:	4601      	mov	r1, r0
 80068b2:	4620      	mov	r0, r4
 80068b4:	f001 f9b4 	bl	8007c20 <__pow5mult>
 80068b8:	9b05      	ldr	r3, [sp, #20]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	4606      	mov	r6, r0
 80068be:	dd76      	ble.n	80069ae <_dtoa_r+0x8de>
 80068c0:	2300      	movs	r3, #0
 80068c2:	9306      	str	r3, [sp, #24]
 80068c4:	6933      	ldr	r3, [r6, #16]
 80068c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068ca:	6918      	ldr	r0, [r3, #16]
 80068cc:	f001 f89c 	bl	8007a08 <__hi0bits>
 80068d0:	f1c0 0020 	rsb	r0, r0, #32
 80068d4:	9b04      	ldr	r3, [sp, #16]
 80068d6:	4418      	add	r0, r3
 80068d8:	f010 001f 	ands.w	r0, r0, #31
 80068dc:	f000 8086 	beq.w	80069ec <_dtoa_r+0x91c>
 80068e0:	f1c0 0320 	rsb	r3, r0, #32
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	dd7f      	ble.n	80069e8 <_dtoa_r+0x918>
 80068e8:	f1c0 001c 	rsb	r0, r0, #28
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	4403      	add	r3, r0
 80068f0:	4480      	add	r8, r0
 80068f2:	4405      	add	r5, r0
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	f1b8 0f00 	cmp.w	r8, #0
 80068fa:	dd05      	ble.n	8006908 <_dtoa_r+0x838>
 80068fc:	4659      	mov	r1, fp
 80068fe:	4642      	mov	r2, r8
 8006900:	4620      	mov	r0, r4
 8006902:	f001 f9e7 	bl	8007cd4 <__lshift>
 8006906:	4683      	mov	fp, r0
 8006908:	9b04      	ldr	r3, [sp, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	dd05      	ble.n	800691a <_dtoa_r+0x84a>
 800690e:	4631      	mov	r1, r6
 8006910:	461a      	mov	r2, r3
 8006912:	4620      	mov	r0, r4
 8006914:	f001 f9de 	bl	8007cd4 <__lshift>
 8006918:	4606      	mov	r6, r0
 800691a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800691c:	2b00      	cmp	r3, #0
 800691e:	d069      	beq.n	80069f4 <_dtoa_r+0x924>
 8006920:	4631      	mov	r1, r6
 8006922:	4658      	mov	r0, fp
 8006924:	f001 fa42 	bl	8007dac <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	da63      	bge.n	80069f4 <_dtoa_r+0x924>
 800692c:	2300      	movs	r3, #0
 800692e:	4659      	mov	r1, fp
 8006930:	220a      	movs	r2, #10
 8006932:	4620      	mov	r0, r4
 8006934:	f000 ffd4 	bl	80078e0 <__multadd>
 8006938:	9b08      	ldr	r3, [sp, #32]
 800693a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800693e:	4683      	mov	fp, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 818f 	beq.w	8006c64 <_dtoa_r+0xb94>
 8006946:	4639      	mov	r1, r7
 8006948:	2300      	movs	r3, #0
 800694a:	220a      	movs	r2, #10
 800694c:	4620      	mov	r0, r4
 800694e:	f000 ffc7 	bl	80078e0 <__multadd>
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	4607      	mov	r7, r0
 8006958:	f300 808e 	bgt.w	8006a78 <_dtoa_r+0x9a8>
 800695c:	9b05      	ldr	r3, [sp, #20]
 800695e:	2b02      	cmp	r3, #2
 8006960:	dc50      	bgt.n	8006a04 <_dtoa_r+0x934>
 8006962:	e089      	b.n	8006a78 <_dtoa_r+0x9a8>
 8006964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800696a:	e75d      	b.n	8006828 <_dtoa_r+0x758>
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	1e5e      	subs	r6, r3, #1
 8006970:	9b06      	ldr	r3, [sp, #24]
 8006972:	42b3      	cmp	r3, r6
 8006974:	bfbf      	itttt	lt
 8006976:	9b06      	ldrlt	r3, [sp, #24]
 8006978:	9606      	strlt	r6, [sp, #24]
 800697a:	1af2      	sublt	r2, r6, r3
 800697c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800697e:	bfb6      	itet	lt
 8006980:	189b      	addlt	r3, r3, r2
 8006982:	1b9e      	subge	r6, r3, r6
 8006984:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	bfb8      	it	lt
 800698a:	2600      	movlt	r6, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfb5      	itete	lt
 8006990:	eba8 0503 	sublt.w	r5, r8, r3
 8006994:	9b01      	ldrge	r3, [sp, #4]
 8006996:	2300      	movlt	r3, #0
 8006998:	4645      	movge	r5, r8
 800699a:	e747      	b.n	800682c <_dtoa_r+0x75c>
 800699c:	9e06      	ldr	r6, [sp, #24]
 800699e:	9f08      	ldr	r7, [sp, #32]
 80069a0:	4645      	mov	r5, r8
 80069a2:	e74c      	b.n	800683e <_dtoa_r+0x76e>
 80069a4:	9a06      	ldr	r2, [sp, #24]
 80069a6:	e775      	b.n	8006894 <_dtoa_r+0x7c4>
 80069a8:	9b05      	ldr	r3, [sp, #20]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	dc18      	bgt.n	80069e0 <_dtoa_r+0x910>
 80069ae:	9b02      	ldr	r3, [sp, #8]
 80069b0:	b9b3      	cbnz	r3, 80069e0 <_dtoa_r+0x910>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b8:	b9a3      	cbnz	r3, 80069e4 <_dtoa_r+0x914>
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069c0:	0d1b      	lsrs	r3, r3, #20
 80069c2:	051b      	lsls	r3, r3, #20
 80069c4:	b12b      	cbz	r3, 80069d2 <_dtoa_r+0x902>
 80069c6:	9b04      	ldr	r3, [sp, #16]
 80069c8:	3301      	adds	r3, #1
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	f108 0801 	add.w	r8, r8, #1
 80069d0:	2301      	movs	r3, #1
 80069d2:	9306      	str	r3, [sp, #24]
 80069d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f47f af74 	bne.w	80068c4 <_dtoa_r+0x7f4>
 80069dc:	2001      	movs	r0, #1
 80069de:	e779      	b.n	80068d4 <_dtoa_r+0x804>
 80069e0:	2300      	movs	r3, #0
 80069e2:	e7f6      	b.n	80069d2 <_dtoa_r+0x902>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	e7f4      	b.n	80069d2 <_dtoa_r+0x902>
 80069e8:	d085      	beq.n	80068f6 <_dtoa_r+0x826>
 80069ea:	4618      	mov	r0, r3
 80069ec:	301c      	adds	r0, #28
 80069ee:	e77d      	b.n	80068ec <_dtoa_r+0x81c>
 80069f0:	40240000 	.word	0x40240000
 80069f4:	9b01      	ldr	r3, [sp, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dc38      	bgt.n	8006a6c <_dtoa_r+0x99c>
 80069fa:	9b05      	ldr	r3, [sp, #20]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	dd35      	ble.n	8006a6c <_dtoa_r+0x99c>
 8006a00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a04:	f1b9 0f00 	cmp.w	r9, #0
 8006a08:	d10d      	bne.n	8006a26 <_dtoa_r+0x956>
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	2205      	movs	r2, #5
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 ff65 	bl	80078e0 <__multadd>
 8006a16:	4601      	mov	r1, r0
 8006a18:	4606      	mov	r6, r0
 8006a1a:	4658      	mov	r0, fp
 8006a1c:	f001 f9c6 	bl	8007dac <__mcmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f73f adbd 	bgt.w	80065a0 <_dtoa_r+0x4d0>
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	9d00      	ldr	r5, [sp, #0]
 8006a2a:	ea6f 0a03 	mvn.w	sl, r3
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	4631      	mov	r1, r6
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 ff31 	bl	800789c <_Bfree>
 8006a3a:	2f00      	cmp	r7, #0
 8006a3c:	f43f aeb4 	beq.w	80067a8 <_dtoa_r+0x6d8>
 8006a40:	f1b8 0f00 	cmp.w	r8, #0
 8006a44:	d005      	beq.n	8006a52 <_dtoa_r+0x982>
 8006a46:	45b8      	cmp	r8, r7
 8006a48:	d003      	beq.n	8006a52 <_dtoa_r+0x982>
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 ff25 	bl	800789c <_Bfree>
 8006a52:	4639      	mov	r1, r7
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 ff21 	bl	800789c <_Bfree>
 8006a5a:	e6a5      	b.n	80067a8 <_dtoa_r+0x6d8>
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	4637      	mov	r7, r6
 8006a60:	e7e1      	b.n	8006a26 <_dtoa_r+0x956>
 8006a62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006a68:	4637      	mov	r7, r6
 8006a6a:	e599      	b.n	80065a0 <_dtoa_r+0x4d0>
 8006a6c:	9b08      	ldr	r3, [sp, #32]
 8006a6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80fd 	beq.w	8006c72 <_dtoa_r+0xba2>
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	dd05      	ble.n	8006a88 <_dtoa_r+0x9b8>
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	462a      	mov	r2, r5
 8006a80:	4620      	mov	r0, r4
 8006a82:	f001 f927 	bl	8007cd4 <__lshift>
 8006a86:	4607      	mov	r7, r0
 8006a88:	9b06      	ldr	r3, [sp, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d05c      	beq.n	8006b48 <_dtoa_r+0xa78>
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fec3 	bl	800781c <_Balloc>
 8006a96:	4605      	mov	r5, r0
 8006a98:	b928      	cbnz	r0, 8006aa6 <_dtoa_r+0x9d6>
 8006a9a:	4b80      	ldr	r3, [pc, #512]	; (8006c9c <_dtoa_r+0xbcc>)
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aa2:	f7ff bb2e 	b.w	8006102 <_dtoa_r+0x32>
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	3202      	adds	r2, #2
 8006aaa:	0092      	lsls	r2, r2, #2
 8006aac:	f107 010c 	add.w	r1, r7, #12
 8006ab0:	300c      	adds	r0, #12
 8006ab2:	f000 fea5 	bl	8007800 <memcpy>
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4629      	mov	r1, r5
 8006aba:	4620      	mov	r0, r4
 8006abc:	f001 f90a 	bl	8007cd4 <__lshift>
 8006ac0:	9b00      	ldr	r3, [sp, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	9b00      	ldr	r3, [sp, #0]
 8006ac8:	444b      	add	r3, r9
 8006aca:	9307      	str	r3, [sp, #28]
 8006acc:	9b02      	ldr	r3, [sp, #8]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	46b8      	mov	r8, r7
 8006ad4:	9306      	str	r3, [sp, #24]
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	9b01      	ldr	r3, [sp, #4]
 8006ada:	4631      	mov	r1, r6
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4658      	mov	r0, fp
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	f7ff fa67 	bl	8005fb4 <quorem>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	3330      	adds	r3, #48	; 0x30
 8006aea:	9004      	str	r0, [sp, #16]
 8006aec:	4641      	mov	r1, r8
 8006aee:	4658      	mov	r0, fp
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	f001 f95b 	bl	8007dac <__mcmp>
 8006af6:	463a      	mov	r2, r7
 8006af8:	4681      	mov	r9, r0
 8006afa:	4631      	mov	r1, r6
 8006afc:	4620      	mov	r0, r4
 8006afe:	f001 f971 	bl	8007de4 <__mdiff>
 8006b02:	68c2      	ldr	r2, [r0, #12]
 8006b04:	9b08      	ldr	r3, [sp, #32]
 8006b06:	4605      	mov	r5, r0
 8006b08:	bb02      	cbnz	r2, 8006b4c <_dtoa_r+0xa7c>
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	4658      	mov	r0, fp
 8006b0e:	f001 f94d 	bl	8007dac <__mcmp>
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	4602      	mov	r2, r0
 8006b16:	4629      	mov	r1, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b1e:	f000 febd 	bl	800789c <_Bfree>
 8006b22:	9b05      	ldr	r3, [sp, #20]
 8006b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b26:	9d01      	ldr	r5, [sp, #4]
 8006b28:	ea43 0102 	orr.w	r1, r3, r2
 8006b2c:	9b06      	ldr	r3, [sp, #24]
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	d10d      	bne.n	8006b50 <_dtoa_r+0xa80>
 8006b34:	2b39      	cmp	r3, #57	; 0x39
 8006b36:	d029      	beq.n	8006b8c <_dtoa_r+0xabc>
 8006b38:	f1b9 0f00 	cmp.w	r9, #0
 8006b3c:	dd01      	ble.n	8006b42 <_dtoa_r+0xa72>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3331      	adds	r3, #49	; 0x31
 8006b42:	9a02      	ldr	r2, [sp, #8]
 8006b44:	7013      	strb	r3, [r2, #0]
 8006b46:	e774      	b.n	8006a32 <_dtoa_r+0x962>
 8006b48:	4638      	mov	r0, r7
 8006b4a:	e7b9      	b.n	8006ac0 <_dtoa_r+0x9f0>
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	e7e2      	b.n	8006b16 <_dtoa_r+0xa46>
 8006b50:	f1b9 0f00 	cmp.w	r9, #0
 8006b54:	db06      	blt.n	8006b64 <_dtoa_r+0xa94>
 8006b56:	9905      	ldr	r1, [sp, #20]
 8006b58:	ea41 0909 	orr.w	r9, r1, r9
 8006b5c:	9906      	ldr	r1, [sp, #24]
 8006b5e:	ea59 0101 	orrs.w	r1, r9, r1
 8006b62:	d120      	bne.n	8006ba6 <_dtoa_r+0xad6>
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	ddec      	ble.n	8006b42 <_dtoa_r+0xa72>
 8006b68:	4659      	mov	r1, fp
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	f001 f8b0 	bl	8007cd4 <__lshift>
 8006b74:	4631      	mov	r1, r6
 8006b76:	4683      	mov	fp, r0
 8006b78:	f001 f918 	bl	8007dac <__mcmp>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	dc02      	bgt.n	8006b88 <_dtoa_r+0xab8>
 8006b82:	d1de      	bne.n	8006b42 <_dtoa_r+0xa72>
 8006b84:	07da      	lsls	r2, r3, #31
 8006b86:	d5dc      	bpl.n	8006b42 <_dtoa_r+0xa72>
 8006b88:	2b39      	cmp	r3, #57	; 0x39
 8006b8a:	d1d8      	bne.n	8006b3e <_dtoa_r+0xa6e>
 8006b8c:	9a02      	ldr	r2, [sp, #8]
 8006b8e:	2339      	movs	r3, #57	; 0x39
 8006b90:	7013      	strb	r3, [r2, #0]
 8006b92:	462b      	mov	r3, r5
 8006b94:	461d      	mov	r5, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b9c:	2a39      	cmp	r2, #57	; 0x39
 8006b9e:	d050      	beq.n	8006c42 <_dtoa_r+0xb72>
 8006ba0:	3201      	adds	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e745      	b.n	8006a32 <_dtoa_r+0x962>
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	dd03      	ble.n	8006bb2 <_dtoa_r+0xae2>
 8006baa:	2b39      	cmp	r3, #57	; 0x39
 8006bac:	d0ee      	beq.n	8006b8c <_dtoa_r+0xabc>
 8006bae:	3301      	adds	r3, #1
 8006bb0:	e7c7      	b.n	8006b42 <_dtoa_r+0xa72>
 8006bb2:	9a01      	ldr	r2, [sp, #4]
 8006bb4:	9907      	ldr	r1, [sp, #28]
 8006bb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bba:	428a      	cmp	r2, r1
 8006bbc:	d02a      	beq.n	8006c14 <_dtoa_r+0xb44>
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fe8b 	bl	80078e0 <__multadd>
 8006bca:	45b8      	cmp	r8, r7
 8006bcc:	4683      	mov	fp, r0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	f04f 020a 	mov.w	r2, #10
 8006bd6:	4641      	mov	r1, r8
 8006bd8:	4620      	mov	r0, r4
 8006bda:	d107      	bne.n	8006bec <_dtoa_r+0xb1c>
 8006bdc:	f000 fe80 	bl	80078e0 <__multadd>
 8006be0:	4680      	mov	r8, r0
 8006be2:	4607      	mov	r7, r0
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	3301      	adds	r3, #1
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	e775      	b.n	8006ad8 <_dtoa_r+0xa08>
 8006bec:	f000 fe78 	bl	80078e0 <__multadd>
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fe71 	bl	80078e0 <__multadd>
 8006bfe:	4607      	mov	r7, r0
 8006c00:	e7f0      	b.n	8006be4 <_dtoa_r+0xb14>
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	9a00      	ldr	r2, [sp, #0]
 8006c08:	bfcc      	ite	gt
 8006c0a:	464d      	movgt	r5, r9
 8006c0c:	2501      	movle	r5, #1
 8006c0e:	4415      	add	r5, r2
 8006c10:	f04f 0800 	mov.w	r8, #0
 8006c14:	4659      	mov	r1, fp
 8006c16:	2201      	movs	r2, #1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	f001 f85a 	bl	8007cd4 <__lshift>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4683      	mov	fp, r0
 8006c24:	f001 f8c2 	bl	8007dac <__mcmp>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	dcb2      	bgt.n	8006b92 <_dtoa_r+0xac2>
 8006c2c:	d102      	bne.n	8006c34 <_dtoa_r+0xb64>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	07db      	lsls	r3, r3, #31
 8006c32:	d4ae      	bmi.n	8006b92 <_dtoa_r+0xac2>
 8006c34:	462b      	mov	r3, r5
 8006c36:	461d      	mov	r5, r3
 8006c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c3c:	2a30      	cmp	r2, #48	; 0x30
 8006c3e:	d0fa      	beq.n	8006c36 <_dtoa_r+0xb66>
 8006c40:	e6f7      	b.n	8006a32 <_dtoa_r+0x962>
 8006c42:	9a00      	ldr	r2, [sp, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d1a5      	bne.n	8006b94 <_dtoa_r+0xac4>
 8006c48:	f10a 0a01 	add.w	sl, sl, #1
 8006c4c:	2331      	movs	r3, #49	; 0x31
 8006c4e:	e779      	b.n	8006b44 <_dtoa_r+0xa74>
 8006c50:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <_dtoa_r+0xbd0>)
 8006c52:	f7ff baaf 	b.w	80061b4 <_dtoa_r+0xe4>
 8006c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f47f aa86 	bne.w	800616a <_dtoa_r+0x9a>
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <_dtoa_r+0xbd4>)
 8006c60:	f7ff baa8 	b.w	80061b4 <_dtoa_r+0xe4>
 8006c64:	f1b9 0f00 	cmp.w	r9, #0
 8006c68:	dc03      	bgt.n	8006c72 <_dtoa_r+0xba2>
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	f73f aec9 	bgt.w	8006a04 <_dtoa_r+0x934>
 8006c72:	9d00      	ldr	r5, [sp, #0]
 8006c74:	4631      	mov	r1, r6
 8006c76:	4658      	mov	r0, fp
 8006c78:	f7ff f99c 	bl	8005fb4 <quorem>
 8006c7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c80:	f805 3b01 	strb.w	r3, [r5], #1
 8006c84:	9a00      	ldr	r2, [sp, #0]
 8006c86:	1aaa      	subs	r2, r5, r2
 8006c88:	4591      	cmp	r9, r2
 8006c8a:	ddba      	ble.n	8006c02 <_dtoa_r+0xb32>
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	2300      	movs	r3, #0
 8006c90:	220a      	movs	r2, #10
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fe24 	bl	80078e0 <__multadd>
 8006c98:	4683      	mov	fp, r0
 8006c9a:	e7eb      	b.n	8006c74 <_dtoa_r+0xba4>
 8006c9c:	080091d4 	.word	0x080091d4
 8006ca0:	08008fd0 	.word	0x08008fd0
 8006ca4:	08009151 	.word	0x08009151

08006ca8 <__sflush_r>:
 8006ca8:	898a      	ldrh	r2, [r1, #12]
 8006caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cae:	4605      	mov	r5, r0
 8006cb0:	0710      	lsls	r0, r2, #28
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	d458      	bmi.n	8006d68 <__sflush_r+0xc0>
 8006cb6:	684b      	ldr	r3, [r1, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc05      	bgt.n	8006cc8 <__sflush_r+0x20>
 8006cbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dc02      	bgt.n	8006cc8 <__sflush_r+0x20>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	d0f9      	beq.n	8006cc2 <__sflush_r+0x1a>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd4:	682f      	ldr	r7, [r5, #0]
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	d032      	beq.n	8006d40 <__sflush_r+0x98>
 8006cda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	075a      	lsls	r2, r3, #29
 8006ce0:	d505      	bpl.n	8006cee <__sflush_r+0x46>
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	1ac0      	subs	r0, r0, r3
 8006ce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce8:	b10b      	cbz	r3, 8006cee <__sflush_r+0x46>
 8006cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cec:	1ac0      	subs	r0, r0, r3
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf4:	6a21      	ldr	r1, [r4, #32]
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b0      	blx	r6
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	d106      	bne.n	8006d0e <__sflush_r+0x66>
 8006d00:	6829      	ldr	r1, [r5, #0]
 8006d02:	291d      	cmp	r1, #29
 8006d04:	d82c      	bhi.n	8006d60 <__sflush_r+0xb8>
 8006d06:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <__sflush_r+0x108>)
 8006d08:	40ca      	lsrs	r2, r1
 8006d0a:	07d6      	lsls	r6, r2, #31
 8006d0c:	d528      	bpl.n	8006d60 <__sflush_r+0xb8>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	6062      	str	r2, [r4, #4]
 8006d12:	04d9      	lsls	r1, r3, #19
 8006d14:	6922      	ldr	r2, [r4, #16]
 8006d16:	6022      	str	r2, [r4, #0]
 8006d18:	d504      	bpl.n	8006d24 <__sflush_r+0x7c>
 8006d1a:	1c42      	adds	r2, r0, #1
 8006d1c:	d101      	bne.n	8006d22 <__sflush_r+0x7a>
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	b903      	cbnz	r3, 8006d24 <__sflush_r+0x7c>
 8006d22:	6560      	str	r0, [r4, #84]	; 0x54
 8006d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d26:	602f      	str	r7, [r5, #0]
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	d0ca      	beq.n	8006cc2 <__sflush_r+0x1a>
 8006d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d30:	4299      	cmp	r1, r3
 8006d32:	d002      	beq.n	8006d3a <__sflush_r+0x92>
 8006d34:	4628      	mov	r0, r5
 8006d36:	f001 fa3b 	bl	80081b0 <_free_r>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3e:	e7c1      	b.n	8006cc4 <__sflush_r+0x1c>
 8006d40:	6a21      	ldr	r1, [r4, #32]
 8006d42:	2301      	movs	r3, #1
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b0      	blx	r6
 8006d48:	1c41      	adds	r1, r0, #1
 8006d4a:	d1c7      	bne.n	8006cdc <__sflush_r+0x34>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0c4      	beq.n	8006cdc <__sflush_r+0x34>
 8006d52:	2b1d      	cmp	r3, #29
 8006d54:	d001      	beq.n	8006d5a <__sflush_r+0xb2>
 8006d56:	2b16      	cmp	r3, #22
 8006d58:	d101      	bne.n	8006d5e <__sflush_r+0xb6>
 8006d5a:	602f      	str	r7, [r5, #0]
 8006d5c:	e7b1      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	e7ad      	b.n	8006cc4 <__sflush_r+0x1c>
 8006d68:	690f      	ldr	r7, [r1, #16]
 8006d6a:	2f00      	cmp	r7, #0
 8006d6c:	d0a9      	beq.n	8006cc2 <__sflush_r+0x1a>
 8006d6e:	0793      	lsls	r3, r2, #30
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	bf08      	it	eq
 8006d74:	694b      	ldreq	r3, [r1, #20]
 8006d76:	600f      	str	r7, [r1, #0]
 8006d78:	bf18      	it	ne
 8006d7a:	2300      	movne	r3, #0
 8006d7c:	eba6 0807 	sub.w	r8, r6, r7
 8006d80:	608b      	str	r3, [r1, #8]
 8006d82:	f1b8 0f00 	cmp.w	r8, #0
 8006d86:	dd9c      	ble.n	8006cc2 <__sflush_r+0x1a>
 8006d88:	6a21      	ldr	r1, [r4, #32]
 8006d8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d8c:	4643      	mov	r3, r8
 8006d8e:	463a      	mov	r2, r7
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b0      	blx	r6
 8006d94:	2800      	cmp	r0, #0
 8006d96:	dc06      	bgt.n	8006da6 <__sflush_r+0xfe>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	e78e      	b.n	8006cc4 <__sflush_r+0x1c>
 8006da6:	4407      	add	r7, r0
 8006da8:	eba8 0800 	sub.w	r8, r8, r0
 8006dac:	e7e9      	b.n	8006d82 <__sflush_r+0xda>
 8006dae:	bf00      	nop
 8006db0:	20400001 	.word	0x20400001

08006db4 <_fflush_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	690b      	ldr	r3, [r1, #16]
 8006db8:	4605      	mov	r5, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b913      	cbnz	r3, 8006dc4 <_fflush_r+0x10>
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	b118      	cbz	r0, 8006dce <_fflush_r+0x1a>
 8006dc6:	6983      	ldr	r3, [r0, #24]
 8006dc8:	b90b      	cbnz	r3, 8006dce <_fflush_r+0x1a>
 8006dca:	f000 f887 	bl	8006edc <__sinit>
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <_fflush_r+0x6c>)
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d11b      	bne.n	8006e0c <_fflush_r+0x58>
 8006dd4:	686c      	ldr	r4, [r5, #4]
 8006dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0ef      	beq.n	8006dbe <_fflush_r+0xa>
 8006dde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006de0:	07d0      	lsls	r0, r2, #31
 8006de2:	d404      	bmi.n	8006dee <_fflush_r+0x3a>
 8006de4:	0599      	lsls	r1, r3, #22
 8006de6:	d402      	bmi.n	8006dee <_fflush_r+0x3a>
 8006de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dea:	f000 fc88 	bl	80076fe <__retarget_lock_acquire_recursive>
 8006dee:	4628      	mov	r0, r5
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7ff ff59 	bl	8006ca8 <__sflush_r>
 8006df6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df8:	07da      	lsls	r2, r3, #31
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	d4e0      	bmi.n	8006dc0 <_fflush_r+0xc>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	059b      	lsls	r3, r3, #22
 8006e02:	d4dd      	bmi.n	8006dc0 <_fflush_r+0xc>
 8006e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e06:	f000 fc7b 	bl	8007700 <__retarget_lock_release_recursive>
 8006e0a:	e7d9      	b.n	8006dc0 <_fflush_r+0xc>
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <_fflush_r+0x70>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d101      	bne.n	8006e16 <_fflush_r+0x62>
 8006e12:	68ac      	ldr	r4, [r5, #8]
 8006e14:	e7df      	b.n	8006dd6 <_fflush_r+0x22>
 8006e16:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <_fflush_r+0x74>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	bf08      	it	eq
 8006e1c:	68ec      	ldreq	r4, [r5, #12]
 8006e1e:	e7da      	b.n	8006dd6 <_fflush_r+0x22>
 8006e20:	08009208 	.word	0x08009208
 8006e24:	08009228 	.word	0x08009228
 8006e28:	080091e8 	.word	0x080091e8

08006e2c <std>:
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	4604      	mov	r4, r0
 8006e32:	e9c0 3300 	strd	r3, r3, [r0]
 8006e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e3a:	6083      	str	r3, [r0, #8]
 8006e3c:	8181      	strh	r1, [r0, #12]
 8006e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e40:	81c2      	strh	r2, [r0, #14]
 8006e42:	6183      	str	r3, [r0, #24]
 8006e44:	4619      	mov	r1, r3
 8006e46:	2208      	movs	r2, #8
 8006e48:	305c      	adds	r0, #92	; 0x5c
 8006e4a:	f7fd fa23 	bl	8004294 <memset>
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <std+0x38>)
 8006e50:	6263      	str	r3, [r4, #36]	; 0x24
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x3c>)
 8006e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x40>)
 8006e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x44>)
 8006e5c:	6224      	str	r4, [r4, #32]
 8006e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	080085f1 	.word	0x080085f1
 8006e68:	08008613 	.word	0x08008613
 8006e6c:	0800864b 	.word	0x0800864b
 8006e70:	0800866f 	.word	0x0800866f

08006e74 <_cleanup_r>:
 8006e74:	4901      	ldr	r1, [pc, #4]	; (8006e7c <_cleanup_r+0x8>)
 8006e76:	f000 b8af 	b.w	8006fd8 <_fwalk_reent>
 8006e7a:	bf00      	nop
 8006e7c:	08006db5 	.word	0x08006db5

08006e80 <__sfmoreglue>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	1e4a      	subs	r2, r1, #1
 8006e84:	2568      	movs	r5, #104	; 0x68
 8006e86:	4355      	muls	r5, r2
 8006e88:	460e      	mov	r6, r1
 8006e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e8e:	f001 f9df 	bl	8008250 <_malloc_r>
 8006e92:	4604      	mov	r4, r0
 8006e94:	b140      	cbz	r0, 8006ea8 <__sfmoreglue+0x28>
 8006e96:	2100      	movs	r1, #0
 8006e98:	e9c0 1600 	strd	r1, r6, [r0]
 8006e9c:	300c      	adds	r0, #12
 8006e9e:	60a0      	str	r0, [r4, #8]
 8006ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ea4:	f7fd f9f6 	bl	8004294 <memset>
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}

08006eac <__sfp_lock_acquire>:
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <__sfp_lock_acquire+0x8>)
 8006eae:	f000 bc26 	b.w	80076fe <__retarget_lock_acquire_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	20000954 	.word	0x20000954

08006eb8 <__sfp_lock_release>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sfp_lock_release+0x8>)
 8006eba:	f000 bc21 	b.w	8007700 <__retarget_lock_release_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000954 	.word	0x20000954

08006ec4 <__sinit_lock_acquire>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sinit_lock_acquire+0x8>)
 8006ec6:	f000 bc1a 	b.w	80076fe <__retarget_lock_acquire_recursive>
 8006eca:	bf00      	nop
 8006ecc:	2000094f 	.word	0x2000094f

08006ed0 <__sinit_lock_release>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sinit_lock_release+0x8>)
 8006ed2:	f000 bc15 	b.w	8007700 <__retarget_lock_release_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	2000094f 	.word	0x2000094f

08006edc <__sinit>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	f7ff fff0 	bl	8006ec4 <__sinit_lock_acquire>
 8006ee4:	69a3      	ldr	r3, [r4, #24]
 8006ee6:	b11b      	cbz	r3, 8006ef0 <__sinit+0x14>
 8006ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eec:	f7ff bff0 	b.w	8006ed0 <__sinit_lock_release>
 8006ef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ef4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ef6:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <__sinit+0x68>)
 8006ef8:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <__sinit+0x6c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	bf04      	itt	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	61a3      	streq	r3, [r4, #24]
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 f820 	bl	8006f4c <__sfp>
 8006f0c:	6060      	str	r0, [r4, #4]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f81c 	bl	8006f4c <__sfp>
 8006f14:	60a0      	str	r0, [r4, #8]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 f818 	bl	8006f4c <__sfp>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	60e0      	str	r0, [r4, #12]
 8006f20:	2104      	movs	r1, #4
 8006f22:	6860      	ldr	r0, [r4, #4]
 8006f24:	f7ff ff82 	bl	8006e2c <std>
 8006f28:	68a0      	ldr	r0, [r4, #8]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	2109      	movs	r1, #9
 8006f2e:	f7ff ff7d 	bl	8006e2c <std>
 8006f32:	68e0      	ldr	r0, [r4, #12]
 8006f34:	2202      	movs	r2, #2
 8006f36:	2112      	movs	r1, #18
 8006f38:	f7ff ff78 	bl	8006e2c <std>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	61a3      	str	r3, [r4, #24]
 8006f40:	e7d2      	b.n	8006ee8 <__sinit+0xc>
 8006f42:	bf00      	nop
 8006f44:	08008fbc 	.word	0x08008fbc
 8006f48:	08006e75 	.word	0x08006e75

08006f4c <__sfp>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	4607      	mov	r7, r0
 8006f50:	f7ff ffac 	bl	8006eac <__sfp_lock_acquire>
 8006f54:	4b1e      	ldr	r3, [pc, #120]	; (8006fd0 <__sfp+0x84>)
 8006f56:	681e      	ldr	r6, [r3, #0]
 8006f58:	69b3      	ldr	r3, [r6, #24]
 8006f5a:	b913      	cbnz	r3, 8006f62 <__sfp+0x16>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff ffbd 	bl	8006edc <__sinit>
 8006f62:	3648      	adds	r6, #72	; 0x48
 8006f64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	d503      	bpl.n	8006f74 <__sfp+0x28>
 8006f6c:	6833      	ldr	r3, [r6, #0]
 8006f6e:	b30b      	cbz	r3, 8006fb4 <__sfp+0x68>
 8006f70:	6836      	ldr	r6, [r6, #0]
 8006f72:	e7f7      	b.n	8006f64 <__sfp+0x18>
 8006f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f78:	b9d5      	cbnz	r5, 8006fb0 <__sfp+0x64>
 8006f7a:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <__sfp+0x88>)
 8006f7c:	60e3      	str	r3, [r4, #12]
 8006f7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f82:	6665      	str	r5, [r4, #100]	; 0x64
 8006f84:	f000 fbba 	bl	80076fc <__retarget_lock_init_recursive>
 8006f88:	f7ff ff96 	bl	8006eb8 <__sfp_lock_release>
 8006f8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f94:	6025      	str	r5, [r4, #0]
 8006f96:	61a5      	str	r5, [r4, #24]
 8006f98:	2208      	movs	r2, #8
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fa0:	f7fd f978 	bl	8004294 <memset>
 8006fa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fac:	4620      	mov	r0, r4
 8006fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb0:	3468      	adds	r4, #104	; 0x68
 8006fb2:	e7d9      	b.n	8006f68 <__sfp+0x1c>
 8006fb4:	2104      	movs	r1, #4
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f7ff ff62 	bl	8006e80 <__sfmoreglue>
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	6030      	str	r0, [r6, #0]
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d1d5      	bne.n	8006f70 <__sfp+0x24>
 8006fc4:	f7ff ff78 	bl	8006eb8 <__sfp_lock_release>
 8006fc8:	230c      	movs	r3, #12
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	e7ee      	b.n	8006fac <__sfp+0x60>
 8006fce:	bf00      	nop
 8006fd0:	08008fbc 	.word	0x08008fbc
 8006fd4:	ffff0001 	.word	0xffff0001

08006fd8 <_fwalk_reent>:
 8006fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fdc:	4606      	mov	r6, r0
 8006fde:	4688      	mov	r8, r1
 8006fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fe4:	2700      	movs	r7, #0
 8006fe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fea:	f1b9 0901 	subs.w	r9, r9, #1
 8006fee:	d505      	bpl.n	8006ffc <_fwalk_reent+0x24>
 8006ff0:	6824      	ldr	r4, [r4, #0]
 8006ff2:	2c00      	cmp	r4, #0
 8006ff4:	d1f7      	bne.n	8006fe6 <_fwalk_reent+0xe>
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffc:	89ab      	ldrh	r3, [r5, #12]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d907      	bls.n	8007012 <_fwalk_reent+0x3a>
 8007002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007006:	3301      	adds	r3, #1
 8007008:	d003      	beq.n	8007012 <_fwalk_reent+0x3a>
 800700a:	4629      	mov	r1, r5
 800700c:	4630      	mov	r0, r6
 800700e:	47c0      	blx	r8
 8007010:	4307      	orrs	r7, r0
 8007012:	3568      	adds	r5, #104	; 0x68
 8007014:	e7e9      	b.n	8006fea <_fwalk_reent+0x12>

08007016 <rshift>:
 8007016:	6903      	ldr	r3, [r0, #16]
 8007018:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800701c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007020:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007024:	f100 0414 	add.w	r4, r0, #20
 8007028:	dd45      	ble.n	80070b6 <rshift+0xa0>
 800702a:	f011 011f 	ands.w	r1, r1, #31
 800702e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007032:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007036:	d10c      	bne.n	8007052 <rshift+0x3c>
 8007038:	f100 0710 	add.w	r7, r0, #16
 800703c:	4629      	mov	r1, r5
 800703e:	42b1      	cmp	r1, r6
 8007040:	d334      	bcc.n	80070ac <rshift+0x96>
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	1eea      	subs	r2, r5, #3
 8007048:	4296      	cmp	r6, r2
 800704a:	bf38      	it	cc
 800704c:	2300      	movcc	r3, #0
 800704e:	4423      	add	r3, r4
 8007050:	e015      	b.n	800707e <rshift+0x68>
 8007052:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007056:	f1c1 0820 	rsb	r8, r1, #32
 800705a:	40cf      	lsrs	r7, r1
 800705c:	f105 0e04 	add.w	lr, r5, #4
 8007060:	46a1      	mov	r9, r4
 8007062:	4576      	cmp	r6, lr
 8007064:	46f4      	mov	ip, lr
 8007066:	d815      	bhi.n	8007094 <rshift+0x7e>
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	009a      	lsls	r2, r3, #2
 800706c:	3a04      	subs	r2, #4
 800706e:	3501      	adds	r5, #1
 8007070:	42ae      	cmp	r6, r5
 8007072:	bf38      	it	cc
 8007074:	2200      	movcc	r2, #0
 8007076:	18a3      	adds	r3, r4, r2
 8007078:	50a7      	str	r7, [r4, r2]
 800707a:	b107      	cbz	r7, 800707e <rshift+0x68>
 800707c:	3304      	adds	r3, #4
 800707e:	1b1a      	subs	r2, r3, r4
 8007080:	42a3      	cmp	r3, r4
 8007082:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007086:	bf08      	it	eq
 8007088:	2300      	moveq	r3, #0
 800708a:	6102      	str	r2, [r0, #16]
 800708c:	bf08      	it	eq
 800708e:	6143      	streq	r3, [r0, #20]
 8007090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007094:	f8dc c000 	ldr.w	ip, [ip]
 8007098:	fa0c fc08 	lsl.w	ip, ip, r8
 800709c:	ea4c 0707 	orr.w	r7, ip, r7
 80070a0:	f849 7b04 	str.w	r7, [r9], #4
 80070a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070a8:	40cf      	lsrs	r7, r1
 80070aa:	e7da      	b.n	8007062 <rshift+0x4c>
 80070ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80070b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80070b4:	e7c3      	b.n	800703e <rshift+0x28>
 80070b6:	4623      	mov	r3, r4
 80070b8:	e7e1      	b.n	800707e <rshift+0x68>

080070ba <__hexdig_fun>:
 80070ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80070be:	2b09      	cmp	r3, #9
 80070c0:	d802      	bhi.n	80070c8 <__hexdig_fun+0xe>
 80070c2:	3820      	subs	r0, #32
 80070c4:	b2c0      	uxtb	r0, r0
 80070c6:	4770      	bx	lr
 80070c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80070cc:	2b05      	cmp	r3, #5
 80070ce:	d801      	bhi.n	80070d4 <__hexdig_fun+0x1a>
 80070d0:	3847      	subs	r0, #71	; 0x47
 80070d2:	e7f7      	b.n	80070c4 <__hexdig_fun+0xa>
 80070d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d801      	bhi.n	80070e0 <__hexdig_fun+0x26>
 80070dc:	3827      	subs	r0, #39	; 0x27
 80070de:	e7f1      	b.n	80070c4 <__hexdig_fun+0xa>
 80070e0:	2000      	movs	r0, #0
 80070e2:	4770      	bx	lr

080070e4 <__gethex>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	ed2d 8b02 	vpush	{d8}
 80070ec:	b089      	sub	sp, #36	; 0x24
 80070ee:	ee08 0a10 	vmov	s16, r0
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	4bbc      	ldr	r3, [pc, #752]	; (80073e8 <__gethex+0x304>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	4618      	mov	r0, r3
 80070fc:	468b      	mov	fp, r1
 80070fe:	4690      	mov	r8, r2
 8007100:	f7f9 f886 	bl	8000210 <strlen>
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	f8db 2000 	ldr.w	r2, [fp]
 800710a:	4403      	add	r3, r0
 800710c:	4682      	mov	sl, r0
 800710e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	1c93      	adds	r3, r2, #2
 8007116:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800711a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800711e:	32fe      	adds	r2, #254	; 0xfe
 8007120:	18d1      	adds	r1, r2, r3
 8007122:	461f      	mov	r7, r3
 8007124:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007128:	9100      	str	r1, [sp, #0]
 800712a:	2830      	cmp	r0, #48	; 0x30
 800712c:	d0f8      	beq.n	8007120 <__gethex+0x3c>
 800712e:	f7ff ffc4 	bl	80070ba <__hexdig_fun>
 8007132:	4604      	mov	r4, r0
 8007134:	2800      	cmp	r0, #0
 8007136:	d13a      	bne.n	80071ae <__gethex+0xca>
 8007138:	9901      	ldr	r1, [sp, #4]
 800713a:	4652      	mov	r2, sl
 800713c:	4638      	mov	r0, r7
 800713e:	f001 fa9a 	bl	8008676 <strncmp>
 8007142:	4605      	mov	r5, r0
 8007144:	2800      	cmp	r0, #0
 8007146:	d168      	bne.n	800721a <__gethex+0x136>
 8007148:	f817 000a 	ldrb.w	r0, [r7, sl]
 800714c:	eb07 060a 	add.w	r6, r7, sl
 8007150:	f7ff ffb3 	bl	80070ba <__hexdig_fun>
 8007154:	2800      	cmp	r0, #0
 8007156:	d062      	beq.n	800721e <__gethex+0x13a>
 8007158:	4633      	mov	r3, r6
 800715a:	7818      	ldrb	r0, [r3, #0]
 800715c:	2830      	cmp	r0, #48	; 0x30
 800715e:	461f      	mov	r7, r3
 8007160:	f103 0301 	add.w	r3, r3, #1
 8007164:	d0f9      	beq.n	800715a <__gethex+0x76>
 8007166:	f7ff ffa8 	bl	80070ba <__hexdig_fun>
 800716a:	2301      	movs	r3, #1
 800716c:	fab0 f480 	clz	r4, r0
 8007170:	0964      	lsrs	r4, r4, #5
 8007172:	4635      	mov	r5, r6
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	463a      	mov	r2, r7
 8007178:	4616      	mov	r6, r2
 800717a:	3201      	adds	r2, #1
 800717c:	7830      	ldrb	r0, [r6, #0]
 800717e:	f7ff ff9c 	bl	80070ba <__hexdig_fun>
 8007182:	2800      	cmp	r0, #0
 8007184:	d1f8      	bne.n	8007178 <__gethex+0x94>
 8007186:	9901      	ldr	r1, [sp, #4]
 8007188:	4652      	mov	r2, sl
 800718a:	4630      	mov	r0, r6
 800718c:	f001 fa73 	bl	8008676 <strncmp>
 8007190:	b980      	cbnz	r0, 80071b4 <__gethex+0xd0>
 8007192:	b94d      	cbnz	r5, 80071a8 <__gethex+0xc4>
 8007194:	eb06 050a 	add.w	r5, r6, sl
 8007198:	462a      	mov	r2, r5
 800719a:	4616      	mov	r6, r2
 800719c:	3201      	adds	r2, #1
 800719e:	7830      	ldrb	r0, [r6, #0]
 80071a0:	f7ff ff8b 	bl	80070ba <__hexdig_fun>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d1f8      	bne.n	800719a <__gethex+0xb6>
 80071a8:	1bad      	subs	r5, r5, r6
 80071aa:	00ad      	lsls	r5, r5, #2
 80071ac:	e004      	b.n	80071b8 <__gethex+0xd4>
 80071ae:	2400      	movs	r4, #0
 80071b0:	4625      	mov	r5, r4
 80071b2:	e7e0      	b.n	8007176 <__gethex+0x92>
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	d1f7      	bne.n	80071a8 <__gethex+0xc4>
 80071b8:	7833      	ldrb	r3, [r6, #0]
 80071ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071be:	2b50      	cmp	r3, #80	; 0x50
 80071c0:	d13b      	bne.n	800723a <__gethex+0x156>
 80071c2:	7873      	ldrb	r3, [r6, #1]
 80071c4:	2b2b      	cmp	r3, #43	; 0x2b
 80071c6:	d02c      	beq.n	8007222 <__gethex+0x13e>
 80071c8:	2b2d      	cmp	r3, #45	; 0x2d
 80071ca:	d02e      	beq.n	800722a <__gethex+0x146>
 80071cc:	1c71      	adds	r1, r6, #1
 80071ce:	f04f 0900 	mov.w	r9, #0
 80071d2:	7808      	ldrb	r0, [r1, #0]
 80071d4:	f7ff ff71 	bl	80070ba <__hexdig_fun>
 80071d8:	1e43      	subs	r3, r0, #1
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b18      	cmp	r3, #24
 80071de:	d82c      	bhi.n	800723a <__gethex+0x156>
 80071e0:	f1a0 0210 	sub.w	r2, r0, #16
 80071e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071e8:	f7ff ff67 	bl	80070ba <__hexdig_fun>
 80071ec:	1e43      	subs	r3, r0, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b18      	cmp	r3, #24
 80071f2:	d91d      	bls.n	8007230 <__gethex+0x14c>
 80071f4:	f1b9 0f00 	cmp.w	r9, #0
 80071f8:	d000      	beq.n	80071fc <__gethex+0x118>
 80071fa:	4252      	negs	r2, r2
 80071fc:	4415      	add	r5, r2
 80071fe:	f8cb 1000 	str.w	r1, [fp]
 8007202:	b1e4      	cbz	r4, 800723e <__gethex+0x15a>
 8007204:	9b00      	ldr	r3, [sp, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf14      	ite	ne
 800720a:	2700      	movne	r7, #0
 800720c:	2706      	moveq	r7, #6
 800720e:	4638      	mov	r0, r7
 8007210:	b009      	add	sp, #36	; 0x24
 8007212:	ecbd 8b02 	vpop	{d8}
 8007216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721a:	463e      	mov	r6, r7
 800721c:	4625      	mov	r5, r4
 800721e:	2401      	movs	r4, #1
 8007220:	e7ca      	b.n	80071b8 <__gethex+0xd4>
 8007222:	f04f 0900 	mov.w	r9, #0
 8007226:	1cb1      	adds	r1, r6, #2
 8007228:	e7d3      	b.n	80071d2 <__gethex+0xee>
 800722a:	f04f 0901 	mov.w	r9, #1
 800722e:	e7fa      	b.n	8007226 <__gethex+0x142>
 8007230:	230a      	movs	r3, #10
 8007232:	fb03 0202 	mla	r2, r3, r2, r0
 8007236:	3a10      	subs	r2, #16
 8007238:	e7d4      	b.n	80071e4 <__gethex+0x100>
 800723a:	4631      	mov	r1, r6
 800723c:	e7df      	b.n	80071fe <__gethex+0x11a>
 800723e:	1bf3      	subs	r3, r6, r7
 8007240:	3b01      	subs	r3, #1
 8007242:	4621      	mov	r1, r4
 8007244:	2b07      	cmp	r3, #7
 8007246:	dc0b      	bgt.n	8007260 <__gethex+0x17c>
 8007248:	ee18 0a10 	vmov	r0, s16
 800724c:	f000 fae6 	bl	800781c <_Balloc>
 8007250:	4604      	mov	r4, r0
 8007252:	b940      	cbnz	r0, 8007266 <__gethex+0x182>
 8007254:	4b65      	ldr	r3, [pc, #404]	; (80073ec <__gethex+0x308>)
 8007256:	4602      	mov	r2, r0
 8007258:	21de      	movs	r1, #222	; 0xde
 800725a:	4865      	ldr	r0, [pc, #404]	; (80073f0 <__gethex+0x30c>)
 800725c:	f001 fa3c 	bl	80086d8 <__assert_func>
 8007260:	3101      	adds	r1, #1
 8007262:	105b      	asrs	r3, r3, #1
 8007264:	e7ee      	b.n	8007244 <__gethex+0x160>
 8007266:	f100 0914 	add.w	r9, r0, #20
 800726a:	f04f 0b00 	mov.w	fp, #0
 800726e:	f1ca 0301 	rsb	r3, sl, #1
 8007272:	f8cd 9008 	str.w	r9, [sp, #8]
 8007276:	f8cd b000 	str.w	fp, [sp]
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	42b7      	cmp	r7, r6
 800727e:	d340      	bcc.n	8007302 <__gethex+0x21e>
 8007280:	9802      	ldr	r0, [sp, #8]
 8007282:	9b00      	ldr	r3, [sp, #0]
 8007284:	f840 3b04 	str.w	r3, [r0], #4
 8007288:	eba0 0009 	sub.w	r0, r0, r9
 800728c:	1080      	asrs	r0, r0, #2
 800728e:	0146      	lsls	r6, r0, #5
 8007290:	6120      	str	r0, [r4, #16]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fbb8 	bl	8007a08 <__hi0bits>
 8007298:	1a30      	subs	r0, r6, r0
 800729a:	f8d8 6000 	ldr.w	r6, [r8]
 800729e:	42b0      	cmp	r0, r6
 80072a0:	dd63      	ble.n	800736a <__gethex+0x286>
 80072a2:	1b87      	subs	r7, r0, r6
 80072a4:	4639      	mov	r1, r7
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 ff52 	bl	8008150 <__any_on>
 80072ac:	4682      	mov	sl, r0
 80072ae:	b1a8      	cbz	r0, 80072dc <__gethex+0x1f8>
 80072b0:	1e7b      	subs	r3, r7, #1
 80072b2:	1159      	asrs	r1, r3, #5
 80072b4:	f003 021f 	and.w	r2, r3, #31
 80072b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80072bc:	f04f 0a01 	mov.w	sl, #1
 80072c0:	fa0a f202 	lsl.w	r2, sl, r2
 80072c4:	420a      	tst	r2, r1
 80072c6:	d009      	beq.n	80072dc <__gethex+0x1f8>
 80072c8:	4553      	cmp	r3, sl
 80072ca:	dd05      	ble.n	80072d8 <__gethex+0x1f4>
 80072cc:	1eb9      	subs	r1, r7, #2
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 ff3e 	bl	8008150 <__any_on>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d145      	bne.n	8007364 <__gethex+0x280>
 80072d8:	f04f 0a02 	mov.w	sl, #2
 80072dc:	4639      	mov	r1, r7
 80072de:	4620      	mov	r0, r4
 80072e0:	f7ff fe99 	bl	8007016 <rshift>
 80072e4:	443d      	add	r5, r7
 80072e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072ea:	42ab      	cmp	r3, r5
 80072ec:	da4c      	bge.n	8007388 <__gethex+0x2a4>
 80072ee:	ee18 0a10 	vmov	r0, s16
 80072f2:	4621      	mov	r1, r4
 80072f4:	f000 fad2 	bl	800789c <_Bfree>
 80072f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072fa:	2300      	movs	r3, #0
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	27a3      	movs	r7, #163	; 0xa3
 8007300:	e785      	b.n	800720e <__gethex+0x12a>
 8007302:	1e73      	subs	r3, r6, #1
 8007304:	9a05      	ldr	r2, [sp, #20]
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800730c:	4293      	cmp	r3, r2
 800730e:	d019      	beq.n	8007344 <__gethex+0x260>
 8007310:	f1bb 0f20 	cmp.w	fp, #32
 8007314:	d107      	bne.n	8007326 <__gethex+0x242>
 8007316:	9b02      	ldr	r3, [sp, #8]
 8007318:	9a00      	ldr	r2, [sp, #0]
 800731a:	f843 2b04 	str.w	r2, [r3], #4
 800731e:	9302      	str	r3, [sp, #8]
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	469b      	mov	fp, r3
 8007326:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800732a:	f7ff fec6 	bl	80070ba <__hexdig_fun>
 800732e:	9b00      	ldr	r3, [sp, #0]
 8007330:	f000 000f 	and.w	r0, r0, #15
 8007334:	fa00 f00b 	lsl.w	r0, r0, fp
 8007338:	4303      	orrs	r3, r0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	f10b 0b04 	add.w	fp, fp, #4
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	e00d      	b.n	8007360 <__gethex+0x27c>
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	9a06      	ldr	r2, [sp, #24]
 8007348:	4413      	add	r3, r2
 800734a:	42bb      	cmp	r3, r7
 800734c:	d3e0      	bcc.n	8007310 <__gethex+0x22c>
 800734e:	4618      	mov	r0, r3
 8007350:	9901      	ldr	r1, [sp, #4]
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	4652      	mov	r2, sl
 8007356:	f001 f98e 	bl	8008676 <strncmp>
 800735a:	9b07      	ldr	r3, [sp, #28]
 800735c:	2800      	cmp	r0, #0
 800735e:	d1d7      	bne.n	8007310 <__gethex+0x22c>
 8007360:	461e      	mov	r6, r3
 8007362:	e78b      	b.n	800727c <__gethex+0x198>
 8007364:	f04f 0a03 	mov.w	sl, #3
 8007368:	e7b8      	b.n	80072dc <__gethex+0x1f8>
 800736a:	da0a      	bge.n	8007382 <__gethex+0x29e>
 800736c:	1a37      	subs	r7, r6, r0
 800736e:	4621      	mov	r1, r4
 8007370:	ee18 0a10 	vmov	r0, s16
 8007374:	463a      	mov	r2, r7
 8007376:	f000 fcad 	bl	8007cd4 <__lshift>
 800737a:	1bed      	subs	r5, r5, r7
 800737c:	4604      	mov	r4, r0
 800737e:	f100 0914 	add.w	r9, r0, #20
 8007382:	f04f 0a00 	mov.w	sl, #0
 8007386:	e7ae      	b.n	80072e6 <__gethex+0x202>
 8007388:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800738c:	42a8      	cmp	r0, r5
 800738e:	dd72      	ble.n	8007476 <__gethex+0x392>
 8007390:	1b45      	subs	r5, r0, r5
 8007392:	42ae      	cmp	r6, r5
 8007394:	dc36      	bgt.n	8007404 <__gethex+0x320>
 8007396:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d02a      	beq.n	80073f4 <__gethex+0x310>
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d02c      	beq.n	80073fc <__gethex+0x318>
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d115      	bne.n	80073d2 <__gethex+0x2ee>
 80073a6:	42ae      	cmp	r6, r5
 80073a8:	d113      	bne.n	80073d2 <__gethex+0x2ee>
 80073aa:	2e01      	cmp	r6, #1
 80073ac:	d10b      	bne.n	80073c6 <__gethex+0x2e2>
 80073ae:	9a04      	ldr	r2, [sp, #16]
 80073b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	2301      	movs	r3, #1
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	f8c9 3000 	str.w	r3, [r9]
 80073be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073c0:	2762      	movs	r7, #98	; 0x62
 80073c2:	601c      	str	r4, [r3, #0]
 80073c4:	e723      	b.n	800720e <__gethex+0x12a>
 80073c6:	1e71      	subs	r1, r6, #1
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fec1 	bl	8008150 <__any_on>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d1ed      	bne.n	80073ae <__gethex+0x2ca>
 80073d2:	ee18 0a10 	vmov	r0, s16
 80073d6:	4621      	mov	r1, r4
 80073d8:	f000 fa60 	bl	800789c <_Bfree>
 80073dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073de:	2300      	movs	r3, #0
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	2750      	movs	r7, #80	; 0x50
 80073e4:	e713      	b.n	800720e <__gethex+0x12a>
 80073e6:	bf00      	nop
 80073e8:	080092b4 	.word	0x080092b4
 80073ec:	080091d4 	.word	0x080091d4
 80073f0:	08009248 	.word	0x08009248
 80073f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1eb      	bne.n	80073d2 <__gethex+0x2ee>
 80073fa:	e7d8      	b.n	80073ae <__gethex+0x2ca>
 80073fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1d5      	bne.n	80073ae <__gethex+0x2ca>
 8007402:	e7e6      	b.n	80073d2 <__gethex+0x2ee>
 8007404:	1e6f      	subs	r7, r5, #1
 8007406:	f1ba 0f00 	cmp.w	sl, #0
 800740a:	d131      	bne.n	8007470 <__gethex+0x38c>
 800740c:	b127      	cbz	r7, 8007418 <__gethex+0x334>
 800740e:	4639      	mov	r1, r7
 8007410:	4620      	mov	r0, r4
 8007412:	f000 fe9d 	bl	8008150 <__any_on>
 8007416:	4682      	mov	sl, r0
 8007418:	117b      	asrs	r3, r7, #5
 800741a:	2101      	movs	r1, #1
 800741c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007420:	f007 071f 	and.w	r7, r7, #31
 8007424:	fa01 f707 	lsl.w	r7, r1, r7
 8007428:	421f      	tst	r7, r3
 800742a:	4629      	mov	r1, r5
 800742c:	4620      	mov	r0, r4
 800742e:	bf18      	it	ne
 8007430:	f04a 0a02 	orrne.w	sl, sl, #2
 8007434:	1b76      	subs	r6, r6, r5
 8007436:	f7ff fdee 	bl	8007016 <rshift>
 800743a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800743e:	2702      	movs	r7, #2
 8007440:	f1ba 0f00 	cmp.w	sl, #0
 8007444:	d048      	beq.n	80074d8 <__gethex+0x3f4>
 8007446:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d015      	beq.n	800747a <__gethex+0x396>
 800744e:	2b03      	cmp	r3, #3
 8007450:	d017      	beq.n	8007482 <__gethex+0x39e>
 8007452:	2b01      	cmp	r3, #1
 8007454:	d109      	bne.n	800746a <__gethex+0x386>
 8007456:	f01a 0f02 	tst.w	sl, #2
 800745a:	d006      	beq.n	800746a <__gethex+0x386>
 800745c:	f8d9 0000 	ldr.w	r0, [r9]
 8007460:	ea4a 0a00 	orr.w	sl, sl, r0
 8007464:	f01a 0f01 	tst.w	sl, #1
 8007468:	d10e      	bne.n	8007488 <__gethex+0x3a4>
 800746a:	f047 0710 	orr.w	r7, r7, #16
 800746e:	e033      	b.n	80074d8 <__gethex+0x3f4>
 8007470:	f04f 0a01 	mov.w	sl, #1
 8007474:	e7d0      	b.n	8007418 <__gethex+0x334>
 8007476:	2701      	movs	r7, #1
 8007478:	e7e2      	b.n	8007440 <__gethex+0x35c>
 800747a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800747c:	f1c3 0301 	rsb	r3, r3, #1
 8007480:	9315      	str	r3, [sp, #84]	; 0x54
 8007482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0f0      	beq.n	800746a <__gethex+0x386>
 8007488:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800748c:	f104 0314 	add.w	r3, r4, #20
 8007490:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007494:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007498:	f04f 0c00 	mov.w	ip, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074a6:	d01c      	beq.n	80074e2 <__gethex+0x3fe>
 80074a8:	3201      	adds	r2, #1
 80074aa:	6002      	str	r2, [r0, #0]
 80074ac:	2f02      	cmp	r7, #2
 80074ae:	f104 0314 	add.w	r3, r4, #20
 80074b2:	d13f      	bne.n	8007534 <__gethex+0x450>
 80074b4:	f8d8 2000 	ldr.w	r2, [r8]
 80074b8:	3a01      	subs	r2, #1
 80074ba:	42b2      	cmp	r2, r6
 80074bc:	d10a      	bne.n	80074d4 <__gethex+0x3f0>
 80074be:	1171      	asrs	r1, r6, #5
 80074c0:	2201      	movs	r2, #1
 80074c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074c6:	f006 061f 	and.w	r6, r6, #31
 80074ca:	fa02 f606 	lsl.w	r6, r2, r6
 80074ce:	421e      	tst	r6, r3
 80074d0:	bf18      	it	ne
 80074d2:	4617      	movne	r7, r2
 80074d4:	f047 0720 	orr.w	r7, r7, #32
 80074d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074da:	601c      	str	r4, [r3, #0]
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	601d      	str	r5, [r3, #0]
 80074e0:	e695      	b.n	800720e <__gethex+0x12a>
 80074e2:	4299      	cmp	r1, r3
 80074e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80074e8:	d8d8      	bhi.n	800749c <__gethex+0x3b8>
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	459b      	cmp	fp, r3
 80074ee:	db19      	blt.n	8007524 <__gethex+0x440>
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	ee18 0a10 	vmov	r0, s16
 80074f6:	3101      	adds	r1, #1
 80074f8:	f000 f990 	bl	800781c <_Balloc>
 80074fc:	4681      	mov	r9, r0
 80074fe:	b918      	cbnz	r0, 8007508 <__gethex+0x424>
 8007500:	4b1a      	ldr	r3, [pc, #104]	; (800756c <__gethex+0x488>)
 8007502:	4602      	mov	r2, r0
 8007504:	2184      	movs	r1, #132	; 0x84
 8007506:	e6a8      	b.n	800725a <__gethex+0x176>
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	3202      	adds	r2, #2
 800750c:	f104 010c 	add.w	r1, r4, #12
 8007510:	0092      	lsls	r2, r2, #2
 8007512:	300c      	adds	r0, #12
 8007514:	f000 f974 	bl	8007800 <memcpy>
 8007518:	4621      	mov	r1, r4
 800751a:	ee18 0a10 	vmov	r0, s16
 800751e:	f000 f9bd 	bl	800789c <_Bfree>
 8007522:	464c      	mov	r4, r9
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800752c:	6122      	str	r2, [r4, #16]
 800752e:	2201      	movs	r2, #1
 8007530:	615a      	str	r2, [r3, #20]
 8007532:	e7bb      	b.n	80074ac <__gethex+0x3c8>
 8007534:	6922      	ldr	r2, [r4, #16]
 8007536:	455a      	cmp	r2, fp
 8007538:	dd0b      	ble.n	8007552 <__gethex+0x46e>
 800753a:	2101      	movs	r1, #1
 800753c:	4620      	mov	r0, r4
 800753e:	f7ff fd6a 	bl	8007016 <rshift>
 8007542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007546:	3501      	adds	r5, #1
 8007548:	42ab      	cmp	r3, r5
 800754a:	f6ff aed0 	blt.w	80072ee <__gethex+0x20a>
 800754e:	2701      	movs	r7, #1
 8007550:	e7c0      	b.n	80074d4 <__gethex+0x3f0>
 8007552:	f016 061f 	ands.w	r6, r6, #31
 8007556:	d0fa      	beq.n	800754e <__gethex+0x46a>
 8007558:	449a      	add	sl, r3
 800755a:	f1c6 0620 	rsb	r6, r6, #32
 800755e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007562:	f000 fa51 	bl	8007a08 <__hi0bits>
 8007566:	42b0      	cmp	r0, r6
 8007568:	dbe7      	blt.n	800753a <__gethex+0x456>
 800756a:	e7f0      	b.n	800754e <__gethex+0x46a>
 800756c:	080091d4 	.word	0x080091d4

08007570 <L_shift>:
 8007570:	f1c2 0208 	rsb	r2, r2, #8
 8007574:	0092      	lsls	r2, r2, #2
 8007576:	b570      	push	{r4, r5, r6, lr}
 8007578:	f1c2 0620 	rsb	r6, r2, #32
 800757c:	6843      	ldr	r3, [r0, #4]
 800757e:	6804      	ldr	r4, [r0, #0]
 8007580:	fa03 f506 	lsl.w	r5, r3, r6
 8007584:	432c      	orrs	r4, r5
 8007586:	40d3      	lsrs	r3, r2
 8007588:	6004      	str	r4, [r0, #0]
 800758a:	f840 3f04 	str.w	r3, [r0, #4]!
 800758e:	4288      	cmp	r0, r1
 8007590:	d3f4      	bcc.n	800757c <L_shift+0xc>
 8007592:	bd70      	pop	{r4, r5, r6, pc}

08007594 <__match>:
 8007594:	b530      	push	{r4, r5, lr}
 8007596:	6803      	ldr	r3, [r0, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759e:	b914      	cbnz	r4, 80075a6 <__match+0x12>
 80075a0:	6003      	str	r3, [r0, #0]
 80075a2:	2001      	movs	r0, #1
 80075a4:	bd30      	pop	{r4, r5, pc}
 80075a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075ae:	2d19      	cmp	r5, #25
 80075b0:	bf98      	it	ls
 80075b2:	3220      	addls	r2, #32
 80075b4:	42a2      	cmp	r2, r4
 80075b6:	d0f0      	beq.n	800759a <__match+0x6>
 80075b8:	2000      	movs	r0, #0
 80075ba:	e7f3      	b.n	80075a4 <__match+0x10>

080075bc <__hexnan>:
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	680b      	ldr	r3, [r1, #0]
 80075c2:	6801      	ldr	r1, [r0, #0]
 80075c4:	115e      	asrs	r6, r3, #5
 80075c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075ca:	f013 031f 	ands.w	r3, r3, #31
 80075ce:	b087      	sub	sp, #28
 80075d0:	bf18      	it	ne
 80075d2:	3604      	addne	r6, #4
 80075d4:	2500      	movs	r5, #0
 80075d6:	1f37      	subs	r7, r6, #4
 80075d8:	4682      	mov	sl, r0
 80075da:	4690      	mov	r8, r2
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	f846 5c04 	str.w	r5, [r6, #-4]
 80075e2:	46b9      	mov	r9, r7
 80075e4:	463c      	mov	r4, r7
 80075e6:	9502      	str	r5, [sp, #8]
 80075e8:	46ab      	mov	fp, r5
 80075ea:	784a      	ldrb	r2, [r1, #1]
 80075ec:	1c4b      	adds	r3, r1, #1
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	b342      	cbz	r2, 8007644 <__hexnan+0x88>
 80075f2:	4610      	mov	r0, r2
 80075f4:	9105      	str	r1, [sp, #20]
 80075f6:	9204      	str	r2, [sp, #16]
 80075f8:	f7ff fd5f 	bl	80070ba <__hexdig_fun>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d14f      	bne.n	80076a0 <__hexnan+0xe4>
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	9905      	ldr	r1, [sp, #20]
 8007604:	2a20      	cmp	r2, #32
 8007606:	d818      	bhi.n	800763a <__hexnan+0x7e>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	459b      	cmp	fp, r3
 800760c:	dd13      	ble.n	8007636 <__hexnan+0x7a>
 800760e:	454c      	cmp	r4, r9
 8007610:	d206      	bcs.n	8007620 <__hexnan+0x64>
 8007612:	2d07      	cmp	r5, #7
 8007614:	dc04      	bgt.n	8007620 <__hexnan+0x64>
 8007616:	462a      	mov	r2, r5
 8007618:	4649      	mov	r1, r9
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff ffa8 	bl	8007570 <L_shift>
 8007620:	4544      	cmp	r4, r8
 8007622:	d950      	bls.n	80076c6 <__hexnan+0x10a>
 8007624:	2300      	movs	r3, #0
 8007626:	f1a4 0904 	sub.w	r9, r4, #4
 800762a:	f844 3c04 	str.w	r3, [r4, #-4]
 800762e:	f8cd b008 	str.w	fp, [sp, #8]
 8007632:	464c      	mov	r4, r9
 8007634:	461d      	mov	r5, r3
 8007636:	9903      	ldr	r1, [sp, #12]
 8007638:	e7d7      	b.n	80075ea <__hexnan+0x2e>
 800763a:	2a29      	cmp	r2, #41	; 0x29
 800763c:	d156      	bne.n	80076ec <__hexnan+0x130>
 800763e:	3102      	adds	r1, #2
 8007640:	f8ca 1000 	str.w	r1, [sl]
 8007644:	f1bb 0f00 	cmp.w	fp, #0
 8007648:	d050      	beq.n	80076ec <__hexnan+0x130>
 800764a:	454c      	cmp	r4, r9
 800764c:	d206      	bcs.n	800765c <__hexnan+0xa0>
 800764e:	2d07      	cmp	r5, #7
 8007650:	dc04      	bgt.n	800765c <__hexnan+0xa0>
 8007652:	462a      	mov	r2, r5
 8007654:	4649      	mov	r1, r9
 8007656:	4620      	mov	r0, r4
 8007658:	f7ff ff8a 	bl	8007570 <L_shift>
 800765c:	4544      	cmp	r4, r8
 800765e:	d934      	bls.n	80076ca <__hexnan+0x10e>
 8007660:	f1a8 0204 	sub.w	r2, r8, #4
 8007664:	4623      	mov	r3, r4
 8007666:	f853 1b04 	ldr.w	r1, [r3], #4
 800766a:	f842 1f04 	str.w	r1, [r2, #4]!
 800766e:	429f      	cmp	r7, r3
 8007670:	d2f9      	bcs.n	8007666 <__hexnan+0xaa>
 8007672:	1b3b      	subs	r3, r7, r4
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	3304      	adds	r3, #4
 800767a:	3401      	adds	r4, #1
 800767c:	3e03      	subs	r6, #3
 800767e:	42b4      	cmp	r4, r6
 8007680:	bf88      	it	hi
 8007682:	2304      	movhi	r3, #4
 8007684:	4443      	add	r3, r8
 8007686:	2200      	movs	r2, #0
 8007688:	f843 2b04 	str.w	r2, [r3], #4
 800768c:	429f      	cmp	r7, r3
 800768e:	d2fb      	bcs.n	8007688 <__hexnan+0xcc>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	b91b      	cbnz	r3, 800769c <__hexnan+0xe0>
 8007694:	4547      	cmp	r7, r8
 8007696:	d127      	bne.n	80076e8 <__hexnan+0x12c>
 8007698:	2301      	movs	r3, #1
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	2005      	movs	r0, #5
 800769e:	e026      	b.n	80076ee <__hexnan+0x132>
 80076a0:	3501      	adds	r5, #1
 80076a2:	2d08      	cmp	r5, #8
 80076a4:	f10b 0b01 	add.w	fp, fp, #1
 80076a8:	dd06      	ble.n	80076b8 <__hexnan+0xfc>
 80076aa:	4544      	cmp	r4, r8
 80076ac:	d9c3      	bls.n	8007636 <__hexnan+0x7a>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80076b4:	2501      	movs	r5, #1
 80076b6:	3c04      	subs	r4, #4
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	f000 000f 	and.w	r0, r0, #15
 80076be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80076c2:	6022      	str	r2, [r4, #0]
 80076c4:	e7b7      	b.n	8007636 <__hexnan+0x7a>
 80076c6:	2508      	movs	r5, #8
 80076c8:	e7b5      	b.n	8007636 <__hexnan+0x7a>
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0df      	beq.n	8007690 <__hexnan+0xd4>
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	f1c3 0320 	rsb	r3, r3, #32
 80076d8:	fa22 f303 	lsr.w	r3, r2, r3
 80076dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076e0:	401a      	ands	r2, r3
 80076e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80076e6:	e7d3      	b.n	8007690 <__hexnan+0xd4>
 80076e8:	3f04      	subs	r7, #4
 80076ea:	e7d1      	b.n	8007690 <__hexnan+0xd4>
 80076ec:	2004      	movs	r0, #4
 80076ee:	b007      	add	sp, #28
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076f4 <_localeconv_r>:
 80076f4:	4800      	ldr	r0, [pc, #0]	; (80076f8 <_localeconv_r+0x4>)
 80076f6:	4770      	bx	lr
 80076f8:	20000164 	.word	0x20000164

080076fc <__retarget_lock_init_recursive>:
 80076fc:	4770      	bx	lr

080076fe <__retarget_lock_acquire_recursive>:
 80076fe:	4770      	bx	lr

08007700 <__retarget_lock_release_recursive>:
 8007700:	4770      	bx	lr

08007702 <__swhatbuf_r>:
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	460e      	mov	r6, r1
 8007706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770a:	2900      	cmp	r1, #0
 800770c:	b096      	sub	sp, #88	; 0x58
 800770e:	4614      	mov	r4, r2
 8007710:	461d      	mov	r5, r3
 8007712:	da07      	bge.n	8007724 <__swhatbuf_r+0x22>
 8007714:	2300      	movs	r3, #0
 8007716:	602b      	str	r3, [r5, #0]
 8007718:	89b3      	ldrh	r3, [r6, #12]
 800771a:	061a      	lsls	r2, r3, #24
 800771c:	d410      	bmi.n	8007740 <__swhatbuf_r+0x3e>
 800771e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007722:	e00e      	b.n	8007742 <__swhatbuf_r+0x40>
 8007724:	466a      	mov	r2, sp
 8007726:	f001 f817 	bl	8008758 <_fstat_r>
 800772a:	2800      	cmp	r0, #0
 800772c:	dbf2      	blt.n	8007714 <__swhatbuf_r+0x12>
 800772e:	9a01      	ldr	r2, [sp, #4]
 8007730:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007734:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007738:	425a      	negs	r2, r3
 800773a:	415a      	adcs	r2, r3
 800773c:	602a      	str	r2, [r5, #0]
 800773e:	e7ee      	b.n	800771e <__swhatbuf_r+0x1c>
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	2000      	movs	r0, #0
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	b016      	add	sp, #88	; 0x58
 8007748:	bd70      	pop	{r4, r5, r6, pc}
	...

0800774c <__smakebuf_r>:
 800774c:	898b      	ldrh	r3, [r1, #12]
 800774e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007750:	079d      	lsls	r5, r3, #30
 8007752:	4606      	mov	r6, r0
 8007754:	460c      	mov	r4, r1
 8007756:	d507      	bpl.n	8007768 <__smakebuf_r+0x1c>
 8007758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	2301      	movs	r3, #1
 8007762:	6163      	str	r3, [r4, #20]
 8007764:	b002      	add	sp, #8
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	ab01      	add	r3, sp, #4
 800776a:	466a      	mov	r2, sp
 800776c:	f7ff ffc9 	bl	8007702 <__swhatbuf_r>
 8007770:	9900      	ldr	r1, [sp, #0]
 8007772:	4605      	mov	r5, r0
 8007774:	4630      	mov	r0, r6
 8007776:	f000 fd6b 	bl	8008250 <_malloc_r>
 800777a:	b948      	cbnz	r0, 8007790 <__smakebuf_r+0x44>
 800777c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007780:	059a      	lsls	r2, r3, #22
 8007782:	d4ef      	bmi.n	8007764 <__smakebuf_r+0x18>
 8007784:	f023 0303 	bic.w	r3, r3, #3
 8007788:	f043 0302 	orr.w	r3, r3, #2
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	e7e3      	b.n	8007758 <__smakebuf_r+0xc>
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <__smakebuf_r+0x7c>)
 8007792:	62b3      	str	r3, [r6, #40]	; 0x28
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	6020      	str	r0, [r4, #0]
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	9b00      	ldr	r3, [sp, #0]
 80077a0:	6163      	str	r3, [r4, #20]
 80077a2:	9b01      	ldr	r3, [sp, #4]
 80077a4:	6120      	str	r0, [r4, #16]
 80077a6:	b15b      	cbz	r3, 80077c0 <__smakebuf_r+0x74>
 80077a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 ffe5 	bl	800877c <_isatty_r>
 80077b2:	b128      	cbz	r0, 80077c0 <__smakebuf_r+0x74>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	89a0      	ldrh	r0, [r4, #12]
 80077c2:	4305      	orrs	r5, r0
 80077c4:	81a5      	strh	r5, [r4, #12]
 80077c6:	e7cd      	b.n	8007764 <__smakebuf_r+0x18>
 80077c8:	08006e75 	.word	0x08006e75

080077cc <malloc>:
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <malloc+0xc>)
 80077ce:	4601      	mov	r1, r0
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	f000 bd3d 	b.w	8008250 <_malloc_r>
 80077d6:	bf00      	nop
 80077d8:	2000000c 	.word	0x2000000c

080077dc <__ascii_mbtowc>:
 80077dc:	b082      	sub	sp, #8
 80077de:	b901      	cbnz	r1, 80077e2 <__ascii_mbtowc+0x6>
 80077e0:	a901      	add	r1, sp, #4
 80077e2:	b142      	cbz	r2, 80077f6 <__ascii_mbtowc+0x1a>
 80077e4:	b14b      	cbz	r3, 80077fa <__ascii_mbtowc+0x1e>
 80077e6:	7813      	ldrb	r3, [r2, #0]
 80077e8:	600b      	str	r3, [r1, #0]
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	1e10      	subs	r0, r2, #0
 80077ee:	bf18      	it	ne
 80077f0:	2001      	movne	r0, #1
 80077f2:	b002      	add	sp, #8
 80077f4:	4770      	bx	lr
 80077f6:	4610      	mov	r0, r2
 80077f8:	e7fb      	b.n	80077f2 <__ascii_mbtowc+0x16>
 80077fa:	f06f 0001 	mvn.w	r0, #1
 80077fe:	e7f8      	b.n	80077f2 <__ascii_mbtowc+0x16>

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <_Balloc>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007820:	4604      	mov	r4, r0
 8007822:	460d      	mov	r5, r1
 8007824:	b976      	cbnz	r6, 8007844 <_Balloc+0x28>
 8007826:	2010      	movs	r0, #16
 8007828:	f7ff ffd0 	bl	80077cc <malloc>
 800782c:	4602      	mov	r2, r0
 800782e:	6260      	str	r0, [r4, #36]	; 0x24
 8007830:	b920      	cbnz	r0, 800783c <_Balloc+0x20>
 8007832:	4b18      	ldr	r3, [pc, #96]	; (8007894 <_Balloc+0x78>)
 8007834:	4818      	ldr	r0, [pc, #96]	; (8007898 <_Balloc+0x7c>)
 8007836:	2166      	movs	r1, #102	; 0x66
 8007838:	f000 ff4e 	bl	80086d8 <__assert_func>
 800783c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007840:	6006      	str	r6, [r0, #0]
 8007842:	60c6      	str	r6, [r0, #12]
 8007844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007846:	68f3      	ldr	r3, [r6, #12]
 8007848:	b183      	cbz	r3, 800786c <_Balloc+0x50>
 800784a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007852:	b9b8      	cbnz	r0, 8007884 <_Balloc+0x68>
 8007854:	2101      	movs	r1, #1
 8007856:	fa01 f605 	lsl.w	r6, r1, r5
 800785a:	1d72      	adds	r2, r6, #5
 800785c:	0092      	lsls	r2, r2, #2
 800785e:	4620      	mov	r0, r4
 8007860:	f000 fc97 	bl	8008192 <_calloc_r>
 8007864:	b160      	cbz	r0, 8007880 <_Balloc+0x64>
 8007866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800786a:	e00e      	b.n	800788a <_Balloc+0x6e>
 800786c:	2221      	movs	r2, #33	; 0x21
 800786e:	2104      	movs	r1, #4
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fc8e 	bl	8008192 <_calloc_r>
 8007876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007878:	60f0      	str	r0, [r6, #12]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e4      	bne.n	800784a <_Balloc+0x2e>
 8007880:	2000      	movs	r0, #0
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	6802      	ldr	r2, [r0, #0]
 8007886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800788a:	2300      	movs	r3, #0
 800788c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007890:	e7f7      	b.n	8007882 <_Balloc+0x66>
 8007892:	bf00      	nop
 8007894:	0800915e 	.word	0x0800915e
 8007898:	080092c8 	.word	0x080092c8

0800789c <_Bfree>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078a0:	4605      	mov	r5, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	b976      	cbnz	r6, 80078c4 <_Bfree+0x28>
 80078a6:	2010      	movs	r0, #16
 80078a8:	f7ff ff90 	bl	80077cc <malloc>
 80078ac:	4602      	mov	r2, r0
 80078ae:	6268      	str	r0, [r5, #36]	; 0x24
 80078b0:	b920      	cbnz	r0, 80078bc <_Bfree+0x20>
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <_Bfree+0x3c>)
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <_Bfree+0x40>)
 80078b6:	218a      	movs	r1, #138	; 0x8a
 80078b8:	f000 ff0e 	bl	80086d8 <__assert_func>
 80078bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c0:	6006      	str	r6, [r0, #0]
 80078c2:	60c6      	str	r6, [r0, #12]
 80078c4:	b13c      	cbz	r4, 80078d6 <_Bfree+0x3a>
 80078c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078c8:	6862      	ldr	r2, [r4, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078d0:	6021      	str	r1, [r4, #0]
 80078d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	0800915e 	.word	0x0800915e
 80078dc:	080092c8 	.word	0x080092c8

080078e0 <__multadd>:
 80078e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e4:	690e      	ldr	r6, [r1, #16]
 80078e6:	4607      	mov	r7, r0
 80078e8:	4698      	mov	r8, r3
 80078ea:	460c      	mov	r4, r1
 80078ec:	f101 0014 	add.w	r0, r1, #20
 80078f0:	2300      	movs	r3, #0
 80078f2:	6805      	ldr	r5, [r0, #0]
 80078f4:	b2a9      	uxth	r1, r5
 80078f6:	fb02 8101 	mla	r1, r2, r1, r8
 80078fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80078fe:	0c2d      	lsrs	r5, r5, #16
 8007900:	fb02 c505 	mla	r5, r2, r5, ip
 8007904:	b289      	uxth	r1, r1
 8007906:	3301      	adds	r3, #1
 8007908:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800790c:	429e      	cmp	r6, r3
 800790e:	f840 1b04 	str.w	r1, [r0], #4
 8007912:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007916:	dcec      	bgt.n	80078f2 <__multadd+0x12>
 8007918:	f1b8 0f00 	cmp.w	r8, #0
 800791c:	d022      	beq.n	8007964 <__multadd+0x84>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	42b3      	cmp	r3, r6
 8007922:	dc19      	bgt.n	8007958 <__multadd+0x78>
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	4638      	mov	r0, r7
 8007928:	3101      	adds	r1, #1
 800792a:	f7ff ff77 	bl	800781c <_Balloc>
 800792e:	4605      	mov	r5, r0
 8007930:	b928      	cbnz	r0, 800793e <__multadd+0x5e>
 8007932:	4602      	mov	r2, r0
 8007934:	4b0d      	ldr	r3, [pc, #52]	; (800796c <__multadd+0x8c>)
 8007936:	480e      	ldr	r0, [pc, #56]	; (8007970 <__multadd+0x90>)
 8007938:	21b5      	movs	r1, #181	; 0xb5
 800793a:	f000 fecd 	bl	80086d8 <__assert_func>
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	3202      	adds	r2, #2
 8007942:	f104 010c 	add.w	r1, r4, #12
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	300c      	adds	r0, #12
 800794a:	f7ff ff59 	bl	8007800 <memcpy>
 800794e:	4621      	mov	r1, r4
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff ffa3 	bl	800789c <_Bfree>
 8007956:	462c      	mov	r4, r5
 8007958:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800795c:	3601      	adds	r6, #1
 800795e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007962:	6126      	str	r6, [r4, #16]
 8007964:	4620      	mov	r0, r4
 8007966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800796a:	bf00      	nop
 800796c:	080091d4 	.word	0x080091d4
 8007970:	080092c8 	.word	0x080092c8

08007974 <__s2b>:
 8007974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007978:	460c      	mov	r4, r1
 800797a:	4615      	mov	r5, r2
 800797c:	461f      	mov	r7, r3
 800797e:	2209      	movs	r2, #9
 8007980:	3308      	adds	r3, #8
 8007982:	4606      	mov	r6, r0
 8007984:	fb93 f3f2 	sdiv	r3, r3, r2
 8007988:	2100      	movs	r1, #0
 800798a:	2201      	movs	r2, #1
 800798c:	429a      	cmp	r2, r3
 800798e:	db09      	blt.n	80079a4 <__s2b+0x30>
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff ff43 	bl	800781c <_Balloc>
 8007996:	b940      	cbnz	r0, 80079aa <__s2b+0x36>
 8007998:	4602      	mov	r2, r0
 800799a:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <__s2b+0x8c>)
 800799c:	4819      	ldr	r0, [pc, #100]	; (8007a04 <__s2b+0x90>)
 800799e:	21ce      	movs	r1, #206	; 0xce
 80079a0:	f000 fe9a 	bl	80086d8 <__assert_func>
 80079a4:	0052      	lsls	r2, r2, #1
 80079a6:	3101      	adds	r1, #1
 80079a8:	e7f0      	b.n	800798c <__s2b+0x18>
 80079aa:	9b08      	ldr	r3, [sp, #32]
 80079ac:	6143      	str	r3, [r0, #20]
 80079ae:	2d09      	cmp	r5, #9
 80079b0:	f04f 0301 	mov.w	r3, #1
 80079b4:	6103      	str	r3, [r0, #16]
 80079b6:	dd16      	ble.n	80079e6 <__s2b+0x72>
 80079b8:	f104 0909 	add.w	r9, r4, #9
 80079bc:	46c8      	mov	r8, r9
 80079be:	442c      	add	r4, r5
 80079c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079c4:	4601      	mov	r1, r0
 80079c6:	3b30      	subs	r3, #48	; 0x30
 80079c8:	220a      	movs	r2, #10
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff ff88 	bl	80078e0 <__multadd>
 80079d0:	45a0      	cmp	r8, r4
 80079d2:	d1f5      	bne.n	80079c0 <__s2b+0x4c>
 80079d4:	f1a5 0408 	sub.w	r4, r5, #8
 80079d8:	444c      	add	r4, r9
 80079da:	1b2d      	subs	r5, r5, r4
 80079dc:	1963      	adds	r3, r4, r5
 80079de:	42bb      	cmp	r3, r7
 80079e0:	db04      	blt.n	80079ec <__s2b+0x78>
 80079e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e6:	340a      	adds	r4, #10
 80079e8:	2509      	movs	r5, #9
 80079ea:	e7f6      	b.n	80079da <__s2b+0x66>
 80079ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f0:	4601      	mov	r1, r0
 80079f2:	3b30      	subs	r3, #48	; 0x30
 80079f4:	220a      	movs	r2, #10
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff ff72 	bl	80078e0 <__multadd>
 80079fc:	e7ee      	b.n	80079dc <__s2b+0x68>
 80079fe:	bf00      	nop
 8007a00:	080091d4 	.word	0x080091d4
 8007a04:	080092c8 	.word	0x080092c8

08007a08 <__hi0bits>:
 8007a08:	0c03      	lsrs	r3, r0, #16
 8007a0a:	041b      	lsls	r3, r3, #16
 8007a0c:	b9d3      	cbnz	r3, 8007a44 <__hi0bits+0x3c>
 8007a0e:	0400      	lsls	r0, r0, #16
 8007a10:	2310      	movs	r3, #16
 8007a12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a16:	bf04      	itt	eq
 8007a18:	0200      	lsleq	r0, r0, #8
 8007a1a:	3308      	addeq	r3, #8
 8007a1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a20:	bf04      	itt	eq
 8007a22:	0100      	lsleq	r0, r0, #4
 8007a24:	3304      	addeq	r3, #4
 8007a26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a2a:	bf04      	itt	eq
 8007a2c:	0080      	lsleq	r0, r0, #2
 8007a2e:	3302      	addeq	r3, #2
 8007a30:	2800      	cmp	r0, #0
 8007a32:	db05      	blt.n	8007a40 <__hi0bits+0x38>
 8007a34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a38:	f103 0301 	add.w	r3, r3, #1
 8007a3c:	bf08      	it	eq
 8007a3e:	2320      	moveq	r3, #32
 8007a40:	4618      	mov	r0, r3
 8007a42:	4770      	bx	lr
 8007a44:	2300      	movs	r3, #0
 8007a46:	e7e4      	b.n	8007a12 <__hi0bits+0xa>

08007a48 <__lo0bits>:
 8007a48:	6803      	ldr	r3, [r0, #0]
 8007a4a:	f013 0207 	ands.w	r2, r3, #7
 8007a4e:	4601      	mov	r1, r0
 8007a50:	d00b      	beq.n	8007a6a <__lo0bits+0x22>
 8007a52:	07da      	lsls	r2, r3, #31
 8007a54:	d424      	bmi.n	8007aa0 <__lo0bits+0x58>
 8007a56:	0798      	lsls	r0, r3, #30
 8007a58:	bf49      	itett	mi
 8007a5a:	085b      	lsrmi	r3, r3, #1
 8007a5c:	089b      	lsrpl	r3, r3, #2
 8007a5e:	2001      	movmi	r0, #1
 8007a60:	600b      	strmi	r3, [r1, #0]
 8007a62:	bf5c      	itt	pl
 8007a64:	600b      	strpl	r3, [r1, #0]
 8007a66:	2002      	movpl	r0, #2
 8007a68:	4770      	bx	lr
 8007a6a:	b298      	uxth	r0, r3
 8007a6c:	b9b0      	cbnz	r0, 8007a9c <__lo0bits+0x54>
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	2010      	movs	r0, #16
 8007a72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a76:	bf04      	itt	eq
 8007a78:	0a1b      	lsreq	r3, r3, #8
 8007a7a:	3008      	addeq	r0, #8
 8007a7c:	071a      	lsls	r2, r3, #28
 8007a7e:	bf04      	itt	eq
 8007a80:	091b      	lsreq	r3, r3, #4
 8007a82:	3004      	addeq	r0, #4
 8007a84:	079a      	lsls	r2, r3, #30
 8007a86:	bf04      	itt	eq
 8007a88:	089b      	lsreq	r3, r3, #2
 8007a8a:	3002      	addeq	r0, #2
 8007a8c:	07da      	lsls	r2, r3, #31
 8007a8e:	d403      	bmi.n	8007a98 <__lo0bits+0x50>
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	f100 0001 	add.w	r0, r0, #1
 8007a96:	d005      	beq.n	8007aa4 <__lo0bits+0x5c>
 8007a98:	600b      	str	r3, [r1, #0]
 8007a9a:	4770      	bx	lr
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	e7e8      	b.n	8007a72 <__lo0bits+0x2a>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	4770      	bx	lr
 8007aa4:	2020      	movs	r0, #32
 8007aa6:	4770      	bx	lr

08007aa8 <__i2b>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	460c      	mov	r4, r1
 8007aac:	2101      	movs	r1, #1
 8007aae:	f7ff feb5 	bl	800781c <_Balloc>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	b928      	cbnz	r0, 8007ac2 <__i2b+0x1a>
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <__i2b+0x24>)
 8007ab8:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <__i2b+0x28>)
 8007aba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007abe:	f000 fe0b 	bl	80086d8 <__assert_func>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	6144      	str	r4, [r0, #20]
 8007ac6:	6103      	str	r3, [r0, #16]
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	bf00      	nop
 8007acc:	080091d4 	.word	0x080091d4
 8007ad0:	080092c8 	.word	0x080092c8

08007ad4 <__multiply>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4614      	mov	r4, r2
 8007ada:	690a      	ldr	r2, [r1, #16]
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	bfb8      	it	lt
 8007ae2:	460b      	movlt	r3, r1
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	bfbc      	itt	lt
 8007ae8:	4625      	movlt	r5, r4
 8007aea:	461c      	movlt	r4, r3
 8007aec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007af0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007af4:	68ab      	ldr	r3, [r5, #8]
 8007af6:	6869      	ldr	r1, [r5, #4]
 8007af8:	eb0a 0709 	add.w	r7, sl, r9
 8007afc:	42bb      	cmp	r3, r7
 8007afe:	b085      	sub	sp, #20
 8007b00:	bfb8      	it	lt
 8007b02:	3101      	addlt	r1, #1
 8007b04:	f7ff fe8a 	bl	800781c <_Balloc>
 8007b08:	b930      	cbnz	r0, 8007b18 <__multiply+0x44>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4b42      	ldr	r3, [pc, #264]	; (8007c18 <__multiply+0x144>)
 8007b0e:	4843      	ldr	r0, [pc, #268]	; (8007c1c <__multiply+0x148>)
 8007b10:	f240 115d 	movw	r1, #349	; 0x15d
 8007b14:	f000 fde0 	bl	80086d8 <__assert_func>
 8007b18:	f100 0614 	add.w	r6, r0, #20
 8007b1c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007b20:	4633      	mov	r3, r6
 8007b22:	2200      	movs	r2, #0
 8007b24:	4543      	cmp	r3, r8
 8007b26:	d31e      	bcc.n	8007b66 <__multiply+0x92>
 8007b28:	f105 0c14 	add.w	ip, r5, #20
 8007b2c:	f104 0314 	add.w	r3, r4, #20
 8007b30:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007b34:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007b38:	9202      	str	r2, [sp, #8]
 8007b3a:	ebac 0205 	sub.w	r2, ip, r5
 8007b3e:	3a15      	subs	r2, #21
 8007b40:	f022 0203 	bic.w	r2, r2, #3
 8007b44:	3204      	adds	r2, #4
 8007b46:	f105 0115 	add.w	r1, r5, #21
 8007b4a:	458c      	cmp	ip, r1
 8007b4c:	bf38      	it	cc
 8007b4e:	2204      	movcc	r2, #4
 8007b50:	9201      	str	r2, [sp, #4]
 8007b52:	9a02      	ldr	r2, [sp, #8]
 8007b54:	9303      	str	r3, [sp, #12]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d808      	bhi.n	8007b6c <__multiply+0x98>
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	dc55      	bgt.n	8007c0a <__multiply+0x136>
 8007b5e:	6107      	str	r7, [r0, #16]
 8007b60:	b005      	add	sp, #20
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	f843 2b04 	str.w	r2, [r3], #4
 8007b6a:	e7db      	b.n	8007b24 <__multiply+0x50>
 8007b6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b70:	f1ba 0f00 	cmp.w	sl, #0
 8007b74:	d020      	beq.n	8007bb8 <__multiply+0xe4>
 8007b76:	f105 0e14 	add.w	lr, r5, #20
 8007b7a:	46b1      	mov	r9, r6
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007b82:	f8d9 b000 	ldr.w	fp, [r9]
 8007b86:	b2a1      	uxth	r1, r4
 8007b88:	fa1f fb8b 	uxth.w	fp, fp
 8007b8c:	fb0a b101 	mla	r1, sl, r1, fp
 8007b90:	4411      	add	r1, r2
 8007b92:	f8d9 2000 	ldr.w	r2, [r9]
 8007b96:	0c24      	lsrs	r4, r4, #16
 8007b98:	0c12      	lsrs	r2, r2, #16
 8007b9a:	fb0a 2404 	mla	r4, sl, r4, r2
 8007b9e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ba2:	b289      	uxth	r1, r1
 8007ba4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ba8:	45f4      	cmp	ip, lr
 8007baa:	f849 1b04 	str.w	r1, [r9], #4
 8007bae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007bb2:	d8e4      	bhi.n	8007b7e <__multiply+0xaa>
 8007bb4:	9901      	ldr	r1, [sp, #4]
 8007bb6:	5072      	str	r2, [r6, r1]
 8007bb8:	9a03      	ldr	r2, [sp, #12]
 8007bba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	f1b9 0f00 	cmp.w	r9, #0
 8007bc4:	d01f      	beq.n	8007c06 <__multiply+0x132>
 8007bc6:	6834      	ldr	r4, [r6, #0]
 8007bc8:	f105 0114 	add.w	r1, r5, #20
 8007bcc:	46b6      	mov	lr, r6
 8007bce:	f04f 0a00 	mov.w	sl, #0
 8007bd2:	880a      	ldrh	r2, [r1, #0]
 8007bd4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007bd8:	fb09 b202 	mla	r2, r9, r2, fp
 8007bdc:	4492      	add	sl, r2
 8007bde:	b2a4      	uxth	r4, r4
 8007be0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007be4:	f84e 4b04 	str.w	r4, [lr], #4
 8007be8:	f851 4b04 	ldr.w	r4, [r1], #4
 8007bec:	f8be 2000 	ldrh.w	r2, [lr]
 8007bf0:	0c24      	lsrs	r4, r4, #16
 8007bf2:	fb09 2404 	mla	r4, r9, r4, r2
 8007bf6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007bfa:	458c      	cmp	ip, r1
 8007bfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c00:	d8e7      	bhi.n	8007bd2 <__multiply+0xfe>
 8007c02:	9a01      	ldr	r2, [sp, #4]
 8007c04:	50b4      	str	r4, [r6, r2]
 8007c06:	3604      	adds	r6, #4
 8007c08:	e7a3      	b.n	8007b52 <__multiply+0x7e>
 8007c0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1a5      	bne.n	8007b5e <__multiply+0x8a>
 8007c12:	3f01      	subs	r7, #1
 8007c14:	e7a1      	b.n	8007b5a <__multiply+0x86>
 8007c16:	bf00      	nop
 8007c18:	080091d4 	.word	0x080091d4
 8007c1c:	080092c8 	.word	0x080092c8

08007c20 <__pow5mult>:
 8007c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c24:	4615      	mov	r5, r2
 8007c26:	f012 0203 	ands.w	r2, r2, #3
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	d007      	beq.n	8007c40 <__pow5mult+0x20>
 8007c30:	4c25      	ldr	r4, [pc, #148]	; (8007cc8 <__pow5mult+0xa8>)
 8007c32:	3a01      	subs	r2, #1
 8007c34:	2300      	movs	r3, #0
 8007c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c3a:	f7ff fe51 	bl	80078e0 <__multadd>
 8007c3e:	4607      	mov	r7, r0
 8007c40:	10ad      	asrs	r5, r5, #2
 8007c42:	d03d      	beq.n	8007cc0 <__pow5mult+0xa0>
 8007c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c46:	b97c      	cbnz	r4, 8007c68 <__pow5mult+0x48>
 8007c48:	2010      	movs	r0, #16
 8007c4a:	f7ff fdbf 	bl	80077cc <malloc>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6270      	str	r0, [r6, #36]	; 0x24
 8007c52:	b928      	cbnz	r0, 8007c60 <__pow5mult+0x40>
 8007c54:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <__pow5mult+0xac>)
 8007c56:	481e      	ldr	r0, [pc, #120]	; (8007cd0 <__pow5mult+0xb0>)
 8007c58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c5c:	f000 fd3c 	bl	80086d8 <__assert_func>
 8007c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c64:	6004      	str	r4, [r0, #0]
 8007c66:	60c4      	str	r4, [r0, #12]
 8007c68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c70:	b94c      	cbnz	r4, 8007c86 <__pow5mult+0x66>
 8007c72:	f240 2171 	movw	r1, #625	; 0x271
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff ff16 	bl	8007aa8 <__i2b>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c82:	4604      	mov	r4, r0
 8007c84:	6003      	str	r3, [r0, #0]
 8007c86:	f04f 0900 	mov.w	r9, #0
 8007c8a:	07eb      	lsls	r3, r5, #31
 8007c8c:	d50a      	bpl.n	8007ca4 <__pow5mult+0x84>
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4622      	mov	r2, r4
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ff1e 	bl	8007ad4 <__multiply>
 8007c98:	4639      	mov	r1, r7
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff fdfd 	bl	800789c <_Bfree>
 8007ca2:	4647      	mov	r7, r8
 8007ca4:	106d      	asrs	r5, r5, #1
 8007ca6:	d00b      	beq.n	8007cc0 <__pow5mult+0xa0>
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	b938      	cbnz	r0, 8007cbc <__pow5mult+0x9c>
 8007cac:	4622      	mov	r2, r4
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7ff ff0f 	bl	8007ad4 <__multiply>
 8007cb6:	6020      	str	r0, [r4, #0]
 8007cb8:	f8c0 9000 	str.w	r9, [r0]
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	e7e4      	b.n	8007c8a <__pow5mult+0x6a>
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08009418 	.word	0x08009418
 8007ccc:	0800915e 	.word	0x0800915e
 8007cd0:	080092c8 	.word	0x080092c8

08007cd4 <__lshift>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	460c      	mov	r4, r1
 8007cda:	6849      	ldr	r1, [r1, #4]
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	4691      	mov	r9, r2
 8007ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cec:	f108 0601 	add.w	r6, r8, #1
 8007cf0:	42b3      	cmp	r3, r6
 8007cf2:	db0b      	blt.n	8007d0c <__lshift+0x38>
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7ff fd91 	bl	800781c <_Balloc>
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	b948      	cbnz	r0, 8007d12 <__lshift+0x3e>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	4b28      	ldr	r3, [pc, #160]	; (8007da4 <__lshift+0xd0>)
 8007d02:	4829      	ldr	r0, [pc, #164]	; (8007da8 <__lshift+0xd4>)
 8007d04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d08:	f000 fce6 	bl	80086d8 <__assert_func>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	e7ee      	b.n	8007cf0 <__lshift+0x1c>
 8007d12:	2300      	movs	r3, #0
 8007d14:	f100 0114 	add.w	r1, r0, #20
 8007d18:	f100 0210 	add.w	r2, r0, #16
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	4553      	cmp	r3, sl
 8007d20:	db33      	blt.n	8007d8a <__lshift+0xb6>
 8007d22:	6920      	ldr	r0, [r4, #16]
 8007d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d28:	f104 0314 	add.w	r3, r4, #20
 8007d2c:	f019 091f 	ands.w	r9, r9, #31
 8007d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d38:	d02b      	beq.n	8007d92 <__lshift+0xbe>
 8007d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d3e:	468a      	mov	sl, r1
 8007d40:	2200      	movs	r2, #0
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	fa00 f009 	lsl.w	r0, r0, r9
 8007d48:	4302      	orrs	r2, r0
 8007d4a:	f84a 2b04 	str.w	r2, [sl], #4
 8007d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d52:	459c      	cmp	ip, r3
 8007d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d58:	d8f3      	bhi.n	8007d42 <__lshift+0x6e>
 8007d5a:	ebac 0304 	sub.w	r3, ip, r4
 8007d5e:	3b15      	subs	r3, #21
 8007d60:	f023 0303 	bic.w	r3, r3, #3
 8007d64:	3304      	adds	r3, #4
 8007d66:	f104 0015 	add.w	r0, r4, #21
 8007d6a:	4584      	cmp	ip, r0
 8007d6c:	bf38      	it	cc
 8007d6e:	2304      	movcc	r3, #4
 8007d70:	50ca      	str	r2, [r1, r3]
 8007d72:	b10a      	cbz	r2, 8007d78 <__lshift+0xa4>
 8007d74:	f108 0602 	add.w	r6, r8, #2
 8007d78:	3e01      	subs	r6, #1
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	612e      	str	r6, [r5, #16]
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f7ff fd8c 	bl	800789c <_Bfree>
 8007d84:	4628      	mov	r0, r5
 8007d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d8e:	3301      	adds	r3, #1
 8007d90:	e7c5      	b.n	8007d1e <__lshift+0x4a>
 8007d92:	3904      	subs	r1, #4
 8007d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d9c:	459c      	cmp	ip, r3
 8007d9e:	d8f9      	bhi.n	8007d94 <__lshift+0xc0>
 8007da0:	e7ea      	b.n	8007d78 <__lshift+0xa4>
 8007da2:	bf00      	nop
 8007da4:	080091d4 	.word	0x080091d4
 8007da8:	080092c8 	.word	0x080092c8

08007dac <__mcmp>:
 8007dac:	b530      	push	{r4, r5, lr}
 8007dae:	6902      	ldr	r2, [r0, #16]
 8007db0:	690c      	ldr	r4, [r1, #16]
 8007db2:	1b12      	subs	r2, r2, r4
 8007db4:	d10e      	bne.n	8007dd4 <__mcmp+0x28>
 8007db6:	f100 0314 	add.w	r3, r0, #20
 8007dba:	3114      	adds	r1, #20
 8007dbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007dc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007dc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007dcc:	42a5      	cmp	r5, r4
 8007dce:	d003      	beq.n	8007dd8 <__mcmp+0x2c>
 8007dd0:	d305      	bcc.n	8007dde <__mcmp+0x32>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	bd30      	pop	{r4, r5, pc}
 8007dd8:	4283      	cmp	r3, r0
 8007dda:	d3f3      	bcc.n	8007dc4 <__mcmp+0x18>
 8007ddc:	e7fa      	b.n	8007dd4 <__mcmp+0x28>
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295
 8007de2:	e7f7      	b.n	8007dd4 <__mcmp+0x28>

08007de4 <__mdiff>:
 8007de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	460c      	mov	r4, r1
 8007dea:	4606      	mov	r6, r0
 8007dec:	4611      	mov	r1, r2
 8007dee:	4620      	mov	r0, r4
 8007df0:	4617      	mov	r7, r2
 8007df2:	f7ff ffdb 	bl	8007dac <__mcmp>
 8007df6:	1e05      	subs	r5, r0, #0
 8007df8:	d110      	bne.n	8007e1c <__mdiff+0x38>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff fd0d 	bl	800781c <_Balloc>
 8007e02:	b930      	cbnz	r0, 8007e12 <__mdiff+0x2e>
 8007e04:	4b39      	ldr	r3, [pc, #228]	; (8007eec <__mdiff+0x108>)
 8007e06:	4602      	mov	r2, r0
 8007e08:	f240 2132 	movw	r1, #562	; 0x232
 8007e0c:	4838      	ldr	r0, [pc, #224]	; (8007ef0 <__mdiff+0x10c>)
 8007e0e:	f000 fc63 	bl	80086d8 <__assert_func>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1c:	bfa4      	itt	ge
 8007e1e:	463b      	movge	r3, r7
 8007e20:	4627      	movge	r7, r4
 8007e22:	4630      	mov	r0, r6
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	bfa6      	itte	ge
 8007e28:	461c      	movge	r4, r3
 8007e2a:	2500      	movge	r5, #0
 8007e2c:	2501      	movlt	r5, #1
 8007e2e:	f7ff fcf5 	bl	800781c <_Balloc>
 8007e32:	b920      	cbnz	r0, 8007e3e <__mdiff+0x5a>
 8007e34:	4b2d      	ldr	r3, [pc, #180]	; (8007eec <__mdiff+0x108>)
 8007e36:	4602      	mov	r2, r0
 8007e38:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e3c:	e7e6      	b.n	8007e0c <__mdiff+0x28>
 8007e3e:	693e      	ldr	r6, [r7, #16]
 8007e40:	60c5      	str	r5, [r0, #12]
 8007e42:	6925      	ldr	r5, [r4, #16]
 8007e44:	f107 0114 	add.w	r1, r7, #20
 8007e48:	f104 0914 	add.w	r9, r4, #20
 8007e4c:	f100 0e14 	add.w	lr, r0, #20
 8007e50:	f107 0210 	add.w	r2, r7, #16
 8007e54:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007e58:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007e5c:	46f2      	mov	sl, lr
 8007e5e:	2700      	movs	r7, #0
 8007e60:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e68:	fa1f f883 	uxth.w	r8, r3
 8007e6c:	fa17 f78b 	uxtah	r7, r7, fp
 8007e70:	0c1b      	lsrs	r3, r3, #16
 8007e72:	eba7 0808 	sub.w	r8, r7, r8
 8007e76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e7e:	fa1f f888 	uxth.w	r8, r8
 8007e82:	141f      	asrs	r7, r3, #16
 8007e84:	454d      	cmp	r5, r9
 8007e86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e8a:	f84a 3b04 	str.w	r3, [sl], #4
 8007e8e:	d8e7      	bhi.n	8007e60 <__mdiff+0x7c>
 8007e90:	1b2b      	subs	r3, r5, r4
 8007e92:	3b15      	subs	r3, #21
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	3304      	adds	r3, #4
 8007e9a:	3415      	adds	r4, #21
 8007e9c:	42a5      	cmp	r5, r4
 8007e9e:	bf38      	it	cc
 8007ea0:	2304      	movcc	r3, #4
 8007ea2:	4419      	add	r1, r3
 8007ea4:	4473      	add	r3, lr
 8007ea6:	469e      	mov	lr, r3
 8007ea8:	460d      	mov	r5, r1
 8007eaa:	4565      	cmp	r5, ip
 8007eac:	d30e      	bcc.n	8007ecc <__mdiff+0xe8>
 8007eae:	f10c 0203 	add.w	r2, ip, #3
 8007eb2:	1a52      	subs	r2, r2, r1
 8007eb4:	f022 0203 	bic.w	r2, r2, #3
 8007eb8:	3903      	subs	r1, #3
 8007eba:	458c      	cmp	ip, r1
 8007ebc:	bf38      	it	cc
 8007ebe:	2200      	movcc	r2, #0
 8007ec0:	441a      	add	r2, r3
 8007ec2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ec6:	b17b      	cbz	r3, 8007ee8 <__mdiff+0x104>
 8007ec8:	6106      	str	r6, [r0, #16]
 8007eca:	e7a5      	b.n	8007e18 <__mdiff+0x34>
 8007ecc:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ed0:	fa17 f488 	uxtah	r4, r7, r8
 8007ed4:	1422      	asrs	r2, r4, #16
 8007ed6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007eda:	b2a4      	uxth	r4, r4
 8007edc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ee0:	f84e 4b04 	str.w	r4, [lr], #4
 8007ee4:	1417      	asrs	r7, r2, #16
 8007ee6:	e7e0      	b.n	8007eaa <__mdiff+0xc6>
 8007ee8:	3e01      	subs	r6, #1
 8007eea:	e7ea      	b.n	8007ec2 <__mdiff+0xde>
 8007eec:	080091d4 	.word	0x080091d4
 8007ef0:	080092c8 	.word	0x080092c8

08007ef4 <__ulp>:
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	ed8d 0b00 	vstr	d0, [sp]
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	4912      	ldr	r1, [pc, #72]	; (8007f48 <__ulp+0x54>)
 8007efe:	4019      	ands	r1, r3
 8007f00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007f04:	2900      	cmp	r1, #0
 8007f06:	dd05      	ble.n	8007f14 <__ulp+0x20>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	ec43 2b10 	vmov	d0, r2, r3
 8007f10:	b002      	add	sp, #8
 8007f12:	4770      	bx	lr
 8007f14:	4249      	negs	r1, r1
 8007f16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007f1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	da04      	bge.n	8007f32 <__ulp+0x3e>
 8007f28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007f2c:	fa41 f300 	asr.w	r3, r1, r0
 8007f30:	e7ec      	b.n	8007f0c <__ulp+0x18>
 8007f32:	f1a0 0114 	sub.w	r1, r0, #20
 8007f36:	291e      	cmp	r1, #30
 8007f38:	bfda      	itte	le
 8007f3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007f3e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007f42:	2101      	movgt	r1, #1
 8007f44:	460a      	mov	r2, r1
 8007f46:	e7e1      	b.n	8007f0c <__ulp+0x18>
 8007f48:	7ff00000 	.word	0x7ff00000

08007f4c <__b2d>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	6905      	ldr	r5, [r0, #16]
 8007f50:	f100 0714 	add.w	r7, r0, #20
 8007f54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f58:	1f2e      	subs	r6, r5, #4
 8007f5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7ff fd52 	bl	8007a08 <__hi0bits>
 8007f64:	f1c0 0320 	rsb	r3, r0, #32
 8007f68:	280a      	cmp	r0, #10
 8007f6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007fe8 <__b2d+0x9c>
 8007f6e:	600b      	str	r3, [r1, #0]
 8007f70:	dc14      	bgt.n	8007f9c <__b2d+0x50>
 8007f72:	f1c0 0e0b 	rsb	lr, r0, #11
 8007f76:	fa24 f10e 	lsr.w	r1, r4, lr
 8007f7a:	42b7      	cmp	r7, r6
 8007f7c:	ea41 030c 	orr.w	r3, r1, ip
 8007f80:	bf34      	ite	cc
 8007f82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f86:	2100      	movcs	r1, #0
 8007f88:	3015      	adds	r0, #21
 8007f8a:	fa04 f000 	lsl.w	r0, r4, r0
 8007f8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007f92:	ea40 0201 	orr.w	r2, r0, r1
 8007f96:	ec43 2b10 	vmov	d0, r2, r3
 8007f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f9c:	42b7      	cmp	r7, r6
 8007f9e:	bf3a      	itte	cc
 8007fa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fa4:	f1a5 0608 	subcc.w	r6, r5, #8
 8007fa8:	2100      	movcs	r1, #0
 8007faa:	380b      	subs	r0, #11
 8007fac:	d017      	beq.n	8007fde <__b2d+0x92>
 8007fae:	f1c0 0c20 	rsb	ip, r0, #32
 8007fb2:	fa04 f500 	lsl.w	r5, r4, r0
 8007fb6:	42be      	cmp	r6, r7
 8007fb8:	fa21 f40c 	lsr.w	r4, r1, ip
 8007fbc:	ea45 0504 	orr.w	r5, r5, r4
 8007fc0:	bf8c      	ite	hi
 8007fc2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007fc6:	2400      	movls	r4, #0
 8007fc8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007fcc:	fa01 f000 	lsl.w	r0, r1, r0
 8007fd0:	fa24 f40c 	lsr.w	r4, r4, ip
 8007fd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007fd8:	ea40 0204 	orr.w	r2, r0, r4
 8007fdc:	e7db      	b.n	8007f96 <__b2d+0x4a>
 8007fde:	ea44 030c 	orr.w	r3, r4, ip
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	e7d7      	b.n	8007f96 <__b2d+0x4a>
 8007fe6:	bf00      	nop
 8007fe8:	3ff00000 	.word	0x3ff00000

08007fec <__d2b>:
 8007fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	4689      	mov	r9, r1
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	ec57 6b10 	vmov	r6, r7, d0
 8007ff8:	4690      	mov	r8, r2
 8007ffa:	f7ff fc0f 	bl	800781c <_Balloc>
 8007ffe:	4604      	mov	r4, r0
 8008000:	b930      	cbnz	r0, 8008010 <__d2b+0x24>
 8008002:	4602      	mov	r2, r0
 8008004:	4b25      	ldr	r3, [pc, #148]	; (800809c <__d2b+0xb0>)
 8008006:	4826      	ldr	r0, [pc, #152]	; (80080a0 <__d2b+0xb4>)
 8008008:	f240 310a 	movw	r1, #778	; 0x30a
 800800c:	f000 fb64 	bl	80086d8 <__assert_func>
 8008010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008018:	bb35      	cbnz	r5, 8008068 <__d2b+0x7c>
 800801a:	2e00      	cmp	r6, #0
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	d028      	beq.n	8008072 <__d2b+0x86>
 8008020:	4668      	mov	r0, sp
 8008022:	9600      	str	r6, [sp, #0]
 8008024:	f7ff fd10 	bl	8007a48 <__lo0bits>
 8008028:	9900      	ldr	r1, [sp, #0]
 800802a:	b300      	cbz	r0, 800806e <__d2b+0x82>
 800802c:	9a01      	ldr	r2, [sp, #4]
 800802e:	f1c0 0320 	rsb	r3, r0, #32
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	430b      	orrs	r3, r1
 8008038:	40c2      	lsrs	r2, r0
 800803a:	6163      	str	r3, [r4, #20]
 800803c:	9201      	str	r2, [sp, #4]
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	61a3      	str	r3, [r4, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	bf14      	ite	ne
 8008046:	2202      	movne	r2, #2
 8008048:	2201      	moveq	r2, #1
 800804a:	6122      	str	r2, [r4, #16]
 800804c:	b1d5      	cbz	r5, 8008084 <__d2b+0x98>
 800804e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008052:	4405      	add	r5, r0
 8008054:	f8c9 5000 	str.w	r5, [r9]
 8008058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800805c:	f8c8 0000 	str.w	r0, [r8]
 8008060:	4620      	mov	r0, r4
 8008062:	b003      	add	sp, #12
 8008064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800806c:	e7d5      	b.n	800801a <__d2b+0x2e>
 800806e:	6161      	str	r1, [r4, #20]
 8008070:	e7e5      	b.n	800803e <__d2b+0x52>
 8008072:	a801      	add	r0, sp, #4
 8008074:	f7ff fce8 	bl	8007a48 <__lo0bits>
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	6163      	str	r3, [r4, #20]
 800807c:	2201      	movs	r2, #1
 800807e:	6122      	str	r2, [r4, #16]
 8008080:	3020      	adds	r0, #32
 8008082:	e7e3      	b.n	800804c <__d2b+0x60>
 8008084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800808c:	f8c9 0000 	str.w	r0, [r9]
 8008090:	6918      	ldr	r0, [r3, #16]
 8008092:	f7ff fcb9 	bl	8007a08 <__hi0bits>
 8008096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800809a:	e7df      	b.n	800805c <__d2b+0x70>
 800809c:	080091d4 	.word	0x080091d4
 80080a0:	080092c8 	.word	0x080092c8

080080a4 <__ratio>:
 80080a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	4688      	mov	r8, r1
 80080aa:	4669      	mov	r1, sp
 80080ac:	4681      	mov	r9, r0
 80080ae:	f7ff ff4d 	bl	8007f4c <__b2d>
 80080b2:	a901      	add	r1, sp, #4
 80080b4:	4640      	mov	r0, r8
 80080b6:	ec55 4b10 	vmov	r4, r5, d0
 80080ba:	f7ff ff47 	bl	8007f4c <__b2d>
 80080be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080c6:	eba3 0c02 	sub.w	ip, r3, r2
 80080ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80080d4:	ec51 0b10 	vmov	r0, r1, d0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bfd6      	itet	le
 80080dc:	460a      	movle	r2, r1
 80080de:	462a      	movgt	r2, r5
 80080e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080e4:	468b      	mov	fp, r1
 80080e6:	462f      	mov	r7, r5
 80080e8:	bfd4      	ite	le
 80080ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080f2:	4620      	mov	r0, r4
 80080f4:	ee10 2a10 	vmov	r2, s0
 80080f8:	465b      	mov	r3, fp
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fbc6 	bl	800088c <__aeabi_ddiv>
 8008100:	ec41 0b10 	vmov	d0, r0, r1
 8008104:	b003      	add	sp, #12
 8008106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800810a <__copybits>:
 800810a:	3901      	subs	r1, #1
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	1149      	asrs	r1, r1, #5
 8008110:	6914      	ldr	r4, [r2, #16]
 8008112:	3101      	adds	r1, #1
 8008114:	f102 0314 	add.w	r3, r2, #20
 8008118:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800811c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008120:	1f05      	subs	r5, r0, #4
 8008122:	42a3      	cmp	r3, r4
 8008124:	d30c      	bcc.n	8008140 <__copybits+0x36>
 8008126:	1aa3      	subs	r3, r4, r2
 8008128:	3b11      	subs	r3, #17
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	3211      	adds	r2, #17
 8008130:	42a2      	cmp	r2, r4
 8008132:	bf88      	it	hi
 8008134:	2300      	movhi	r3, #0
 8008136:	4418      	add	r0, r3
 8008138:	2300      	movs	r3, #0
 800813a:	4288      	cmp	r0, r1
 800813c:	d305      	bcc.n	800814a <__copybits+0x40>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f853 6b04 	ldr.w	r6, [r3], #4
 8008144:	f845 6f04 	str.w	r6, [r5, #4]!
 8008148:	e7eb      	b.n	8008122 <__copybits+0x18>
 800814a:	f840 3b04 	str.w	r3, [r0], #4
 800814e:	e7f4      	b.n	800813a <__copybits+0x30>

08008150 <__any_on>:
 8008150:	f100 0214 	add.w	r2, r0, #20
 8008154:	6900      	ldr	r0, [r0, #16]
 8008156:	114b      	asrs	r3, r1, #5
 8008158:	4298      	cmp	r0, r3
 800815a:	b510      	push	{r4, lr}
 800815c:	db11      	blt.n	8008182 <__any_on+0x32>
 800815e:	dd0a      	ble.n	8008176 <__any_on+0x26>
 8008160:	f011 011f 	ands.w	r1, r1, #31
 8008164:	d007      	beq.n	8008176 <__any_on+0x26>
 8008166:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800816a:	fa24 f001 	lsr.w	r0, r4, r1
 800816e:	fa00 f101 	lsl.w	r1, r0, r1
 8008172:	428c      	cmp	r4, r1
 8008174:	d10b      	bne.n	800818e <__any_on+0x3e>
 8008176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800817a:	4293      	cmp	r3, r2
 800817c:	d803      	bhi.n	8008186 <__any_on+0x36>
 800817e:	2000      	movs	r0, #0
 8008180:	bd10      	pop	{r4, pc}
 8008182:	4603      	mov	r3, r0
 8008184:	e7f7      	b.n	8008176 <__any_on+0x26>
 8008186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800818a:	2900      	cmp	r1, #0
 800818c:	d0f5      	beq.n	800817a <__any_on+0x2a>
 800818e:	2001      	movs	r0, #1
 8008190:	e7f6      	b.n	8008180 <__any_on+0x30>

08008192 <_calloc_r>:
 8008192:	b513      	push	{r0, r1, r4, lr}
 8008194:	434a      	muls	r2, r1
 8008196:	4611      	mov	r1, r2
 8008198:	9201      	str	r2, [sp, #4]
 800819a:	f000 f859 	bl	8008250 <_malloc_r>
 800819e:	4604      	mov	r4, r0
 80081a0:	b118      	cbz	r0, 80081aa <_calloc_r+0x18>
 80081a2:	9a01      	ldr	r2, [sp, #4]
 80081a4:	2100      	movs	r1, #0
 80081a6:	f7fc f875 	bl	8004294 <memset>
 80081aa:	4620      	mov	r0, r4
 80081ac:	b002      	add	sp, #8
 80081ae:	bd10      	pop	{r4, pc}

080081b0 <_free_r>:
 80081b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b2:	2900      	cmp	r1, #0
 80081b4:	d048      	beq.n	8008248 <_free_r+0x98>
 80081b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f1a1 0404 	sub.w	r4, r1, #4
 80081c2:	bfb8      	it	lt
 80081c4:	18e4      	addlt	r4, r4, r3
 80081c6:	f000 fb15 	bl	80087f4 <__malloc_lock>
 80081ca:	4a20      	ldr	r2, [pc, #128]	; (800824c <_free_r+0x9c>)
 80081cc:	9801      	ldr	r0, [sp, #4]
 80081ce:	6813      	ldr	r3, [r2, #0]
 80081d0:	4615      	mov	r5, r2
 80081d2:	b933      	cbnz	r3, 80081e2 <_free_r+0x32>
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	6014      	str	r4, [r2, #0]
 80081d8:	b003      	add	sp, #12
 80081da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081de:	f000 bb0f 	b.w	8008800 <__malloc_unlock>
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	d90b      	bls.n	80081fe <_free_r+0x4e>
 80081e6:	6821      	ldr	r1, [r4, #0]
 80081e8:	1862      	adds	r2, r4, r1
 80081ea:	4293      	cmp	r3, r2
 80081ec:	bf04      	itt	eq
 80081ee:	681a      	ldreq	r2, [r3, #0]
 80081f0:	685b      	ldreq	r3, [r3, #4]
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	bf04      	itt	eq
 80081f6:	1852      	addeq	r2, r2, r1
 80081f8:	6022      	streq	r2, [r4, #0]
 80081fa:	602c      	str	r4, [r5, #0]
 80081fc:	e7ec      	b.n	80081d8 <_free_r+0x28>
 80081fe:	461a      	mov	r2, r3
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	b10b      	cbz	r3, 8008208 <_free_r+0x58>
 8008204:	42a3      	cmp	r3, r4
 8008206:	d9fa      	bls.n	80081fe <_free_r+0x4e>
 8008208:	6811      	ldr	r1, [r2, #0]
 800820a:	1855      	adds	r5, r2, r1
 800820c:	42a5      	cmp	r5, r4
 800820e:	d10b      	bne.n	8008228 <_free_r+0x78>
 8008210:	6824      	ldr	r4, [r4, #0]
 8008212:	4421      	add	r1, r4
 8008214:	1854      	adds	r4, r2, r1
 8008216:	42a3      	cmp	r3, r4
 8008218:	6011      	str	r1, [r2, #0]
 800821a:	d1dd      	bne.n	80081d8 <_free_r+0x28>
 800821c:	681c      	ldr	r4, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	6053      	str	r3, [r2, #4]
 8008222:	4421      	add	r1, r4
 8008224:	6011      	str	r1, [r2, #0]
 8008226:	e7d7      	b.n	80081d8 <_free_r+0x28>
 8008228:	d902      	bls.n	8008230 <_free_r+0x80>
 800822a:	230c      	movs	r3, #12
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	e7d3      	b.n	80081d8 <_free_r+0x28>
 8008230:	6825      	ldr	r5, [r4, #0]
 8008232:	1961      	adds	r1, r4, r5
 8008234:	428b      	cmp	r3, r1
 8008236:	bf04      	itt	eq
 8008238:	6819      	ldreq	r1, [r3, #0]
 800823a:	685b      	ldreq	r3, [r3, #4]
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	bf04      	itt	eq
 8008240:	1949      	addeq	r1, r1, r5
 8008242:	6021      	streq	r1, [r4, #0]
 8008244:	6054      	str	r4, [r2, #4]
 8008246:	e7c7      	b.n	80081d8 <_free_r+0x28>
 8008248:	b003      	add	sp, #12
 800824a:	bd30      	pop	{r4, r5, pc}
 800824c:	2000020c 	.word	0x2000020c

08008250 <_malloc_r>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	1ccd      	adds	r5, r1, #3
 8008254:	f025 0503 	bic.w	r5, r5, #3
 8008258:	3508      	adds	r5, #8
 800825a:	2d0c      	cmp	r5, #12
 800825c:	bf38      	it	cc
 800825e:	250c      	movcc	r5, #12
 8008260:	2d00      	cmp	r5, #0
 8008262:	4606      	mov	r6, r0
 8008264:	db01      	blt.n	800826a <_malloc_r+0x1a>
 8008266:	42a9      	cmp	r1, r5
 8008268:	d903      	bls.n	8008272 <_malloc_r+0x22>
 800826a:	230c      	movs	r3, #12
 800826c:	6033      	str	r3, [r6, #0]
 800826e:	2000      	movs	r0, #0
 8008270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008272:	f000 fabf 	bl	80087f4 <__malloc_lock>
 8008276:	4921      	ldr	r1, [pc, #132]	; (80082fc <_malloc_r+0xac>)
 8008278:	680a      	ldr	r2, [r1, #0]
 800827a:	4614      	mov	r4, r2
 800827c:	b99c      	cbnz	r4, 80082a6 <_malloc_r+0x56>
 800827e:	4f20      	ldr	r7, [pc, #128]	; (8008300 <_malloc_r+0xb0>)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	b923      	cbnz	r3, 800828e <_malloc_r+0x3e>
 8008284:	4621      	mov	r1, r4
 8008286:	4630      	mov	r0, r6
 8008288:	f000 f9a2 	bl	80085d0 <_sbrk_r>
 800828c:	6038      	str	r0, [r7, #0]
 800828e:	4629      	mov	r1, r5
 8008290:	4630      	mov	r0, r6
 8008292:	f000 f99d 	bl	80085d0 <_sbrk_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d123      	bne.n	80082e2 <_malloc_r+0x92>
 800829a:	230c      	movs	r3, #12
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 faae 	bl	8008800 <__malloc_unlock>
 80082a4:	e7e3      	b.n	800826e <_malloc_r+0x1e>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	1b5b      	subs	r3, r3, r5
 80082aa:	d417      	bmi.n	80082dc <_malloc_r+0x8c>
 80082ac:	2b0b      	cmp	r3, #11
 80082ae:	d903      	bls.n	80082b8 <_malloc_r+0x68>
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	441c      	add	r4, r3
 80082b4:	6025      	str	r5, [r4, #0]
 80082b6:	e004      	b.n	80082c2 <_malloc_r+0x72>
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	42a2      	cmp	r2, r4
 80082bc:	bf0c      	ite	eq
 80082be:	600b      	streq	r3, [r1, #0]
 80082c0:	6053      	strne	r3, [r2, #4]
 80082c2:	4630      	mov	r0, r6
 80082c4:	f000 fa9c 	bl	8008800 <__malloc_unlock>
 80082c8:	f104 000b 	add.w	r0, r4, #11
 80082cc:	1d23      	adds	r3, r4, #4
 80082ce:	f020 0007 	bic.w	r0, r0, #7
 80082d2:	1ac2      	subs	r2, r0, r3
 80082d4:	d0cc      	beq.n	8008270 <_malloc_r+0x20>
 80082d6:	1a1b      	subs	r3, r3, r0
 80082d8:	50a3      	str	r3, [r4, r2]
 80082da:	e7c9      	b.n	8008270 <_malloc_r+0x20>
 80082dc:	4622      	mov	r2, r4
 80082de:	6864      	ldr	r4, [r4, #4]
 80082e0:	e7cc      	b.n	800827c <_malloc_r+0x2c>
 80082e2:	1cc4      	adds	r4, r0, #3
 80082e4:	f024 0403 	bic.w	r4, r4, #3
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d0e3      	beq.n	80082b4 <_malloc_r+0x64>
 80082ec:	1a21      	subs	r1, r4, r0
 80082ee:	4630      	mov	r0, r6
 80082f0:	f000 f96e 	bl	80085d0 <_sbrk_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1dd      	bne.n	80082b4 <_malloc_r+0x64>
 80082f8:	e7cf      	b.n	800829a <_malloc_r+0x4a>
 80082fa:	bf00      	nop
 80082fc:	2000020c 	.word	0x2000020c
 8008300:	20000210 	.word	0x20000210

08008304 <__ssputs_r>:
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	688e      	ldr	r6, [r1, #8]
 800830a:	429e      	cmp	r6, r3
 800830c:	4682      	mov	sl, r0
 800830e:	460c      	mov	r4, r1
 8008310:	4690      	mov	r8, r2
 8008312:	461f      	mov	r7, r3
 8008314:	d838      	bhi.n	8008388 <__ssputs_r+0x84>
 8008316:	898a      	ldrh	r2, [r1, #12]
 8008318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800831c:	d032      	beq.n	8008384 <__ssputs_r+0x80>
 800831e:	6825      	ldr	r5, [r4, #0]
 8008320:	6909      	ldr	r1, [r1, #16]
 8008322:	eba5 0901 	sub.w	r9, r5, r1
 8008326:	6965      	ldr	r5, [r4, #20]
 8008328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800832c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008330:	3301      	adds	r3, #1
 8008332:	444b      	add	r3, r9
 8008334:	106d      	asrs	r5, r5, #1
 8008336:	429d      	cmp	r5, r3
 8008338:	bf38      	it	cc
 800833a:	461d      	movcc	r5, r3
 800833c:	0553      	lsls	r3, r2, #21
 800833e:	d531      	bpl.n	80083a4 <__ssputs_r+0xa0>
 8008340:	4629      	mov	r1, r5
 8008342:	f7ff ff85 	bl	8008250 <_malloc_r>
 8008346:	4606      	mov	r6, r0
 8008348:	b950      	cbnz	r0, 8008360 <__ssputs_r+0x5c>
 800834a:	230c      	movs	r3, #12
 800834c:	f8ca 3000 	str.w	r3, [sl]
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008360:	6921      	ldr	r1, [r4, #16]
 8008362:	464a      	mov	r2, r9
 8008364:	f7ff fa4c 	bl	8007800 <memcpy>
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800836e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	6126      	str	r6, [r4, #16]
 8008376:	6165      	str	r5, [r4, #20]
 8008378:	444e      	add	r6, r9
 800837a:	eba5 0509 	sub.w	r5, r5, r9
 800837e:	6026      	str	r6, [r4, #0]
 8008380:	60a5      	str	r5, [r4, #8]
 8008382:	463e      	mov	r6, r7
 8008384:	42be      	cmp	r6, r7
 8008386:	d900      	bls.n	800838a <__ssputs_r+0x86>
 8008388:	463e      	mov	r6, r7
 800838a:	4632      	mov	r2, r6
 800838c:	6820      	ldr	r0, [r4, #0]
 800838e:	4641      	mov	r1, r8
 8008390:	f000 fa16 	bl	80087c0 <memmove>
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	1b9b      	subs	r3, r3, r6
 800839a:	4432      	add	r2, r6
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	6022      	str	r2, [r4, #0]
 80083a0:	2000      	movs	r0, #0
 80083a2:	e7db      	b.n	800835c <__ssputs_r+0x58>
 80083a4:	462a      	mov	r2, r5
 80083a6:	f000 fa31 	bl	800880c <_realloc_r>
 80083aa:	4606      	mov	r6, r0
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1e1      	bne.n	8008374 <__ssputs_r+0x70>
 80083b0:	6921      	ldr	r1, [r4, #16]
 80083b2:	4650      	mov	r0, sl
 80083b4:	f7ff fefc 	bl	80081b0 <_free_r>
 80083b8:	e7c7      	b.n	800834a <__ssputs_r+0x46>
	...

080083bc <_svfiprintf_r>:
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c0:	4698      	mov	r8, r3
 80083c2:	898b      	ldrh	r3, [r1, #12]
 80083c4:	061b      	lsls	r3, r3, #24
 80083c6:	b09d      	sub	sp, #116	; 0x74
 80083c8:	4607      	mov	r7, r0
 80083ca:	460d      	mov	r5, r1
 80083cc:	4614      	mov	r4, r2
 80083ce:	d50e      	bpl.n	80083ee <_svfiprintf_r+0x32>
 80083d0:	690b      	ldr	r3, [r1, #16]
 80083d2:	b963      	cbnz	r3, 80083ee <_svfiprintf_r+0x32>
 80083d4:	2140      	movs	r1, #64	; 0x40
 80083d6:	f7ff ff3b 	bl	8008250 <_malloc_r>
 80083da:	6028      	str	r0, [r5, #0]
 80083dc:	6128      	str	r0, [r5, #16]
 80083de:	b920      	cbnz	r0, 80083ea <_svfiprintf_r+0x2e>
 80083e0:	230c      	movs	r3, #12
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295
 80083e8:	e0d1      	b.n	800858e <_svfiprintf_r+0x1d2>
 80083ea:	2340      	movs	r3, #64	; 0x40
 80083ec:	616b      	str	r3, [r5, #20]
 80083ee:	2300      	movs	r3, #0
 80083f0:	9309      	str	r3, [sp, #36]	; 0x24
 80083f2:	2320      	movs	r3, #32
 80083f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fc:	2330      	movs	r3, #48	; 0x30
 80083fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085a8 <_svfiprintf_r+0x1ec>
 8008402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008406:	f04f 0901 	mov.w	r9, #1
 800840a:	4623      	mov	r3, r4
 800840c:	469a      	mov	sl, r3
 800840e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008412:	b10a      	cbz	r2, 8008418 <_svfiprintf_r+0x5c>
 8008414:	2a25      	cmp	r2, #37	; 0x25
 8008416:	d1f9      	bne.n	800840c <_svfiprintf_r+0x50>
 8008418:	ebba 0b04 	subs.w	fp, sl, r4
 800841c:	d00b      	beq.n	8008436 <_svfiprintf_r+0x7a>
 800841e:	465b      	mov	r3, fp
 8008420:	4622      	mov	r2, r4
 8008422:	4629      	mov	r1, r5
 8008424:	4638      	mov	r0, r7
 8008426:	f7ff ff6d 	bl	8008304 <__ssputs_r>
 800842a:	3001      	adds	r0, #1
 800842c:	f000 80aa 	beq.w	8008584 <_svfiprintf_r+0x1c8>
 8008430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008432:	445a      	add	r2, fp
 8008434:	9209      	str	r2, [sp, #36]	; 0x24
 8008436:	f89a 3000 	ldrb.w	r3, [sl]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80a2 	beq.w	8008584 <_svfiprintf_r+0x1c8>
 8008440:	2300      	movs	r3, #0
 8008442:	f04f 32ff 	mov.w	r2, #4294967295
 8008446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800844a:	f10a 0a01 	add.w	sl, sl, #1
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008456:	931a      	str	r3, [sp, #104]	; 0x68
 8008458:	4654      	mov	r4, sl
 800845a:	2205      	movs	r2, #5
 800845c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008460:	4851      	ldr	r0, [pc, #324]	; (80085a8 <_svfiprintf_r+0x1ec>)
 8008462:	f7f7 fedd 	bl	8000220 <memchr>
 8008466:	9a04      	ldr	r2, [sp, #16]
 8008468:	b9d8      	cbnz	r0, 80084a2 <_svfiprintf_r+0xe6>
 800846a:	06d0      	lsls	r0, r2, #27
 800846c:	bf44      	itt	mi
 800846e:	2320      	movmi	r3, #32
 8008470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008474:	0711      	lsls	r1, r2, #28
 8008476:	bf44      	itt	mi
 8008478:	232b      	movmi	r3, #43	; 0x2b
 800847a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800847e:	f89a 3000 	ldrb.w	r3, [sl]
 8008482:	2b2a      	cmp	r3, #42	; 0x2a
 8008484:	d015      	beq.n	80084b2 <_svfiprintf_r+0xf6>
 8008486:	9a07      	ldr	r2, [sp, #28]
 8008488:	4654      	mov	r4, sl
 800848a:	2000      	movs	r0, #0
 800848c:	f04f 0c0a 	mov.w	ip, #10
 8008490:	4621      	mov	r1, r4
 8008492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008496:	3b30      	subs	r3, #48	; 0x30
 8008498:	2b09      	cmp	r3, #9
 800849a:	d94e      	bls.n	800853a <_svfiprintf_r+0x17e>
 800849c:	b1b0      	cbz	r0, 80084cc <_svfiprintf_r+0x110>
 800849e:	9207      	str	r2, [sp, #28]
 80084a0:	e014      	b.n	80084cc <_svfiprintf_r+0x110>
 80084a2:	eba0 0308 	sub.w	r3, r0, r8
 80084a6:	fa09 f303 	lsl.w	r3, r9, r3
 80084aa:	4313      	orrs	r3, r2
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	46a2      	mov	sl, r4
 80084b0:	e7d2      	b.n	8008458 <_svfiprintf_r+0x9c>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	1d19      	adds	r1, r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	9103      	str	r1, [sp, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bfbb      	ittet	lt
 80084be:	425b      	neglt	r3, r3
 80084c0:	f042 0202 	orrlt.w	r2, r2, #2
 80084c4:	9307      	strge	r3, [sp, #28]
 80084c6:	9307      	strlt	r3, [sp, #28]
 80084c8:	bfb8      	it	lt
 80084ca:	9204      	strlt	r2, [sp, #16]
 80084cc:	7823      	ldrb	r3, [r4, #0]
 80084ce:	2b2e      	cmp	r3, #46	; 0x2e
 80084d0:	d10c      	bne.n	80084ec <_svfiprintf_r+0x130>
 80084d2:	7863      	ldrb	r3, [r4, #1]
 80084d4:	2b2a      	cmp	r3, #42	; 0x2a
 80084d6:	d135      	bne.n	8008544 <_svfiprintf_r+0x188>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	1d1a      	adds	r2, r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	9203      	str	r2, [sp, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bfb8      	it	lt
 80084e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084e8:	3402      	adds	r4, #2
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085b8 <_svfiprintf_r+0x1fc>
 80084f0:	7821      	ldrb	r1, [r4, #0]
 80084f2:	2203      	movs	r2, #3
 80084f4:	4650      	mov	r0, sl
 80084f6:	f7f7 fe93 	bl	8000220 <memchr>
 80084fa:	b140      	cbz	r0, 800850e <_svfiprintf_r+0x152>
 80084fc:	2340      	movs	r3, #64	; 0x40
 80084fe:	eba0 000a 	sub.w	r0, r0, sl
 8008502:	fa03 f000 	lsl.w	r0, r3, r0
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	4303      	orrs	r3, r0
 800850a:	3401      	adds	r4, #1
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008512:	4826      	ldr	r0, [pc, #152]	; (80085ac <_svfiprintf_r+0x1f0>)
 8008514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008518:	2206      	movs	r2, #6
 800851a:	f7f7 fe81 	bl	8000220 <memchr>
 800851e:	2800      	cmp	r0, #0
 8008520:	d038      	beq.n	8008594 <_svfiprintf_r+0x1d8>
 8008522:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <_svfiprintf_r+0x1f4>)
 8008524:	bb1b      	cbnz	r3, 800856e <_svfiprintf_r+0x1b2>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	3307      	adds	r3, #7
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	3308      	adds	r3, #8
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008534:	4433      	add	r3, r6
 8008536:	9309      	str	r3, [sp, #36]	; 0x24
 8008538:	e767      	b.n	800840a <_svfiprintf_r+0x4e>
 800853a:	fb0c 3202 	mla	r2, ip, r2, r3
 800853e:	460c      	mov	r4, r1
 8008540:	2001      	movs	r0, #1
 8008542:	e7a5      	b.n	8008490 <_svfiprintf_r+0xd4>
 8008544:	2300      	movs	r3, #0
 8008546:	3401      	adds	r4, #1
 8008548:	9305      	str	r3, [sp, #20]
 800854a:	4619      	mov	r1, r3
 800854c:	f04f 0c0a 	mov.w	ip, #10
 8008550:	4620      	mov	r0, r4
 8008552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008556:	3a30      	subs	r2, #48	; 0x30
 8008558:	2a09      	cmp	r2, #9
 800855a:	d903      	bls.n	8008564 <_svfiprintf_r+0x1a8>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0c5      	beq.n	80084ec <_svfiprintf_r+0x130>
 8008560:	9105      	str	r1, [sp, #20]
 8008562:	e7c3      	b.n	80084ec <_svfiprintf_r+0x130>
 8008564:	fb0c 2101 	mla	r1, ip, r1, r2
 8008568:	4604      	mov	r4, r0
 800856a:	2301      	movs	r3, #1
 800856c:	e7f0      	b.n	8008550 <_svfiprintf_r+0x194>
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <_svfiprintf_r+0x1f8>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	4638      	mov	r0, r7
 800857a:	f7fb ff33 	bl	80043e4 <_printf_float>
 800857e:	1c42      	adds	r2, r0, #1
 8008580:	4606      	mov	r6, r0
 8008582:	d1d6      	bne.n	8008532 <_svfiprintf_r+0x176>
 8008584:	89ab      	ldrh	r3, [r5, #12]
 8008586:	065b      	lsls	r3, r3, #25
 8008588:	f53f af2c 	bmi.w	80083e4 <_svfiprintf_r+0x28>
 800858c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800858e:	b01d      	add	sp, #116	; 0x74
 8008590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	462a      	mov	r2, r5
 800859a:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <_svfiprintf_r+0x1f8>)
 800859c:	a904      	add	r1, sp, #16
 800859e:	4638      	mov	r0, r7
 80085a0:	f7fc f9c4 	bl	800492c <_printf_i>
 80085a4:	e7eb      	b.n	800857e <_svfiprintf_r+0x1c2>
 80085a6:	bf00      	nop
 80085a8:	08009424 	.word	0x08009424
 80085ac:	0800942e 	.word	0x0800942e
 80085b0:	080043e5 	.word	0x080043e5
 80085b4:	08008305 	.word	0x08008305
 80085b8:	0800942a 	.word	0x0800942a
 80085bc:	00000000 	.word	0x00000000

080085c0 <nan>:
 80085c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80085c8 <nan+0x8>
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	00000000 	.word	0x00000000
 80085cc:	7ff80000 	.word	0x7ff80000

080085d0 <_sbrk_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_sbrk_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 fba4 	bl	8001d28 <_sbrk>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_sbrk_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_sbrk_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000958 	.word	0x20000958

080085f0 <__sread>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f8:	f000 fa88 	bl	8008b0c <_read_r>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	bfab      	itete	ge
 8008600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008602:	89a3      	ldrhlt	r3, [r4, #12]
 8008604:	181b      	addge	r3, r3, r0
 8008606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800860a:	bfac      	ite	ge
 800860c:	6563      	strge	r3, [r4, #84]	; 0x54
 800860e:	81a3      	strhlt	r3, [r4, #12]
 8008610:	bd10      	pop	{r4, pc}

08008612 <__swrite>:
 8008612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008616:	461f      	mov	r7, r3
 8008618:	898b      	ldrh	r3, [r1, #12]
 800861a:	05db      	lsls	r3, r3, #23
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	4616      	mov	r6, r2
 8008622:	d505      	bpl.n	8008630 <__swrite+0x1e>
 8008624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008628:	2302      	movs	r3, #2
 800862a:	2200      	movs	r2, #0
 800862c:	f000 f8b6 	bl	800879c <_lseek_r>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	4632      	mov	r2, r6
 800863e:	463b      	mov	r3, r7
 8008640:	4628      	mov	r0, r5
 8008642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	f000 b835 	b.w	80086b4 <_write_r>

0800864a <__sseek>:
 800864a:	b510      	push	{r4, lr}
 800864c:	460c      	mov	r4, r1
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 f8a3 	bl	800879c <_lseek_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	bf15      	itete	ne
 800865c:	6560      	strne	r0, [r4, #84]	; 0x54
 800865e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008666:	81a3      	strheq	r3, [r4, #12]
 8008668:	bf18      	it	ne
 800866a:	81a3      	strhne	r3, [r4, #12]
 800866c:	bd10      	pop	{r4, pc}

0800866e <__sclose>:
 800866e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008672:	f000 b84f 	b.w	8008714 <_close_r>

08008676 <strncmp>:
 8008676:	b510      	push	{r4, lr}
 8008678:	b16a      	cbz	r2, 8008696 <strncmp+0x20>
 800867a:	3901      	subs	r1, #1
 800867c:	1884      	adds	r4, r0, r2
 800867e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008682:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008686:	4293      	cmp	r3, r2
 8008688:	d103      	bne.n	8008692 <strncmp+0x1c>
 800868a:	42a0      	cmp	r0, r4
 800868c:	d001      	beq.n	8008692 <strncmp+0x1c>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f5      	bne.n	800867e <strncmp+0x8>
 8008692:	1a98      	subs	r0, r3, r2
 8008694:	bd10      	pop	{r4, pc}
 8008696:	4610      	mov	r0, r2
 8008698:	e7fc      	b.n	8008694 <strncmp+0x1e>

0800869a <__ascii_wctomb>:
 800869a:	b149      	cbz	r1, 80086b0 <__ascii_wctomb+0x16>
 800869c:	2aff      	cmp	r2, #255	; 0xff
 800869e:	bf85      	ittet	hi
 80086a0:	238a      	movhi	r3, #138	; 0x8a
 80086a2:	6003      	strhi	r3, [r0, #0]
 80086a4:	700a      	strbls	r2, [r1, #0]
 80086a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80086aa:	bf98      	it	ls
 80086ac:	2001      	movls	r0, #1
 80086ae:	4770      	bx	lr
 80086b0:	4608      	mov	r0, r1
 80086b2:	4770      	bx	lr

080086b4 <_write_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d07      	ldr	r5, [pc, #28]	; (80086d4 <_write_r+0x20>)
 80086b8:	4604      	mov	r4, r0
 80086ba:	4608      	mov	r0, r1
 80086bc:	4611      	mov	r1, r2
 80086be:	2200      	movs	r2, #0
 80086c0:	602a      	str	r2, [r5, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	f7f9 fb16 	bl	8001cf4 <_write>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_write_r+0x1e>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_write_r+0x1e>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	20000958 	.word	0x20000958

080086d8 <__assert_func>:
 80086d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086da:	4614      	mov	r4, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <__assert_func+0x2c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4605      	mov	r5, r0
 80086e4:	68d8      	ldr	r0, [r3, #12]
 80086e6:	b14c      	cbz	r4, 80086fc <__assert_func+0x24>
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <__assert_func+0x30>)
 80086ea:	9100      	str	r1, [sp, #0]
 80086ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086f0:	4906      	ldr	r1, [pc, #24]	; (800870c <__assert_func+0x34>)
 80086f2:	462b      	mov	r3, r5
 80086f4:	f000 f81e 	bl	8008734 <fiprintf>
 80086f8:	f000 fa1a 	bl	8008b30 <abort>
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <__assert_func+0x38>)
 80086fe:	461c      	mov	r4, r3
 8008700:	e7f3      	b.n	80086ea <__assert_func+0x12>
 8008702:	bf00      	nop
 8008704:	2000000c 	.word	0x2000000c
 8008708:	08009435 	.word	0x08009435
 800870c:	08009442 	.word	0x08009442
 8008710:	08009470 	.word	0x08009470

08008714 <_close_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d06      	ldr	r5, [pc, #24]	; (8008730 <_close_r+0x1c>)
 8008718:	2300      	movs	r3, #0
 800871a:	4604      	mov	r4, r0
 800871c:	4608      	mov	r0, r1
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	f7f9 faf6 	bl	8001d10 <_close>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_close_r+0x1a>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_close_r+0x1a>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20000958 	.word	0x20000958

08008734 <fiprintf>:
 8008734:	b40e      	push	{r1, r2, r3}
 8008736:	b503      	push	{r0, r1, lr}
 8008738:	4601      	mov	r1, r0
 800873a:	ab03      	add	r3, sp, #12
 800873c:	4805      	ldr	r0, [pc, #20]	; (8008754 <fiprintf+0x20>)
 800873e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008742:	6800      	ldr	r0, [r0, #0]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	f000 f8b1 	bl	80088ac <_vfiprintf_r>
 800874a:	b002      	add	sp, #8
 800874c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008750:	b003      	add	sp, #12
 8008752:	4770      	bx	lr
 8008754:	2000000c 	.word	0x2000000c

08008758 <_fstat_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_fstat_r+0x20>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	f7f9 fad6 	bl	8001d16 <_fstat>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d102      	bne.n	8008774 <_fstat_r+0x1c>
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	b103      	cbz	r3, 8008774 <_fstat_r+0x1c>
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	20000958 	.word	0x20000958

0800877c <_isatty_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_isatty_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f9 faca 	bl	8001d20 <_isatty>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_isatty_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_isatty_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000958 	.word	0x20000958

0800879c <_lseek_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	; (80087bc <_lseek_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7f9 faba 	bl	8001d24 <_lseek>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_lseek_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_lseek_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000958 	.word	0x20000958

080087c0 <memmove>:
 80087c0:	4288      	cmp	r0, r1
 80087c2:	b510      	push	{r4, lr}
 80087c4:	eb01 0402 	add.w	r4, r1, r2
 80087c8:	d902      	bls.n	80087d0 <memmove+0x10>
 80087ca:	4284      	cmp	r4, r0
 80087cc:	4623      	mov	r3, r4
 80087ce:	d807      	bhi.n	80087e0 <memmove+0x20>
 80087d0:	1e43      	subs	r3, r0, #1
 80087d2:	42a1      	cmp	r1, r4
 80087d4:	d008      	beq.n	80087e8 <memmove+0x28>
 80087d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087de:	e7f8      	b.n	80087d2 <memmove+0x12>
 80087e0:	4402      	add	r2, r0
 80087e2:	4601      	mov	r1, r0
 80087e4:	428a      	cmp	r2, r1
 80087e6:	d100      	bne.n	80087ea <memmove+0x2a>
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087f2:	e7f7      	b.n	80087e4 <memmove+0x24>

080087f4 <__malloc_lock>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__malloc_lock+0x8>)
 80087f6:	f7fe bf82 	b.w	80076fe <__retarget_lock_acquire_recursive>
 80087fa:	bf00      	nop
 80087fc:	20000950 	.word	0x20000950

08008800 <__malloc_unlock>:
 8008800:	4801      	ldr	r0, [pc, #4]	; (8008808 <__malloc_unlock+0x8>)
 8008802:	f7fe bf7d 	b.w	8007700 <__retarget_lock_release_recursive>
 8008806:	bf00      	nop
 8008808:	20000950 	.word	0x20000950

0800880c <_realloc_r>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	4607      	mov	r7, r0
 8008810:	4614      	mov	r4, r2
 8008812:	460e      	mov	r6, r1
 8008814:	b921      	cbnz	r1, 8008820 <_realloc_r+0x14>
 8008816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800881a:	4611      	mov	r1, r2
 800881c:	f7ff bd18 	b.w	8008250 <_malloc_r>
 8008820:	b922      	cbnz	r2, 800882c <_realloc_r+0x20>
 8008822:	f7ff fcc5 	bl	80081b0 <_free_r>
 8008826:	4625      	mov	r5, r4
 8008828:	4628      	mov	r0, r5
 800882a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882c:	f000 f987 	bl	8008b3e <_malloc_usable_size_r>
 8008830:	42a0      	cmp	r0, r4
 8008832:	d20f      	bcs.n	8008854 <_realloc_r+0x48>
 8008834:	4621      	mov	r1, r4
 8008836:	4638      	mov	r0, r7
 8008838:	f7ff fd0a 	bl	8008250 <_malloc_r>
 800883c:	4605      	mov	r5, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	d0f2      	beq.n	8008828 <_realloc_r+0x1c>
 8008842:	4631      	mov	r1, r6
 8008844:	4622      	mov	r2, r4
 8008846:	f7fe ffdb 	bl	8007800 <memcpy>
 800884a:	4631      	mov	r1, r6
 800884c:	4638      	mov	r0, r7
 800884e:	f7ff fcaf 	bl	80081b0 <_free_r>
 8008852:	e7e9      	b.n	8008828 <_realloc_r+0x1c>
 8008854:	4635      	mov	r5, r6
 8008856:	e7e7      	b.n	8008828 <_realloc_r+0x1c>

08008858 <__sfputc_r>:
 8008858:	6893      	ldr	r3, [r2, #8]
 800885a:	3b01      	subs	r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	b410      	push	{r4}
 8008860:	6093      	str	r3, [r2, #8]
 8008862:	da08      	bge.n	8008876 <__sfputc_r+0x1e>
 8008864:	6994      	ldr	r4, [r2, #24]
 8008866:	42a3      	cmp	r3, r4
 8008868:	db01      	blt.n	800886e <__sfputc_r+0x16>
 800886a:	290a      	cmp	r1, #10
 800886c:	d103      	bne.n	8008876 <__sfputc_r+0x1e>
 800886e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008872:	f7fd badf 	b.w	8005e34 <__swbuf_r>
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	1c58      	adds	r0, r3, #1
 800887a:	6010      	str	r0, [r2, #0]
 800887c:	7019      	strb	r1, [r3, #0]
 800887e:	4608      	mov	r0, r1
 8008880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008884:	4770      	bx	lr

08008886 <__sfputs_r>:
 8008886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008888:	4606      	mov	r6, r0
 800888a:	460f      	mov	r7, r1
 800888c:	4614      	mov	r4, r2
 800888e:	18d5      	adds	r5, r2, r3
 8008890:	42ac      	cmp	r4, r5
 8008892:	d101      	bne.n	8008898 <__sfputs_r+0x12>
 8008894:	2000      	movs	r0, #0
 8008896:	e007      	b.n	80088a8 <__sfputs_r+0x22>
 8008898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889c:	463a      	mov	r2, r7
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ffda 	bl	8008858 <__sfputc_r>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d1f3      	bne.n	8008890 <__sfputs_r+0xa>
 80088a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088ac <_vfiprintf_r>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	460d      	mov	r5, r1
 80088b2:	b09d      	sub	sp, #116	; 0x74
 80088b4:	4614      	mov	r4, r2
 80088b6:	4698      	mov	r8, r3
 80088b8:	4606      	mov	r6, r0
 80088ba:	b118      	cbz	r0, 80088c4 <_vfiprintf_r+0x18>
 80088bc:	6983      	ldr	r3, [r0, #24]
 80088be:	b90b      	cbnz	r3, 80088c4 <_vfiprintf_r+0x18>
 80088c0:	f7fe fb0c 	bl	8006edc <__sinit>
 80088c4:	4b89      	ldr	r3, [pc, #548]	; (8008aec <_vfiprintf_r+0x240>)
 80088c6:	429d      	cmp	r5, r3
 80088c8:	d11b      	bne.n	8008902 <_vfiprintf_r+0x56>
 80088ca:	6875      	ldr	r5, [r6, #4]
 80088cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ce:	07d9      	lsls	r1, r3, #31
 80088d0:	d405      	bmi.n	80088de <_vfiprintf_r+0x32>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	059a      	lsls	r2, r3, #22
 80088d6:	d402      	bmi.n	80088de <_vfiprintf_r+0x32>
 80088d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088da:	f7fe ff10 	bl	80076fe <__retarget_lock_acquire_recursive>
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	071b      	lsls	r3, r3, #28
 80088e2:	d501      	bpl.n	80088e8 <_vfiprintf_r+0x3c>
 80088e4:	692b      	ldr	r3, [r5, #16]
 80088e6:	b9eb      	cbnz	r3, 8008924 <_vfiprintf_r+0x78>
 80088e8:	4629      	mov	r1, r5
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7fd faf4 	bl	8005ed8 <__swsetup_r>
 80088f0:	b1c0      	cbz	r0, 8008924 <_vfiprintf_r+0x78>
 80088f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088f4:	07dc      	lsls	r4, r3, #31
 80088f6:	d50e      	bpl.n	8008916 <_vfiprintf_r+0x6a>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	b01d      	add	sp, #116	; 0x74
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	4b7b      	ldr	r3, [pc, #492]	; (8008af0 <_vfiprintf_r+0x244>)
 8008904:	429d      	cmp	r5, r3
 8008906:	d101      	bne.n	800890c <_vfiprintf_r+0x60>
 8008908:	68b5      	ldr	r5, [r6, #8]
 800890a:	e7df      	b.n	80088cc <_vfiprintf_r+0x20>
 800890c:	4b79      	ldr	r3, [pc, #484]	; (8008af4 <_vfiprintf_r+0x248>)
 800890e:	429d      	cmp	r5, r3
 8008910:	bf08      	it	eq
 8008912:	68f5      	ldreq	r5, [r6, #12]
 8008914:	e7da      	b.n	80088cc <_vfiprintf_r+0x20>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	0598      	lsls	r0, r3, #22
 800891a:	d4ed      	bmi.n	80088f8 <_vfiprintf_r+0x4c>
 800891c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891e:	f7fe feef 	bl	8007700 <__retarget_lock_release_recursive>
 8008922:	e7e9      	b.n	80088f8 <_vfiprintf_r+0x4c>
 8008924:	2300      	movs	r3, #0
 8008926:	9309      	str	r3, [sp, #36]	; 0x24
 8008928:	2320      	movs	r3, #32
 800892a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800892e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008932:	2330      	movs	r3, #48	; 0x30
 8008934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008af8 <_vfiprintf_r+0x24c>
 8008938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800893c:	f04f 0901 	mov.w	r9, #1
 8008940:	4623      	mov	r3, r4
 8008942:	469a      	mov	sl, r3
 8008944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008948:	b10a      	cbz	r2, 800894e <_vfiprintf_r+0xa2>
 800894a:	2a25      	cmp	r2, #37	; 0x25
 800894c:	d1f9      	bne.n	8008942 <_vfiprintf_r+0x96>
 800894e:	ebba 0b04 	subs.w	fp, sl, r4
 8008952:	d00b      	beq.n	800896c <_vfiprintf_r+0xc0>
 8008954:	465b      	mov	r3, fp
 8008956:	4622      	mov	r2, r4
 8008958:	4629      	mov	r1, r5
 800895a:	4630      	mov	r0, r6
 800895c:	f7ff ff93 	bl	8008886 <__sfputs_r>
 8008960:	3001      	adds	r0, #1
 8008962:	f000 80aa 	beq.w	8008aba <_vfiprintf_r+0x20e>
 8008966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008968:	445a      	add	r2, fp
 800896a:	9209      	str	r2, [sp, #36]	; 0x24
 800896c:	f89a 3000 	ldrb.w	r3, [sl]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80a2 	beq.w	8008aba <_vfiprintf_r+0x20e>
 8008976:	2300      	movs	r3, #0
 8008978:	f04f 32ff 	mov.w	r2, #4294967295
 800897c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008980:	f10a 0a01 	add.w	sl, sl, #1
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	9307      	str	r3, [sp, #28]
 8008988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800898c:	931a      	str	r3, [sp, #104]	; 0x68
 800898e:	4654      	mov	r4, sl
 8008990:	2205      	movs	r2, #5
 8008992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008996:	4858      	ldr	r0, [pc, #352]	; (8008af8 <_vfiprintf_r+0x24c>)
 8008998:	f7f7 fc42 	bl	8000220 <memchr>
 800899c:	9a04      	ldr	r2, [sp, #16]
 800899e:	b9d8      	cbnz	r0, 80089d8 <_vfiprintf_r+0x12c>
 80089a0:	06d1      	lsls	r1, r2, #27
 80089a2:	bf44      	itt	mi
 80089a4:	2320      	movmi	r3, #32
 80089a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089aa:	0713      	lsls	r3, r2, #28
 80089ac:	bf44      	itt	mi
 80089ae:	232b      	movmi	r3, #43	; 0x2b
 80089b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b4:	f89a 3000 	ldrb.w	r3, [sl]
 80089b8:	2b2a      	cmp	r3, #42	; 0x2a
 80089ba:	d015      	beq.n	80089e8 <_vfiprintf_r+0x13c>
 80089bc:	9a07      	ldr	r2, [sp, #28]
 80089be:	4654      	mov	r4, sl
 80089c0:	2000      	movs	r0, #0
 80089c2:	f04f 0c0a 	mov.w	ip, #10
 80089c6:	4621      	mov	r1, r4
 80089c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089cc:	3b30      	subs	r3, #48	; 0x30
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d94e      	bls.n	8008a70 <_vfiprintf_r+0x1c4>
 80089d2:	b1b0      	cbz	r0, 8008a02 <_vfiprintf_r+0x156>
 80089d4:	9207      	str	r2, [sp, #28]
 80089d6:	e014      	b.n	8008a02 <_vfiprintf_r+0x156>
 80089d8:	eba0 0308 	sub.w	r3, r0, r8
 80089dc:	fa09 f303 	lsl.w	r3, r9, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	46a2      	mov	sl, r4
 80089e6:	e7d2      	b.n	800898e <_vfiprintf_r+0xe2>
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	1d19      	adds	r1, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	9103      	str	r1, [sp, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bfbb      	ittet	lt
 80089f4:	425b      	neglt	r3, r3
 80089f6:	f042 0202 	orrlt.w	r2, r2, #2
 80089fa:	9307      	strge	r3, [sp, #28]
 80089fc:	9307      	strlt	r3, [sp, #28]
 80089fe:	bfb8      	it	lt
 8008a00:	9204      	strlt	r2, [sp, #16]
 8008a02:	7823      	ldrb	r3, [r4, #0]
 8008a04:	2b2e      	cmp	r3, #46	; 0x2e
 8008a06:	d10c      	bne.n	8008a22 <_vfiprintf_r+0x176>
 8008a08:	7863      	ldrb	r3, [r4, #1]
 8008a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0c:	d135      	bne.n	8008a7a <_vfiprintf_r+0x1ce>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	1d1a      	adds	r2, r3, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	9203      	str	r2, [sp, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfb8      	it	lt
 8008a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a1e:	3402      	adds	r4, #2
 8008a20:	9305      	str	r3, [sp, #20]
 8008a22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b08 <_vfiprintf_r+0x25c>
 8008a26:	7821      	ldrb	r1, [r4, #0]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	f7f7 fbf8 	bl	8000220 <memchr>
 8008a30:	b140      	cbz	r0, 8008a44 <_vfiprintf_r+0x198>
 8008a32:	2340      	movs	r3, #64	; 0x40
 8008a34:	eba0 000a 	sub.w	r0, r0, sl
 8008a38:	fa03 f000 	lsl.w	r0, r3, r0
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	4303      	orrs	r3, r0
 8008a40:	3401      	adds	r4, #1
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a48:	482c      	ldr	r0, [pc, #176]	; (8008afc <_vfiprintf_r+0x250>)
 8008a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a4e:	2206      	movs	r2, #6
 8008a50:	f7f7 fbe6 	bl	8000220 <memchr>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d03f      	beq.n	8008ad8 <_vfiprintf_r+0x22c>
 8008a58:	4b29      	ldr	r3, [pc, #164]	; (8008b00 <_vfiprintf_r+0x254>)
 8008a5a:	bb1b      	cbnz	r3, 8008aa4 <_vfiprintf_r+0x1f8>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	3307      	adds	r3, #7
 8008a60:	f023 0307 	bic.w	r3, r3, #7
 8008a64:	3308      	adds	r3, #8
 8008a66:	9303      	str	r3, [sp, #12]
 8008a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6a:	443b      	add	r3, r7
 8008a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6e:	e767      	b.n	8008940 <_vfiprintf_r+0x94>
 8008a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a74:	460c      	mov	r4, r1
 8008a76:	2001      	movs	r0, #1
 8008a78:	e7a5      	b.n	80089c6 <_vfiprintf_r+0x11a>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	3401      	adds	r4, #1
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	4619      	mov	r1, r3
 8008a82:	f04f 0c0a 	mov.w	ip, #10
 8008a86:	4620      	mov	r0, r4
 8008a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a8c:	3a30      	subs	r2, #48	; 0x30
 8008a8e:	2a09      	cmp	r2, #9
 8008a90:	d903      	bls.n	8008a9a <_vfiprintf_r+0x1ee>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0c5      	beq.n	8008a22 <_vfiprintf_r+0x176>
 8008a96:	9105      	str	r1, [sp, #20]
 8008a98:	e7c3      	b.n	8008a22 <_vfiprintf_r+0x176>
 8008a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e7f0      	b.n	8008a86 <_vfiprintf_r+0x1da>
 8008aa4:	ab03      	add	r3, sp, #12
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	4b16      	ldr	r3, [pc, #88]	; (8008b04 <_vfiprintf_r+0x258>)
 8008aac:	a904      	add	r1, sp, #16
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7fb fc98 	bl	80043e4 <_printf_float>
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	1c78      	adds	r0, r7, #1
 8008ab8:	d1d6      	bne.n	8008a68 <_vfiprintf_r+0x1bc>
 8008aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008abc:	07d9      	lsls	r1, r3, #31
 8008abe:	d405      	bmi.n	8008acc <_vfiprintf_r+0x220>
 8008ac0:	89ab      	ldrh	r3, [r5, #12]
 8008ac2:	059a      	lsls	r2, r3, #22
 8008ac4:	d402      	bmi.n	8008acc <_vfiprintf_r+0x220>
 8008ac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac8:	f7fe fe1a 	bl	8007700 <__retarget_lock_release_recursive>
 8008acc:	89ab      	ldrh	r3, [r5, #12]
 8008ace:	065b      	lsls	r3, r3, #25
 8008ad0:	f53f af12 	bmi.w	80088f8 <_vfiprintf_r+0x4c>
 8008ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ad6:	e711      	b.n	80088fc <_vfiprintf_r+0x50>
 8008ad8:	ab03      	add	r3, sp, #12
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	462a      	mov	r2, r5
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <_vfiprintf_r+0x258>)
 8008ae0:	a904      	add	r1, sp, #16
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7fb ff22 	bl	800492c <_printf_i>
 8008ae8:	e7e4      	b.n	8008ab4 <_vfiprintf_r+0x208>
 8008aea:	bf00      	nop
 8008aec:	08009208 	.word	0x08009208
 8008af0:	08009228 	.word	0x08009228
 8008af4:	080091e8 	.word	0x080091e8
 8008af8:	08009424 	.word	0x08009424
 8008afc:	0800942e 	.word	0x0800942e
 8008b00:	080043e5 	.word	0x080043e5
 8008b04:	08008887 	.word	0x08008887
 8008b08:	0800942a 	.word	0x0800942a

08008b0c <_read_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	; (8008b2c <_read_r+0x20>)
 8008b10:	4604      	mov	r4, r0
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	2200      	movs	r2, #0
 8008b18:	602a      	str	r2, [r5, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f7f9 f8da 	bl	8001cd4 <_read>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_read_r+0x1e>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_read_r+0x1e>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20000958 	.word	0x20000958

08008b30 <abort>:
 8008b30:	b508      	push	{r3, lr}
 8008b32:	2006      	movs	r0, #6
 8008b34:	f000 f834 	bl	8008ba0 <raise>
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f7f9 f8c5 	bl	8001cc8 <_exit>

08008b3e <_malloc_usable_size_r>:
 8008b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b42:	1f18      	subs	r0, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bfbc      	itt	lt
 8008b48:	580b      	ldrlt	r3, [r1, r0]
 8008b4a:	18c0      	addlt	r0, r0, r3
 8008b4c:	4770      	bx	lr

08008b4e <_raise_r>:
 8008b4e:	291f      	cmp	r1, #31
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	d904      	bls.n	8008b62 <_raise_r+0x14>
 8008b58:	2316      	movs	r3, #22
 8008b5a:	6003      	str	r3, [r0, #0]
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b64:	b112      	cbz	r2, 8008b6c <_raise_r+0x1e>
 8008b66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b6a:	b94b      	cbnz	r3, 8008b80 <_raise_r+0x32>
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 f831 	bl	8008bd4 <_getpid_r>
 8008b72:	462a      	mov	r2, r5
 8008b74:	4601      	mov	r1, r0
 8008b76:	4620      	mov	r0, r4
 8008b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7c:	f000 b818 	b.w	8008bb0 <_kill_r>
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d00a      	beq.n	8008b9a <_raise_r+0x4c>
 8008b84:	1c59      	adds	r1, r3, #1
 8008b86:	d103      	bne.n	8008b90 <_raise_r+0x42>
 8008b88:	2316      	movs	r3, #22
 8008b8a:	6003      	str	r3, [r0, #0]
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	e7e7      	b.n	8008b60 <_raise_r+0x12>
 8008b90:	2400      	movs	r4, #0
 8008b92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b96:	4628      	mov	r0, r5
 8008b98:	4798      	blx	r3
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7e0      	b.n	8008b60 <_raise_r+0x12>
	...

08008ba0 <raise>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <raise+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f7ff bfd2 	b.w	8008b4e <_raise_r>
 8008baa:	bf00      	nop
 8008bac:	2000000c 	.word	0x2000000c

08008bb0 <_kill_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_kill_r+0x20>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7f9 f87b 	bl	8001cb8 <_kill>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_kill_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_kill_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000958 	.word	0x20000958

08008bd4 <_getpid_r>:
 8008bd4:	f7f9 b86e 	b.w	8001cb4 <_getpid>

08008bd8 <_init>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr

08008be4 <_fini>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr
