
PROFET2_12V_Shield_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08009398  08009398  00019398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098dc  080098dc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e4  080098e4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098e8  080098e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080098ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001f4  08009ae0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08009ae0  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011720  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d7  00000000  00000000  00031944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00034120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  000350b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002467d  00000000  00000000  00035f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011970  00000000  00000000  0005a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000def9b  00000000  00000000  0006bf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014aed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056cc  00000000  00000000  0014af24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009380 	.word	0x08009380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	08009380 	.word	0x08009380

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <changeRawToCurrent>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float changeRawToCurrent(uint16_t rawval)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	float amps;
	amps = ((float) rawval / (float) 1024) * (float) MAX_ADC_VAL;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001040:	eddf 6a18 	vldr	s13, [pc, #96]	; 80010a4 <changeRawToCurrent+0x78>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80010a8 <changeRawToCurrent+0x7c>
 800104c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001050:	edc7 7a03 	vstr	s15, [r7, #12]
	amps = (amps * BTS7002.kilis) / 1000.0;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <changeRawToCurrent+0x80>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001060:	edd7 7a03 	vldr	s15, [r7, #12]
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001068:	eddf 6a11 	vldr	s13, [pc, #68]	; 80010b0 <changeRawToCurrent+0x84>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	edc7 7a03 	vstr	s15, [r7, #12]
	amps = (amps - BTS7002.ampsOffset) * BTS7002.ampsGain;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <changeRawToCurrent+0x80>)
 8001076:	edd3 7a02 	vldr	s15, [r3, #8]
 800107a:	ed97 7a03 	vldr	s14, [r7, #12]
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <changeRawToCurrent+0x80>)
 8001084:	edd3 7a01 	vldr	s15, [r3, #4]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	edc7 7a03 	vstr	s15, [r7, #12]
	return amps;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	ee07 3a90 	vmov	s15, r3
	//ExponentialFilter_input(&filterBase[3], amps);

	//return ExponentialFilter_output(&filterBase[3]);
}
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	44800000 	.word	0x44800000
 80010a8:	40533333 	.word	0x40533333
 80010ac:	20000000 	.word	0x20000000
 80010b0:	447a0000 	.word	0x447a0000

080010b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ba:	f000 fd2f 	bl	8001b1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010be:	f000 f8e9 	bl	8001294 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010c2:	f000 fa2b 	bl	800151c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010c6:	f000 f9ff 	bl	80014c8 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80010ca:	f000 f955 	bl	8001378 <MX_ADC1_Init>
	MX_TIM6_Init();
 80010ce:	f000 f9c5 	bl	800145c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4866      	ldr	r0, [pc, #408]	; (8001270 <main+0x1bc>)
 80010d8:	f001 fe66 	bl	8002da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2108      	movs	r1, #8
 80010e0:	4863      	ldr	r0, [pc, #396]	; (8001270 <main+0x1bc>)
 80010e2:	f001 fe61 	bl	8002da8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	4862      	ldr	r0, [pc, #392]	; (8001274 <main+0x1c0>)
 80010ec:	f001 fe5c 	bl	8002da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	4860      	ldr	r0, [pc, #384]	; (8001278 <main+0x1c4>)
 80010f6:	f001 fe57 	bl	8002da8 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	485d      	ldr	r0, [pc, #372]	; (8001278 <main+0x1c4>)
 8001102:	f001 fe51 	bl	8002da8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 fd7a 	bl	8001c00 <HAL_Delay>
		HAL_GPIO_WritePin(DEN2_4_GPIO_Port, DEN2_4_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	4859      	ldr	r0, [pc, #356]	; (8001278 <main+0x1c4>)
 8001114:	f001 fe48 	bl	8002da8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f000 fd71 	bl	8001c00 <HAL_Delay>
		for (volatile int i = 0; i < 3; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e012      	b.n	800114a <main+0x96>
		{
			HAL_ADC_Start(&hadc1);
 8001124:	4855      	ldr	r0, [pc, #340]	; (800127c <main+0x1c8>)
 8001126:	f000 fdd3 	bl	8001cd0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 800112a:	2164      	movs	r1, #100	; 0x64
 800112c:	4853      	ldr	r0, [pc, #332]	; (800127c <main+0x1c8>)
 800112e:	f000 fed4 	bl	8001eda <HAL_ADC_PollForConversion>
			data[i] = HAL_ADC_GetValue(&hadc1);
 8001132:	4852      	ldr	r0, [pc, #328]	; (800127c <main+0x1c8>)
 8001134:	f001 f89d 	bl	8002272 <HAL_ADC_GetValue>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b291      	uxth	r1, r2
 800113e:	4a50      	ldr	r2, [pc, #320]	; (8001280 <main+0x1cc>)
 8001140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (volatile int i = 0; i < 3; i++)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	dde9      	ble.n	8001124 <main+0x70>
		}
		HAL_ADC_Stop(&hadc1);
 8001150:	484a      	ldr	r0, [pc, #296]	; (800127c <main+0x1c8>)
 8001152:	f000 fe8f 	bl	8001e74 <HAL_ADC_Stop>

		HAL_GPIO_WritePin(DEN2_4_GPIO_Port, DEN2_4_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	4846      	ldr	r0, [pc, #280]	; (8001278 <main+0x1c4>)
 800115e:	f001 fe23 	bl	8002da8 <HAL_GPIO_WritePin>

		sprintf(buf, "\t\t\tIN2\t\tIN4\r\n"
				"----------------------------------------------\r\n"
				"OLOFF: %d\t||\t%d\t||\t%f\r\n", data[0], data[1], changeRawToCurrent(data[2]));
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <main+0x1cc>)
 8001164:	881b      	ldrh	r3, [r3, #0]
		sprintf(buf, "\t\t\tIN2\t\tIN4\r\n"
 8001166:	461c      	mov	r4, r3
				"OLOFF: %d\t||\t%d\t||\t%f\r\n", data[0], data[1], changeRawToCurrent(data[2]));
 8001168:	4b45      	ldr	r3, [pc, #276]	; (8001280 <main+0x1cc>)
 800116a:	885b      	ldrh	r3, [r3, #2]
		sprintf(buf, "\t\t\tIN2\t\tIN4\r\n"
 800116c:	461d      	mov	r5, r3
				"OLOFF: %d\t||\t%d\t||\t%f\r\n", data[0], data[1], changeRawToCurrent(data[2]));
 800116e:	4b44      	ldr	r3, [pc, #272]	; (8001280 <main+0x1cc>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff5a 	bl	800102c <changeRawToCurrent>
 8001178:	ee10 3a10 	vmov	r3, s0
		sprintf(buf, "\t\t\tIN2\t\tIN4\r\n"
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa03 	bl	8000588 <__aeabi_f2d>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	e9cd 2300 	strd	r2, r3, [sp]
 800118a:	462b      	mov	r3, r5
 800118c:	4622      	mov	r2, r4
 800118e:	493d      	ldr	r1, [pc, #244]	; (8001284 <main+0x1d0>)
 8001190:	483d      	ldr	r0, [pc, #244]	; (8001288 <main+0x1d4>)
 8001192:	f004 fb51 	bl	8005838 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 8001196:	483c      	ldr	r0, [pc, #240]	; (8001288 <main+0x1d4>)
 8001198:	f7ff f83a 	bl	8000210 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	4938      	ldr	r1, [pc, #224]	; (8001288 <main+0x1d4>)
 80011a6:	4839      	ldr	r0, [pc, #228]	; (800128c <main+0x1d8>)
 80011a8:	f002 fed9 	bl	8003f5e <HAL_UART_Transmit>

		HAL_Delay(10);
 80011ac:	200a      	movs	r0, #10
 80011ae:	f000 fd27 	bl	8001c00 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(OLOFF_GPIO_Port, OLOFF_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	482f      	ldr	r0, [pc, #188]	; (8001278 <main+0x1c4>)
 80011ba:	f001 fdf5 	bl	8002da8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 fd1e 	bl	8001c00 <HAL_Delay>
		HAL_GPIO_WritePin(DEN2_4_GPIO_Port, DEN2_4_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	482b      	ldr	r0, [pc, #172]	; (8001278 <main+0x1c4>)
 80011cc:	f001 fdec 	bl	8002da8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f000 fd15 	bl	8001c00 <HAL_Delay>

		for (volatile int i = 0; i < 3; i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	e012      	b.n	8001202 <main+0x14e>
		{
			HAL_ADC_Start(&hadc1);
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <main+0x1c8>)
 80011de:	f000 fd77 	bl	8001cd0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80011e2:	2164      	movs	r1, #100	; 0x64
 80011e4:	4825      	ldr	r0, [pc, #148]	; (800127c <main+0x1c8>)
 80011e6:	f000 fe78 	bl	8001eda <HAL_ADC_PollForConversion>
			data[i] = HAL_ADC_GetValue(&hadc1);
 80011ea:	4824      	ldr	r0, [pc, #144]	; (800127c <main+0x1c8>)
 80011ec:	f001 f841 	bl	8002272 <HAL_ADC_GetValue>
 80011f0:	4602      	mov	r2, r0
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b291      	uxth	r1, r2
 80011f6:	4a22      	ldr	r2, [pc, #136]	; (8001280 <main+0x1cc>)
 80011f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (volatile int i = 0; i < 3; i++)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	dde9      	ble.n	80011dc <main+0x128>
		}
		HAL_ADC_Stop(&hadc1);
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <main+0x1c8>)
 800120a:	f000 fe33 	bl	8001e74 <HAL_ADC_Stop>

		HAL_GPIO_WritePin(DEN2_4_GPIO_Port, DEN2_4_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	4818      	ldr	r0, [pc, #96]	; (8001278 <main+0x1c4>)
 8001216:	f001 fdc7 	bl	8002da8 <HAL_GPIO_WritePin>

		sprintf(buf, "OLON: %d\t||\t%d\t||\t%f\r\n\r\n", data[0], data[1],
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <main+0x1cc>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461c      	mov	r4, r3
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <main+0x1cc>)
 8001222:	885b      	ldrh	r3, [r3, #2]
 8001224:	461d      	mov	r5, r3
				changeRawToCurrent(data[2]));
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <main+0x1cc>)
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fefe 	bl	800102c <changeRawToCurrent>
 8001230:	ee10 3a10 	vmov	r3, s0
		sprintf(buf, "OLON: %d\t||\t%d\t||\t%f\r\n\r\n", data[0], data[1],
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9a7 	bl	8000588 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	e9cd 2300 	strd	r2, r3, [sp]
 8001242:	462b      	mov	r3, r5
 8001244:	4622      	mov	r2, r4
 8001246:	4912      	ldr	r1, [pc, #72]	; (8001290 <main+0x1dc>)
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <main+0x1d4>)
 800124a:	f004 faf5 	bl	8005838 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 1000);
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <main+0x1d4>)
 8001250:	f7fe ffde 	bl	8000210 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125c:	490a      	ldr	r1, [pc, #40]	; (8001288 <main+0x1d4>)
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <main+0x1d8>)
 8001260:	f002 fe7d 	bl	8003f5e <HAL_UART_Transmit>

		HAL_Delay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001268:	f000 fcca 	bl	8001c00 <HAL_Delay>
	{
 800126c:	e745      	b.n	80010fa <main+0x46>
 800126e:	bf00      	nop
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020000 	.word	0x40020000
 800127c:	2000022c 	.word	0x2000022c
 8001280:	200002b4 	.word	0x200002b4
 8001284:	08009398 	.word	0x08009398
 8001288:	20000304 	.word	0x20000304
 800128c:	20000368 	.word	0x20000368
 8001290:	080093f0 	.word	0x080093f0

08001294 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2234      	movs	r2, #52	; 0x34
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fc40 	bl	8004b28 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <SystemClock_Config+0xdc>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <SystemClock_Config+0xdc>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <SystemClock_Config+0xdc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <SystemClock_Config+0xe0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <SystemClock_Config+0xe0>)
 80012de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <SystemClock_Config+0xe0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	2310      	movs	r3, #16
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001304:	2308      	movs	r3, #8
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001308:	23b4      	movs	r3, #180	; 0xb4
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130c:	2302      	movs	r3, #2
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f879 	bl	8003414 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001328:	f000 f9a0 	bl	800166c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800132c:	f001 fd56 	bl	8002ddc <HAL_PWREx_EnableOverDrive>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8001336:	f000 f999 	bl	800166c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800133a:	230f      	movs	r3, #15
 800133c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133e:	2302      	movs	r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001346:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800134a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	2105      	movs	r1, #5
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fd8f 	bl	8002e7c <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8001364:	f000 f982 	bl	800166c <Error_Handler>
	}
}
 8001368:	bf00      	nop
 800136a:	3750      	adds	r7, #80	; 0x50
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40007000 	.word	0x40007000

08001378 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_ADC1_Init+0xd8>)
 800138c:	4a31      	ldr	r2, [pc, #196]	; (8001454 <MX_ADC1_Init+0xdc>)
 800138e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <MX_ADC1_Init+0xd8>)
 8001392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001396:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_ADC1_Init+0xd8>)
 800139a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800139e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 1;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <MX_ADC1_Init+0xe0>)
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013ce:	2203      	movs	r2, #3
 80013d0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013dc:	2201      	movs	r2, #1
 80013de:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <MX_ADC1_Init+0xd8>)
 80013e2:	f000 fc31 	bl	8001c48 <HAL_ADC_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x78>
	{
		Error_Handler();
 80013ec:	f000 f93e 	bl	800166c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_ADC1_Init+0xd8>)
 8001402:	f000 ff61 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 800140c:	f000 f92e 	bl	800166c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001410:	2304      	movs	r3, #4
 8001412:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001414:	2302      	movs	r3, #2
 8001416:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_ADC1_Init+0xd8>)
 800141e:	f000 ff53 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0xb4>
	{
		Error_Handler();
 8001428:	f000 f920 	bl	800166c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800142c:	2308      	movs	r3, #8
 800142e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001430:	2303      	movs	r3, #3
 8001432:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_ADC1_Init+0xd8>)
 800143a:	f000 ff45 	bl	80022c8 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0xd0>
	{
		Error_Handler();
 8001444:	f000 f912 	bl	800166c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000022c 	.word	0x2000022c
 8001454:	40012000 	.word	0x40012000
 8001458:	0f000001 	.word	0x0f000001

0800145c <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
	{ 0 };

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM6_Init+0x64>)
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <MX_TIM6_Init+0x68>)
 800146e:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 449;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_TIM6_Init+0x64>)
 8001472:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001476:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_TIM6_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 9999;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_TIM6_Init+0x64>)
 8001480:	f242 720f 	movw	r2, #9999	; 0x270f
 8001484:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_TIM6_Init+0x64>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_TIM6_Init+0x64>)
 800148e:	f002 fa5f 	bl	8003950 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001498:	f000 f8e8 	bl	800166c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM6_Init+0x64>)
 80014aa:	f002 fc7b 	bl	8003da4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 80014b4:	f000 f8da 	bl	800166c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002bc 	.word	0x200002bc
 80014c4:	40001000 	.word	0x40001000

080014c8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART2_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 8001500:	f002 fce0 	bl	8003ec4 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800150a:	f000 f8af 	bl	800166c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000368 	.word	0x20000368
 8001518:	40004400 	.word	0x40004400

0800151c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a47      	ldr	r2, [pc, #284]	; (8001658 <MX_GPIO_Init+0x13c>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a40      	ldr	r2, [pc, #256]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a39      	ldr	r2, [pc, #228]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <MX_GPIO_Init+0x13c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <MX_GPIO_Init+0x13c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a32      	ldr	r2, [pc, #200]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <MX_GPIO_Init+0x13c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80015a8:	482c      	ldr	r0, [pc, #176]	; (800165c <MX_GPIO_Init+0x140>)
 80015aa:	f001 fbfd 	bl	8002da8 <HAL_GPIO_WritePin>
	LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin | DEN2_4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80015b4:	482a      	ldr	r0, [pc, #168]	; (8001660 <MX_GPIO_Init+0x144>)
 80015b6:	f001 fbf7 	bl	8002da8 <HAL_GPIO_WritePin>
	DEN1_3_Pin | IN4_Pin | LED2_Pin | LED1_Pin | IN2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	4829      	ldr	r0, [pc, #164]	; (8001664 <MX_GPIO_Init+0x148>)
 80015c0:	f001 fbf2 	bl	8002da8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ca:	4b27      	ldr	r3, [pc, #156]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <MX_GPIO_Init+0x148>)
 80015da:	f001 fa51 	bl	8002a80 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin BTN1_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | BTN1_Pin;
 80015de:	f240 4301 	movw	r3, #1025	; 0x401
 80015e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	481a      	ldr	r0, [pc, #104]	; (800165c <MX_GPIO_Init+0x140>)
 80015f4:	f001 fa44 	bl	8002a80 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED4_Pin LED3_Pin IN3_Pin OLOFF_Pin
	 DEN2_4_Pin */
	GPIO_InitStruct.Pin =
 80015f8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80015fc:	617b      	str	r3, [r7, #20]
	LED4_Pin | LED3_Pin | IN3_Pin | OLOFF_Pin | DEN2_4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <MX_GPIO_Init+0x140>)
 8001612:	f001 fa35 	bl	8002a80 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEN1_3_Pin IN4_Pin LED2_Pin LED1_Pin
	 IN2_Pin */
	GPIO_InitStruct.Pin = DEN1_3_Pin | IN4_Pin | LED2_Pin | LED1_Pin | IN2_Pin;
 8001616:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800161a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_GPIO_Init+0x144>)
 8001630:	f001 fa26 	bl	8002a80 <HAL_GPIO_Init>

	/*Configure GPIO pin : IN1_Pin */
	GPIO_InitStruct.Pin = IN1_Pin;
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_GPIO_Init+0x148>)
 800164c:	f001 fa18 	bl	8002a80 <HAL_GPIO_Init>

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	10210000 	.word	0x10210000

0800166c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f001 f90e 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <HAL_ADC_MspInit+0xc0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d149      	bne.n	800177e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_ADC_MspInit+0xc4>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a26      	ldr	r2, [pc, #152]	; (800178c <HAL_ADC_MspInit+0xc4>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_ADC_MspInit+0xc4>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_ADC_MspInit+0xc4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <HAL_ADC_MspInit+0xc4>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_ADC_MspInit+0xc4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_ADC_MspInit+0xc4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <HAL_ADC_MspInit+0xc4>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_ADC_MspInit+0xc4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = A1_Vbb_Pin|A2_Isense_1_2_Pin;
 800173e:	2312      	movs	r3, #18
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001742:	2303      	movs	r3, #3
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <HAL_ADC_MspInit+0xc8>)
 8001752:	f001 f995 	bl	8002a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A3_Isense_3_4_Pin;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A3_Isense_3_4_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <HAL_ADC_MspInit+0xcc>)
 800176a:	f001 f989 	bl	8002a80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2012      	movs	r0, #18
 8001774:	f001 f8bb 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001778:	2012      	movs	r0, #18
 800177a:	f001 f8d4 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40012000 	.word	0x40012000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_TIM_Base_MspInit+0x48>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d115      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_Base_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_TIM_Base_MspInit+0x4c>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_TIM_Base_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2036      	movs	r0, #54	; 0x36
 80017cc:	f001 f88f 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017d0:	2036      	movs	r0, #54	; 0x36
 80017d2:	f001 f8a8 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40001000 	.word	0x40001000
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_UART_MspInit+0x94>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d133      	bne.n	8001872 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x98>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001842:	230c      	movs	r3, #12
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001852:	2307      	movs	r3, #7
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <HAL_UART_MspInit+0x9c>)
 800185e:	f001 f90f 	bl	8002a80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2026      	movs	r0, #38	; 0x26
 8001868:	f001 f841 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186c:	2026      	movs	r0, #38	; 0x26
 800186e:	f001 f85a 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40004400 	.word	0x40004400
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f000 f974 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <ADC_IRQHandler+0x10>)
 80018e2:	f000 fb85 	bl	8001ff0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000022c 	.word	0x2000022c

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <USART2_IRQHandler+0x10>)
 80018f6:	f002 fbc5 	bl	8004084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000368 	.word	0x20000368

08001904 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM6_DAC_IRQHandler+0x10>)
 800190a:	f002 f870 	bl	80039ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002bc 	.word	0x200002bc

08001918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_kill>:

int _kill(int pid, int sig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001932:	f003 f8cf 	bl	8004ad4 <__errno>
 8001936:	4603      	mov	r3, r0
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
	return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffe7 	bl	8001928 <_kill>
	while (1) {}		/* Make sure we hang here */
 800195a:	e7fe      	b.n	800195a <_exit+0x12>

0800195c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00a      	b.n	8001984 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196e:	f3af 8000 	nop.w
 8001972:	4601      	mov	r1, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf0      	blt.n	800196e <_read+0x12>
	}

return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e009      	b.n	80019bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf1      	blt.n	80019a8 <_write+0x12>
	}
	return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_close>:

int _close(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f6:	605a      	str	r2, [r3, #4]
	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_isatty>:

int _isatty(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
	return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f003 f834 	bl	8004ad4 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20020000 	.word	0x20020000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	20000210 	.word	0x20000210
 8001aa0:	200003c0 	.word	0x200003c0

08001aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ace:	490e      	ldr	r1, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae4:	4c0b      	ldr	r4, [pc, #44]	; (8001b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001af2:	f7ff ffd7 	bl	8001aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af6:	f002 fff3 	bl	8004ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afa:	f7ff fadb 	bl	80010b4 <main>
  bx  lr    
 8001afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001b0c:	080098ec 	.word	0x080098ec
  ldr r2, =_sbss
 8001b10:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001b14:	200003c0 	.word	0x200003c0

08001b18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <CAN1_RX0_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <HAL_Init+0x40>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_Init+0x40>)
 8001b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x40>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 fec7 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f000 f808 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fd92 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fedf 	bl	8002942 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 fea7 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000014 	.word	0x20000014
 8001bb8:	2000001c 	.word	0x2000001c
 8001bbc:	20000018 	.word	0x20000018

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2000001c 	.word	0x2000001c
 8001be4:	200003ac 	.word	0x200003ac

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	200003ac 	.word	0x200003ac

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000001c 	.word	0x2000001c

08001c48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e033      	b.n	8001cc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fd2e 	bl	80016c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d118      	bne.n	8001cb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c8e:	f023 0302 	bic.w	r3, r3, #2
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fc46 	bl	800252c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb6:	e001      	b.n	8001cbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Start+0x1a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0b2      	b.n	8001e50 <HAL_ADC_Start+0x180>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d018      	beq.n	8001d32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d10:	4b52      	ldr	r3, [pc, #328]	; (8001e5c <HAL_ADC_Start+0x18c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_ADC_Start+0x190>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9a      	lsrs	r2, r3, #18
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d17a      	bne.n	8001e36 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7e:	d106      	bne.n	8001d8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f023 0206 	bic.w	r2, r3, #6
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_ADC_Start+0x194>)
 8001d9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d12a      	bne.n	8001e0c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_ADC_Start+0x198>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d015      	beq.n	8001dec <HAL_ADC_Start+0x11c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_ADC_Start+0x19c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_Start+0x106>
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_ADC_Start+0x194>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <HAL_ADC_Start+0x1a0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d136      	bne.n	8001e4e <HAL_ADC_Start+0x17e>
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_ADC_Start+0x194>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d130      	bne.n	8001e4e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d129      	bne.n	8001e4e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	e020      	b.n	8001e4e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a15      	ldr	r2, [pc, #84]	; (8001e68 <HAL_ADC_Start+0x198>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11b      	bne.n	8001e4e <HAL_ADC_Start+0x17e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d114      	bne.n	8001e4e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	e00b      	b.n	8001e4e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	40012300 	.word	0x40012300
 8001e68:	40012000 	.word	0x40012000
 8001e6c:	40012100 	.word	0x40012100
 8001e70:	40012200 	.word	0x40012200

08001e74 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Stop+0x16>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e021      	b.n	8001ece <HAL_ADC_Stop+0x5a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d113      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f06:	d10b      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e063      	b.n	8001fe8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f20:	f7ff fe62 	bl	8001be8 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f26:	e021      	b.n	8001f6c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d01d      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_ADC_PollForConversion+0x6c>
 8001f36:	f7ff fe57 	bl	8001be8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d212      	bcs.n	8001f6c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d00b      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f043 0204 	orr.w	r2, r3, #4
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03d      	b.n	8001fe8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d1d6      	bne.n	8001f28 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0212 	mvn.w	r2, #18
 8001f82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d123      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11f      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d111      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b20      	cmp	r3, #32
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d049      	beq.n	80020c6 <HAL_ADC_IRQHandler+0xd6>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d046      	beq.n	80020c6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d12b      	bne.n	80020b6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d127      	bne.n	80020b6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800207e:	2b00      	cmp	r3, #0
 8002080:	d119      	bne.n	80020b6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0220 	bic.w	r2, r2, #32
 8002090:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8e8 	bl	800228c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0212 	mvn.w	r2, #18
 80020c4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b80      	cmp	r3, #128	; 0x80
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d057      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x1b8>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d054      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d139      	bne.n	8002198 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800213c:	2b00      	cmp	r3, #0
 800213e:	d12b      	bne.n	8002198 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d124      	bne.n	8002198 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d11d      	bne.n	8002198 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d119      	bne.n	8002198 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002172:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fac3 	bl	8002724 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f06f 020c 	mvn.w	r2, #12
 80021a6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d017      	beq.n	800220a <HAL_ADC_IRQHandler+0x21a>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d014      	beq.n	800220a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10d      	bne.n	800220a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f850 	bl	80022a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0201 	mvn.w	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b20      	cmp	r3, #32
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_ADC_IRQHandler+0x27a>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0202 	orr.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0220 	mvn.w	r2, #32
 8002258:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f82a 	bl	80022b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0220 	mvn.w	r2, #32
 8002268:	601a      	str	r2, [r3, #0]
  }
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x1c>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e113      	b.n	800250c <HAL_ADC_ConfigChannel+0x244>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d925      	bls.n	8002340 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	3b1e      	subs	r3, #30
 800230a:	2207      	movs	r2, #7
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43da      	mvns	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	400a      	ands	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68d9      	ldr	r1, [r3, #12]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	4603      	mov	r3, r0
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4403      	add	r3, r0
 8002332:	3b1e      	subs	r3, #30
 8002334:	409a      	lsls	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	e022      	b.n	8002386 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	2207      	movs	r2, #7
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	400a      	ands	r2, r1
 8002362:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6919      	ldr	r1, [r3, #16]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	4603      	mov	r3, r0
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4403      	add	r3, r0
 800237c:	409a      	lsls	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d824      	bhi.n	80023d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3b05      	subs	r3, #5
 80023a0:	221f      	movs	r2, #31
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	400a      	ands	r2, r1
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b05      	subs	r3, #5
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34
 80023d6:	e04c      	b.n	8002472 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d824      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b23      	subs	r3, #35	; 0x23
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b23      	subs	r3, #35	; 0x23
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
 8002428:	e023      	b.n	8002472 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b41      	subs	r3, #65	; 0x41
 800243c:	221f      	movs	r2, #31
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	400a      	ands	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b41      	subs	r3, #65	; 0x41
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <HAL_ADC_ConfigChannel+0x250>)
 8002474:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a28      	ldr	r2, [pc, #160]	; (800251c <HAL_ADC_ConfigChannel+0x254>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d10f      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b12      	cmp	r3, #18
 8002486:	d10b      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_ADC_ConfigChannel+0x254>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12b      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x23a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_ADC_ConfigChannel+0x258>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x1f4>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b11      	cmp	r3, #17
 80024ba:	d122      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_ADC_ConfigChannel+0x258>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_ADC_ConfigChannel+0x25c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_ADC_ConfigChannel+0x260>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	0c9a      	lsrs	r2, r3, #18
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40012300 	.word	0x40012300
 800251c:	40012000 	.word	0x40012000
 8002520:	10000012 	.word	0x10000012
 8002524:	20000014 	.word	0x20000014
 8002528:	431bde83 	.word	0x431bde83

0800252c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002534:	4b79      	ldr	r3, [pc, #484]	; (800271c <ADC_Init+0x1f0>)
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <ADC_Init+0x1f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e00f      	b.n	800262a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0202 	bic.w	r2, r2, #2
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e1b      	ldrb	r3, [r3, #24]
 8002644:	005a      	lsls	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	035a      	lsls	r2, r3, #13
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e007      	b.n	80026a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	051a      	lsls	r2, r3, #20
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e2:	025a      	lsls	r2, r3, #9
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	029a      	lsls	r2, r3, #10
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012300 	.word	0x40012300
 8002720:	0f000001 	.word	0x0f000001

08002724 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff f93e 	bl	8001be8 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e052      	b.n	8002a32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0216 	bic.w	r2, r2, #22
 800299a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_DMA_Abort+0x62>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029dc:	e013      	b.n	8002a06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029de:	f7ff f903 	bl	8001be8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d90c      	bls.n	8002a06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e015      	b.n	8002a32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e4      	bne.n	80029de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	223f      	movs	r2, #63	; 0x3f
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e00c      	b.n	8002a72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e165      	b.n	8002d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f040 8154 	bne.w	8002d62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d005      	beq.n	8002ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d130      	bne.n	8002b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80ae 	beq.w	8002d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c22:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_GPIO_Init+0x304>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4f      	ldr	r2, [pc, #316]	; (8002d88 <HAL_GPIO_Init+0x308>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x21a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4e      	ldr	r2, [pc, #312]	; (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x216>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <HAL_GPIO_Init+0x310>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x212>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4c      	ldr	r2, [pc, #304]	; (8002d94 <HAL_GPIO_Init+0x314>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <HAL_GPIO_Init+0x318>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x20a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4a      	ldr	r2, [pc, #296]	; (8002d9c <HAL_GPIO_Init+0x31c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x206>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a49      	ldr	r2, [pc, #292]	; (8002da0 <HAL_GPIO_Init+0x320>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x202>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x304>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cde:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae96 	bls.w	8002a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_PWREx_EnableOverDrive+0x94>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e08:	f7fe feee 	bl	8001be8 <HAL_GetTick>
 8002e0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e0e:	e009      	b.n	8002e24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e10:	f7fe feea 	bl	8001be8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e1e:	d901      	bls.n	8002e24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e01f      	b.n	8002e64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d1ee      	bne.n	8002e10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e38:	f7fe fed6 	bl	8001be8 <HAL_GetTick>
 8002e3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e3e:	e009      	b.n	8002e54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e40:	f7fe fed2 	bl	8001be8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4e:	d901      	bls.n	8002e54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e007      	b.n	8002e64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e60:	d1ee      	bne.n	8002e40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	420e0040 	.word	0x420e0040
 8002e74:	40007000 	.word	0x40007000
 8002e78:	420e0044 	.word	0x420e0044

08002e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0cc      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d90c      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b65      	ldr	r3, [pc, #404]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0b8      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	494d      	ldr	r1, [pc, #308]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d044      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d119      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e06f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e067      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4934      	ldr	r1, [pc, #208]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fe3c 	bl	8001be8 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe fe38 	bl	8001be8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e04f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d20c      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e032      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4916      	ldr	r1, [pc, #88]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003002:	f000 f855 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	490a      	ldr	r1, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fd9c 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40023c00 	.word	0x40023c00
 8003038:	40023800 	.word	0x40023800
 800303c:	0800940c 	.word	0x0800940c
 8003040:	20000014 	.word	0x20000014
 8003044:	20000018 	.word	0x20000018

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000014 	.word	0x20000014

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	0800941c 	.word	0x0800941c

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	0800941c 	.word	0x0800941c

080030b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030cc:	4bce      	ldr	r3, [pc, #824]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	f200 818d 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x344>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	08003115 	.word	0x08003115
 80030e4:	080033f5 	.word	0x080033f5
 80030e8:	080033f5 	.word	0x080033f5
 80030ec:	080033f5 	.word	0x080033f5
 80030f0:	0800311b 	.word	0x0800311b
 80030f4:	080033f5 	.word	0x080033f5
 80030f8:	080033f5 	.word	0x080033f5
 80030fc:	080033f5 	.word	0x080033f5
 8003100:	08003121 	.word	0x08003121
 8003104:	080033f5 	.word	0x080033f5
 8003108:	080033f5 	.word	0x080033f5
 800310c:	080033f5 	.word	0x080033f5
 8003110:	08003295 	.word	0x08003295
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003114:	4bbd      	ldr	r3, [pc, #756]	; (800340c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003116:	61bb      	str	r3, [r7, #24]
       break;
 8003118:	e16f      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311a:	4bbd      	ldr	r3, [pc, #756]	; (8003410 <HAL_RCC_GetSysClockFreq+0x360>)
 800311c:	61bb      	str	r3, [r7, #24]
      break;
 800311e:	e16c      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003120:	4bb9      	ldr	r3, [pc, #740]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003128:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312a:	4bb7      	ldr	r3, [pc, #732]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d053      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003136:	4bb4      	ldr	r3, [pc, #720]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	461a      	mov	r2, r3
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	ea02 0400 	and.w	r4, r2, r0
 800314e:	603c      	str	r4, [r7, #0]
 8003150:	400b      	ands	r3, r1
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	014b      	lsls	r3, r1, #5
 8003166:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800316a:	0142      	lsls	r2, r0, #5
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	4623      	mov	r3, r4
 8003172:	1ac0      	subs	r0, r0, r3
 8003174:	462b      	mov	r3, r5
 8003176:	eb61 0103 	sbc.w	r1, r1, r3
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	018b      	lsls	r3, r1, #6
 8003184:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003188:	0182      	lsls	r2, r0, #6
 800318a:	1a12      	subs	r2, r2, r0
 800318c:	eb63 0301 	sbc.w	r3, r3, r1
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	00d9      	lsls	r1, r3, #3
 800319a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800319e:	00d0      	lsls	r0, r2, #3
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4621      	mov	r1, r4
 80031a6:	1852      	adds	r2, r2, r1
 80031a8:	4629      	mov	r1, r5
 80031aa:	eb43 0101 	adc.w	r1, r3, r1
 80031ae:	460b      	mov	r3, r1
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	0259      	lsls	r1, r3, #9
 80031ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031be:	0250      	lsls	r0, r2, #9
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	f7fd fd7a 	bl	8000cc8 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	e04c      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b8a      	ldr	r3, [pc, #552]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	461a      	mov	r2, r3
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	ea02 0a00 	and.w	sl, r2, r0
 80031f6:	ea03 0b01 	and.w	fp, r3, r1
 80031fa:	4650      	mov	r0, sl
 80031fc:	4659      	mov	r1, fp
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	014b      	lsls	r3, r1, #5
 8003208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800320c:	0142      	lsls	r2, r0, #5
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	ebb0 000a 	subs.w	r0, r0, sl
 8003216:	eb61 010b 	sbc.w	r1, r1, fp
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003228:	0182      	lsls	r2, r0, #6
 800322a:	1a12      	subs	r2, r2, r0
 800322c:	eb63 0301 	sbc.w	r3, r3, r1
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	00d9      	lsls	r1, r3, #3
 800323a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800323e:	00d0      	lsls	r0, r2, #3
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	eb12 020a 	adds.w	r2, r2, sl
 8003248:	eb43 030b 	adc.w	r3, r3, fp
 800324c:	f04f 0000 	mov.w	r0, #0
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	0299      	lsls	r1, r3, #10
 8003256:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800325a:	0290      	lsls	r0, r2, #10
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	461a      	mov	r2, r3
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	f7fd fd2c 	bl	8000cc8 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	3301      	adds	r3, #1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	61bb      	str	r3, [r7, #24]
      break;
 8003292:	e0b2      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003294:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d04d      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032aa:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	461a      	mov	r2, r3
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	ea02 0800 	and.w	r8, r2, r0
 80032c2:	ea03 0901 	and.w	r9, r3, r1
 80032c6:	4640      	mov	r0, r8
 80032c8:	4649      	mov	r1, r9
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	014b      	lsls	r3, r1, #5
 80032d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032d8:	0142      	lsls	r2, r0, #5
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	ebb0 0008 	subs.w	r0, r0, r8
 80032e2:	eb61 0109 	sbc.w	r1, r1, r9
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	018b      	lsls	r3, r1, #6
 80032f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032f4:	0182      	lsls	r2, r0, #6
 80032f6:	1a12      	subs	r2, r2, r0
 80032f8:	eb63 0301 	sbc.w	r3, r3, r1
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	00d9      	lsls	r1, r3, #3
 8003306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800330a:	00d0      	lsls	r0, r2, #3
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	eb12 0208 	adds.w	r2, r2, r8
 8003314:	eb43 0309 	adc.w	r3, r3, r9
 8003318:	f04f 0000 	mov.w	r0, #0
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	0259      	lsls	r1, r3, #9
 8003322:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003326:	0250      	lsls	r0, r2, #9
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	461a      	mov	r2, r3
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	f7fd fcc6 	bl	8000cc8 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4613      	mov	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e04a      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	461a      	mov	r2, r3
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003356:	f04f 0100 	mov.w	r1, #0
 800335a:	ea02 0400 	and.w	r4, r2, r0
 800335e:	ea03 0501 	and.w	r5, r3, r1
 8003362:	4620      	mov	r0, r4
 8003364:	4629      	mov	r1, r5
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	014b      	lsls	r3, r1, #5
 8003370:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003374:	0142      	lsls	r2, r0, #5
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	1b00      	subs	r0, r0, r4
 800337c:	eb61 0105 	sbc.w	r1, r1, r5
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	018b      	lsls	r3, r1, #6
 800338a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800338e:	0182      	lsls	r2, r0, #6
 8003390:	1a12      	subs	r2, r2, r0
 8003392:	eb63 0301 	sbc.w	r3, r3, r1
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	00d9      	lsls	r1, r3, #3
 80033a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033a4:	00d0      	lsls	r0, r2, #3
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	1912      	adds	r2, r2, r4
 80033ac:	eb45 0303 	adc.w	r3, r5, r3
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0299      	lsls	r1, r3, #10
 80033ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033be:	0290      	lsls	r0, r2, #10
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	f7fd fc7a 	bl	8000cc8 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_GetSysClockFreq+0x358>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0f1b      	lsrs	r3, r3, #28
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	61bb      	str	r3, [r7, #24]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetSysClockFreq+0x35c>)
 80033f6:	61bb      	str	r3, [r7, #24]
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	69bb      	ldr	r3, [r7, #24]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	00f42400 	.word	0x00f42400
 8003410:	007a1200 	.word	0x007a1200

08003414 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e28d      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8083 	beq.w	800353a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003434:	4b94      	ldr	r3, [pc, #592]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b04      	cmp	r3, #4
 800343e:	d019      	beq.n	8003474 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003440:	4b91      	ldr	r3, [pc, #580]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003448:	2b08      	cmp	r3, #8
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800344c:	4b8e      	ldr	r3, [pc, #568]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b8b      	ldr	r3, [pc, #556]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b84      	ldr	r3, [pc, #528]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x124>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e25a      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x90>
 8003496:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7b      	ldr	r2, [pc, #492]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xcc>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0xb4>
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b73      	ldr	r3, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a72      	ldr	r2, [pc, #456]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xcc>
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6b      	ldr	r2, [pc, #428]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fb7e 	bl	8001be8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fb7a 	bl	8001be8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e21f      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b61      	ldr	r3, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xdc>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fb6a 	bl	8001be8 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe fb66 	bl	8001be8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e20b      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x104>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d06f      	beq.n	8003626 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003546:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d017      	beq.n	8003582 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003552:	4b4d      	ldr	r3, [pc, #308]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x186>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1d3      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4937      	ldr	r1, [pc, #220]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e03a      	b.n	8003626 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_RCC_OscConfig+0x278>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fb13 	bl	8001be8 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c6:	f7fe fb0f 	bl	8001be8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1b4      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4925      	ldr	r1, [pc, #148]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCC_OscConfig+0x278>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe faf2 	bl	8001be8 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe faee 	bl	8001be8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e193      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d036      	beq.n	80036a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fad2 	bl	8001be8 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003648:	f7fe face 	bl	8001be8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e173      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x274>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x234>
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fe fabb 	bl	8001be8 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	e00e      	b.n	8003694 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003676:	f7fe fab7 	bl	8001be8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d907      	bls.n	8003694 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e15c      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
 8003688:	40023800 	.word	0x40023800
 800368c:	42470000 	.word	0x42470000
 8003690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	4b8a      	ldr	r3, [pc, #552]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ea      	bne.n	8003676 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8097 	beq.w	80037dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b2:	4b83      	ldr	r3, [pc, #524]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	4b7f      	ldr	r3, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a7e      	ldr	r2, [pc, #504]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b7c      	ldr	r3, [pc, #496]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b79      	ldr	r3, [pc, #484]	; (80038c4 <HAL_RCC_OscConfig+0x4b0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d118      	bne.n	800371c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4b76      	ldr	r3, [pc, #472]	; (80038c4 <HAL_RCC_OscConfig+0x4b0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a75      	ldr	r2, [pc, #468]	; (80038c4 <HAL_RCC_OscConfig+0x4b0>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f6:	f7fe fa77 	bl	8001be8 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7fe fa73 	bl	8001be8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e118      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <HAL_RCC_OscConfig+0x4b0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x31e>
 8003724:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x358>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x340>
 800373a:	4b61      	ldr	r3, [pc, #388]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a60      	ldr	r2, [pc, #384]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a5d      	ldr	r2, [pc, #372]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0x358>
 8003754:	4b5a      	ldr	r3, [pc, #360]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a59      	ldr	r2, [pc, #356]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a56      	ldr	r2, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe fa38 	bl	8001be8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fa34 	bl	8001be8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0d7      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ee      	beq.n	800377c <HAL_RCC_OscConfig+0x368>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe fa22 	bl	8001be8 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fe fa1e 	bl	8001be8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0c1      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037be:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ee      	bne.n	80037a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a3a      	ldr	r2, [pc, #232]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80ad 	beq.w	8003940 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e6:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d060      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d145      	bne.n	8003886 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_RCC_OscConfig+0x4b4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe f9f2 	bl	8001be8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe f9ee 	bl	8001be8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e093      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	071b      	lsls	r3, r3, #28
 8003852:	491b      	ldr	r1, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x4b4>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fe f9c3 	bl	8001be8 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003866:	f7fe f9bf 	bl	8001be8 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e064      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x452>
 8003884:	e05c      	b.n	8003940 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_OscConfig+0x4b4>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe f9ac 	bl	8001be8 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe f9a8 	bl	8001be8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e04d      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x480>
 80038b2:	e045      	b.n	8003940 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e040      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40007000 	.word	0x40007000
 80038c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_RCC_OscConfig+0x538>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d030      	beq.n	800393c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d129      	bne.n	800393c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d122      	bne.n	800393c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003904:	4293      	cmp	r3, r2
 8003906:	d119      	bne.n	800393c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	3b01      	subs	r3, #1
 8003916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d10f      	bne.n	800393c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e041      	b.n	80039e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd ff0e 	bl	8001798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 f968 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d122      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d11b      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f06f 0202 	mvn.w	r2, #2
 8003a1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8f8 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 8003a36:	e005      	b.n	8003a44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8ea 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8fb 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d122      	bne.n	8003a9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d11b      	bne.n	8003a9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0204 	mvn.w	r2, #4
 8003a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8ce 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 8003a8a:	e005      	b.n	8003a98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8c0 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8d1 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d122      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d11b      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0208 	mvn.w	r2, #8
 8003ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8a4 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 8003ade:	e005      	b.n	8003aec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f896 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8a7 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d122      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0210 	mvn.w	r2, #16
 8003b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f87a 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 8003b32:	e005      	b.n	8003b40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f86c 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f87d 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10e      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0201 	mvn.w	r2, #1
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f846 	bl	8003bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d10e      	bne.n	8003b9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d107      	bne.n	8003b9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f989 	bl	8003eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d10e      	bne.n	8003bca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d107      	bne.n	8003bca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f842 	bl	8003c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0220 	mvn.w	r2, #32
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f953 	bl	8003e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <TIM_Base_SetConfig+0x114>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d013      	beq.n	8003ca4 <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d00f      	beq.n	8003ca4 <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3d      	ldr	r2, [pc, #244]	; (8003d7c <TIM_Base_SetConfig+0x118>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <TIM_Base_SetConfig+0x11c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3b      	ldr	r2, [pc, #236]	; (8003d84 <TIM_Base_SetConfig+0x120>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <TIM_Base_SetConfig+0x124>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d108      	bne.n	8003cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2f      	ldr	r2, [pc, #188]	; (8003d78 <TIM_Base_SetConfig+0x114>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02b      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d027      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <TIM_Base_SetConfig+0x118>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d023      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <TIM_Base_SetConfig+0x11c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01f      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <TIM_Base_SetConfig+0x120>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01b      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <TIM_Base_SetConfig+0x124>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d017      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <TIM_Base_SetConfig+0x128>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <TIM_Base_SetConfig+0x12c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00f      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <TIM_Base_SetConfig+0x130>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <TIM_Base_SetConfig+0x134>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <TIM_Base_SetConfig+0x138>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a23      	ldr	r2, [pc, #140]	; (8003da0 <TIM_Base_SetConfig+0x13c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <TIM_Base_SetConfig+0x114>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0xf8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <TIM_Base_SetConfig+0x124>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d103      	bne.n	8003d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	615a      	str	r2, [r3, #20]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	40010400 	.word	0x40010400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800
 8003d98:	40001800 	.word	0x40001800
 8003d9c:	40001c00 	.word	0x40001c00
 8003da0:	40002000 	.word	0x40002000

08003da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e05a      	b.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e08:	d01d      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10c      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40000c00 	.word	0x40000c00
 8003e90:	40010400 	.word	0x40010400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40001800 	.word	0x40001800

08003e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e03f      	b.n	8003f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd fc7c 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fc1b 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08a      	sub	sp, #40	; 0x28
 8003f62:	af02      	add	r7, sp, #8
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d17c      	bne.n	8004078 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_UART_Transmit+0x2c>
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e075      	b.n	800407a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Transmit+0x3e>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e06e      	b.n	800407a <HAL_UART_Transmit+0x11c>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2221      	movs	r2, #33	; 0x21
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb2:	f7fd fe19 	bl	8001be8 <HAL_GetTick>
 8003fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d108      	bne.n	8003fe0 <HAL_UART_Transmit+0x82>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	e003      	b.n	8003fe8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ff0:	e02a      	b.n	8004048 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa17 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e036      	b.n	800407a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3302      	adds	r3, #2
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	e007      	b.n	800403a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1cf      	bne.n	8003ff2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	2140      	movs	r1, #64	; 0x40
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9e7 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e006      	b.n	800407a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_UART_IRQHandler+0x52>
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 faa1 	bl	8004616 <UART_Receive_IT>
      return;
 80040d4:	e17c      	b.n	80043d0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80b1 	beq.w	8004240 <HAL_UART_IRQHandler+0x1bc>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_UART_IRQHandler+0x70>
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80a6 	beq.w	8004240 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_UART_IRQHandler+0x90>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_UART_IRQHandler+0xb0>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0202 	orr.w	r2, r3, #2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_UART_IRQHandler+0xd0>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <HAL_UART_IRQHandler+0xfa>
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_UART_IRQHandler+0xee>
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 811f 	beq.w	80043c6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_UART_IRQHandler+0x11e>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa3a 	bl	8004616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <HAL_UART_IRQHandler+0x146>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d031      	beq.n	800422e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f97a 	bl	80044c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d123      	bne.n	8004226 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d013      	beq.n	800421e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	4a77      	ldr	r2, [pc, #476]	; (80043d8 <HAL_UART_IRQHandler+0x354>)
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fc19 	bl	8002a3a <HAL_DMA_Abort_IT>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e00e      	b.n	800423c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8f0 	bl	8004404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e00a      	b.n	800423c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8ec 	bl	8004404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e006      	b.n	800423c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8e8 	bl	8004404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800423a:	e0c4      	b.n	80043c6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	bf00      	nop
    return;
 800423e:	e0c2      	b.n	80043c6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 80a2 	bne.w	800438e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 809c 	beq.w	800438e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8096 	beq.w	800438e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d14f      	bne.n	8004326 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004290:	8a3b      	ldrh	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8099 	beq.w	80043ca <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800429c:	8a3a      	ldrh	r2, [r7, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	f080 8093 	bcs.w	80043ca <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8a3a      	ldrh	r2, [r7, #16]
 80042a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b4:	d02b      	beq.n	800430e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0210 	bic.w	r2, r2, #16
 8004302:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fb26 	bl	800295a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004316:	b29b      	uxth	r3, r3
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f87a 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004324:	e051      	b.n	80043ca <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432e:	b29b      	uxth	r3, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d047      	beq.n	80043ce <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800433e:	8a7b      	ldrh	r3, [r7, #18]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d044      	beq.n	80043ce <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004352:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0210 	bic.w	r2, r2, #16
 8004380:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004382:	8a7b      	ldrh	r3, [r7, #18]
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f846 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800438c:	e01f      	b.n	80043ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_UART_IRQHandler+0x326>
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8cf 	bl	8004546 <UART_Transmit_IT>
    return;
 80043a8:	e012      	b.n	80043d0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_UART_IRQHandler+0x34c>
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f911 	bl	80045e6 <UART_EndTransmit_IT>
    return;
 80043c4:	e004      	b.n	80043d0 <HAL_UART_IRQHandler+0x34c>
    return;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_UART_IRQHandler+0x34c>
      return;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_UART_IRQHandler+0x34c>
      return;
 80043ce:	bf00      	nop
  }
}
 80043d0:	3728      	adds	r7, #40	; 0x28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	0800451f 	.word	0x0800451f

080043dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	e02c      	b.n	800449c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d028      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <UART_WaitOnFlagUntilTimeout+0x30>
 8004450:	f7fd fbca 	bl	8001be8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	d21d      	bcs.n	800449c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800446e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e00f      	b.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d0c3      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d107      	bne.n	8004504 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0210 	bic.w	r2, r2, #16
 8004502:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ff63 	bl	8004404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b21      	cmp	r3, #33	; 0x21
 8004558:	d13e      	bne.n	80045d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	d114      	bne.n	800458e <UART_Transmit_IT+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d110      	bne.n	800458e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]
 800458c:	e008      	b.n	80045a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6211      	str	r1, [r2, #32]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fee8 	bl	80043dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b22      	cmp	r3, #34	; 0x22
 8004628:	f040 8087 	bne.w	800473a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d117      	bne.n	8004666 <UART_Receive_IT+0x50>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d113      	bne.n	8004666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	b29a      	uxth	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
 8004664:	e026      	b.n	80046b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d007      	beq.n	800468a <UART_Receive_IT+0x74>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <UART_Receive_IT+0x82>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e008      	b.n	80046aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4619      	mov	r1, r3
 80046c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d136      	bne.n	8004736 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0220 	bic.w	r2, r2, #32
 80046d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10e      	bne.n	8004726 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0210 	bic.w	r2, r2, #16
 8004716:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fe7a 	bl	8004418 <HAL_UARTEx_RxEventCallback>
 8004724:	e002      	b.n	800472c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fe62 	bl	80043f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e002      	b.n	800473c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e000      	b.n	800473c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800473a:	2302      	movs	r3, #2
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	b09f      	sub	sp, #124	; 0x7c
 800474a:	af00      	add	r7, sp, #0
 800474c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800474e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475a:	68d9      	ldr	r1, [r3, #12]
 800475c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	ea40 0301 	orr.w	r3, r0, r1
 8004764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	431a      	orrs	r2, r3
 8004770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	431a      	orrs	r2, r3
 8004776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800477e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004788:	f021 010c 	bic.w	r1, r1, #12
 800478c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004792:	430b      	orrs	r3, r1
 8004794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	6999      	ldr	r1, [r3, #24]
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	ea40 0301 	orr.w	r3, r0, r1
 80047ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4bc5      	ldr	r3, [pc, #788]	; (8004ac8 <UART_SetConfig+0x384>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d004      	beq.n	80047c2 <UART_SetConfig+0x7e>
 80047b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4bc3      	ldr	r3, [pc, #780]	; (8004acc <UART_SetConfig+0x388>)
 80047be:	429a      	cmp	r2, r3
 80047c0:	d103      	bne.n	80047ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047c2:	f7fe fc61 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 80047c6:	6778      	str	r0, [r7, #116]	; 0x74
 80047c8:	e002      	b.n	80047d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ca:	f7fe fc49 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80047ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d8:	f040 80b6 	bne.w	8004948 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047de:	461c      	mov	r4, r3
 80047e0:	f04f 0500 	mov.w	r5, #0
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	6439      	str	r1, [r7, #64]	; 0x40
 80047ec:	415b      	adcs	r3, r3
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047f4:	1912      	adds	r2, r2, r4
 80047f6:	eb45 0303 	adc.w	r3, r5, r3
 80047fa:	f04f 0000 	mov.w	r0, #0
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	00d9      	lsls	r1, r3, #3
 8004804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004808:	00d0      	lsls	r0, r2, #3
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	1911      	adds	r1, r2, r4
 8004810:	6639      	str	r1, [r7, #96]	; 0x60
 8004812:	416b      	adcs	r3, r5
 8004814:	667b      	str	r3, [r7, #100]	; 0x64
 8004816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	461a      	mov	r2, r3
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	1891      	adds	r1, r2, r2
 8004822:	63b9      	str	r1, [r7, #56]	; 0x38
 8004824:	415b      	adcs	r3, r3
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800482c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004830:	f7fc fa4a 	bl	8000cc8 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4ba5      	ldr	r3, [pc, #660]	; (8004ad0 <UART_SetConfig+0x38c>)
 800483a:	fba3 2302 	umull	r2, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	011e      	lsls	r6, r3, #4
 8004842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004844:	461c      	mov	r4, r3
 8004846:	f04f 0500 	mov.w	r5, #0
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	1891      	adds	r1, r2, r2
 8004850:	6339      	str	r1, [r7, #48]	; 0x30
 8004852:	415b      	adcs	r3, r3
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800485a:	1912      	adds	r2, r2, r4
 800485c:	eb45 0303 	adc.w	r3, r5, r3
 8004860:	f04f 0000 	mov.w	r0, #0
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	00d9      	lsls	r1, r3, #3
 800486a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800486e:	00d0      	lsls	r0, r2, #3
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	1911      	adds	r1, r2, r4
 8004876:	65b9      	str	r1, [r7, #88]	; 0x58
 8004878:	416b      	adcs	r3, r5
 800487a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	1891      	adds	r1, r2, r2
 8004888:	62b9      	str	r1, [r7, #40]	; 0x28
 800488a:	415b      	adcs	r3, r3
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004892:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004896:	f7fc fa17 	bl	8000cc8 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b8c      	ldr	r3, [pc, #560]	; (8004ad0 <UART_SetConfig+0x38c>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	; 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	3332      	adds	r3, #50	; 0x32
 80048b2:	4a87      	ldr	r2, [pc, #540]	; (8004ad0 <UART_SetConfig+0x38c>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048c0:	441e      	add	r6, r3
 80048c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c4:	4618      	mov	r0, r3
 80048c6:	f04f 0100 	mov.w	r1, #0
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	1894      	adds	r4, r2, r2
 80048d0:	623c      	str	r4, [r7, #32]
 80048d2:	415b      	adcs	r3, r3
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
 80048d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048da:	1812      	adds	r2, r2, r0
 80048dc:	eb41 0303 	adc.w	r3, r1, r3
 80048e0:	f04f 0400 	mov.w	r4, #0
 80048e4:	f04f 0500 	mov.w	r5, #0
 80048e8:	00dd      	lsls	r5, r3, #3
 80048ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048ee:	00d4      	lsls	r4, r2, #3
 80048f0:	4622      	mov	r2, r4
 80048f2:	462b      	mov	r3, r5
 80048f4:	1814      	adds	r4, r2, r0
 80048f6:	653c      	str	r4, [r7, #80]	; 0x50
 80048f8:	414b      	adcs	r3, r1
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
 80048fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	461a      	mov	r2, r3
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	1891      	adds	r1, r2, r2
 8004908:	61b9      	str	r1, [r7, #24]
 800490a:	415b      	adcs	r3, r3
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004912:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004916:	f7fc f9d7 	bl	8000cc8 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <UART_SetConfig+0x38c>)
 8004920:	fba3 1302 	umull	r1, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	2164      	movs	r1, #100	; 0x64
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3332      	adds	r3, #50	; 0x32
 8004932:	4a67      	ldr	r2, [pc, #412]	; (8004ad0 <UART_SetConfig+0x38c>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0207 	and.w	r2, r3, #7
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4432      	add	r2, r6
 8004944:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004946:	e0b9      	b.n	8004abc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494a:	461c      	mov	r4, r3
 800494c:	f04f 0500 	mov.w	r5, #0
 8004950:	4622      	mov	r2, r4
 8004952:	462b      	mov	r3, r5
 8004954:	1891      	adds	r1, r2, r2
 8004956:	6139      	str	r1, [r7, #16]
 8004958:	415b      	adcs	r3, r3
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004960:	1912      	adds	r2, r2, r4
 8004962:	eb45 0303 	adc.w	r3, r5, r3
 8004966:	f04f 0000 	mov.w	r0, #0
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	00d9      	lsls	r1, r3, #3
 8004970:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004974:	00d0      	lsls	r0, r2, #3
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	eb12 0804 	adds.w	r8, r2, r4
 800497e:	eb43 0905 	adc.w	r9, r3, r5
 8004982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800499a:	0082      	lsls	r2, r0, #2
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fc f992 	bl	8000cc8 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b49      	ldr	r3, [pc, #292]	; (8004ad0 <UART_SetConfig+0x38c>)
 80049aa:	fba3 2302 	umull	r2, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	011e      	lsls	r6, r3, #4
 80049b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b4:	4618      	mov	r0, r3
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	1894      	adds	r4, r2, r2
 80049c0:	60bc      	str	r4, [r7, #8]
 80049c2:	415b      	adcs	r3, r3
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ca:	1812      	adds	r2, r2, r0
 80049cc:	eb41 0303 	adc.w	r3, r1, r3
 80049d0:	f04f 0400 	mov.w	r4, #0
 80049d4:	f04f 0500 	mov.w	r5, #0
 80049d8:	00dd      	lsls	r5, r3, #3
 80049da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049de:	00d4      	lsls	r4, r2, #3
 80049e0:	4622      	mov	r2, r4
 80049e2:	462b      	mov	r3, r5
 80049e4:	1814      	adds	r4, r2, r0
 80049e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80049e8:	414b      	adcs	r3, r1
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	008b      	lsls	r3, r1, #2
 8004a00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a04:	0082      	lsls	r2, r0, #2
 8004a06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a0a:	f7fc f95d 	bl	8000cc8 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <UART_SetConfig+0x38c>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	; 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	3332      	adds	r3, #50	; 0x32
 8004a26:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <UART_SetConfig+0x38c>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a32:	441e      	add	r6, r3
 8004a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a36:	4618      	mov	r0, r3
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	1894      	adds	r4, r2, r2
 8004a42:	603c      	str	r4, [r7, #0]
 8004a44:	415b      	adcs	r3, r3
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a4c:	1812      	adds	r2, r2, r0
 8004a4e:	eb41 0303 	adc.w	r3, r1, r3
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	f04f 0500 	mov.w	r5, #0
 8004a5a:	00dd      	lsls	r5, r3, #3
 8004a5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a60:	00d4      	lsls	r4, r2, #3
 8004a62:	4622      	mov	r2, r4
 8004a64:	462b      	mov	r3, r5
 8004a66:	eb12 0a00 	adds.w	sl, r2, r0
 8004a6a:	eb43 0b01 	adc.w	fp, r3, r1
 8004a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	008b      	lsls	r3, r1, #2
 8004a82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a86:	0082      	lsls	r2, r0, #2
 8004a88:	4650      	mov	r0, sl
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	f7fc f91c 	bl	8000cc8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <UART_SetConfig+0x38c>)
 8004a96:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2164      	movs	r1, #100	; 0x64
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <UART_SetConfig+0x38c>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4432      	add	r2, r6
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	377c      	adds	r7, #124	; 0x7c
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40011400 	.word	0x40011400
 8004ad0:	51eb851f 	.word	0x51eb851f

08004ad4 <__errno>:
 8004ad4:	4b01      	ldr	r3, [pc, #4]	; (8004adc <__errno+0x8>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000020 	.word	0x20000020

08004ae0 <__libc_init_array>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	4d0d      	ldr	r5, [pc, #52]	; (8004b18 <__libc_init_array+0x38>)
 8004ae4:	4c0d      	ldr	r4, [pc, #52]	; (8004b1c <__libc_init_array+0x3c>)
 8004ae6:	1b64      	subs	r4, r4, r5
 8004ae8:	10a4      	asrs	r4, r4, #2
 8004aea:	2600      	movs	r6, #0
 8004aec:	42a6      	cmp	r6, r4
 8004aee:	d109      	bne.n	8004b04 <__libc_init_array+0x24>
 8004af0:	4d0b      	ldr	r5, [pc, #44]	; (8004b20 <__libc_init_array+0x40>)
 8004af2:	4c0c      	ldr	r4, [pc, #48]	; (8004b24 <__libc_init_array+0x44>)
 8004af4:	f004 fc44 	bl	8009380 <_init>
 8004af8:	1b64      	subs	r4, r4, r5
 8004afa:	10a4      	asrs	r4, r4, #2
 8004afc:	2600      	movs	r6, #0
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	d105      	bne.n	8004b0e <__libc_init_array+0x2e>
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b08:	4798      	blx	r3
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7ee      	b.n	8004aec <__libc_init_array+0xc>
 8004b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b12:	4798      	blx	r3
 8004b14:	3601      	adds	r6, #1
 8004b16:	e7f2      	b.n	8004afe <__libc_init_array+0x1e>
 8004b18:	080098e4 	.word	0x080098e4
 8004b1c:	080098e4 	.word	0x080098e4
 8004b20:	080098e4 	.word	0x080098e4
 8004b24:	080098e8 	.word	0x080098e8

08004b28 <memset>:
 8004b28:	4402      	add	r2, r0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <memset+0xa>
 8004b30:	4770      	bx	lr
 8004b32:	f803 1b01 	strb.w	r1, [r3], #1
 8004b36:	e7f9      	b.n	8004b2c <memset+0x4>

08004b38 <__cvt>:
 8004b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	ec55 4b10 	vmov	r4, r5, d0
 8004b40:	2d00      	cmp	r5, #0
 8004b42:	460e      	mov	r6, r1
 8004b44:	4619      	mov	r1, r3
 8004b46:	462b      	mov	r3, r5
 8004b48:	bfbb      	ittet	lt
 8004b4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b4e:	461d      	movlt	r5, r3
 8004b50:	2300      	movge	r3, #0
 8004b52:	232d      	movlt	r3, #45	; 0x2d
 8004b54:	700b      	strb	r3, [r1, #0]
 8004b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b5c:	4691      	mov	r9, r2
 8004b5e:	f023 0820 	bic.w	r8, r3, #32
 8004b62:	bfbc      	itt	lt
 8004b64:	4622      	movlt	r2, r4
 8004b66:	4614      	movlt	r4, r2
 8004b68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b6c:	d005      	beq.n	8004b7a <__cvt+0x42>
 8004b6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b72:	d100      	bne.n	8004b76 <__cvt+0x3e>
 8004b74:	3601      	adds	r6, #1
 8004b76:	2102      	movs	r1, #2
 8004b78:	e000      	b.n	8004b7c <__cvt+0x44>
 8004b7a:	2103      	movs	r1, #3
 8004b7c:	ab03      	add	r3, sp, #12
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	ab02      	add	r3, sp, #8
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	ec45 4b10 	vmov	d0, r4, r5
 8004b88:	4653      	mov	r3, sl
 8004b8a:	4632      	mov	r2, r6
 8004b8c:	f001 fdb4 	bl	80066f8 <_dtoa_r>
 8004b90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b94:	4607      	mov	r7, r0
 8004b96:	d102      	bne.n	8004b9e <__cvt+0x66>
 8004b98:	f019 0f01 	tst.w	r9, #1
 8004b9c:	d022      	beq.n	8004be4 <__cvt+0xac>
 8004b9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ba2:	eb07 0906 	add.w	r9, r7, r6
 8004ba6:	d110      	bne.n	8004bca <__cvt+0x92>
 8004ba8:	783b      	ldrb	r3, [r7, #0]
 8004baa:	2b30      	cmp	r3, #48	; 0x30
 8004bac:	d10a      	bne.n	8004bc4 <__cvt+0x8c>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f7fb ffa7 	bl	8000b08 <__aeabi_dcmpeq>
 8004bba:	b918      	cbnz	r0, 8004bc4 <__cvt+0x8c>
 8004bbc:	f1c6 0601 	rsb	r6, r6, #1
 8004bc0:	f8ca 6000 	str.w	r6, [sl]
 8004bc4:	f8da 3000 	ldr.w	r3, [sl]
 8004bc8:	4499      	add	r9, r3
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f7fb ff99 	bl	8000b08 <__aeabi_dcmpeq>
 8004bd6:	b108      	cbz	r0, 8004bdc <__cvt+0xa4>
 8004bd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bdc:	2230      	movs	r2, #48	; 0x30
 8004bde:	9b03      	ldr	r3, [sp, #12]
 8004be0:	454b      	cmp	r3, r9
 8004be2:	d307      	bcc.n	8004bf4 <__cvt+0xbc>
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004be8:	1bdb      	subs	r3, r3, r7
 8004bea:	4638      	mov	r0, r7
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	b004      	add	sp, #16
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	9103      	str	r1, [sp, #12]
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e7f0      	b.n	8004bde <__cvt+0xa6>

08004bfc <__exponent>:
 8004bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2900      	cmp	r1, #0
 8004c02:	bfb8      	it	lt
 8004c04:	4249      	neglt	r1, r1
 8004c06:	f803 2b02 	strb.w	r2, [r3], #2
 8004c0a:	bfb4      	ite	lt
 8004c0c:	222d      	movlt	r2, #45	; 0x2d
 8004c0e:	222b      	movge	r2, #43	; 0x2b
 8004c10:	2909      	cmp	r1, #9
 8004c12:	7042      	strb	r2, [r0, #1]
 8004c14:	dd2a      	ble.n	8004c6c <__exponent+0x70>
 8004c16:	f10d 0407 	add.w	r4, sp, #7
 8004c1a:	46a4      	mov	ip, r4
 8004c1c:	270a      	movs	r7, #10
 8004c1e:	46a6      	mov	lr, r4
 8004c20:	460a      	mov	r2, r1
 8004c22:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c26:	fb07 1516 	mls	r5, r7, r6, r1
 8004c2a:	3530      	adds	r5, #48	; 0x30
 8004c2c:	2a63      	cmp	r2, #99	; 0x63
 8004c2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c36:	4631      	mov	r1, r6
 8004c38:	dcf1      	bgt.n	8004c1e <__exponent+0x22>
 8004c3a:	3130      	adds	r1, #48	; 0x30
 8004c3c:	f1ae 0502 	sub.w	r5, lr, #2
 8004c40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c44:	1c44      	adds	r4, r0, #1
 8004c46:	4629      	mov	r1, r5
 8004c48:	4561      	cmp	r1, ip
 8004c4a:	d30a      	bcc.n	8004c62 <__exponent+0x66>
 8004c4c:	f10d 0209 	add.w	r2, sp, #9
 8004c50:	eba2 020e 	sub.w	r2, r2, lr
 8004c54:	4565      	cmp	r5, ip
 8004c56:	bf88      	it	hi
 8004c58:	2200      	movhi	r2, #0
 8004c5a:	4413      	add	r3, r2
 8004c5c:	1a18      	subs	r0, r3, r0
 8004c5e:	b003      	add	sp, #12
 8004c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c6a:	e7ed      	b.n	8004c48 <__exponent+0x4c>
 8004c6c:	2330      	movs	r3, #48	; 0x30
 8004c6e:	3130      	adds	r1, #48	; 0x30
 8004c70:	7083      	strb	r3, [r0, #2]
 8004c72:	70c1      	strb	r1, [r0, #3]
 8004c74:	1d03      	adds	r3, r0, #4
 8004c76:	e7f1      	b.n	8004c5c <__exponent+0x60>

08004c78 <_printf_float>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	ed2d 8b02 	vpush	{d8}
 8004c80:	b08d      	sub	sp, #52	; 0x34
 8004c82:	460c      	mov	r4, r1
 8004c84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c88:	4616      	mov	r6, r2
 8004c8a:	461f      	mov	r7, r3
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	f002 fe8f 	bl	80079b0 <_localeconv_r>
 8004c92:	f8d0 a000 	ldr.w	sl, [r0]
 8004c96:	4650      	mov	r0, sl
 8004c98:	f7fb faba 	bl	8000210 <strlen>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004cac:	3307      	adds	r3, #7
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	f103 0208 	add.w	r2, r3, #8
 8004cb6:	f8c8 2000 	str.w	r2, [r8]
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cca:	9307      	str	r3, [sp, #28]
 8004ccc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cd0:	ee08 0a10 	vmov	s16, r0
 8004cd4:	4b9f      	ldr	r3, [pc, #636]	; (8004f54 <_printf_float+0x2dc>)
 8004cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	f7fb ff45 	bl	8000b6c <__aeabi_dcmpun>
 8004ce2:	bb88      	cbnz	r0, 8004d48 <_printf_float+0xd0>
 8004ce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ce8:	4b9a      	ldr	r3, [pc, #616]	; (8004f54 <_printf_float+0x2dc>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	f7fb ff1f 	bl	8000b30 <__aeabi_dcmple>
 8004cf2:	bb48      	cbnz	r0, 8004d48 <_printf_float+0xd0>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	f7fb ff0e 	bl	8000b1c <__aeabi_dcmplt>
 8004d00:	b110      	cbz	r0, 8004d08 <_printf_float+0x90>
 8004d02:	232d      	movs	r3, #45	; 0x2d
 8004d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d08:	4b93      	ldr	r3, [pc, #588]	; (8004f58 <_printf_float+0x2e0>)
 8004d0a:	4894      	ldr	r0, [pc, #592]	; (8004f5c <_printf_float+0x2e4>)
 8004d0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d10:	bf94      	ite	ls
 8004d12:	4698      	movls	r8, r3
 8004d14:	4680      	movhi	r8, r0
 8004d16:	2303      	movs	r3, #3
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	9b05      	ldr	r3, [sp, #20]
 8004d1c:	f023 0204 	bic.w	r2, r3, #4
 8004d20:	6022      	str	r2, [r4, #0]
 8004d22:	f04f 0900 	mov.w	r9, #0
 8004d26:	9700      	str	r7, [sp, #0]
 8004d28:	4633      	mov	r3, r6
 8004d2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 f9d8 	bl	80050e4 <_printf_common>
 8004d34:	3001      	adds	r0, #1
 8004d36:	f040 8090 	bne.w	8004e5a <_printf_float+0x1e2>
 8004d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3e:	b00d      	add	sp, #52	; 0x34
 8004d40:	ecbd 8b02 	vpop	{d8}
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	4642      	mov	r2, r8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	4649      	mov	r1, r9
 8004d50:	f7fb ff0c 	bl	8000b6c <__aeabi_dcmpun>
 8004d54:	b140      	cbz	r0, 8004d68 <_printf_float+0xf0>
 8004d56:	464b      	mov	r3, r9
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfbc      	itt	lt
 8004d5c:	232d      	movlt	r3, #45	; 0x2d
 8004d5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d62:	487f      	ldr	r0, [pc, #508]	; (8004f60 <_printf_float+0x2e8>)
 8004d64:	4b7f      	ldr	r3, [pc, #508]	; (8004f64 <_printf_float+0x2ec>)
 8004d66:	e7d1      	b.n	8004d0c <_printf_float+0x94>
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d6e:	9206      	str	r2, [sp, #24]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	d13f      	bne.n	8004df4 <_printf_float+0x17c>
 8004d74:	2306      	movs	r3, #6
 8004d76:	6063      	str	r3, [r4, #4]
 8004d78:	9b05      	ldr	r3, [sp, #20]
 8004d7a:	6861      	ldr	r1, [r4, #4]
 8004d7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d80:	2300      	movs	r3, #0
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	ab0a      	add	r3, sp, #40	; 0x28
 8004d86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d8a:	ab09      	add	r3, sp, #36	; 0x24
 8004d8c:	ec49 8b10 	vmov	d0, r8, r9
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f7ff fecd 	bl	8004b38 <__cvt>
 8004d9e:	9b06      	ldr	r3, [sp, #24]
 8004da0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004da2:	2b47      	cmp	r3, #71	; 0x47
 8004da4:	4680      	mov	r8, r0
 8004da6:	d108      	bne.n	8004dba <_printf_float+0x142>
 8004da8:	1cc8      	adds	r0, r1, #3
 8004daa:	db02      	blt.n	8004db2 <_printf_float+0x13a>
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	4299      	cmp	r1, r3
 8004db0:	dd41      	ble.n	8004e36 <_printf_float+0x1be>
 8004db2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004db6:	fa5f fb8b 	uxtb.w	fp, fp
 8004dba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dbe:	d820      	bhi.n	8004e02 <_printf_float+0x18a>
 8004dc0:	3901      	subs	r1, #1
 8004dc2:	465a      	mov	r2, fp
 8004dc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dc8:	9109      	str	r1, [sp, #36]	; 0x24
 8004dca:	f7ff ff17 	bl	8004bfc <__exponent>
 8004dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd0:	1813      	adds	r3, r2, r0
 8004dd2:	2a01      	cmp	r2, #1
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	dc02      	bgt.n	8004de0 <_printf_float+0x168>
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	07d2      	lsls	r2, r2, #31
 8004dde:	d501      	bpl.n	8004de4 <_printf_float+0x16c>
 8004de0:	3301      	adds	r3, #1
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d09c      	beq.n	8004d26 <_printf_float+0xae>
 8004dec:	232d      	movs	r3, #45	; 0x2d
 8004dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df2:	e798      	b.n	8004d26 <_printf_float+0xae>
 8004df4:	9a06      	ldr	r2, [sp, #24]
 8004df6:	2a47      	cmp	r2, #71	; 0x47
 8004df8:	d1be      	bne.n	8004d78 <_printf_float+0x100>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1bc      	bne.n	8004d78 <_printf_float+0x100>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e7b9      	b.n	8004d76 <_printf_float+0xfe>
 8004e02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e06:	d118      	bne.n	8004e3a <_printf_float+0x1c2>
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	6863      	ldr	r3, [r4, #4]
 8004e0c:	dd0b      	ble.n	8004e26 <_printf_float+0x1ae>
 8004e0e:	6121      	str	r1, [r4, #16]
 8004e10:	b913      	cbnz	r3, 8004e18 <_printf_float+0x1a0>
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	07d0      	lsls	r0, r2, #31
 8004e16:	d502      	bpl.n	8004e1e <_printf_float+0x1a6>
 8004e18:	3301      	adds	r3, #1
 8004e1a:	440b      	add	r3, r1
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e20:	f04f 0900 	mov.w	r9, #0
 8004e24:	e7de      	b.n	8004de4 <_printf_float+0x16c>
 8004e26:	b913      	cbnz	r3, 8004e2e <_printf_float+0x1b6>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	07d2      	lsls	r2, r2, #31
 8004e2c:	d501      	bpl.n	8004e32 <_printf_float+0x1ba>
 8004e2e:	3302      	adds	r3, #2
 8004e30:	e7f4      	b.n	8004e1c <_printf_float+0x1a4>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e7f2      	b.n	8004e1c <_printf_float+0x1a4>
 8004e36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	db05      	blt.n	8004e4c <_printf_float+0x1d4>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	6121      	str	r1, [r4, #16]
 8004e44:	07d8      	lsls	r0, r3, #31
 8004e46:	d5ea      	bpl.n	8004e1e <_printf_float+0x1a6>
 8004e48:	1c4b      	adds	r3, r1, #1
 8004e4a:	e7e7      	b.n	8004e1c <_printf_float+0x1a4>
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	bfd4      	ite	le
 8004e50:	f1c1 0202 	rsble	r2, r1, #2
 8004e54:	2201      	movgt	r2, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	e7e0      	b.n	8004e1c <_printf_float+0x1a4>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	055a      	lsls	r2, r3, #21
 8004e5e:	d407      	bmi.n	8004e70 <_printf_float+0x1f8>
 8004e60:	6923      	ldr	r3, [r4, #16]
 8004e62:	4642      	mov	r2, r8
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d12c      	bne.n	8004ec8 <_printf_float+0x250>
 8004e6e:	e764      	b.n	8004d3a <_printf_float+0xc2>
 8004e70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e74:	f240 80e0 	bls.w	8005038 <_printf_float+0x3c0>
 8004e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f7fb fe42 	bl	8000b08 <__aeabi_dcmpeq>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d034      	beq.n	8004ef2 <_printf_float+0x27a>
 8004e88:	4a37      	ldr	r2, [pc, #220]	; (8004f68 <_printf_float+0x2f0>)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b8      	blx	r7
 8004e92:	3001      	adds	r0, #1
 8004e94:	f43f af51 	beq.w	8004d3a <_printf_float+0xc2>
 8004e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	db02      	blt.n	8004ea6 <_printf_float+0x22e>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	07d8      	lsls	r0, r3, #31
 8004ea4:	d510      	bpl.n	8004ec8 <_printf_float+0x250>
 8004ea6:	ee18 3a10 	vmov	r3, s16
 8004eaa:	4652      	mov	r2, sl
 8004eac:	4631      	mov	r1, r6
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	f43f af41 	beq.w	8004d3a <_printf_float+0xc2>
 8004eb8:	f04f 0800 	mov.w	r8, #0
 8004ebc:	f104 091a 	add.w	r9, r4, #26
 8004ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	4543      	cmp	r3, r8
 8004ec6:	dc09      	bgt.n	8004edc <_printf_float+0x264>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	079b      	lsls	r3, r3, #30
 8004ecc:	f100 8105 	bmi.w	80050da <_printf_float+0x462>
 8004ed0:	68e0      	ldr	r0, [r4, #12]
 8004ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed4:	4298      	cmp	r0, r3
 8004ed6:	bfb8      	it	lt
 8004ed8:	4618      	movlt	r0, r3
 8004eda:	e730      	b.n	8004d3e <_printf_float+0xc6>
 8004edc:	2301      	movs	r3, #1
 8004ede:	464a      	mov	r2, r9
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b8      	blx	r7
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	f43f af27 	beq.w	8004d3a <_printf_float+0xc2>
 8004eec:	f108 0801 	add.w	r8, r8, #1
 8004ef0:	e7e6      	b.n	8004ec0 <_printf_float+0x248>
 8004ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dc39      	bgt.n	8004f6c <_printf_float+0x2f4>
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <_printf_float+0x2f0>)
 8004efa:	2301      	movs	r3, #1
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f af19 	beq.w	8004d3a <_printf_float+0xc2>
 8004f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	d102      	bne.n	8004f16 <_printf_float+0x29e>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	07d9      	lsls	r1, r3, #31
 8004f14:	d5d8      	bpl.n	8004ec8 <_printf_float+0x250>
 8004f16:	ee18 3a10 	vmov	r3, s16
 8004f1a:	4652      	mov	r2, sl
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af09 	beq.w	8004d3a <_printf_float+0xc2>
 8004f28:	f04f 0900 	mov.w	r9, #0
 8004f2c:	f104 0a1a 	add.w	sl, r4, #26
 8004f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f32:	425b      	negs	r3, r3
 8004f34:	454b      	cmp	r3, r9
 8004f36:	dc01      	bgt.n	8004f3c <_printf_float+0x2c4>
 8004f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f3a:	e792      	b.n	8004e62 <_printf_float+0x1ea>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4652      	mov	r2, sl
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f aef7 	beq.w	8004d3a <_printf_float+0xc2>
 8004f4c:	f109 0901 	add.w	r9, r9, #1
 8004f50:	e7ee      	b.n	8004f30 <_printf_float+0x2b8>
 8004f52:	bf00      	nop
 8004f54:	7fefffff 	.word	0x7fefffff
 8004f58:	08009428 	.word	0x08009428
 8004f5c:	0800942c 	.word	0x0800942c
 8004f60:	08009434 	.word	0x08009434
 8004f64:	08009430 	.word	0x08009430
 8004f68:	08009438 	.word	0x08009438
 8004f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bfa8      	it	ge
 8004f74:	461a      	movge	r2, r3
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	4691      	mov	r9, r2
 8004f7a:	dc37      	bgt.n	8004fec <_printf_float+0x374>
 8004f7c:	f04f 0b00 	mov.w	fp, #0
 8004f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f84:	f104 021a 	add.w	r2, r4, #26
 8004f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f8a:	9305      	str	r3, [sp, #20]
 8004f8c:	eba3 0309 	sub.w	r3, r3, r9
 8004f90:	455b      	cmp	r3, fp
 8004f92:	dc33      	bgt.n	8004ffc <_printf_float+0x384>
 8004f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	db3b      	blt.n	8005014 <_printf_float+0x39c>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	07da      	lsls	r2, r3, #31
 8004fa0:	d438      	bmi.n	8005014 <_printf_float+0x39c>
 8004fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa4:	9b05      	ldr	r3, [sp, #20]
 8004fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	eba2 0901 	sub.w	r9, r2, r1
 8004fae:	4599      	cmp	r9, r3
 8004fb0:	bfa8      	it	ge
 8004fb2:	4699      	movge	r9, r3
 8004fb4:	f1b9 0f00 	cmp.w	r9, #0
 8004fb8:	dc35      	bgt.n	8005026 <_printf_float+0x3ae>
 8004fba:	f04f 0800 	mov.w	r8, #0
 8004fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fc2:	f104 0a1a 	add.w	sl, r4, #26
 8004fc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	eba3 0309 	sub.w	r3, r3, r9
 8004fd0:	4543      	cmp	r3, r8
 8004fd2:	f77f af79 	ble.w	8004ec8 <_printf_float+0x250>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4652      	mov	r2, sl
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f aeaa 	beq.w	8004d3a <_printf_float+0xc2>
 8004fe6:	f108 0801 	add.w	r8, r8, #1
 8004fea:	e7ec      	b.n	8004fc6 <_printf_float+0x34e>
 8004fec:	4613      	mov	r3, r2
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d1c0      	bne.n	8004f7c <_printf_float+0x304>
 8004ffa:	e69e      	b.n	8004d3a <_printf_float+0xc2>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	9205      	str	r2, [sp, #20]
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f ae97 	beq.w	8004d3a <_printf_float+0xc2>
 800500c:	9a05      	ldr	r2, [sp, #20]
 800500e:	f10b 0b01 	add.w	fp, fp, #1
 8005012:	e7b9      	b.n	8004f88 <_printf_float+0x310>
 8005014:	ee18 3a10 	vmov	r3, s16
 8005018:	4652      	mov	r2, sl
 800501a:	4631      	mov	r1, r6
 800501c:	4628      	mov	r0, r5
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	d1be      	bne.n	8004fa2 <_printf_float+0x32a>
 8005024:	e689      	b.n	8004d3a <_printf_float+0xc2>
 8005026:	9a05      	ldr	r2, [sp, #20]
 8005028:	464b      	mov	r3, r9
 800502a:	4442      	add	r2, r8
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	d1c1      	bne.n	8004fba <_printf_float+0x342>
 8005036:	e680      	b.n	8004d3a <_printf_float+0xc2>
 8005038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800503a:	2a01      	cmp	r2, #1
 800503c:	dc01      	bgt.n	8005042 <_printf_float+0x3ca>
 800503e:	07db      	lsls	r3, r3, #31
 8005040:	d538      	bpl.n	80050b4 <_printf_float+0x43c>
 8005042:	2301      	movs	r3, #1
 8005044:	4642      	mov	r2, r8
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	f43f ae74 	beq.w	8004d3a <_printf_float+0xc2>
 8005052:	ee18 3a10 	vmov	r3, s16
 8005056:	4652      	mov	r2, sl
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f ae6b 	beq.w	8004d3a <_printf_float+0xc2>
 8005064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005068:	2200      	movs	r2, #0
 800506a:	2300      	movs	r3, #0
 800506c:	f7fb fd4c 	bl	8000b08 <__aeabi_dcmpeq>
 8005070:	b9d8      	cbnz	r0, 80050aa <_printf_float+0x432>
 8005072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005074:	f108 0201 	add.w	r2, r8, #1
 8005078:	3b01      	subs	r3, #1
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	d10e      	bne.n	80050a2 <_printf_float+0x42a>
 8005084:	e659      	b.n	8004d3a <_printf_float+0xc2>
 8005086:	2301      	movs	r3, #1
 8005088:	4652      	mov	r2, sl
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f ae52 	beq.w	8004d3a <_printf_float+0xc2>
 8005096:	f108 0801 	add.w	r8, r8, #1
 800509a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509c:	3b01      	subs	r3, #1
 800509e:	4543      	cmp	r3, r8
 80050a0:	dcf1      	bgt.n	8005086 <_printf_float+0x40e>
 80050a2:	464b      	mov	r3, r9
 80050a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050a8:	e6dc      	b.n	8004e64 <_printf_float+0x1ec>
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	f104 0a1a 	add.w	sl, r4, #26
 80050b2:	e7f2      	b.n	800509a <_printf_float+0x422>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4642      	mov	r2, r8
 80050b8:	e7df      	b.n	800507a <_printf_float+0x402>
 80050ba:	2301      	movs	r3, #1
 80050bc:	464a      	mov	r2, r9
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f ae38 	beq.w	8004d3a <_printf_float+0xc2>
 80050ca:	f108 0801 	add.w	r8, r8, #1
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050d2:	1a5b      	subs	r3, r3, r1
 80050d4:	4543      	cmp	r3, r8
 80050d6:	dcf0      	bgt.n	80050ba <_printf_float+0x442>
 80050d8:	e6fa      	b.n	8004ed0 <_printf_float+0x258>
 80050da:	f04f 0800 	mov.w	r8, #0
 80050de:	f104 0919 	add.w	r9, r4, #25
 80050e2:	e7f4      	b.n	80050ce <_printf_float+0x456>

080050e4 <_printf_common>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	4616      	mov	r6, r2
 80050ea:	4699      	mov	r9, r3
 80050ec:	688a      	ldr	r2, [r1, #8]
 80050ee:	690b      	ldr	r3, [r1, #16]
 80050f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bfb8      	it	lt
 80050f8:	4613      	movlt	r3, r2
 80050fa:	6033      	str	r3, [r6, #0]
 80050fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005100:	4607      	mov	r7, r0
 8005102:	460c      	mov	r4, r1
 8005104:	b10a      	cbz	r2, 800510a <_printf_common+0x26>
 8005106:	3301      	adds	r3, #1
 8005108:	6033      	str	r3, [r6, #0]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	0699      	lsls	r1, r3, #26
 800510e:	bf42      	ittt	mi
 8005110:	6833      	ldrmi	r3, [r6, #0]
 8005112:	3302      	addmi	r3, #2
 8005114:	6033      	strmi	r3, [r6, #0]
 8005116:	6825      	ldr	r5, [r4, #0]
 8005118:	f015 0506 	ands.w	r5, r5, #6
 800511c:	d106      	bne.n	800512c <_printf_common+0x48>
 800511e:	f104 0a19 	add.w	sl, r4, #25
 8005122:	68e3      	ldr	r3, [r4, #12]
 8005124:	6832      	ldr	r2, [r6, #0]
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	42ab      	cmp	r3, r5
 800512a:	dc26      	bgt.n	800517a <_printf_common+0x96>
 800512c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005130:	1e13      	subs	r3, r2, #0
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	bf18      	it	ne
 8005136:	2301      	movne	r3, #1
 8005138:	0692      	lsls	r2, r2, #26
 800513a:	d42b      	bmi.n	8005194 <_printf_common+0xb0>
 800513c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005140:	4649      	mov	r1, r9
 8005142:	4638      	mov	r0, r7
 8005144:	47c0      	blx	r8
 8005146:	3001      	adds	r0, #1
 8005148:	d01e      	beq.n	8005188 <_printf_common+0xa4>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	68e5      	ldr	r5, [r4, #12]
 800514e:	6832      	ldr	r2, [r6, #0]
 8005150:	f003 0306 	and.w	r3, r3, #6
 8005154:	2b04      	cmp	r3, #4
 8005156:	bf08      	it	eq
 8005158:	1aad      	subeq	r5, r5, r2
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	bf0c      	ite	eq
 8005160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005164:	2500      	movne	r5, #0
 8005166:	4293      	cmp	r3, r2
 8005168:	bfc4      	itt	gt
 800516a:	1a9b      	subgt	r3, r3, r2
 800516c:	18ed      	addgt	r5, r5, r3
 800516e:	2600      	movs	r6, #0
 8005170:	341a      	adds	r4, #26
 8005172:	42b5      	cmp	r5, r6
 8005174:	d11a      	bne.n	80051ac <_printf_common+0xc8>
 8005176:	2000      	movs	r0, #0
 8005178:	e008      	b.n	800518c <_printf_common+0xa8>
 800517a:	2301      	movs	r3, #1
 800517c:	4652      	mov	r2, sl
 800517e:	4649      	mov	r1, r9
 8005180:	4638      	mov	r0, r7
 8005182:	47c0      	blx	r8
 8005184:	3001      	adds	r0, #1
 8005186:	d103      	bne.n	8005190 <_printf_common+0xac>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005190:	3501      	adds	r5, #1
 8005192:	e7c6      	b.n	8005122 <_printf_common+0x3e>
 8005194:	18e1      	adds	r1, r4, r3
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	2030      	movs	r0, #48	; 0x30
 800519a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800519e:	4422      	add	r2, r4
 80051a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051a8:	3302      	adds	r3, #2
 80051aa:	e7c7      	b.n	800513c <_printf_common+0x58>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4622      	mov	r2, r4
 80051b0:	4649      	mov	r1, r9
 80051b2:	4638      	mov	r0, r7
 80051b4:	47c0      	blx	r8
 80051b6:	3001      	adds	r0, #1
 80051b8:	d0e6      	beq.n	8005188 <_printf_common+0xa4>
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7d9      	b.n	8005172 <_printf_common+0x8e>
	...

080051c0 <_printf_i>:
 80051c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	460c      	mov	r4, r1
 80051c6:	4691      	mov	r9, r2
 80051c8:	7e27      	ldrb	r7, [r4, #24]
 80051ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051cc:	2f78      	cmp	r7, #120	; 0x78
 80051ce:	4680      	mov	r8, r0
 80051d0:	469a      	mov	sl, r3
 80051d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d6:	d807      	bhi.n	80051e8 <_printf_i+0x28>
 80051d8:	2f62      	cmp	r7, #98	; 0x62
 80051da:	d80a      	bhi.n	80051f2 <_printf_i+0x32>
 80051dc:	2f00      	cmp	r7, #0
 80051de:	f000 80d8 	beq.w	8005392 <_printf_i+0x1d2>
 80051e2:	2f58      	cmp	r7, #88	; 0x58
 80051e4:	f000 80a3 	beq.w	800532e <_printf_i+0x16e>
 80051e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051f0:	e03a      	b.n	8005268 <_printf_i+0xa8>
 80051f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051f6:	2b15      	cmp	r3, #21
 80051f8:	d8f6      	bhi.n	80051e8 <_printf_i+0x28>
 80051fa:	a001      	add	r0, pc, #4	; (adr r0, 8005200 <_printf_i+0x40>)
 80051fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005200:	08005259 	.word	0x08005259
 8005204:	0800526d 	.word	0x0800526d
 8005208:	080051e9 	.word	0x080051e9
 800520c:	080051e9 	.word	0x080051e9
 8005210:	080051e9 	.word	0x080051e9
 8005214:	080051e9 	.word	0x080051e9
 8005218:	0800526d 	.word	0x0800526d
 800521c:	080051e9 	.word	0x080051e9
 8005220:	080051e9 	.word	0x080051e9
 8005224:	080051e9 	.word	0x080051e9
 8005228:	080051e9 	.word	0x080051e9
 800522c:	08005379 	.word	0x08005379
 8005230:	0800529d 	.word	0x0800529d
 8005234:	0800535b 	.word	0x0800535b
 8005238:	080051e9 	.word	0x080051e9
 800523c:	080051e9 	.word	0x080051e9
 8005240:	0800539b 	.word	0x0800539b
 8005244:	080051e9 	.word	0x080051e9
 8005248:	0800529d 	.word	0x0800529d
 800524c:	080051e9 	.word	0x080051e9
 8005250:	080051e9 	.word	0x080051e9
 8005254:	08005363 	.word	0x08005363
 8005258:	680b      	ldr	r3, [r1, #0]
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	600a      	str	r2, [r1, #0]
 8005260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005268:	2301      	movs	r3, #1
 800526a:	e0a3      	b.n	80053b4 <_printf_i+0x1f4>
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	6808      	ldr	r0, [r1, #0]
 8005270:	062e      	lsls	r6, r5, #24
 8005272:	f100 0304 	add.w	r3, r0, #4
 8005276:	d50a      	bpl.n	800528e <_printf_i+0xce>
 8005278:	6805      	ldr	r5, [r0, #0]
 800527a:	600b      	str	r3, [r1, #0]
 800527c:	2d00      	cmp	r5, #0
 800527e:	da03      	bge.n	8005288 <_printf_i+0xc8>
 8005280:	232d      	movs	r3, #45	; 0x2d
 8005282:	426d      	negs	r5, r5
 8005284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005288:	485e      	ldr	r0, [pc, #376]	; (8005404 <_printf_i+0x244>)
 800528a:	230a      	movs	r3, #10
 800528c:	e019      	b.n	80052c2 <_printf_i+0x102>
 800528e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005292:	6805      	ldr	r5, [r0, #0]
 8005294:	600b      	str	r3, [r1, #0]
 8005296:	bf18      	it	ne
 8005298:	b22d      	sxthne	r5, r5
 800529a:	e7ef      	b.n	800527c <_printf_i+0xbc>
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	6825      	ldr	r5, [r4, #0]
 80052a0:	1d18      	adds	r0, r3, #4
 80052a2:	6008      	str	r0, [r1, #0]
 80052a4:	0628      	lsls	r0, r5, #24
 80052a6:	d501      	bpl.n	80052ac <_printf_i+0xec>
 80052a8:	681d      	ldr	r5, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <_printf_i+0xf2>
 80052ac:	0669      	lsls	r1, r5, #25
 80052ae:	d5fb      	bpl.n	80052a8 <_printf_i+0xe8>
 80052b0:	881d      	ldrh	r5, [r3, #0]
 80052b2:	4854      	ldr	r0, [pc, #336]	; (8005404 <_printf_i+0x244>)
 80052b4:	2f6f      	cmp	r7, #111	; 0x6f
 80052b6:	bf0c      	ite	eq
 80052b8:	2308      	moveq	r3, #8
 80052ba:	230a      	movne	r3, #10
 80052bc:	2100      	movs	r1, #0
 80052be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052c2:	6866      	ldr	r6, [r4, #4]
 80052c4:	60a6      	str	r6, [r4, #8]
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	bfa2      	ittt	ge
 80052ca:	6821      	ldrge	r1, [r4, #0]
 80052cc:	f021 0104 	bicge.w	r1, r1, #4
 80052d0:	6021      	strge	r1, [r4, #0]
 80052d2:	b90d      	cbnz	r5, 80052d8 <_printf_i+0x118>
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	d04d      	beq.n	8005374 <_printf_i+0x1b4>
 80052d8:	4616      	mov	r6, r2
 80052da:	fbb5 f1f3 	udiv	r1, r5, r3
 80052de:	fb03 5711 	mls	r7, r3, r1, r5
 80052e2:	5dc7      	ldrb	r7, [r0, r7]
 80052e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052e8:	462f      	mov	r7, r5
 80052ea:	42bb      	cmp	r3, r7
 80052ec:	460d      	mov	r5, r1
 80052ee:	d9f4      	bls.n	80052da <_printf_i+0x11a>
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d10b      	bne.n	800530c <_printf_i+0x14c>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	07df      	lsls	r7, r3, #31
 80052f8:	d508      	bpl.n	800530c <_printf_i+0x14c>
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	6861      	ldr	r1, [r4, #4]
 80052fe:	4299      	cmp	r1, r3
 8005300:	bfde      	ittt	le
 8005302:	2330      	movle	r3, #48	; 0x30
 8005304:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005308:	f106 36ff 	addle.w	r6, r6, #4294967295
 800530c:	1b92      	subs	r2, r2, r6
 800530e:	6122      	str	r2, [r4, #16]
 8005310:	f8cd a000 	str.w	sl, [sp]
 8005314:	464b      	mov	r3, r9
 8005316:	aa03      	add	r2, sp, #12
 8005318:	4621      	mov	r1, r4
 800531a:	4640      	mov	r0, r8
 800531c:	f7ff fee2 	bl	80050e4 <_printf_common>
 8005320:	3001      	adds	r0, #1
 8005322:	d14c      	bne.n	80053be <_printf_i+0x1fe>
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	b004      	add	sp, #16
 800532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532e:	4835      	ldr	r0, [pc, #212]	; (8005404 <_printf_i+0x244>)
 8005330:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	680e      	ldr	r6, [r1, #0]
 8005338:	061f      	lsls	r7, r3, #24
 800533a:	f856 5b04 	ldr.w	r5, [r6], #4
 800533e:	600e      	str	r6, [r1, #0]
 8005340:	d514      	bpl.n	800536c <_printf_i+0x1ac>
 8005342:	07d9      	lsls	r1, r3, #31
 8005344:	bf44      	itt	mi
 8005346:	f043 0320 	orrmi.w	r3, r3, #32
 800534a:	6023      	strmi	r3, [r4, #0]
 800534c:	b91d      	cbnz	r5, 8005356 <_printf_i+0x196>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f023 0320 	bic.w	r3, r3, #32
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	2310      	movs	r3, #16
 8005358:	e7b0      	b.n	80052bc <_printf_i+0xfc>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	f043 0320 	orr.w	r3, r3, #32
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	2378      	movs	r3, #120	; 0x78
 8005364:	4828      	ldr	r0, [pc, #160]	; (8005408 <_printf_i+0x248>)
 8005366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800536a:	e7e3      	b.n	8005334 <_printf_i+0x174>
 800536c:	065e      	lsls	r6, r3, #25
 800536e:	bf48      	it	mi
 8005370:	b2ad      	uxthmi	r5, r5
 8005372:	e7e6      	b.n	8005342 <_printf_i+0x182>
 8005374:	4616      	mov	r6, r2
 8005376:	e7bb      	b.n	80052f0 <_printf_i+0x130>
 8005378:	680b      	ldr	r3, [r1, #0]
 800537a:	6826      	ldr	r6, [r4, #0]
 800537c:	6960      	ldr	r0, [r4, #20]
 800537e:	1d1d      	adds	r5, r3, #4
 8005380:	600d      	str	r5, [r1, #0]
 8005382:	0635      	lsls	r5, r6, #24
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	d501      	bpl.n	800538c <_printf_i+0x1cc>
 8005388:	6018      	str	r0, [r3, #0]
 800538a:	e002      	b.n	8005392 <_printf_i+0x1d2>
 800538c:	0671      	lsls	r1, r6, #25
 800538e:	d5fb      	bpl.n	8005388 <_printf_i+0x1c8>
 8005390:	8018      	strh	r0, [r3, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	6123      	str	r3, [r4, #16]
 8005396:	4616      	mov	r6, r2
 8005398:	e7ba      	b.n	8005310 <_printf_i+0x150>
 800539a:	680b      	ldr	r3, [r1, #0]
 800539c:	1d1a      	adds	r2, r3, #4
 800539e:	600a      	str	r2, [r1, #0]
 80053a0:	681e      	ldr	r6, [r3, #0]
 80053a2:	6862      	ldr	r2, [r4, #4]
 80053a4:	2100      	movs	r1, #0
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7fa ff3a 	bl	8000220 <memchr>
 80053ac:	b108      	cbz	r0, 80053b2 <_printf_i+0x1f2>
 80053ae:	1b80      	subs	r0, r0, r6
 80053b0:	6060      	str	r0, [r4, #4]
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	2300      	movs	r3, #0
 80053b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053bc:	e7a8      	b.n	8005310 <_printf_i+0x150>
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	4632      	mov	r2, r6
 80053c2:	4649      	mov	r1, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	47d0      	blx	sl
 80053c8:	3001      	adds	r0, #1
 80053ca:	d0ab      	beq.n	8005324 <_printf_i+0x164>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	079b      	lsls	r3, r3, #30
 80053d0:	d413      	bmi.n	80053fa <_printf_i+0x23a>
 80053d2:	68e0      	ldr	r0, [r4, #12]
 80053d4:	9b03      	ldr	r3, [sp, #12]
 80053d6:	4298      	cmp	r0, r3
 80053d8:	bfb8      	it	lt
 80053da:	4618      	movlt	r0, r3
 80053dc:	e7a4      	b.n	8005328 <_printf_i+0x168>
 80053de:	2301      	movs	r3, #1
 80053e0:	4632      	mov	r2, r6
 80053e2:	4649      	mov	r1, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	47d0      	blx	sl
 80053e8:	3001      	adds	r0, #1
 80053ea:	d09b      	beq.n	8005324 <_printf_i+0x164>
 80053ec:	3501      	adds	r5, #1
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	9903      	ldr	r1, [sp, #12]
 80053f2:	1a5b      	subs	r3, r3, r1
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	dcf2      	bgt.n	80053de <_printf_i+0x21e>
 80053f8:	e7eb      	b.n	80053d2 <_printf_i+0x212>
 80053fa:	2500      	movs	r5, #0
 80053fc:	f104 0619 	add.w	r6, r4, #25
 8005400:	e7f5      	b.n	80053ee <_printf_i+0x22e>
 8005402:	bf00      	nop
 8005404:	0800943a 	.word	0x0800943a
 8005408:	0800944b 	.word	0x0800944b

0800540c <_scanf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	b087      	sub	sp, #28
 8005412:	4617      	mov	r7, r2
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	688b      	ldr	r3, [r1, #8]
 8005418:	1e5a      	subs	r2, r3, #1
 800541a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800541e:	bf83      	ittte	hi
 8005420:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005424:	195b      	addhi	r3, r3, r5
 8005426:	9302      	strhi	r3, [sp, #8]
 8005428:	2300      	movls	r3, #0
 800542a:	bf86      	itte	hi
 800542c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005430:	608b      	strhi	r3, [r1, #8]
 8005432:	9302      	strls	r3, [sp, #8]
 8005434:	680b      	ldr	r3, [r1, #0]
 8005436:	468b      	mov	fp, r1
 8005438:	2500      	movs	r5, #0
 800543a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800543e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005442:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005446:	4680      	mov	r8, r0
 8005448:	460c      	mov	r4, r1
 800544a:	465e      	mov	r6, fp
 800544c:	46aa      	mov	sl, r5
 800544e:	46a9      	mov	r9, r5
 8005450:	9501      	str	r5, [sp, #4]
 8005452:	68a2      	ldr	r2, [r4, #8]
 8005454:	b152      	cbz	r2, 800546c <_scanf_float+0x60>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b4e      	cmp	r3, #78	; 0x4e
 800545c:	d864      	bhi.n	8005528 <_scanf_float+0x11c>
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d83c      	bhi.n	80054dc <_scanf_float+0xd0>
 8005462:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005466:	b2c8      	uxtb	r0, r1
 8005468:	280e      	cmp	r0, #14
 800546a:	d93a      	bls.n	80054e2 <_scanf_float+0xd6>
 800546c:	f1b9 0f00 	cmp.w	r9, #0
 8005470:	d003      	beq.n	800547a <_scanf_float+0x6e>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800547e:	f1ba 0f01 	cmp.w	sl, #1
 8005482:	f200 8113 	bhi.w	80056ac <_scanf_float+0x2a0>
 8005486:	455e      	cmp	r6, fp
 8005488:	f200 8105 	bhi.w	8005696 <_scanf_float+0x28a>
 800548c:	2501      	movs	r5, #1
 800548e:	4628      	mov	r0, r5
 8005490:	b007      	add	sp, #28
 8005492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005496:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800549a:	2a0d      	cmp	r2, #13
 800549c:	d8e6      	bhi.n	800546c <_scanf_float+0x60>
 800549e:	a101      	add	r1, pc, #4	; (adr r1, 80054a4 <_scanf_float+0x98>)
 80054a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054a4:	080055e3 	.word	0x080055e3
 80054a8:	0800546d 	.word	0x0800546d
 80054ac:	0800546d 	.word	0x0800546d
 80054b0:	0800546d 	.word	0x0800546d
 80054b4:	08005643 	.word	0x08005643
 80054b8:	0800561b 	.word	0x0800561b
 80054bc:	0800546d 	.word	0x0800546d
 80054c0:	0800546d 	.word	0x0800546d
 80054c4:	080055f1 	.word	0x080055f1
 80054c8:	0800546d 	.word	0x0800546d
 80054cc:	0800546d 	.word	0x0800546d
 80054d0:	0800546d 	.word	0x0800546d
 80054d4:	0800546d 	.word	0x0800546d
 80054d8:	080055a9 	.word	0x080055a9
 80054dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054e0:	e7db      	b.n	800549a <_scanf_float+0x8e>
 80054e2:	290e      	cmp	r1, #14
 80054e4:	d8c2      	bhi.n	800546c <_scanf_float+0x60>
 80054e6:	a001      	add	r0, pc, #4	; (adr r0, 80054ec <_scanf_float+0xe0>)
 80054e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054ec:	0800559b 	.word	0x0800559b
 80054f0:	0800546d 	.word	0x0800546d
 80054f4:	0800559b 	.word	0x0800559b
 80054f8:	0800562f 	.word	0x0800562f
 80054fc:	0800546d 	.word	0x0800546d
 8005500:	08005549 	.word	0x08005549
 8005504:	08005585 	.word	0x08005585
 8005508:	08005585 	.word	0x08005585
 800550c:	08005585 	.word	0x08005585
 8005510:	08005585 	.word	0x08005585
 8005514:	08005585 	.word	0x08005585
 8005518:	08005585 	.word	0x08005585
 800551c:	08005585 	.word	0x08005585
 8005520:	08005585 	.word	0x08005585
 8005524:	08005585 	.word	0x08005585
 8005528:	2b6e      	cmp	r3, #110	; 0x6e
 800552a:	d809      	bhi.n	8005540 <_scanf_float+0x134>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d8b2      	bhi.n	8005496 <_scanf_float+0x8a>
 8005530:	2b54      	cmp	r3, #84	; 0x54
 8005532:	d077      	beq.n	8005624 <_scanf_float+0x218>
 8005534:	2b59      	cmp	r3, #89	; 0x59
 8005536:	d199      	bne.n	800546c <_scanf_float+0x60>
 8005538:	2d07      	cmp	r5, #7
 800553a:	d197      	bne.n	800546c <_scanf_float+0x60>
 800553c:	2508      	movs	r5, #8
 800553e:	e029      	b.n	8005594 <_scanf_float+0x188>
 8005540:	2b74      	cmp	r3, #116	; 0x74
 8005542:	d06f      	beq.n	8005624 <_scanf_float+0x218>
 8005544:	2b79      	cmp	r3, #121	; 0x79
 8005546:	e7f6      	b.n	8005536 <_scanf_float+0x12a>
 8005548:	6821      	ldr	r1, [r4, #0]
 800554a:	05c8      	lsls	r0, r1, #23
 800554c:	d51a      	bpl.n	8005584 <_scanf_float+0x178>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005554:	6021      	str	r1, [r4, #0]
 8005556:	f109 0901 	add.w	r9, r9, #1
 800555a:	b11b      	cbz	r3, 8005564 <_scanf_float+0x158>
 800555c:	3b01      	subs	r3, #1
 800555e:	3201      	adds	r2, #1
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	60a2      	str	r2, [r4, #8]
 8005564:	68a3      	ldr	r3, [r4, #8]
 8005566:	3b01      	subs	r3, #1
 8005568:	60a3      	str	r3, [r4, #8]
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	3301      	adds	r3, #1
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3b01      	subs	r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	f340 8084 	ble.w	8005684 <_scanf_float+0x278>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	e766      	b.n	8005452 <_scanf_float+0x46>
 8005584:	eb1a 0f05 	cmn.w	sl, r5
 8005588:	f47f af70 	bne.w	800546c <_scanf_float+0x60>
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	f806 3b01 	strb.w	r3, [r6], #1
 8005598:	e7e4      	b.n	8005564 <_scanf_float+0x158>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	0610      	lsls	r0, r2, #24
 800559e:	f57f af65 	bpl.w	800546c <_scanf_float+0x60>
 80055a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a6:	e7f4      	b.n	8005592 <_scanf_float+0x186>
 80055a8:	f1ba 0f00 	cmp.w	sl, #0
 80055ac:	d10e      	bne.n	80055cc <_scanf_float+0x1c0>
 80055ae:	f1b9 0f00 	cmp.w	r9, #0
 80055b2:	d10e      	bne.n	80055d2 <_scanf_float+0x1c6>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055be:	d108      	bne.n	80055d2 <_scanf_float+0x1c6>
 80055c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055c4:	6022      	str	r2, [r4, #0]
 80055c6:	f04f 0a01 	mov.w	sl, #1
 80055ca:	e7e3      	b.n	8005594 <_scanf_float+0x188>
 80055cc:	f1ba 0f02 	cmp.w	sl, #2
 80055d0:	d055      	beq.n	800567e <_scanf_float+0x272>
 80055d2:	2d01      	cmp	r5, #1
 80055d4:	d002      	beq.n	80055dc <_scanf_float+0x1d0>
 80055d6:	2d04      	cmp	r5, #4
 80055d8:	f47f af48 	bne.w	800546c <_scanf_float+0x60>
 80055dc:	3501      	adds	r5, #1
 80055de:	b2ed      	uxtb	r5, r5
 80055e0:	e7d8      	b.n	8005594 <_scanf_float+0x188>
 80055e2:	f1ba 0f01 	cmp.w	sl, #1
 80055e6:	f47f af41 	bne.w	800546c <_scanf_float+0x60>
 80055ea:	f04f 0a02 	mov.w	sl, #2
 80055ee:	e7d1      	b.n	8005594 <_scanf_float+0x188>
 80055f0:	b97d      	cbnz	r5, 8005612 <_scanf_float+0x206>
 80055f2:	f1b9 0f00 	cmp.w	r9, #0
 80055f6:	f47f af3c 	bne.w	8005472 <_scanf_float+0x66>
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005600:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005604:	f47f af39 	bne.w	800547a <_scanf_float+0x6e>
 8005608:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800560c:	6022      	str	r2, [r4, #0]
 800560e:	2501      	movs	r5, #1
 8005610:	e7c0      	b.n	8005594 <_scanf_float+0x188>
 8005612:	2d03      	cmp	r5, #3
 8005614:	d0e2      	beq.n	80055dc <_scanf_float+0x1d0>
 8005616:	2d05      	cmp	r5, #5
 8005618:	e7de      	b.n	80055d8 <_scanf_float+0x1cc>
 800561a:	2d02      	cmp	r5, #2
 800561c:	f47f af26 	bne.w	800546c <_scanf_float+0x60>
 8005620:	2503      	movs	r5, #3
 8005622:	e7b7      	b.n	8005594 <_scanf_float+0x188>
 8005624:	2d06      	cmp	r5, #6
 8005626:	f47f af21 	bne.w	800546c <_scanf_float+0x60>
 800562a:	2507      	movs	r5, #7
 800562c:	e7b2      	b.n	8005594 <_scanf_float+0x188>
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	0591      	lsls	r1, r2, #22
 8005632:	f57f af1b 	bpl.w	800546c <_scanf_float+0x60>
 8005636:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800563a:	6022      	str	r2, [r4, #0]
 800563c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005640:	e7a8      	b.n	8005594 <_scanf_float+0x188>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005648:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800564c:	d006      	beq.n	800565c <_scanf_float+0x250>
 800564e:	0550      	lsls	r0, r2, #21
 8005650:	f57f af0c 	bpl.w	800546c <_scanf_float+0x60>
 8005654:	f1b9 0f00 	cmp.w	r9, #0
 8005658:	f43f af0f 	beq.w	800547a <_scanf_float+0x6e>
 800565c:	0591      	lsls	r1, r2, #22
 800565e:	bf58      	it	pl
 8005660:	9901      	ldrpl	r1, [sp, #4]
 8005662:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005666:	bf58      	it	pl
 8005668:	eba9 0101 	subpl.w	r1, r9, r1
 800566c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005670:	bf58      	it	pl
 8005672:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005676:	6022      	str	r2, [r4, #0]
 8005678:	f04f 0900 	mov.w	r9, #0
 800567c:	e78a      	b.n	8005594 <_scanf_float+0x188>
 800567e:	f04f 0a03 	mov.w	sl, #3
 8005682:	e787      	b.n	8005594 <_scanf_float+0x188>
 8005684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005688:	4639      	mov	r1, r7
 800568a:	4640      	mov	r0, r8
 800568c:	4798      	blx	r3
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f aedf 	beq.w	8005452 <_scanf_float+0x46>
 8005694:	e6ea      	b.n	800546c <_scanf_float+0x60>
 8005696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800569a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800569e:	463a      	mov	r2, r7
 80056a0:	4640      	mov	r0, r8
 80056a2:	4798      	blx	r3
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	e6ec      	b.n	8005486 <_scanf_float+0x7a>
 80056ac:	1e6b      	subs	r3, r5, #1
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d825      	bhi.n	80056fe <_scanf_float+0x2f2>
 80056b2:	2d02      	cmp	r5, #2
 80056b4:	d836      	bhi.n	8005724 <_scanf_float+0x318>
 80056b6:	455e      	cmp	r6, fp
 80056b8:	f67f aee8 	bls.w	800548c <_scanf_float+0x80>
 80056bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056c4:	463a      	mov	r2, r7
 80056c6:	4640      	mov	r0, r8
 80056c8:	4798      	blx	r3
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	e7f1      	b.n	80056b6 <_scanf_float+0x2aa>
 80056d2:	9802      	ldr	r0, [sp, #8]
 80056d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056dc:	9002      	str	r0, [sp, #8]
 80056de:	463a      	mov	r2, r7
 80056e0:	4640      	mov	r0, r8
 80056e2:	4798      	blx	r3
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ee:	fa5f fa8a 	uxtb.w	sl, sl
 80056f2:	f1ba 0f02 	cmp.w	sl, #2
 80056f6:	d1ec      	bne.n	80056d2 <_scanf_float+0x2c6>
 80056f8:	3d03      	subs	r5, #3
 80056fa:	b2ed      	uxtb	r5, r5
 80056fc:	1b76      	subs	r6, r6, r5
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	05da      	lsls	r2, r3, #23
 8005702:	d52f      	bpl.n	8005764 <_scanf_float+0x358>
 8005704:	055b      	lsls	r3, r3, #21
 8005706:	d510      	bpl.n	800572a <_scanf_float+0x31e>
 8005708:	455e      	cmp	r6, fp
 800570a:	f67f aebf 	bls.w	800548c <_scanf_float+0x80>
 800570e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005716:	463a      	mov	r2, r7
 8005718:	4640      	mov	r0, r8
 800571a:	4798      	blx	r3
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	3b01      	subs	r3, #1
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	e7f1      	b.n	8005708 <_scanf_float+0x2fc>
 8005724:	46aa      	mov	sl, r5
 8005726:	9602      	str	r6, [sp, #8]
 8005728:	e7df      	b.n	80056ea <_scanf_float+0x2de>
 800572a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	2965      	cmp	r1, #101	; 0x65
 8005732:	f103 33ff 	add.w	r3, r3, #4294967295
 8005736:	f106 35ff 	add.w	r5, r6, #4294967295
 800573a:	6123      	str	r3, [r4, #16]
 800573c:	d00c      	beq.n	8005758 <_scanf_float+0x34c>
 800573e:	2945      	cmp	r1, #69	; 0x45
 8005740:	d00a      	beq.n	8005758 <_scanf_float+0x34c>
 8005742:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005746:	463a      	mov	r2, r7
 8005748:	4640      	mov	r0, r8
 800574a:	4798      	blx	r3
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005752:	3b01      	subs	r3, #1
 8005754:	1eb5      	subs	r5, r6, #2
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800575c:	463a      	mov	r2, r7
 800575e:	4640      	mov	r0, r8
 8005760:	4798      	blx	r3
 8005762:	462e      	mov	r6, r5
 8005764:	6825      	ldr	r5, [r4, #0]
 8005766:	f015 0510 	ands.w	r5, r5, #16
 800576a:	d158      	bne.n	800581e <_scanf_float+0x412>
 800576c:	7035      	strb	r5, [r6, #0]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d11c      	bne.n	80057b4 <_scanf_float+0x3a8>
 800577a:	9b01      	ldr	r3, [sp, #4]
 800577c:	454b      	cmp	r3, r9
 800577e:	eba3 0209 	sub.w	r2, r3, r9
 8005782:	d124      	bne.n	80057ce <_scanf_float+0x3c2>
 8005784:	2200      	movs	r2, #0
 8005786:	4659      	mov	r1, fp
 8005788:	4640      	mov	r0, r8
 800578a:	f000 fe9b 	bl	80064c4 <_strtod_r>
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	6821      	ldr	r1, [r4, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f011 0f02 	tst.w	r1, #2
 8005798:	ec57 6b10 	vmov	r6, r7, d0
 800579c:	f103 0204 	add.w	r2, r3, #4
 80057a0:	d020      	beq.n	80057e4 <_scanf_float+0x3d8>
 80057a2:	9903      	ldr	r1, [sp, #12]
 80057a4:	600a      	str	r2, [r1, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	e9c3 6700 	strd	r6, r7, [r3]
 80057ac:	68e3      	ldr	r3, [r4, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60e3      	str	r3, [r4, #12]
 80057b2:	e66c      	b.n	800548e <_scanf_float+0x82>
 80057b4:	9b04      	ldr	r3, [sp, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0e4      	beq.n	8005784 <_scanf_float+0x378>
 80057ba:	9905      	ldr	r1, [sp, #20]
 80057bc:	230a      	movs	r3, #10
 80057be:	462a      	mov	r2, r5
 80057c0:	3101      	adds	r1, #1
 80057c2:	4640      	mov	r0, r8
 80057c4:	f000 ff08 	bl	80065d8 <_strtol_r>
 80057c8:	9b04      	ldr	r3, [sp, #16]
 80057ca:	9e05      	ldr	r6, [sp, #20]
 80057cc:	1ac2      	subs	r2, r0, r3
 80057ce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057d2:	429e      	cmp	r6, r3
 80057d4:	bf28      	it	cs
 80057d6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057da:	4912      	ldr	r1, [pc, #72]	; (8005824 <_scanf_float+0x418>)
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 f82b 	bl	8005838 <siprintf>
 80057e2:	e7cf      	b.n	8005784 <_scanf_float+0x378>
 80057e4:	f011 0f04 	tst.w	r1, #4
 80057e8:	9903      	ldr	r1, [sp, #12]
 80057ea:	600a      	str	r2, [r1, #0]
 80057ec:	d1db      	bne.n	80057a6 <_scanf_float+0x39a>
 80057ee:	f8d3 8000 	ldr.w	r8, [r3]
 80057f2:	ee10 2a10 	vmov	r2, s0
 80057f6:	ee10 0a10 	vmov	r0, s0
 80057fa:	463b      	mov	r3, r7
 80057fc:	4639      	mov	r1, r7
 80057fe:	f7fb f9b5 	bl	8000b6c <__aeabi_dcmpun>
 8005802:	b128      	cbz	r0, 8005810 <_scanf_float+0x404>
 8005804:	4808      	ldr	r0, [pc, #32]	; (8005828 <_scanf_float+0x41c>)
 8005806:	f000 f811 	bl	800582c <nanf>
 800580a:	ed88 0a00 	vstr	s0, [r8]
 800580e:	e7cd      	b.n	80057ac <_scanf_float+0x3a0>
 8005810:	4630      	mov	r0, r6
 8005812:	4639      	mov	r1, r7
 8005814:	f7fb fa08 	bl	8000c28 <__aeabi_d2f>
 8005818:	f8c8 0000 	str.w	r0, [r8]
 800581c:	e7c6      	b.n	80057ac <_scanf_float+0x3a0>
 800581e:	2500      	movs	r5, #0
 8005820:	e635      	b.n	800548e <_scanf_float+0x82>
 8005822:	bf00      	nop
 8005824:	0800945c 	.word	0x0800945c
 8005828:	08009878 	.word	0x08009878

0800582c <nanf>:
 800582c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005834 <nanf+0x8>
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	7fc00000 	.word	0x7fc00000

08005838 <siprintf>:
 8005838:	b40e      	push	{r1, r2, r3}
 800583a:	b500      	push	{lr}
 800583c:	b09c      	sub	sp, #112	; 0x70
 800583e:	ab1d      	add	r3, sp, #116	; 0x74
 8005840:	9002      	str	r0, [sp, #8]
 8005842:	9006      	str	r0, [sp, #24]
 8005844:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005848:	4809      	ldr	r0, [pc, #36]	; (8005870 <siprintf+0x38>)
 800584a:	9107      	str	r1, [sp, #28]
 800584c:	9104      	str	r1, [sp, #16]
 800584e:	4909      	ldr	r1, [pc, #36]	; (8005874 <siprintf+0x3c>)
 8005850:	f853 2b04 	ldr.w	r2, [r3], #4
 8005854:	9105      	str	r1, [sp, #20]
 8005856:	6800      	ldr	r0, [r0, #0]
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	a902      	add	r1, sp, #8
 800585c:	f002 fea4 	bl	80085a8 <_svfiprintf_r>
 8005860:	9b02      	ldr	r3, [sp, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	b01c      	add	sp, #112	; 0x70
 8005868:	f85d eb04 	ldr.w	lr, [sp], #4
 800586c:	b003      	add	sp, #12
 800586e:	4770      	bx	lr
 8005870:	20000020 	.word	0x20000020
 8005874:	ffff0208 	.word	0xffff0208

08005878 <sulp>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	460d      	mov	r5, r1
 800587e:	ec45 4b10 	vmov	d0, r4, r5
 8005882:	4616      	mov	r6, r2
 8005884:	f002 fc2c 	bl	80080e0 <__ulp>
 8005888:	ec51 0b10 	vmov	r0, r1, d0
 800588c:	b17e      	cbz	r6, 80058ae <sulp+0x36>
 800588e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005892:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005896:	2b00      	cmp	r3, #0
 8005898:	dd09      	ble.n	80058ae <sulp+0x36>
 800589a:	051b      	lsls	r3, r3, #20
 800589c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058a0:	2400      	movs	r4, #0
 80058a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	f7fa fec5 	bl	8000638 <__aeabi_dmul>
 80058ae:	bd70      	pop	{r4, r5, r6, pc}

080058b0 <_strtod_l>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	b0a3      	sub	sp, #140	; 0x8c
 80058b6:	461f      	mov	r7, r3
 80058b8:	2300      	movs	r3, #0
 80058ba:	931e      	str	r3, [sp, #120]	; 0x78
 80058bc:	4ba4      	ldr	r3, [pc, #656]	; (8005b50 <_strtod_l+0x2a0>)
 80058be:	9219      	str	r2, [sp, #100]	; 0x64
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	4604      	mov	r4, r0
 80058c6:	4618      	mov	r0, r3
 80058c8:	4688      	mov	r8, r1
 80058ca:	f7fa fca1 	bl	8000210 <strlen>
 80058ce:	f04f 0a00 	mov.w	sl, #0
 80058d2:	4605      	mov	r5, r0
 80058d4:	f04f 0b00 	mov.w	fp, #0
 80058d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80058dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	2a2b      	cmp	r2, #43	; 0x2b
 80058e2:	d04c      	beq.n	800597e <_strtod_l+0xce>
 80058e4:	d839      	bhi.n	800595a <_strtod_l+0xaa>
 80058e6:	2a0d      	cmp	r2, #13
 80058e8:	d832      	bhi.n	8005950 <_strtod_l+0xa0>
 80058ea:	2a08      	cmp	r2, #8
 80058ec:	d832      	bhi.n	8005954 <_strtod_l+0xa4>
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d03c      	beq.n	800596c <_strtod_l+0xbc>
 80058f2:	2300      	movs	r3, #0
 80058f4:	930e      	str	r3, [sp, #56]	; 0x38
 80058f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80058f8:	7833      	ldrb	r3, [r6, #0]
 80058fa:	2b30      	cmp	r3, #48	; 0x30
 80058fc:	f040 80b4 	bne.w	8005a68 <_strtod_l+0x1b8>
 8005900:	7873      	ldrb	r3, [r6, #1]
 8005902:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005906:	2b58      	cmp	r3, #88	; 0x58
 8005908:	d16c      	bne.n	80059e4 <_strtod_l+0x134>
 800590a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	ab1e      	add	r3, sp, #120	; 0x78
 8005910:	9702      	str	r7, [sp, #8]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4a8f      	ldr	r2, [pc, #572]	; (8005b54 <_strtod_l+0x2a4>)
 8005916:	ab1f      	add	r3, sp, #124	; 0x7c
 8005918:	a91d      	add	r1, sp, #116	; 0x74
 800591a:	4620      	mov	r0, r4
 800591c:	f001 fd40 	bl	80073a0 <__gethex>
 8005920:	f010 0707 	ands.w	r7, r0, #7
 8005924:	4605      	mov	r5, r0
 8005926:	d005      	beq.n	8005934 <_strtod_l+0x84>
 8005928:	2f06      	cmp	r7, #6
 800592a:	d12a      	bne.n	8005982 <_strtod_l+0xd2>
 800592c:	3601      	adds	r6, #1
 800592e:	2300      	movs	r3, #0
 8005930:	961d      	str	r6, [sp, #116]	; 0x74
 8005932:	930e      	str	r3, [sp, #56]	; 0x38
 8005934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 8596 	bne.w	8006468 <_strtod_l+0xbb8>
 800593c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800593e:	b1db      	cbz	r3, 8005978 <_strtod_l+0xc8>
 8005940:	4652      	mov	r2, sl
 8005942:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005946:	ec43 2b10 	vmov	d0, r2, r3
 800594a:	b023      	add	sp, #140	; 0x8c
 800594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005950:	2a20      	cmp	r2, #32
 8005952:	d1ce      	bne.n	80058f2 <_strtod_l+0x42>
 8005954:	3301      	adds	r3, #1
 8005956:	931d      	str	r3, [sp, #116]	; 0x74
 8005958:	e7c0      	b.n	80058dc <_strtod_l+0x2c>
 800595a:	2a2d      	cmp	r2, #45	; 0x2d
 800595c:	d1c9      	bne.n	80058f2 <_strtod_l+0x42>
 800595e:	2201      	movs	r2, #1
 8005960:	920e      	str	r2, [sp, #56]	; 0x38
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	921d      	str	r2, [sp, #116]	; 0x74
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1c4      	bne.n	80058f6 <_strtod_l+0x46>
 800596c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800596e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 8576 	bne.w	8006464 <_strtod_l+0xbb4>
 8005978:	4652      	mov	r2, sl
 800597a:	465b      	mov	r3, fp
 800597c:	e7e3      	b.n	8005946 <_strtod_l+0x96>
 800597e:	2200      	movs	r2, #0
 8005980:	e7ee      	b.n	8005960 <_strtod_l+0xb0>
 8005982:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005984:	b13a      	cbz	r2, 8005996 <_strtod_l+0xe6>
 8005986:	2135      	movs	r1, #53	; 0x35
 8005988:	a820      	add	r0, sp, #128	; 0x80
 800598a:	f002 fcb4 	bl	80082f6 <__copybits>
 800598e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005990:	4620      	mov	r0, r4
 8005992:	f002 f879 	bl	8007a88 <_Bfree>
 8005996:	3f01      	subs	r7, #1
 8005998:	2f05      	cmp	r7, #5
 800599a:	d807      	bhi.n	80059ac <_strtod_l+0xfc>
 800599c:	e8df f007 	tbb	[pc, r7]
 80059a0:	1d180b0e 	.word	0x1d180b0e
 80059a4:	030e      	.short	0x030e
 80059a6:	f04f 0b00 	mov.w	fp, #0
 80059aa:	46da      	mov	sl, fp
 80059ac:	0728      	lsls	r0, r5, #28
 80059ae:	d5c1      	bpl.n	8005934 <_strtod_l+0x84>
 80059b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80059b4:	e7be      	b.n	8005934 <_strtod_l+0x84>
 80059b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80059ba:	e7f7      	b.n	80059ac <_strtod_l+0xfc>
 80059bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80059c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80059c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059ce:	e7ed      	b.n	80059ac <_strtod_l+0xfc>
 80059d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005b58 <_strtod_l+0x2a8>
 80059d4:	f04f 0a00 	mov.w	sl, #0
 80059d8:	e7e8      	b.n	80059ac <_strtod_l+0xfc>
 80059da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80059de:	f04f 3aff 	mov.w	sl, #4294967295
 80059e2:	e7e3      	b.n	80059ac <_strtod_l+0xfc>
 80059e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	921d      	str	r2, [sp, #116]	; 0x74
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d0f9      	beq.n	80059e4 <_strtod_l+0x134>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d09f      	beq.n	8005934 <_strtod_l+0x84>
 80059f4:	2301      	movs	r3, #1
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005a00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a04:	464f      	mov	r7, r9
 8005a06:	220a      	movs	r2, #10
 8005a08:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005a0a:	7806      	ldrb	r6, [r0, #0]
 8005a0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a10:	b2d9      	uxtb	r1, r3
 8005a12:	2909      	cmp	r1, #9
 8005a14:	d92a      	bls.n	8005a6c <_strtod_l+0x1bc>
 8005a16:	9907      	ldr	r1, [sp, #28]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	f002 fedd 	bl	80087d8 <strncmp>
 8005a1e:	b398      	cbz	r0, 8005a88 <_strtod_l+0x1d8>
 8005a20:	2000      	movs	r0, #0
 8005a22:	4633      	mov	r3, r6
 8005a24:	463d      	mov	r5, r7
 8005a26:	9007      	str	r0, [sp, #28]
 8005a28:	4602      	mov	r2, r0
 8005a2a:	2b65      	cmp	r3, #101	; 0x65
 8005a2c:	d001      	beq.n	8005a32 <_strtod_l+0x182>
 8005a2e:	2b45      	cmp	r3, #69	; 0x45
 8005a30:	d118      	bne.n	8005a64 <_strtod_l+0x1b4>
 8005a32:	b91d      	cbnz	r5, 8005a3c <_strtod_l+0x18c>
 8005a34:	9b04      	ldr	r3, [sp, #16]
 8005a36:	4303      	orrs	r3, r0
 8005a38:	d098      	beq.n	800596c <_strtod_l+0xbc>
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005a40:	f108 0301 	add.w	r3, r8, #1
 8005a44:	931d      	str	r3, [sp, #116]	; 0x74
 8005a46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005a4a:	2b2b      	cmp	r3, #43	; 0x2b
 8005a4c:	d075      	beq.n	8005b3a <_strtod_l+0x28a>
 8005a4e:	2b2d      	cmp	r3, #45	; 0x2d
 8005a50:	d07b      	beq.n	8005b4a <_strtod_l+0x29a>
 8005a52:	f04f 0c00 	mov.w	ip, #0
 8005a56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a5a:	2909      	cmp	r1, #9
 8005a5c:	f240 8082 	bls.w	8005b64 <_strtod_l+0x2b4>
 8005a60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005a64:	2600      	movs	r6, #0
 8005a66:	e09d      	b.n	8005ba4 <_strtod_l+0x2f4>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e7c4      	b.n	80059f6 <_strtod_l+0x146>
 8005a6c:	2f08      	cmp	r7, #8
 8005a6e:	bfd8      	it	le
 8005a70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005a72:	f100 0001 	add.w	r0, r0, #1
 8005a76:	bfda      	itte	le
 8005a78:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8005a7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005a82:	3701      	adds	r7, #1
 8005a84:	901d      	str	r0, [sp, #116]	; 0x74
 8005a86:	e7bf      	b.n	8005a08 <_strtod_l+0x158>
 8005a88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a8a:	195a      	adds	r2, r3, r5
 8005a8c:	921d      	str	r2, [sp, #116]	; 0x74
 8005a8e:	5d5b      	ldrb	r3, [r3, r5]
 8005a90:	2f00      	cmp	r7, #0
 8005a92:	d037      	beq.n	8005b04 <_strtod_l+0x254>
 8005a94:	9007      	str	r0, [sp, #28]
 8005a96:	463d      	mov	r5, r7
 8005a98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005a9c:	2a09      	cmp	r2, #9
 8005a9e:	d912      	bls.n	8005ac6 <_strtod_l+0x216>
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	e7c2      	b.n	8005a2a <_strtod_l+0x17a>
 8005aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	921d      	str	r2, [sp, #116]	; 0x74
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	3001      	adds	r0, #1
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d0f8      	beq.n	8005aa4 <_strtod_l+0x1f4>
 8005ab2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005ab6:	2a08      	cmp	r2, #8
 8005ab8:	f200 84db 	bhi.w	8006472 <_strtod_l+0xbc2>
 8005abc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005abe:	9007      	str	r0, [sp, #28]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	920a      	str	r2, [sp, #40]	; 0x28
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	3b30      	subs	r3, #48	; 0x30
 8005ac8:	f100 0201 	add.w	r2, r0, #1
 8005acc:	d014      	beq.n	8005af8 <_strtod_l+0x248>
 8005ace:	9907      	ldr	r1, [sp, #28]
 8005ad0:	4411      	add	r1, r2
 8005ad2:	9107      	str	r1, [sp, #28]
 8005ad4:	462a      	mov	r2, r5
 8005ad6:	eb00 0e05 	add.w	lr, r0, r5
 8005ada:	210a      	movs	r1, #10
 8005adc:	4572      	cmp	r2, lr
 8005ade:	d113      	bne.n	8005b08 <_strtod_l+0x258>
 8005ae0:	182a      	adds	r2, r5, r0
 8005ae2:	2a08      	cmp	r2, #8
 8005ae4:	f105 0501 	add.w	r5, r5, #1
 8005ae8:	4405      	add	r5, r0
 8005aea:	dc1c      	bgt.n	8005b26 <_strtod_l+0x276>
 8005aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aee:	220a      	movs	r2, #10
 8005af0:	fb02 3301 	mla	r3, r2, r1, r3
 8005af4:	9309      	str	r3, [sp, #36]	; 0x24
 8005af6:	2200      	movs	r2, #0
 8005af8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	911d      	str	r1, [sp, #116]	; 0x74
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	4610      	mov	r0, r2
 8005b02:	e7c9      	b.n	8005a98 <_strtod_l+0x1e8>
 8005b04:	4638      	mov	r0, r7
 8005b06:	e7d2      	b.n	8005aae <_strtod_l+0x1fe>
 8005b08:	2a08      	cmp	r2, #8
 8005b0a:	dc04      	bgt.n	8005b16 <_strtod_l+0x266>
 8005b0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b0e:	434e      	muls	r6, r1
 8005b10:	9609      	str	r6, [sp, #36]	; 0x24
 8005b12:	3201      	adds	r2, #1
 8005b14:	e7e2      	b.n	8005adc <_strtod_l+0x22c>
 8005b16:	f102 0c01 	add.w	ip, r2, #1
 8005b1a:	f1bc 0f10 	cmp.w	ip, #16
 8005b1e:	bfd8      	it	le
 8005b20:	fb01 f909 	mulle.w	r9, r1, r9
 8005b24:	e7f5      	b.n	8005b12 <_strtod_l+0x262>
 8005b26:	2d10      	cmp	r5, #16
 8005b28:	bfdc      	itt	le
 8005b2a:	220a      	movle	r2, #10
 8005b2c:	fb02 3909 	mlale	r9, r2, r9, r3
 8005b30:	e7e1      	b.n	8005af6 <_strtod_l+0x246>
 8005b32:	2300      	movs	r3, #0
 8005b34:	9307      	str	r3, [sp, #28]
 8005b36:	2201      	movs	r2, #1
 8005b38:	e77c      	b.n	8005a34 <_strtod_l+0x184>
 8005b3a:	f04f 0c00 	mov.w	ip, #0
 8005b3e:	f108 0302 	add.w	r3, r8, #2
 8005b42:	931d      	str	r3, [sp, #116]	; 0x74
 8005b44:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005b48:	e785      	b.n	8005a56 <_strtod_l+0x1a6>
 8005b4a:	f04f 0c01 	mov.w	ip, #1
 8005b4e:	e7f6      	b.n	8005b3e <_strtod_l+0x28e>
 8005b50:	080096b8 	.word	0x080096b8
 8005b54:	08009464 	.word	0x08009464
 8005b58:	7ff00000 	.word	0x7ff00000
 8005b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	911d      	str	r1, [sp, #116]	; 0x74
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d0f9      	beq.n	8005b5c <_strtod_l+0x2ac>
 8005b68:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005b6c:	2908      	cmp	r1, #8
 8005b6e:	f63f af79 	bhi.w	8005a64 <_strtod_l+0x1b4>
 8005b72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005b76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b78:	9308      	str	r3, [sp, #32]
 8005b7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b7c:	1c59      	adds	r1, r3, #1
 8005b7e:	911d      	str	r1, [sp, #116]	; 0x74
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005b86:	2e09      	cmp	r6, #9
 8005b88:	d937      	bls.n	8005bfa <_strtod_l+0x34a>
 8005b8a:	9e08      	ldr	r6, [sp, #32]
 8005b8c:	1b89      	subs	r1, r1, r6
 8005b8e:	2908      	cmp	r1, #8
 8005b90:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005b94:	dc02      	bgt.n	8005b9c <_strtod_l+0x2ec>
 8005b96:	4576      	cmp	r6, lr
 8005b98:	bfa8      	it	ge
 8005b9a:	4676      	movge	r6, lr
 8005b9c:	f1bc 0f00 	cmp.w	ip, #0
 8005ba0:	d000      	beq.n	8005ba4 <_strtod_l+0x2f4>
 8005ba2:	4276      	negs	r6, r6
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	d14f      	bne.n	8005c48 <_strtod_l+0x398>
 8005ba8:	9904      	ldr	r1, [sp, #16]
 8005baa:	4301      	orrs	r1, r0
 8005bac:	f47f aec2 	bne.w	8005934 <_strtod_l+0x84>
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	f47f aedb 	bne.w	800596c <_strtod_l+0xbc>
 8005bb6:	2b69      	cmp	r3, #105	; 0x69
 8005bb8:	d027      	beq.n	8005c0a <_strtod_l+0x35a>
 8005bba:	dc24      	bgt.n	8005c06 <_strtod_l+0x356>
 8005bbc:	2b49      	cmp	r3, #73	; 0x49
 8005bbe:	d024      	beq.n	8005c0a <_strtod_l+0x35a>
 8005bc0:	2b4e      	cmp	r3, #78	; 0x4e
 8005bc2:	f47f aed3 	bne.w	800596c <_strtod_l+0xbc>
 8005bc6:	499e      	ldr	r1, [pc, #632]	; (8005e40 <_strtod_l+0x590>)
 8005bc8:	a81d      	add	r0, sp, #116	; 0x74
 8005bca:	f001 fe41 	bl	8007850 <__match>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f43f aecc 	beq.w	800596c <_strtod_l+0xbc>
 8005bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b28      	cmp	r3, #40	; 0x28
 8005bda:	d12d      	bne.n	8005c38 <_strtod_l+0x388>
 8005bdc:	4999      	ldr	r1, [pc, #612]	; (8005e44 <_strtod_l+0x594>)
 8005bde:	aa20      	add	r2, sp, #128	; 0x80
 8005be0:	a81d      	add	r0, sp, #116	; 0x74
 8005be2:	f001 fe49 	bl	8007878 <__hexnan>
 8005be6:	2805      	cmp	r0, #5
 8005be8:	d126      	bne.n	8005c38 <_strtod_l+0x388>
 8005bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005bf0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005bf4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005bf8:	e69c      	b.n	8005934 <_strtod_l+0x84>
 8005bfa:	210a      	movs	r1, #10
 8005bfc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005c00:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c04:	e7b9      	b.n	8005b7a <_strtod_l+0x2ca>
 8005c06:	2b6e      	cmp	r3, #110	; 0x6e
 8005c08:	e7db      	b.n	8005bc2 <_strtod_l+0x312>
 8005c0a:	498f      	ldr	r1, [pc, #572]	; (8005e48 <_strtod_l+0x598>)
 8005c0c:	a81d      	add	r0, sp, #116	; 0x74
 8005c0e:	f001 fe1f 	bl	8007850 <__match>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f43f aeaa 	beq.w	800596c <_strtod_l+0xbc>
 8005c18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c1a:	498c      	ldr	r1, [pc, #560]	; (8005e4c <_strtod_l+0x59c>)
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	a81d      	add	r0, sp, #116	; 0x74
 8005c20:	931d      	str	r3, [sp, #116]	; 0x74
 8005c22:	f001 fe15 	bl	8007850 <__match>
 8005c26:	b910      	cbnz	r0, 8005c2e <_strtod_l+0x37e>
 8005c28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	931d      	str	r3, [sp, #116]	; 0x74
 8005c2e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005e5c <_strtod_l+0x5ac>
 8005c32:	f04f 0a00 	mov.w	sl, #0
 8005c36:	e67d      	b.n	8005934 <_strtod_l+0x84>
 8005c38:	4885      	ldr	r0, [pc, #532]	; (8005e50 <_strtod_l+0x5a0>)
 8005c3a:	f002 fdb5 	bl	80087a8 <nan>
 8005c3e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c42:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005c46:	e675      	b.n	8005934 <_strtod_l+0x84>
 8005c48:	9b07      	ldr	r3, [sp, #28]
 8005c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4c:	1af3      	subs	r3, r6, r3
 8005c4e:	2f00      	cmp	r7, #0
 8005c50:	bf08      	it	eq
 8005c52:	462f      	moveq	r7, r5
 8005c54:	2d10      	cmp	r5, #16
 8005c56:	9308      	str	r3, [sp, #32]
 8005c58:	46a8      	mov	r8, r5
 8005c5a:	bfa8      	it	ge
 8005c5c:	f04f 0810 	movge.w	r8, #16
 8005c60:	f7fa fc70 	bl	8000544 <__aeabi_ui2d>
 8005c64:	2d09      	cmp	r5, #9
 8005c66:	4682      	mov	sl, r0
 8005c68:	468b      	mov	fp, r1
 8005c6a:	dd13      	ble.n	8005c94 <_strtod_l+0x3e4>
 8005c6c:	4b79      	ldr	r3, [pc, #484]	; (8005e54 <_strtod_l+0x5a4>)
 8005c6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c76:	f7fa fcdf 	bl	8000638 <__aeabi_dmul>
 8005c7a:	4682      	mov	sl, r0
 8005c7c:	4648      	mov	r0, r9
 8005c7e:	468b      	mov	fp, r1
 8005c80:	f7fa fc60 	bl	8000544 <__aeabi_ui2d>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4650      	mov	r0, sl
 8005c8a:	4659      	mov	r1, fp
 8005c8c:	f7fa fb1e 	bl	80002cc <__adddf3>
 8005c90:	4682      	mov	sl, r0
 8005c92:	468b      	mov	fp, r1
 8005c94:	2d0f      	cmp	r5, #15
 8005c96:	dc38      	bgt.n	8005d0a <_strtod_l+0x45a>
 8005c98:	9b08      	ldr	r3, [sp, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f43f ae4a 	beq.w	8005934 <_strtod_l+0x84>
 8005ca0:	dd24      	ble.n	8005cec <_strtod_l+0x43c>
 8005ca2:	2b16      	cmp	r3, #22
 8005ca4:	dc0b      	bgt.n	8005cbe <_strtod_l+0x40e>
 8005ca6:	4d6b      	ldr	r5, [pc, #428]	; (8005e54 <_strtod_l+0x5a4>)
 8005ca8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005cac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	465b      	mov	r3, fp
 8005cb4:	f7fa fcc0 	bl	8000638 <__aeabi_dmul>
 8005cb8:	4682      	mov	sl, r0
 8005cba:	468b      	mov	fp, r1
 8005cbc:	e63a      	b.n	8005934 <_strtod_l+0x84>
 8005cbe:	9a08      	ldr	r2, [sp, #32]
 8005cc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	db20      	blt.n	8005d0a <_strtod_l+0x45a>
 8005cc8:	4c62      	ldr	r4, [pc, #392]	; (8005e54 <_strtod_l+0x5a4>)
 8005cca:	f1c5 050f 	rsb	r5, r5, #15
 8005cce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cda:	f7fa fcad 	bl	8000638 <__aeabi_dmul>
 8005cde:	9b08      	ldr	r3, [sp, #32]
 8005ce0:	1b5d      	subs	r5, r3, r5
 8005ce2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ce6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005cea:	e7e3      	b.n	8005cb4 <_strtod_l+0x404>
 8005cec:	9b08      	ldr	r3, [sp, #32]
 8005cee:	3316      	adds	r3, #22
 8005cf0:	db0b      	blt.n	8005d0a <_strtod_l+0x45a>
 8005cf2:	9b07      	ldr	r3, [sp, #28]
 8005cf4:	4a57      	ldr	r2, [pc, #348]	; (8005e54 <_strtod_l+0x5a4>)
 8005cf6:	1b9e      	subs	r6, r3, r6
 8005cf8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005cfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d00:	4650      	mov	r0, sl
 8005d02:	4659      	mov	r1, fp
 8005d04:	f7fa fdc2 	bl	800088c <__aeabi_ddiv>
 8005d08:	e7d6      	b.n	8005cb8 <_strtod_l+0x408>
 8005d0a:	9b08      	ldr	r3, [sp, #32]
 8005d0c:	eba5 0808 	sub.w	r8, r5, r8
 8005d10:	4498      	add	r8, r3
 8005d12:	f1b8 0f00 	cmp.w	r8, #0
 8005d16:	dd71      	ble.n	8005dfc <_strtod_l+0x54c>
 8005d18:	f018 030f 	ands.w	r3, r8, #15
 8005d1c:	d00a      	beq.n	8005d34 <_strtod_l+0x484>
 8005d1e:	494d      	ldr	r1, [pc, #308]	; (8005e54 <_strtod_l+0x5a4>)
 8005d20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d24:	4652      	mov	r2, sl
 8005d26:	465b      	mov	r3, fp
 8005d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d2c:	f7fa fc84 	bl	8000638 <__aeabi_dmul>
 8005d30:	4682      	mov	sl, r0
 8005d32:	468b      	mov	fp, r1
 8005d34:	f038 080f 	bics.w	r8, r8, #15
 8005d38:	d04d      	beq.n	8005dd6 <_strtod_l+0x526>
 8005d3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d3e:	dd22      	ble.n	8005d86 <_strtod_l+0x4d6>
 8005d40:	2500      	movs	r5, #0
 8005d42:	462e      	mov	r6, r5
 8005d44:	9509      	str	r5, [sp, #36]	; 0x24
 8005d46:	9507      	str	r5, [sp, #28]
 8005d48:	2322      	movs	r3, #34	; 0x22
 8005d4a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005e5c <_strtod_l+0x5ac>
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	f04f 0a00 	mov.w	sl, #0
 8005d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f43f adec 	beq.w	8005934 <_strtod_l+0x84>
 8005d5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f001 fe92 	bl	8007a88 <_Bfree>
 8005d64:	9907      	ldr	r1, [sp, #28]
 8005d66:	4620      	mov	r0, r4
 8005d68:	f001 fe8e 	bl	8007a88 <_Bfree>
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f001 fe8a 	bl	8007a88 <_Bfree>
 8005d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d76:	4620      	mov	r0, r4
 8005d78:	f001 fe86 	bl	8007a88 <_Bfree>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f001 fe82 	bl	8007a88 <_Bfree>
 8005d84:	e5d6      	b.n	8005934 <_strtod_l+0x84>
 8005d86:	2300      	movs	r3, #0
 8005d88:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	4659      	mov	r1, fp
 8005d90:	4699      	mov	r9, r3
 8005d92:	f1b8 0f01 	cmp.w	r8, #1
 8005d96:	dc21      	bgt.n	8005ddc <_strtod_l+0x52c>
 8005d98:	b10b      	cbz	r3, 8005d9e <_strtod_l+0x4ee>
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	468b      	mov	fp, r1
 8005d9e:	4b2e      	ldr	r3, [pc, #184]	; (8005e58 <_strtod_l+0x5a8>)
 8005da0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005da4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005da8:	4652      	mov	r2, sl
 8005daa:	465b      	mov	r3, fp
 8005dac:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005db0:	f7fa fc42 	bl	8000638 <__aeabi_dmul>
 8005db4:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <_strtod_l+0x5ac>)
 8005db6:	460a      	mov	r2, r1
 8005db8:	400b      	ands	r3, r1
 8005dba:	4929      	ldr	r1, [pc, #164]	; (8005e60 <_strtod_l+0x5b0>)
 8005dbc:	428b      	cmp	r3, r1
 8005dbe:	4682      	mov	sl, r0
 8005dc0:	d8be      	bhi.n	8005d40 <_strtod_l+0x490>
 8005dc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005dc6:	428b      	cmp	r3, r1
 8005dc8:	bf86      	itte	hi
 8005dca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005e64 <_strtod_l+0x5b4>
 8005dce:	f04f 3aff 	movhi.w	sl, #4294967295
 8005dd2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	e081      	b.n	8005ee0 <_strtod_l+0x630>
 8005ddc:	f018 0f01 	tst.w	r8, #1
 8005de0:	d007      	beq.n	8005df2 <_strtod_l+0x542>
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <_strtod_l+0x5a8>)
 8005de4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f7fa fc24 	bl	8000638 <__aeabi_dmul>
 8005df0:	2301      	movs	r3, #1
 8005df2:	f109 0901 	add.w	r9, r9, #1
 8005df6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dfa:	e7ca      	b.n	8005d92 <_strtod_l+0x4e2>
 8005dfc:	d0eb      	beq.n	8005dd6 <_strtod_l+0x526>
 8005dfe:	f1c8 0800 	rsb	r8, r8, #0
 8005e02:	f018 020f 	ands.w	r2, r8, #15
 8005e06:	d00a      	beq.n	8005e1e <_strtod_l+0x56e>
 8005e08:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <_strtod_l+0x5a4>)
 8005e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e0e:	4650      	mov	r0, sl
 8005e10:	4659      	mov	r1, fp
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f7fa fd39 	bl	800088c <__aeabi_ddiv>
 8005e1a:	4682      	mov	sl, r0
 8005e1c:	468b      	mov	fp, r1
 8005e1e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e22:	d0d8      	beq.n	8005dd6 <_strtod_l+0x526>
 8005e24:	f1b8 0f1f 	cmp.w	r8, #31
 8005e28:	dd1e      	ble.n	8005e68 <_strtod_l+0x5b8>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	462e      	mov	r6, r5
 8005e2e:	9509      	str	r5, [sp, #36]	; 0x24
 8005e30:	9507      	str	r5, [sp, #28]
 8005e32:	2322      	movs	r3, #34	; 0x22
 8005e34:	f04f 0a00 	mov.w	sl, #0
 8005e38:	f04f 0b00 	mov.w	fp, #0
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	e789      	b.n	8005d54 <_strtod_l+0x4a4>
 8005e40:	08009435 	.word	0x08009435
 8005e44:	08009478 	.word	0x08009478
 8005e48:	0800942d 	.word	0x0800942d
 8005e4c:	080095bc 	.word	0x080095bc
 8005e50:	08009878 	.word	0x08009878
 8005e54:	08009758 	.word	0x08009758
 8005e58:	08009730 	.word	0x08009730
 8005e5c:	7ff00000 	.word	0x7ff00000
 8005e60:	7ca00000 	.word	0x7ca00000
 8005e64:	7fefffff 	.word	0x7fefffff
 8005e68:	f018 0310 	ands.w	r3, r8, #16
 8005e6c:	bf18      	it	ne
 8005e6e:	236a      	movne	r3, #106	; 0x6a
 8005e70:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006228 <_strtod_l+0x978>
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	4650      	mov	r0, sl
 8005e78:	4659      	mov	r1, fp
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f018 0f01 	tst.w	r8, #1
 8005e80:	d004      	beq.n	8005e8c <_strtod_l+0x5dc>
 8005e82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e86:	f7fa fbd7 	bl	8000638 <__aeabi_dmul>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005e90:	f109 0908 	add.w	r9, r9, #8
 8005e94:	d1f2      	bne.n	8005e7c <_strtod_l+0x5cc>
 8005e96:	b10b      	cbz	r3, 8005e9c <_strtod_l+0x5ec>
 8005e98:	4682      	mov	sl, r0
 8005e9a:	468b      	mov	fp, r1
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	b1bb      	cbz	r3, 8005ed0 <_strtod_l+0x620>
 8005ea0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005ea4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	4659      	mov	r1, fp
 8005eac:	dd10      	ble.n	8005ed0 <_strtod_l+0x620>
 8005eae:	2b1f      	cmp	r3, #31
 8005eb0:	f340 8128 	ble.w	8006104 <_strtod_l+0x854>
 8005eb4:	2b34      	cmp	r3, #52	; 0x34
 8005eb6:	bfde      	ittt	le
 8005eb8:	3b20      	suble	r3, #32
 8005eba:	f04f 32ff 	movle.w	r2, #4294967295
 8005ebe:	fa02 f303 	lslle.w	r3, r2, r3
 8005ec2:	f04f 0a00 	mov.w	sl, #0
 8005ec6:	bfcc      	ite	gt
 8005ec8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005ecc:	ea03 0b01 	andle.w	fp, r3, r1
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	4659      	mov	r1, fp
 8005ed8:	f7fa fe16 	bl	8000b08 <__aeabi_dcmpeq>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1a4      	bne.n	8005e2a <_strtod_l+0x57a>
 8005ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	463a      	mov	r2, r7
 8005eea:	4620      	mov	r0, r4
 8005eec:	f001 fe38 	bl	8007b60 <__s2b>
 8005ef0:	9009      	str	r0, [sp, #36]	; 0x24
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f43f af24 	beq.w	8005d40 <_strtod_l+0x490>
 8005ef8:	9b07      	ldr	r3, [sp, #28]
 8005efa:	1b9e      	subs	r6, r3, r6
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfb4      	ite	lt
 8005f02:	4633      	movlt	r3, r6
 8005f04:	2300      	movge	r3, #0
 8005f06:	9310      	str	r3, [sp, #64]	; 0x40
 8005f08:	9b08      	ldr	r3, [sp, #32]
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f10:	9318      	str	r3, [sp, #96]	; 0x60
 8005f12:	462e      	mov	r6, r5
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	4620      	mov	r0, r4
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	f001 fd75 	bl	8007a08 <_Balloc>
 8005f1e:	9007      	str	r0, [sp, #28]
 8005f20:	2800      	cmp	r0, #0
 8005f22:	f43f af11 	beq.w	8005d48 <_strtod_l+0x498>
 8005f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	3202      	adds	r2, #2
 8005f2c:	f103 010c 	add.w	r1, r3, #12
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	300c      	adds	r0, #12
 8005f34:	f001 fd5a 	bl	80079ec <memcpy>
 8005f38:	ec4b ab10 	vmov	d0, sl, fp
 8005f3c:	aa20      	add	r2, sp, #128	; 0x80
 8005f3e:	a91f      	add	r1, sp, #124	; 0x7c
 8005f40:	4620      	mov	r0, r4
 8005f42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005f46:	f002 f947 	bl	80081d8 <__d2b>
 8005f4a:	901e      	str	r0, [sp, #120]	; 0x78
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f43f aefb 	beq.w	8005d48 <_strtod_l+0x498>
 8005f52:	2101      	movs	r1, #1
 8005f54:	4620      	mov	r0, r4
 8005f56:	f001 fe9d 	bl	8007c94 <__i2b>
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f43f aef3 	beq.w	8005d48 <_strtod_l+0x498>
 8005f62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f64:	9904      	ldr	r1, [sp, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bfab      	itete	ge
 8005f6a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005f6c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005f6e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005f70:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005f74:	bfac      	ite	ge
 8005f76:	eb03 0902 	addge.w	r9, r3, r2
 8005f7a:	1ad7      	sublt	r7, r2, r3
 8005f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f7e:	eba3 0801 	sub.w	r8, r3, r1
 8005f82:	4490      	add	r8, r2
 8005f84:	4ba3      	ldr	r3, [pc, #652]	; (8006214 <_strtod_l+0x964>)
 8005f86:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f8a:	4598      	cmp	r8, r3
 8005f8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f90:	f280 80cc 	bge.w	800612c <_strtod_l+0x87c>
 8005f94:	eba3 0308 	sub.w	r3, r3, r8
 8005f98:	2b1f      	cmp	r3, #31
 8005f9a:	eba2 0203 	sub.w	r2, r2, r3
 8005f9e:	f04f 0101 	mov.w	r1, #1
 8005fa2:	f300 80b6 	bgt.w	8006112 <_strtod_l+0x862>
 8005fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005faa:	9311      	str	r3, [sp, #68]	; 0x44
 8005fac:	2300      	movs	r3, #0
 8005fae:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb0:	eb09 0802 	add.w	r8, r9, r2
 8005fb4:	9b04      	ldr	r3, [sp, #16]
 8005fb6:	45c1      	cmp	r9, r8
 8005fb8:	4417      	add	r7, r2
 8005fba:	441f      	add	r7, r3
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	bfa8      	it	ge
 8005fc0:	4643      	movge	r3, r8
 8005fc2:	42bb      	cmp	r3, r7
 8005fc4:	bfa8      	it	ge
 8005fc6:	463b      	movge	r3, r7
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfc2      	ittt	gt
 8005fcc:	eba8 0803 	subgt.w	r8, r8, r3
 8005fd0:	1aff      	subgt	r7, r7, r3
 8005fd2:	eba9 0903 	subgt.w	r9, r9, r3
 8005fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dd17      	ble.n	800600c <_strtod_l+0x75c>
 8005fdc:	4631      	mov	r1, r6
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f001 ff13 	bl	8007e0c <__pow5mult>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f43f aead 	beq.w	8005d48 <_strtod_l+0x498>
 8005fee:	4601      	mov	r1, r0
 8005ff0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f001 fe64 	bl	8007cc0 <__multiply>
 8005ff8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f43f aea4 	beq.w	8005d48 <_strtod_l+0x498>
 8006000:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006002:	4620      	mov	r0, r4
 8006004:	f001 fd40 	bl	8007a88 <_Bfree>
 8006008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800600a:	931e      	str	r3, [sp, #120]	; 0x78
 800600c:	f1b8 0f00 	cmp.w	r8, #0
 8006010:	f300 8091 	bgt.w	8006136 <_strtod_l+0x886>
 8006014:	9b08      	ldr	r3, [sp, #32]
 8006016:	2b00      	cmp	r3, #0
 8006018:	dd08      	ble.n	800602c <_strtod_l+0x77c>
 800601a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800601c:	9907      	ldr	r1, [sp, #28]
 800601e:	4620      	mov	r0, r4
 8006020:	f001 fef4 	bl	8007e0c <__pow5mult>
 8006024:	9007      	str	r0, [sp, #28]
 8006026:	2800      	cmp	r0, #0
 8006028:	f43f ae8e 	beq.w	8005d48 <_strtod_l+0x498>
 800602c:	2f00      	cmp	r7, #0
 800602e:	dd08      	ble.n	8006042 <_strtod_l+0x792>
 8006030:	9907      	ldr	r1, [sp, #28]
 8006032:	463a      	mov	r2, r7
 8006034:	4620      	mov	r0, r4
 8006036:	f001 ff43 	bl	8007ec0 <__lshift>
 800603a:	9007      	str	r0, [sp, #28]
 800603c:	2800      	cmp	r0, #0
 800603e:	f43f ae83 	beq.w	8005d48 <_strtod_l+0x498>
 8006042:	f1b9 0f00 	cmp.w	r9, #0
 8006046:	dd08      	ble.n	800605a <_strtod_l+0x7aa>
 8006048:	4631      	mov	r1, r6
 800604a:	464a      	mov	r2, r9
 800604c:	4620      	mov	r0, r4
 800604e:	f001 ff37 	bl	8007ec0 <__lshift>
 8006052:	4606      	mov	r6, r0
 8006054:	2800      	cmp	r0, #0
 8006056:	f43f ae77 	beq.w	8005d48 <_strtod_l+0x498>
 800605a:	9a07      	ldr	r2, [sp, #28]
 800605c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800605e:	4620      	mov	r0, r4
 8006060:	f001 ffb6 	bl	8007fd0 <__mdiff>
 8006064:	4605      	mov	r5, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f ae6e 	beq.w	8005d48 <_strtod_l+0x498>
 800606c:	68c3      	ldr	r3, [r0, #12]
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	2300      	movs	r3, #0
 8006072:	60c3      	str	r3, [r0, #12]
 8006074:	4631      	mov	r1, r6
 8006076:	f001 ff8f 	bl	8007f98 <__mcmp>
 800607a:	2800      	cmp	r0, #0
 800607c:	da65      	bge.n	800614a <_strtod_l+0x89a>
 800607e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006080:	ea53 030a 	orrs.w	r3, r3, sl
 8006084:	f040 8087 	bne.w	8006196 <_strtod_l+0x8e6>
 8006088:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 8082 	bne.w	8006196 <_strtod_l+0x8e6>
 8006092:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006096:	0d1b      	lsrs	r3, r3, #20
 8006098:	051b      	lsls	r3, r3, #20
 800609a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800609e:	d97a      	bls.n	8006196 <_strtod_l+0x8e6>
 80060a0:	696b      	ldr	r3, [r5, #20]
 80060a2:	b913      	cbnz	r3, 80060aa <_strtod_l+0x7fa>
 80060a4:	692b      	ldr	r3, [r5, #16]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	dd75      	ble.n	8006196 <_strtod_l+0x8e6>
 80060aa:	4629      	mov	r1, r5
 80060ac:	2201      	movs	r2, #1
 80060ae:	4620      	mov	r0, r4
 80060b0:	f001 ff06 	bl	8007ec0 <__lshift>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4605      	mov	r5, r0
 80060b8:	f001 ff6e 	bl	8007f98 <__mcmp>
 80060bc:	2800      	cmp	r0, #0
 80060be:	dd6a      	ble.n	8006196 <_strtod_l+0x8e6>
 80060c0:	9904      	ldr	r1, [sp, #16]
 80060c2:	4a55      	ldr	r2, [pc, #340]	; (8006218 <_strtod_l+0x968>)
 80060c4:	465b      	mov	r3, fp
 80060c6:	2900      	cmp	r1, #0
 80060c8:	f000 8085 	beq.w	80061d6 <_strtod_l+0x926>
 80060cc:	ea02 010b 	and.w	r1, r2, fp
 80060d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060d4:	dc7f      	bgt.n	80061d6 <_strtod_l+0x926>
 80060d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060da:	f77f aeaa 	ble.w	8005e32 <_strtod_l+0x582>
 80060de:	4a4f      	ldr	r2, [pc, #316]	; (800621c <_strtod_l+0x96c>)
 80060e0:	2300      	movs	r3, #0
 80060e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80060e6:	4650      	mov	r0, sl
 80060e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80060ec:	4659      	mov	r1, fp
 80060ee:	f7fa faa3 	bl	8000638 <__aeabi_dmul>
 80060f2:	460b      	mov	r3, r1
 80060f4:	4303      	orrs	r3, r0
 80060f6:	bf08      	it	eq
 80060f8:	2322      	moveq	r3, #34	; 0x22
 80060fa:	4682      	mov	sl, r0
 80060fc:	468b      	mov	fp, r1
 80060fe:	bf08      	it	eq
 8006100:	6023      	streq	r3, [r4, #0]
 8006102:	e62b      	b.n	8005d5c <_strtod_l+0x4ac>
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	ea03 0a0a 	and.w	sl, r3, sl
 8006110:	e6de      	b.n	8005ed0 <_strtod_l+0x620>
 8006112:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006116:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800611a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800611e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006122:	fa01 f308 	lsl.w	r3, r1, r8
 8006126:	930c      	str	r3, [sp, #48]	; 0x30
 8006128:	9111      	str	r1, [sp, #68]	; 0x44
 800612a:	e741      	b.n	8005fb0 <_strtod_l+0x700>
 800612c:	2300      	movs	r3, #0
 800612e:	930c      	str	r3, [sp, #48]	; 0x30
 8006130:	2301      	movs	r3, #1
 8006132:	9311      	str	r3, [sp, #68]	; 0x44
 8006134:	e73c      	b.n	8005fb0 <_strtod_l+0x700>
 8006136:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006138:	4642      	mov	r2, r8
 800613a:	4620      	mov	r0, r4
 800613c:	f001 fec0 	bl	8007ec0 <__lshift>
 8006140:	901e      	str	r0, [sp, #120]	; 0x78
 8006142:	2800      	cmp	r0, #0
 8006144:	f47f af66 	bne.w	8006014 <_strtod_l+0x764>
 8006148:	e5fe      	b.n	8005d48 <_strtod_l+0x498>
 800614a:	465f      	mov	r7, fp
 800614c:	d16e      	bne.n	800622c <_strtod_l+0x97c>
 800614e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006154:	b342      	cbz	r2, 80061a8 <_strtod_l+0x8f8>
 8006156:	4a32      	ldr	r2, [pc, #200]	; (8006220 <_strtod_l+0x970>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d128      	bne.n	80061ae <_strtod_l+0x8fe>
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	4650      	mov	r0, sl
 8006160:	b1eb      	cbz	r3, 800619e <_strtod_l+0x8ee>
 8006162:	4a2d      	ldr	r2, [pc, #180]	; (8006218 <_strtod_l+0x968>)
 8006164:	403a      	ands	r2, r7
 8006166:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800616a:	f04f 31ff 	mov.w	r1, #4294967295
 800616e:	d819      	bhi.n	80061a4 <_strtod_l+0x8f4>
 8006170:	0d12      	lsrs	r2, r2, #20
 8006172:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	4298      	cmp	r0, r3
 800617c:	d117      	bne.n	80061ae <_strtod_l+0x8fe>
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <_strtod_l+0x974>)
 8006180:	429f      	cmp	r7, r3
 8006182:	d102      	bne.n	800618a <_strtod_l+0x8da>
 8006184:	3001      	adds	r0, #1
 8006186:	f43f addf 	beq.w	8005d48 <_strtod_l+0x498>
 800618a:	4b23      	ldr	r3, [pc, #140]	; (8006218 <_strtod_l+0x968>)
 800618c:	403b      	ands	r3, r7
 800618e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006192:	f04f 0a00 	mov.w	sl, #0
 8006196:	9b04      	ldr	r3, [sp, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1a0      	bne.n	80060de <_strtod_l+0x82e>
 800619c:	e5de      	b.n	8005d5c <_strtod_l+0x4ac>
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	e7ea      	b.n	800617a <_strtod_l+0x8ca>
 80061a4:	460b      	mov	r3, r1
 80061a6:	e7e8      	b.n	800617a <_strtod_l+0x8ca>
 80061a8:	ea53 030a 	orrs.w	r3, r3, sl
 80061ac:	d088      	beq.n	80060c0 <_strtod_l+0x810>
 80061ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061b0:	b1db      	cbz	r3, 80061ea <_strtod_l+0x93a>
 80061b2:	423b      	tst	r3, r7
 80061b4:	d0ef      	beq.n	8006196 <_strtod_l+0x8e6>
 80061b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061b8:	9a04      	ldr	r2, [sp, #16]
 80061ba:	4650      	mov	r0, sl
 80061bc:	4659      	mov	r1, fp
 80061be:	b1c3      	cbz	r3, 80061f2 <_strtod_l+0x942>
 80061c0:	f7ff fb5a 	bl	8005878 <sulp>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061cc:	f7fa f87e 	bl	80002cc <__adddf3>
 80061d0:	4682      	mov	sl, r0
 80061d2:	468b      	mov	fp, r1
 80061d4:	e7df      	b.n	8006196 <_strtod_l+0x8e6>
 80061d6:	4013      	ands	r3, r2
 80061d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80061dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80061e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80061e4:	f04f 3aff 	mov.w	sl, #4294967295
 80061e8:	e7d5      	b.n	8006196 <_strtod_l+0x8e6>
 80061ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ec:	ea13 0f0a 	tst.w	r3, sl
 80061f0:	e7e0      	b.n	80061b4 <_strtod_l+0x904>
 80061f2:	f7ff fb41 	bl	8005878 <sulp>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061fe:	f7fa f863 	bl	80002c8 <__aeabi_dsub>
 8006202:	2200      	movs	r2, #0
 8006204:	2300      	movs	r3, #0
 8006206:	4682      	mov	sl, r0
 8006208:	468b      	mov	fp, r1
 800620a:	f7fa fc7d 	bl	8000b08 <__aeabi_dcmpeq>
 800620e:	2800      	cmp	r0, #0
 8006210:	d0c1      	beq.n	8006196 <_strtod_l+0x8e6>
 8006212:	e60e      	b.n	8005e32 <_strtod_l+0x582>
 8006214:	fffffc02 	.word	0xfffffc02
 8006218:	7ff00000 	.word	0x7ff00000
 800621c:	39500000 	.word	0x39500000
 8006220:	000fffff 	.word	0x000fffff
 8006224:	7fefffff 	.word	0x7fefffff
 8006228:	08009490 	.word	0x08009490
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	f002 f82e 	bl	8008290 <__ratio>
 8006234:	ec59 8b10 	vmov	r8, r9, d0
 8006238:	ee10 0a10 	vmov	r0, s0
 800623c:	2200      	movs	r2, #0
 800623e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006242:	4649      	mov	r1, r9
 8006244:	f7fa fc74 	bl	8000b30 <__aeabi_dcmple>
 8006248:	2800      	cmp	r0, #0
 800624a:	d07c      	beq.n	8006346 <_strtod_l+0xa96>
 800624c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d04c      	beq.n	80062ec <_strtod_l+0xa3c>
 8006252:	4b95      	ldr	r3, [pc, #596]	; (80064a8 <_strtod_l+0xbf8>)
 8006254:	2200      	movs	r2, #0
 8006256:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800625a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80064a8 <_strtod_l+0xbf8>
 800625e:	f04f 0800 	mov.w	r8, #0
 8006262:	4b92      	ldr	r3, [pc, #584]	; (80064ac <_strtod_l+0xbfc>)
 8006264:	403b      	ands	r3, r7
 8006266:	9311      	str	r3, [sp, #68]	; 0x44
 8006268:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800626a:	4b91      	ldr	r3, [pc, #580]	; (80064b0 <_strtod_l+0xc00>)
 800626c:	429a      	cmp	r2, r3
 800626e:	f040 80b2 	bne.w	80063d6 <_strtod_l+0xb26>
 8006272:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800627a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800627e:	ec4b ab10 	vmov	d0, sl, fp
 8006282:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006286:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800628a:	f001 ff29 	bl	80080e0 <__ulp>
 800628e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006292:	ec53 2b10 	vmov	r2, r3, d0
 8006296:	f7fa f9cf 	bl	8000638 <__aeabi_dmul>
 800629a:	4652      	mov	r2, sl
 800629c:	465b      	mov	r3, fp
 800629e:	f7fa f815 	bl	80002cc <__adddf3>
 80062a2:	460b      	mov	r3, r1
 80062a4:	4981      	ldr	r1, [pc, #516]	; (80064ac <_strtod_l+0xbfc>)
 80062a6:	4a83      	ldr	r2, [pc, #524]	; (80064b4 <_strtod_l+0xc04>)
 80062a8:	4019      	ands	r1, r3
 80062aa:	4291      	cmp	r1, r2
 80062ac:	4682      	mov	sl, r0
 80062ae:	d95e      	bls.n	800636e <_strtod_l+0xabe>
 80062b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d103      	bne.n	80062c2 <_strtod_l+0xa12>
 80062ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062bc:	3301      	adds	r3, #1
 80062be:	f43f ad43 	beq.w	8005d48 <_strtod_l+0x498>
 80062c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80064c0 <_strtod_l+0xc10>
 80062c6:	f04f 3aff 	mov.w	sl, #4294967295
 80062ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80062cc:	4620      	mov	r0, r4
 80062ce:	f001 fbdb 	bl	8007a88 <_Bfree>
 80062d2:	9907      	ldr	r1, [sp, #28]
 80062d4:	4620      	mov	r0, r4
 80062d6:	f001 fbd7 	bl	8007a88 <_Bfree>
 80062da:	4631      	mov	r1, r6
 80062dc:	4620      	mov	r0, r4
 80062de:	f001 fbd3 	bl	8007a88 <_Bfree>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4620      	mov	r0, r4
 80062e6:	f001 fbcf 	bl	8007a88 <_Bfree>
 80062ea:	e613      	b.n	8005f14 <_strtod_l+0x664>
 80062ec:	f1ba 0f00 	cmp.w	sl, #0
 80062f0:	d11b      	bne.n	800632a <_strtod_l+0xa7a>
 80062f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062f6:	b9f3      	cbnz	r3, 8006336 <_strtod_l+0xa86>
 80062f8:	4b6b      	ldr	r3, [pc, #428]	; (80064a8 <_strtod_l+0xbf8>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	4640      	mov	r0, r8
 80062fe:	4649      	mov	r1, r9
 8006300:	f7fa fc0c 	bl	8000b1c <__aeabi_dcmplt>
 8006304:	b9d0      	cbnz	r0, 800633c <_strtod_l+0xa8c>
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	4b6b      	ldr	r3, [pc, #428]	; (80064b8 <_strtod_l+0xc08>)
 800630c:	2200      	movs	r2, #0
 800630e:	f7fa f993 	bl	8000638 <__aeabi_dmul>
 8006312:	4680      	mov	r8, r0
 8006314:	4689      	mov	r9, r1
 8006316:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800631a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800631e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006320:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006324:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006328:	e79b      	b.n	8006262 <_strtod_l+0x9b2>
 800632a:	f1ba 0f01 	cmp.w	sl, #1
 800632e:	d102      	bne.n	8006336 <_strtod_l+0xa86>
 8006330:	2f00      	cmp	r7, #0
 8006332:	f43f ad7e 	beq.w	8005e32 <_strtod_l+0x582>
 8006336:	4b61      	ldr	r3, [pc, #388]	; (80064bc <_strtod_l+0xc0c>)
 8006338:	2200      	movs	r2, #0
 800633a:	e78c      	b.n	8006256 <_strtod_l+0x9a6>
 800633c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80064b8 <_strtod_l+0xc08>
 8006340:	f04f 0800 	mov.w	r8, #0
 8006344:	e7e7      	b.n	8006316 <_strtod_l+0xa66>
 8006346:	4b5c      	ldr	r3, [pc, #368]	; (80064b8 <_strtod_l+0xc08>)
 8006348:	4640      	mov	r0, r8
 800634a:	4649      	mov	r1, r9
 800634c:	2200      	movs	r2, #0
 800634e:	f7fa f973 	bl	8000638 <__aeabi_dmul>
 8006352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006354:	4680      	mov	r8, r0
 8006356:	4689      	mov	r9, r1
 8006358:	b933      	cbnz	r3, 8006368 <_strtod_l+0xab8>
 800635a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800635e:	9012      	str	r0, [sp, #72]	; 0x48
 8006360:	9313      	str	r3, [sp, #76]	; 0x4c
 8006362:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006366:	e7dd      	b.n	8006324 <_strtod_l+0xa74>
 8006368:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800636c:	e7f9      	b.n	8006362 <_strtod_l+0xab2>
 800636e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1a8      	bne.n	80062ca <_strtod_l+0xa1a>
 8006378:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800637c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800637e:	0d1b      	lsrs	r3, r3, #20
 8006380:	051b      	lsls	r3, r3, #20
 8006382:	429a      	cmp	r2, r3
 8006384:	d1a1      	bne.n	80062ca <_strtod_l+0xa1a>
 8006386:	4640      	mov	r0, r8
 8006388:	4649      	mov	r1, r9
 800638a:	f7fa fcb5 	bl	8000cf8 <__aeabi_d2lz>
 800638e:	f7fa f925 	bl	80005dc <__aeabi_l2d>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7f9 ff95 	bl	80002c8 <__aeabi_dsub>
 800639e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063a4:	ea43 030a 	orr.w	r3, r3, sl
 80063a8:	4313      	orrs	r3, r2
 80063aa:	4680      	mov	r8, r0
 80063ac:	4689      	mov	r9, r1
 80063ae:	d053      	beq.n	8006458 <_strtod_l+0xba8>
 80063b0:	a335      	add	r3, pc, #212	; (adr r3, 8006488 <_strtod_l+0xbd8>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f7fa fbb1 	bl	8000b1c <__aeabi_dcmplt>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f47f acce 	bne.w	8005d5c <_strtod_l+0x4ac>
 80063c0:	a333      	add	r3, pc, #204	; (adr r3, 8006490 <_strtod_l+0xbe0>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	4640      	mov	r0, r8
 80063c8:	4649      	mov	r1, r9
 80063ca:	f7fa fbc5 	bl	8000b58 <__aeabi_dcmpgt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f43f af7b 	beq.w	80062ca <_strtod_l+0xa1a>
 80063d4:	e4c2      	b.n	8005d5c <_strtod_l+0x4ac>
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	b333      	cbz	r3, 8006428 <_strtod_l+0xb78>
 80063da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063e0:	d822      	bhi.n	8006428 <_strtod_l+0xb78>
 80063e2:	a32d      	add	r3, pc, #180	; (adr r3, 8006498 <_strtod_l+0xbe8>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7fa fba0 	bl	8000b30 <__aeabi_dcmple>
 80063f0:	b1a0      	cbz	r0, 800641c <_strtod_l+0xb6c>
 80063f2:	4649      	mov	r1, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	f7fa fbf7 	bl	8000be8 <__aeabi_d2uiz>
 80063fa:	2801      	cmp	r0, #1
 80063fc:	bf38      	it	cc
 80063fe:	2001      	movcc	r0, #1
 8006400:	f7fa f8a0 	bl	8000544 <__aeabi_ui2d>
 8006404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	bb13      	cbnz	r3, 8006452 <_strtod_l+0xba2>
 800640c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006410:	9014      	str	r0, [sp, #80]	; 0x50
 8006412:	9315      	str	r3, [sp, #84]	; 0x54
 8006414:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006418:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800641c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800641e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006420:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	930d      	str	r3, [sp, #52]	; 0x34
 8006428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800642c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006430:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006434:	f001 fe54 	bl	80080e0 <__ulp>
 8006438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800643c:	ec53 2b10 	vmov	r2, r3, d0
 8006440:	f7fa f8fa 	bl	8000638 <__aeabi_dmul>
 8006444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006448:	f7f9 ff40 	bl	80002cc <__adddf3>
 800644c:	4682      	mov	sl, r0
 800644e:	468b      	mov	fp, r1
 8006450:	e78f      	b.n	8006372 <_strtod_l+0xac2>
 8006452:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006456:	e7dd      	b.n	8006414 <_strtod_l+0xb64>
 8006458:	a311      	add	r3, pc, #68	; (adr r3, 80064a0 <_strtod_l+0xbf0>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7fa fb5d 	bl	8000b1c <__aeabi_dcmplt>
 8006462:	e7b4      	b.n	80063ce <_strtod_l+0xb1e>
 8006464:	2300      	movs	r3, #0
 8006466:	930e      	str	r3, [sp, #56]	; 0x38
 8006468:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800646a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	f7ff ba65 	b.w	800593c <_strtod_l+0x8c>
 8006472:	2b65      	cmp	r3, #101	; 0x65
 8006474:	f43f ab5d 	beq.w	8005b32 <_strtod_l+0x282>
 8006478:	2b45      	cmp	r3, #69	; 0x45
 800647a:	f43f ab5a 	beq.w	8005b32 <_strtod_l+0x282>
 800647e:	2201      	movs	r2, #1
 8006480:	f7ff bb92 	b.w	8005ba8 <_strtod_l+0x2f8>
 8006484:	f3af 8000 	nop.w
 8006488:	94a03595 	.word	0x94a03595
 800648c:	3fdfffff 	.word	0x3fdfffff
 8006490:	35afe535 	.word	0x35afe535
 8006494:	3fe00000 	.word	0x3fe00000
 8006498:	ffc00000 	.word	0xffc00000
 800649c:	41dfffff 	.word	0x41dfffff
 80064a0:	94a03595 	.word	0x94a03595
 80064a4:	3fcfffff 	.word	0x3fcfffff
 80064a8:	3ff00000 	.word	0x3ff00000
 80064ac:	7ff00000 	.word	0x7ff00000
 80064b0:	7fe00000 	.word	0x7fe00000
 80064b4:	7c9fffff 	.word	0x7c9fffff
 80064b8:	3fe00000 	.word	0x3fe00000
 80064bc:	bff00000 	.word	0xbff00000
 80064c0:	7fefffff 	.word	0x7fefffff

080064c4 <_strtod_r>:
 80064c4:	4b01      	ldr	r3, [pc, #4]	; (80064cc <_strtod_r+0x8>)
 80064c6:	f7ff b9f3 	b.w	80058b0 <_strtod_l>
 80064ca:	bf00      	nop
 80064cc:	20000088 	.word	0x20000088

080064d0 <_strtol_l.isra.0>:
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d6:	d001      	beq.n	80064dc <_strtol_l.isra.0+0xc>
 80064d8:	2b24      	cmp	r3, #36	; 0x24
 80064da:	d906      	bls.n	80064ea <_strtol_l.isra.0+0x1a>
 80064dc:	f7fe fafa 	bl	8004ad4 <__errno>
 80064e0:	2316      	movs	r3, #22
 80064e2:	6003      	str	r3, [r0, #0]
 80064e4:	2000      	movs	r0, #0
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	4f3a      	ldr	r7, [pc, #232]	; (80065d4 <_strtol_l.isra.0+0x104>)
 80064ec:	468e      	mov	lr, r1
 80064ee:	4676      	mov	r6, lr
 80064f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80064f4:	5de5      	ldrb	r5, [r4, r7]
 80064f6:	f015 0508 	ands.w	r5, r5, #8
 80064fa:	d1f8      	bne.n	80064ee <_strtol_l.isra.0+0x1e>
 80064fc:	2c2d      	cmp	r4, #45	; 0x2d
 80064fe:	d134      	bne.n	800656a <_strtol_l.isra.0+0x9a>
 8006500:	f89e 4000 	ldrb.w	r4, [lr]
 8006504:	f04f 0801 	mov.w	r8, #1
 8006508:	f106 0e02 	add.w	lr, r6, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05c      	beq.n	80065ca <_strtol_l.isra.0+0xfa>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d10c      	bne.n	800652e <_strtol_l.isra.0+0x5e>
 8006514:	2c30      	cmp	r4, #48	; 0x30
 8006516:	d10a      	bne.n	800652e <_strtol_l.isra.0+0x5e>
 8006518:	f89e 4000 	ldrb.w	r4, [lr]
 800651c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006520:	2c58      	cmp	r4, #88	; 0x58
 8006522:	d14d      	bne.n	80065c0 <_strtol_l.isra.0+0xf0>
 8006524:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006528:	2310      	movs	r3, #16
 800652a:	f10e 0e02 	add.w	lr, lr, #2
 800652e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006532:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006536:	2600      	movs	r6, #0
 8006538:	fbbc f9f3 	udiv	r9, ip, r3
 800653c:	4635      	mov	r5, r6
 800653e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006542:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006546:	2f09      	cmp	r7, #9
 8006548:	d818      	bhi.n	800657c <_strtol_l.isra.0+0xac>
 800654a:	463c      	mov	r4, r7
 800654c:	42a3      	cmp	r3, r4
 800654e:	dd24      	ble.n	800659a <_strtol_l.isra.0+0xca>
 8006550:	2e00      	cmp	r6, #0
 8006552:	db1f      	blt.n	8006594 <_strtol_l.isra.0+0xc4>
 8006554:	45a9      	cmp	r9, r5
 8006556:	d31d      	bcc.n	8006594 <_strtol_l.isra.0+0xc4>
 8006558:	d101      	bne.n	800655e <_strtol_l.isra.0+0x8e>
 800655a:	45a2      	cmp	sl, r4
 800655c:	db1a      	blt.n	8006594 <_strtol_l.isra.0+0xc4>
 800655e:	fb05 4503 	mla	r5, r5, r3, r4
 8006562:	2601      	movs	r6, #1
 8006564:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006568:	e7eb      	b.n	8006542 <_strtol_l.isra.0+0x72>
 800656a:	2c2b      	cmp	r4, #43	; 0x2b
 800656c:	bf08      	it	eq
 800656e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006572:	46a8      	mov	r8, r5
 8006574:	bf08      	it	eq
 8006576:	f106 0e02 	addeq.w	lr, r6, #2
 800657a:	e7c7      	b.n	800650c <_strtol_l.isra.0+0x3c>
 800657c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006580:	2f19      	cmp	r7, #25
 8006582:	d801      	bhi.n	8006588 <_strtol_l.isra.0+0xb8>
 8006584:	3c37      	subs	r4, #55	; 0x37
 8006586:	e7e1      	b.n	800654c <_strtol_l.isra.0+0x7c>
 8006588:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800658c:	2f19      	cmp	r7, #25
 800658e:	d804      	bhi.n	800659a <_strtol_l.isra.0+0xca>
 8006590:	3c57      	subs	r4, #87	; 0x57
 8006592:	e7db      	b.n	800654c <_strtol_l.isra.0+0x7c>
 8006594:	f04f 36ff 	mov.w	r6, #4294967295
 8006598:	e7e4      	b.n	8006564 <_strtol_l.isra.0+0x94>
 800659a:	2e00      	cmp	r6, #0
 800659c:	da05      	bge.n	80065aa <_strtol_l.isra.0+0xda>
 800659e:	2322      	movs	r3, #34	; 0x22
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	4665      	mov	r5, ip
 80065a4:	b942      	cbnz	r2, 80065b8 <_strtol_l.isra.0+0xe8>
 80065a6:	4628      	mov	r0, r5
 80065a8:	e79d      	b.n	80064e6 <_strtol_l.isra.0+0x16>
 80065aa:	f1b8 0f00 	cmp.w	r8, #0
 80065ae:	d000      	beq.n	80065b2 <_strtol_l.isra.0+0xe2>
 80065b0:	426d      	negs	r5, r5
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	d0f7      	beq.n	80065a6 <_strtol_l.isra.0+0xd6>
 80065b6:	b10e      	cbz	r6, 80065bc <_strtol_l.isra.0+0xec>
 80065b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80065bc:	6011      	str	r1, [r2, #0]
 80065be:	e7f2      	b.n	80065a6 <_strtol_l.isra.0+0xd6>
 80065c0:	2430      	movs	r4, #48	; 0x30
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1b3      	bne.n	800652e <_strtol_l.isra.0+0x5e>
 80065c6:	2308      	movs	r3, #8
 80065c8:	e7b1      	b.n	800652e <_strtol_l.isra.0+0x5e>
 80065ca:	2c30      	cmp	r4, #48	; 0x30
 80065cc:	d0a4      	beq.n	8006518 <_strtol_l.isra.0+0x48>
 80065ce:	230a      	movs	r3, #10
 80065d0:	e7ad      	b.n	800652e <_strtol_l.isra.0+0x5e>
 80065d2:	bf00      	nop
 80065d4:	080094b9 	.word	0x080094b9

080065d8 <_strtol_r>:
 80065d8:	f7ff bf7a 	b.w	80064d0 <_strtol_l.isra.0>

080065dc <quorem>:
 80065dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	6903      	ldr	r3, [r0, #16]
 80065e2:	690c      	ldr	r4, [r1, #16]
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	4607      	mov	r7, r0
 80065e8:	f2c0 8081 	blt.w	80066ee <quorem+0x112>
 80065ec:	3c01      	subs	r4, #1
 80065ee:	f101 0814 	add.w	r8, r1, #20
 80065f2:	f100 0514 	add.w	r5, r0, #20
 80065f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006604:	3301      	adds	r3, #1
 8006606:	429a      	cmp	r2, r3
 8006608:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800660c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006610:	fbb2 f6f3 	udiv	r6, r2, r3
 8006614:	d331      	bcc.n	800667a <quorem+0x9e>
 8006616:	f04f 0e00 	mov.w	lr, #0
 800661a:	4640      	mov	r0, r8
 800661c:	46ac      	mov	ip, r5
 800661e:	46f2      	mov	sl, lr
 8006620:	f850 2b04 	ldr.w	r2, [r0], #4
 8006624:	b293      	uxth	r3, r2
 8006626:	fb06 e303 	mla	r3, r6, r3, lr
 800662a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800662e:	b29b      	uxth	r3, r3
 8006630:	ebaa 0303 	sub.w	r3, sl, r3
 8006634:	0c12      	lsrs	r2, r2, #16
 8006636:	f8dc a000 	ldr.w	sl, [ip]
 800663a:	fb06 e202 	mla	r2, r6, r2, lr
 800663e:	fa13 f38a 	uxtah	r3, r3, sl
 8006642:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006646:	fa1f fa82 	uxth.w	sl, r2
 800664a:	f8dc 2000 	ldr.w	r2, [ip]
 800664e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800665c:	4581      	cmp	r9, r0
 800665e:	f84c 3b04 	str.w	r3, [ip], #4
 8006662:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006666:	d2db      	bcs.n	8006620 <quorem+0x44>
 8006668:	f855 300b 	ldr.w	r3, [r5, fp]
 800666c:	b92b      	cbnz	r3, 800667a <quorem+0x9e>
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	3b04      	subs	r3, #4
 8006672:	429d      	cmp	r5, r3
 8006674:	461a      	mov	r2, r3
 8006676:	d32e      	bcc.n	80066d6 <quorem+0xfa>
 8006678:	613c      	str	r4, [r7, #16]
 800667a:	4638      	mov	r0, r7
 800667c:	f001 fc8c 	bl	8007f98 <__mcmp>
 8006680:	2800      	cmp	r0, #0
 8006682:	db24      	blt.n	80066ce <quorem+0xf2>
 8006684:	3601      	adds	r6, #1
 8006686:	4628      	mov	r0, r5
 8006688:	f04f 0c00 	mov.w	ip, #0
 800668c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006690:	f8d0 e000 	ldr.w	lr, [r0]
 8006694:	b293      	uxth	r3, r2
 8006696:	ebac 0303 	sub.w	r3, ip, r3
 800669a:	0c12      	lsrs	r2, r2, #16
 800669c:	fa13 f38e 	uxtah	r3, r3, lr
 80066a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ae:	45c1      	cmp	r9, r8
 80066b0:	f840 3b04 	str.w	r3, [r0], #4
 80066b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066b8:	d2e8      	bcs.n	800668c <quorem+0xb0>
 80066ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066c2:	b922      	cbnz	r2, 80066ce <quorem+0xf2>
 80066c4:	3b04      	subs	r3, #4
 80066c6:	429d      	cmp	r5, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	d30a      	bcc.n	80066e2 <quorem+0x106>
 80066cc:	613c      	str	r4, [r7, #16]
 80066ce:	4630      	mov	r0, r6
 80066d0:	b003      	add	sp, #12
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	3b04      	subs	r3, #4
 80066da:	2a00      	cmp	r2, #0
 80066dc:	d1cc      	bne.n	8006678 <quorem+0x9c>
 80066de:	3c01      	subs	r4, #1
 80066e0:	e7c7      	b.n	8006672 <quorem+0x96>
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	d1f0      	bne.n	80066cc <quorem+0xf0>
 80066ea:	3c01      	subs	r4, #1
 80066ec:	e7eb      	b.n	80066c6 <quorem+0xea>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e7ee      	b.n	80066d0 <quorem+0xf4>
 80066f2:	0000      	movs	r0, r0
 80066f4:	0000      	movs	r0, r0
	...

080066f8 <_dtoa_r>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	ed2d 8b02 	vpush	{d8}
 8006700:	ec57 6b10 	vmov	r6, r7, d0
 8006704:	b095      	sub	sp, #84	; 0x54
 8006706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800670c:	9105      	str	r1, [sp, #20]
 800670e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006712:	4604      	mov	r4, r0
 8006714:	9209      	str	r2, [sp, #36]	; 0x24
 8006716:	930f      	str	r3, [sp, #60]	; 0x3c
 8006718:	b975      	cbnz	r5, 8006738 <_dtoa_r+0x40>
 800671a:	2010      	movs	r0, #16
 800671c:	f001 f94c 	bl	80079b8 <malloc>
 8006720:	4602      	mov	r2, r0
 8006722:	6260      	str	r0, [r4, #36]	; 0x24
 8006724:	b920      	cbnz	r0, 8006730 <_dtoa_r+0x38>
 8006726:	4bb2      	ldr	r3, [pc, #712]	; (80069f0 <_dtoa_r+0x2f8>)
 8006728:	21ea      	movs	r1, #234	; 0xea
 800672a:	48b2      	ldr	r0, [pc, #712]	; (80069f4 <_dtoa_r+0x2fc>)
 800672c:	f002 f874 	bl	8008818 <__assert_func>
 8006730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006734:	6005      	str	r5, [r0, #0]
 8006736:	60c5      	str	r5, [r0, #12]
 8006738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	b151      	cbz	r1, 8006754 <_dtoa_r+0x5c>
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	604a      	str	r2, [r1, #4]
 8006742:	2301      	movs	r3, #1
 8006744:	4093      	lsls	r3, r2
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	4620      	mov	r0, r4
 800674a:	f001 f99d 	bl	8007a88 <_Bfree>
 800674e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	1e3b      	subs	r3, r7, #0
 8006756:	bfb9      	ittee	lt
 8006758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800675c:	9303      	strlt	r3, [sp, #12]
 800675e:	2300      	movge	r3, #0
 8006760:	f8c8 3000 	strge.w	r3, [r8]
 8006764:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006768:	4ba3      	ldr	r3, [pc, #652]	; (80069f8 <_dtoa_r+0x300>)
 800676a:	bfbc      	itt	lt
 800676c:	2201      	movlt	r2, #1
 800676e:	f8c8 2000 	strlt.w	r2, [r8]
 8006772:	ea33 0309 	bics.w	r3, r3, r9
 8006776:	d11b      	bne.n	80067b0 <_dtoa_r+0xb8>
 8006778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800677a:	f242 730f 	movw	r3, #9999	; 0x270f
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006784:	4333      	orrs	r3, r6
 8006786:	f000 857a 	beq.w	800727e <_dtoa_r+0xb86>
 800678a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800678c:	b963      	cbnz	r3, 80067a8 <_dtoa_r+0xb0>
 800678e:	4b9b      	ldr	r3, [pc, #620]	; (80069fc <_dtoa_r+0x304>)
 8006790:	e024      	b.n	80067dc <_dtoa_r+0xe4>
 8006792:	4b9b      	ldr	r3, [pc, #620]	; (8006a00 <_dtoa_r+0x308>)
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	9800      	ldr	r0, [sp, #0]
 800679e:	b015      	add	sp, #84	; 0x54
 80067a0:	ecbd 8b02 	vpop	{d8}
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	4b94      	ldr	r3, [pc, #592]	; (80069fc <_dtoa_r+0x304>)
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	3303      	adds	r3, #3
 80067ae:	e7f3      	b.n	8006798 <_dtoa_r+0xa0>
 80067b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	ec51 0b17 	vmov	r0, r1, d7
 80067ba:	2300      	movs	r3, #0
 80067bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80067c0:	f7fa f9a2 	bl	8000b08 <__aeabi_dcmpeq>
 80067c4:	4680      	mov	r8, r0
 80067c6:	b158      	cbz	r0, 80067e0 <_dtoa_r+0xe8>
 80067c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067ca:	2301      	movs	r3, #1
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8551 	beq.w	8007278 <_dtoa_r+0xb80>
 80067d6:	488b      	ldr	r0, [pc, #556]	; (8006a04 <_dtoa_r+0x30c>)
 80067d8:	6018      	str	r0, [r3, #0]
 80067da:	1e43      	subs	r3, r0, #1
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	e7dd      	b.n	800679c <_dtoa_r+0xa4>
 80067e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80067e4:	aa12      	add	r2, sp, #72	; 0x48
 80067e6:	a913      	add	r1, sp, #76	; 0x4c
 80067e8:	4620      	mov	r0, r4
 80067ea:	f001 fcf5 	bl	80081d8 <__d2b>
 80067ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067f2:	4683      	mov	fp, r0
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	d07c      	beq.n	80068f2 <_dtoa_r+0x1fa>
 80067f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80067fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006802:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006806:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800680a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800680e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006812:	4b7d      	ldr	r3, [pc, #500]	; (8006a08 <_dtoa_r+0x310>)
 8006814:	2200      	movs	r2, #0
 8006816:	4630      	mov	r0, r6
 8006818:	4639      	mov	r1, r7
 800681a:	f7f9 fd55 	bl	80002c8 <__aeabi_dsub>
 800681e:	a36e      	add	r3, pc, #440	; (adr r3, 80069d8 <_dtoa_r+0x2e0>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 ff08 	bl	8000638 <__aeabi_dmul>
 8006828:	a36d      	add	r3, pc, #436	; (adr r3, 80069e0 <_dtoa_r+0x2e8>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f7f9 fd4d 	bl	80002cc <__adddf3>
 8006832:	4606      	mov	r6, r0
 8006834:	4628      	mov	r0, r5
 8006836:	460f      	mov	r7, r1
 8006838:	f7f9 fe94 	bl	8000564 <__aeabi_i2d>
 800683c:	a36a      	add	r3, pc, #424	; (adr r3, 80069e8 <_dtoa_r+0x2f0>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f7f9 fef9 	bl	8000638 <__aeabi_dmul>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4630      	mov	r0, r6
 800684c:	4639      	mov	r1, r7
 800684e:	f7f9 fd3d 	bl	80002cc <__adddf3>
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	f7fa f99f 	bl	8000b98 <__aeabi_d2iz>
 800685a:	2200      	movs	r2, #0
 800685c:	4682      	mov	sl, r0
 800685e:	2300      	movs	r3, #0
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f95a 	bl	8000b1c <__aeabi_dcmplt>
 8006868:	b148      	cbz	r0, 800687e <_dtoa_r+0x186>
 800686a:	4650      	mov	r0, sl
 800686c:	f7f9 fe7a 	bl	8000564 <__aeabi_i2d>
 8006870:	4632      	mov	r2, r6
 8006872:	463b      	mov	r3, r7
 8006874:	f7fa f948 	bl	8000b08 <__aeabi_dcmpeq>
 8006878:	b908      	cbnz	r0, 800687e <_dtoa_r+0x186>
 800687a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800687e:	f1ba 0f16 	cmp.w	sl, #22
 8006882:	d854      	bhi.n	800692e <_dtoa_r+0x236>
 8006884:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <_dtoa_r+0x314>)
 8006886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006892:	f7fa f943 	bl	8000b1c <__aeabi_dcmplt>
 8006896:	2800      	cmp	r0, #0
 8006898:	d04b      	beq.n	8006932 <_dtoa_r+0x23a>
 800689a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689e:	2300      	movs	r3, #0
 80068a0:	930e      	str	r3, [sp, #56]	; 0x38
 80068a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068a4:	1b5d      	subs	r5, r3, r5
 80068a6:	1e6b      	subs	r3, r5, #1
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	bf43      	ittte	mi
 80068ac:	2300      	movmi	r3, #0
 80068ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80068b2:	9304      	strmi	r3, [sp, #16]
 80068b4:	f04f 0800 	movpl.w	r8, #0
 80068b8:	f1ba 0f00 	cmp.w	sl, #0
 80068bc:	db3b      	blt.n	8006936 <_dtoa_r+0x23e>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80068c4:	4453      	add	r3, sl
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	2300      	movs	r3, #0
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	9b05      	ldr	r3, [sp, #20]
 80068ce:	2b09      	cmp	r3, #9
 80068d0:	d869      	bhi.n	80069a6 <_dtoa_r+0x2ae>
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	bfc4      	itt	gt
 80068d6:	3b04      	subgt	r3, #4
 80068d8:	9305      	strgt	r3, [sp, #20]
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	f1a3 0302 	sub.w	r3, r3, #2
 80068e0:	bfcc      	ite	gt
 80068e2:	2500      	movgt	r5, #0
 80068e4:	2501      	movle	r5, #1
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d869      	bhi.n	80069be <_dtoa_r+0x2c6>
 80068ea:	e8df f003 	tbb	[pc, r3]
 80068ee:	4e2c      	.short	0x4e2c
 80068f0:	5a4c      	.short	0x5a4c
 80068f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80068f6:	441d      	add	r5, r3
 80068f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	bfc1      	itttt	gt
 8006900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006904:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006908:	fa09 f303 	lslgt.w	r3, r9, r3
 800690c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006910:	bfda      	itte	le
 8006912:	f1c3 0320 	rsble	r3, r3, #32
 8006916:	fa06 f003 	lslle.w	r0, r6, r3
 800691a:	4318      	orrgt	r0, r3
 800691c:	f7f9 fe12 	bl	8000544 <__aeabi_ui2d>
 8006920:	2301      	movs	r3, #1
 8006922:	4606      	mov	r6, r0
 8006924:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006928:	3d01      	subs	r5, #1
 800692a:	9310      	str	r3, [sp, #64]	; 0x40
 800692c:	e771      	b.n	8006812 <_dtoa_r+0x11a>
 800692e:	2301      	movs	r3, #1
 8006930:	e7b6      	b.n	80068a0 <_dtoa_r+0x1a8>
 8006932:	900e      	str	r0, [sp, #56]	; 0x38
 8006934:	e7b5      	b.n	80068a2 <_dtoa_r+0x1aa>
 8006936:	f1ca 0300 	rsb	r3, sl, #0
 800693a:	9306      	str	r3, [sp, #24]
 800693c:	2300      	movs	r3, #0
 800693e:	eba8 080a 	sub.w	r8, r8, sl
 8006942:	930d      	str	r3, [sp, #52]	; 0x34
 8006944:	e7c2      	b.n	80068cc <_dtoa_r+0x1d4>
 8006946:	2300      	movs	r3, #0
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	dc39      	bgt.n	80069c4 <_dtoa_r+0x2cc>
 8006950:	f04f 0901 	mov.w	r9, #1
 8006954:	f8cd 9004 	str.w	r9, [sp, #4]
 8006958:	464b      	mov	r3, r9
 800695a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800695e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006960:	2200      	movs	r2, #0
 8006962:	6042      	str	r2, [r0, #4]
 8006964:	2204      	movs	r2, #4
 8006966:	f102 0614 	add.w	r6, r2, #20
 800696a:	429e      	cmp	r6, r3
 800696c:	6841      	ldr	r1, [r0, #4]
 800696e:	d92f      	bls.n	80069d0 <_dtoa_r+0x2d8>
 8006970:	4620      	mov	r0, r4
 8006972:	f001 f849 	bl	8007a08 <_Balloc>
 8006976:	9000      	str	r0, [sp, #0]
 8006978:	2800      	cmp	r0, #0
 800697a:	d14b      	bne.n	8006a14 <_dtoa_r+0x31c>
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <_dtoa_r+0x318>)
 800697e:	4602      	mov	r2, r0
 8006980:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006984:	e6d1      	b.n	800672a <_dtoa_r+0x32>
 8006986:	2301      	movs	r3, #1
 8006988:	e7de      	b.n	8006948 <_dtoa_r+0x250>
 800698a:	2300      	movs	r3, #0
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	eb0a 0903 	add.w	r9, sl, r3
 8006994:	f109 0301 	add.w	r3, r9, #1
 8006998:	2b01      	cmp	r3, #1
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	bfb8      	it	lt
 800699e:	2301      	movlt	r3, #1
 80069a0:	e7dd      	b.n	800695e <_dtoa_r+0x266>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e7f2      	b.n	800698c <_dtoa_r+0x294>
 80069a6:	2501      	movs	r5, #1
 80069a8:	2300      	movs	r3, #0
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	9508      	str	r5, [sp, #32]
 80069ae:	f04f 39ff 	mov.w	r9, #4294967295
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80069b8:	2312      	movs	r3, #18
 80069ba:	9209      	str	r2, [sp, #36]	; 0x24
 80069bc:	e7cf      	b.n	800695e <_dtoa_r+0x266>
 80069be:	2301      	movs	r3, #1
 80069c0:	9308      	str	r3, [sp, #32]
 80069c2:	e7f4      	b.n	80069ae <_dtoa_r+0x2b6>
 80069c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80069cc:	464b      	mov	r3, r9
 80069ce:	e7c6      	b.n	800695e <_dtoa_r+0x266>
 80069d0:	3101      	adds	r1, #1
 80069d2:	6041      	str	r1, [r0, #4]
 80069d4:	0052      	lsls	r2, r2, #1
 80069d6:	e7c6      	b.n	8006966 <_dtoa_r+0x26e>
 80069d8:	636f4361 	.word	0x636f4361
 80069dc:	3fd287a7 	.word	0x3fd287a7
 80069e0:	8b60c8b3 	.word	0x8b60c8b3
 80069e4:	3fc68a28 	.word	0x3fc68a28
 80069e8:	509f79fb 	.word	0x509f79fb
 80069ec:	3fd34413 	.word	0x3fd34413
 80069f0:	080095c6 	.word	0x080095c6
 80069f4:	080095dd 	.word	0x080095dd
 80069f8:	7ff00000 	.word	0x7ff00000
 80069fc:	080095c2 	.word	0x080095c2
 8006a00:	080095b9 	.word	0x080095b9
 8006a04:	08009439 	.word	0x08009439
 8006a08:	3ff80000 	.word	0x3ff80000
 8006a0c:	08009758 	.word	0x08009758
 8006a10:	0800963c 	.word	0x0800963c
 8006a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a16:	9a00      	ldr	r2, [sp, #0]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	2b0e      	cmp	r3, #14
 8006a1e:	f200 80ad 	bhi.w	8006b7c <_dtoa_r+0x484>
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	f000 80aa 	beq.w	8006b7c <_dtoa_r+0x484>
 8006a28:	f1ba 0f00 	cmp.w	sl, #0
 8006a2c:	dd36      	ble.n	8006a9c <_dtoa_r+0x3a4>
 8006a2e:	4ac3      	ldr	r2, [pc, #780]	; (8006d3c <_dtoa_r+0x644>)
 8006a30:	f00a 030f 	and.w	r3, sl, #15
 8006a34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a38:	ed93 7b00 	vldr	d7, [r3]
 8006a3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006a44:	eeb0 8a47 	vmov.f32	s16, s14
 8006a48:	eef0 8a67 	vmov.f32	s17, s15
 8006a4c:	d016      	beq.n	8006a7c <_dtoa_r+0x384>
 8006a4e:	4bbc      	ldr	r3, [pc, #752]	; (8006d40 <_dtoa_r+0x648>)
 8006a50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a58:	f7f9 ff18 	bl	800088c <__aeabi_ddiv>
 8006a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a60:	f007 070f 	and.w	r7, r7, #15
 8006a64:	2503      	movs	r5, #3
 8006a66:	4eb6      	ldr	r6, [pc, #728]	; (8006d40 <_dtoa_r+0x648>)
 8006a68:	b957      	cbnz	r7, 8006a80 <_dtoa_r+0x388>
 8006a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6e:	ec53 2b18 	vmov	r2, r3, d8
 8006a72:	f7f9 ff0b 	bl	800088c <__aeabi_ddiv>
 8006a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a7a:	e029      	b.n	8006ad0 <_dtoa_r+0x3d8>
 8006a7c:	2502      	movs	r5, #2
 8006a7e:	e7f2      	b.n	8006a66 <_dtoa_r+0x36e>
 8006a80:	07f9      	lsls	r1, r7, #31
 8006a82:	d508      	bpl.n	8006a96 <_dtoa_r+0x39e>
 8006a84:	ec51 0b18 	vmov	r0, r1, d8
 8006a88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a8c:	f7f9 fdd4 	bl	8000638 <__aeabi_dmul>
 8006a90:	ec41 0b18 	vmov	d8, r0, r1
 8006a94:	3501      	adds	r5, #1
 8006a96:	107f      	asrs	r7, r7, #1
 8006a98:	3608      	adds	r6, #8
 8006a9a:	e7e5      	b.n	8006a68 <_dtoa_r+0x370>
 8006a9c:	f000 80a6 	beq.w	8006bec <_dtoa_r+0x4f4>
 8006aa0:	f1ca 0600 	rsb	r6, sl, #0
 8006aa4:	4ba5      	ldr	r3, [pc, #660]	; (8006d3c <_dtoa_r+0x644>)
 8006aa6:	4fa6      	ldr	r7, [pc, #664]	; (8006d40 <_dtoa_r+0x648>)
 8006aa8:	f006 020f 	and.w	r2, r6, #15
 8006aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ab8:	f7f9 fdbe 	bl	8000638 <__aeabi_dmul>
 8006abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac0:	1136      	asrs	r6, r6, #4
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2502      	movs	r5, #2
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	f040 8085 	bne.w	8006bd6 <_dtoa_r+0x4de>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1d2      	bne.n	8006a76 <_dtoa_r+0x37e>
 8006ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 808c 	beq.w	8006bf0 <_dtoa_r+0x4f8>
 8006ad8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006adc:	4b99      	ldr	r3, [pc, #612]	; (8006d44 <_dtoa_r+0x64c>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7fa f81a 	bl	8000b1c <__aeabi_dcmplt>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f000 8081 	beq.w	8006bf0 <_dtoa_r+0x4f8>
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d07d      	beq.n	8006bf0 <_dtoa_r+0x4f8>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	dd3c      	ble.n	8006b74 <_dtoa_r+0x47c>
 8006afa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006afe:	9307      	str	r3, [sp, #28]
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b91      	ldr	r3, [pc, #580]	; (8006d48 <_dtoa_r+0x650>)
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 fd96 	bl	8000638 <__aeabi_dmul>
 8006b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b10:	3501      	adds	r5, #1
 8006b12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006b16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7f9 fd22 	bl	8000564 <__aeabi_i2d>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 fd88 	bl	8000638 <__aeabi_dmul>
 8006b28:	4b88      	ldr	r3, [pc, #544]	; (8006d4c <_dtoa_r+0x654>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f7f9 fbce 	bl	80002cc <__adddf3>
 8006b30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b38:	9303      	str	r3, [sp, #12]
 8006b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d15c      	bne.n	8006bfa <_dtoa_r+0x502>
 8006b40:	4b83      	ldr	r3, [pc, #524]	; (8006d50 <_dtoa_r+0x658>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 fbbe 	bl	80002c8 <__aeabi_dsub>
 8006b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	f7fa f800 	bl	8000b58 <__aeabi_dcmpgt>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	f040 8296 	bne.w	800708a <_dtoa_r+0x992>
 8006b5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b62:	4630      	mov	r0, r6
 8006b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7f9 ffd7 	bl	8000b1c <__aeabi_dcmplt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f040 8288 	bne.w	8007084 <_dtoa_r+0x98c>
 8006b74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f2c0 8158 	blt.w	8006e34 <_dtoa_r+0x73c>
 8006b84:	f1ba 0f0e 	cmp.w	sl, #14
 8006b88:	f300 8154 	bgt.w	8006e34 <_dtoa_r+0x73c>
 8006b8c:	4b6b      	ldr	r3, [pc, #428]	; (8006d3c <_dtoa_r+0x644>)
 8006b8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f280 80e3 	bge.w	8006d64 <_dtoa_r+0x66c>
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f300 80df 	bgt.w	8006d64 <_dtoa_r+0x66c>
 8006ba6:	f040 826d 	bne.w	8007084 <_dtoa_r+0x98c>
 8006baa:	4b69      	ldr	r3, [pc, #420]	; (8006d50 <_dtoa_r+0x658>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 fd41 	bl	8000638 <__aeabi_dmul>
 8006bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bba:	f7f9 ffc3 	bl	8000b44 <__aeabi_dcmpge>
 8006bbe:	9e01      	ldr	r6, [sp, #4]
 8006bc0:	4637      	mov	r7, r6
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f040 8243 	bne.w	800704e <_dtoa_r+0x956>
 8006bc8:	9d00      	ldr	r5, [sp, #0]
 8006bca:	2331      	movs	r3, #49	; 0x31
 8006bcc:	f805 3b01 	strb.w	r3, [r5], #1
 8006bd0:	f10a 0a01 	add.w	sl, sl, #1
 8006bd4:	e23f      	b.n	8007056 <_dtoa_r+0x95e>
 8006bd6:	07f2      	lsls	r2, r6, #31
 8006bd8:	d505      	bpl.n	8006be6 <_dtoa_r+0x4ee>
 8006bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bde:	f7f9 fd2b 	bl	8000638 <__aeabi_dmul>
 8006be2:	3501      	adds	r5, #1
 8006be4:	2301      	movs	r3, #1
 8006be6:	1076      	asrs	r6, r6, #1
 8006be8:	3708      	adds	r7, #8
 8006bea:	e76c      	b.n	8006ac6 <_dtoa_r+0x3ce>
 8006bec:	2502      	movs	r5, #2
 8006bee:	e76f      	b.n	8006ad0 <_dtoa_r+0x3d8>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bf8:	e78d      	b.n	8006b16 <_dtoa_r+0x41e>
 8006bfa:	9900      	ldr	r1, [sp, #0]
 8006bfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c00:	4b4e      	ldr	r3, [pc, #312]	; (8006d3c <_dtoa_r+0x644>)
 8006c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c06:	4401      	add	r1, r0
 8006c08:	9102      	str	r1, [sp, #8]
 8006c0a:	9908      	ldr	r1, [sp, #32]
 8006c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c10:	eef0 8a67 	vmov.f32	s17, s15
 8006c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	d045      	beq.n	8006cac <_dtoa_r+0x5b4>
 8006c20:	494c      	ldr	r1, [pc, #304]	; (8006d54 <_dtoa_r+0x65c>)
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7f9 fe32 	bl	800088c <__aeabi_ddiv>
 8006c28:	ec53 2b18 	vmov	r2, r3, d8
 8006c2c:	f7f9 fb4c 	bl	80002c8 <__aeabi_dsub>
 8006c30:	9d00      	ldr	r5, [sp, #0]
 8006c32:	ec41 0b18 	vmov	d8, r0, r1
 8006c36:	4639      	mov	r1, r7
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7f9 ffad 	bl	8000b98 <__aeabi_d2iz>
 8006c3e:	900c      	str	r0, [sp, #48]	; 0x30
 8006c40:	f7f9 fc90 	bl	8000564 <__aeabi_i2d>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fb3c 	bl	80002c8 <__aeabi_dsub>
 8006c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c52:	3330      	adds	r3, #48	; 0x30
 8006c54:	f805 3b01 	strb.w	r3, [r5], #1
 8006c58:	ec53 2b18 	vmov	r2, r3, d8
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	f7f9 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d165      	bne.n	8006d34 <_dtoa_r+0x63c>
 8006c68:	4632      	mov	r2, r6
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	4935      	ldr	r1, [pc, #212]	; (8006d44 <_dtoa_r+0x64c>)
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f7f9 fb2a 	bl	80002c8 <__aeabi_dsub>
 8006c74:	ec53 2b18 	vmov	r2, r3, d8
 8006c78:	f7f9 ff50 	bl	8000b1c <__aeabi_dcmplt>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	f040 80b9 	bne.w	8006df4 <_dtoa_r+0x6fc>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	429d      	cmp	r5, r3
 8006c86:	f43f af75 	beq.w	8006b74 <_dtoa_r+0x47c>
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <_dtoa_r+0x650>)
 8006c8c:	ec51 0b18 	vmov	r0, r1, d8
 8006c90:	2200      	movs	r2, #0
 8006c92:	f7f9 fcd1 	bl	8000638 <__aeabi_dmul>
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <_dtoa_r+0x650>)
 8006c98:	ec41 0b18 	vmov	d8, r0, r1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fcc9 	bl	8000638 <__aeabi_dmul>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	e7c4      	b.n	8006c36 <_dtoa_r+0x53e>
 8006cac:	ec51 0b17 	vmov	r0, r1, d7
 8006cb0:	f7f9 fcc2 	bl	8000638 <__aeabi_dmul>
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	9d00      	ldr	r5, [sp, #0]
 8006cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8006cba:	ec41 0b18 	vmov	d8, r0, r1
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7f9 ff69 	bl	8000b98 <__aeabi_d2iz>
 8006cc6:	9011      	str	r0, [sp, #68]	; 0x44
 8006cc8:	f7f9 fc4c 	bl	8000564 <__aeabi_i2d>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f7f9 faf8 	bl	80002c8 <__aeabi_dsub>
 8006cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cda:	3330      	adds	r3, #48	; 0x30
 8006cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8006ce0:	9b02      	ldr	r3, [sp, #8]
 8006ce2:	429d      	cmp	r5, r3
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	460f      	mov	r7, r1
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	d134      	bne.n	8006d58 <_dtoa_r+0x660>
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <_dtoa_r+0x65c>)
 8006cf0:	ec51 0b18 	vmov	r0, r1, d8
 8006cf4:	f7f9 faea 	bl	80002cc <__adddf3>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f7f9 ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d175      	bne.n	8006df4 <_dtoa_r+0x6fc>
 8006d08:	ec53 2b18 	vmov	r2, r3, d8
 8006d0c:	4911      	ldr	r1, [pc, #68]	; (8006d54 <_dtoa_r+0x65c>)
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f7f9 fada 	bl	80002c8 <__aeabi_dsub>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fefe 	bl	8000b1c <__aeabi_dcmplt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f43f af27 	beq.w	8006b74 <_dtoa_r+0x47c>
 8006d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d28:	1e6b      	subs	r3, r5, #1
 8006d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d0f8      	beq.n	8006d26 <_dtoa_r+0x62e>
 8006d34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d38:	e04a      	b.n	8006dd0 <_dtoa_r+0x6d8>
 8006d3a:	bf00      	nop
 8006d3c:	08009758 	.word	0x08009758
 8006d40:	08009730 	.word	0x08009730
 8006d44:	3ff00000 	.word	0x3ff00000
 8006d48:	40240000 	.word	0x40240000
 8006d4c:	401c0000 	.word	0x401c0000
 8006d50:	40140000 	.word	0x40140000
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	4baf      	ldr	r3, [pc, #700]	; (8007018 <_dtoa_r+0x920>)
 8006d5a:	f7f9 fc6d 	bl	8000638 <__aeabi_dmul>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	460f      	mov	r7, r1
 8006d62:	e7ac      	b.n	8006cbe <_dtoa_r+0x5c6>
 8006d64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d68:	9d00      	ldr	r5, [sp, #0]
 8006d6a:	4642      	mov	r2, r8
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fd8b 	bl	800088c <__aeabi_ddiv>
 8006d76:	f7f9 ff0f 	bl	8000b98 <__aeabi_d2iz>
 8006d7a:	9002      	str	r0, [sp, #8]
 8006d7c:	f7f9 fbf2 	bl	8000564 <__aeabi_i2d>
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	f7f9 fc58 	bl	8000638 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	4639      	mov	r1, r7
 8006d90:	f7f9 fa9a 	bl	80002c8 <__aeabi_dsub>
 8006d94:	9e02      	ldr	r6, [sp, #8]
 8006d96:	9f01      	ldr	r7, [sp, #4]
 8006d98:	3630      	adds	r6, #48	; 0x30
 8006d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8006d9e:	9e00      	ldr	r6, [sp, #0]
 8006da0:	1bae      	subs	r6, r5, r6
 8006da2:	42b7      	cmp	r7, r6
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	d137      	bne.n	8006e1a <_dtoa_r+0x722>
 8006daa:	f7f9 fa8f 	bl	80002cc <__adddf3>
 8006dae:	4642      	mov	r2, r8
 8006db0:	464b      	mov	r3, r9
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	f7f9 fecf 	bl	8000b58 <__aeabi_dcmpgt>
 8006dba:	b9c8      	cbnz	r0, 8006df0 <_dtoa_r+0x6f8>
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fea0 	bl	8000b08 <__aeabi_dcmpeq>
 8006dc8:	b110      	cbz	r0, 8006dd0 <_dtoa_r+0x6d8>
 8006dca:	9b02      	ldr	r3, [sp, #8]
 8006dcc:	07d9      	lsls	r1, r3, #31
 8006dce:	d40f      	bmi.n	8006df0 <_dtoa_r+0x6f8>
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	f000 fe58 	bl	8007a88 <_Bfree>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	702b      	strb	r3, [r5, #0]
 8006ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dde:	f10a 0001 	add.w	r0, sl, #1
 8006de2:	6018      	str	r0, [r3, #0]
 8006de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f43f acd8 	beq.w	800679c <_dtoa_r+0xa4>
 8006dec:	601d      	str	r5, [r3, #0]
 8006dee:	e4d5      	b.n	800679c <_dtoa_r+0xa4>
 8006df0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006df4:	462b      	mov	r3, r5
 8006df6:	461d      	mov	r5, r3
 8006df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dfc:	2a39      	cmp	r2, #57	; 0x39
 8006dfe:	d108      	bne.n	8006e12 <_dtoa_r+0x71a>
 8006e00:	9a00      	ldr	r2, [sp, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d1f7      	bne.n	8006df6 <_dtoa_r+0x6fe>
 8006e06:	9a07      	ldr	r2, [sp, #28]
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	9207      	str	r2, [sp, #28]
 8006e0e:	2230      	movs	r2, #48	; 0x30
 8006e10:	700a      	strb	r2, [r1, #0]
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	3201      	adds	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e78c      	b.n	8006d34 <_dtoa_r+0x63c>
 8006e1a:	4b7f      	ldr	r3, [pc, #508]	; (8007018 <_dtoa_r+0x920>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f7f9 fc0b 	bl	8000638 <__aeabi_dmul>
 8006e22:	2200      	movs	r2, #0
 8006e24:	2300      	movs	r3, #0
 8006e26:	4606      	mov	r6, r0
 8006e28:	460f      	mov	r7, r1
 8006e2a:	f7f9 fe6d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d09b      	beq.n	8006d6a <_dtoa_r+0x672>
 8006e32:	e7cd      	b.n	8006dd0 <_dtoa_r+0x6d8>
 8006e34:	9a08      	ldr	r2, [sp, #32]
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	f000 80c4 	beq.w	8006fc4 <_dtoa_r+0x8cc>
 8006e3c:	9a05      	ldr	r2, [sp, #20]
 8006e3e:	2a01      	cmp	r2, #1
 8006e40:	f300 80a8 	bgt.w	8006f94 <_dtoa_r+0x89c>
 8006e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	f000 80a0 	beq.w	8006f8c <_dtoa_r+0x894>
 8006e4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e50:	9e06      	ldr	r6, [sp, #24]
 8006e52:	4645      	mov	r5, r8
 8006e54:	9a04      	ldr	r2, [sp, #16]
 8006e56:	2101      	movs	r1, #1
 8006e58:	441a      	add	r2, r3
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4498      	add	r8, r3
 8006e5e:	9204      	str	r2, [sp, #16]
 8006e60:	f000 ff18 	bl	8007c94 <__i2b>
 8006e64:	4607      	mov	r7, r0
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	dd0b      	ble.n	8006e82 <_dtoa_r+0x78a>
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dd08      	ble.n	8006e82 <_dtoa_r+0x78a>
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	9a04      	ldr	r2, [sp, #16]
 8006e74:	bfa8      	it	ge
 8006e76:	462b      	movge	r3, r5
 8006e78:	eba8 0803 	sub.w	r8, r8, r3
 8006e7c:	1aed      	subs	r5, r5, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	b1fb      	cbz	r3, 8006ec6 <_dtoa_r+0x7ce>
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 809f 	beq.w	8006fcc <_dtoa_r+0x8d4>
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	dd11      	ble.n	8006eb6 <_dtoa_r+0x7be>
 8006e92:	4639      	mov	r1, r7
 8006e94:	4632      	mov	r2, r6
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 ffb8 	bl	8007e0c <__pow5mult>
 8006e9c:	465a      	mov	r2, fp
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 ff0c 	bl	8007cc0 <__multiply>
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	9007      	str	r0, [sp, #28]
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 fdeb 	bl	8007a88 <_Bfree>
 8006eb2:	9b07      	ldr	r3, [sp, #28]
 8006eb4:	469b      	mov	fp, r3
 8006eb6:	9b06      	ldr	r3, [sp, #24]
 8006eb8:	1b9a      	subs	r2, r3, r6
 8006eba:	d004      	beq.n	8006ec6 <_dtoa_r+0x7ce>
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 ffa4 	bl	8007e0c <__pow5mult>
 8006ec4:	4683      	mov	fp, r0
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fee3 	bl	8007c94 <__i2b>
 8006ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	dd7c      	ble.n	8006fd0 <_dtoa_r+0x8d8>
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4601      	mov	r1, r0
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 ff96 	bl	8007e0c <__pow5mult>
 8006ee0:	9b05      	ldr	r3, [sp, #20]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	dd76      	ble.n	8006fd6 <_dtoa_r+0x8de>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9306      	str	r3, [sp, #24]
 8006eec:	6933      	ldr	r3, [r6, #16]
 8006eee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ef2:	6918      	ldr	r0, [r3, #16]
 8006ef4:	f000 fe7e 	bl	8007bf4 <__hi0bits>
 8006ef8:	f1c0 0020 	rsb	r0, r0, #32
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	4418      	add	r0, r3
 8006f00:	f010 001f 	ands.w	r0, r0, #31
 8006f04:	f000 8086 	beq.w	8007014 <_dtoa_r+0x91c>
 8006f08:	f1c0 0320 	rsb	r3, r0, #32
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	dd7f      	ble.n	8007010 <_dtoa_r+0x918>
 8006f10:	f1c0 001c 	rsb	r0, r0, #28
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	4403      	add	r3, r0
 8006f18:	4480      	add	r8, r0
 8006f1a:	4405      	add	r5, r0
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	f1b8 0f00 	cmp.w	r8, #0
 8006f22:	dd05      	ble.n	8006f30 <_dtoa_r+0x838>
 8006f24:	4659      	mov	r1, fp
 8006f26:	4642      	mov	r2, r8
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 ffc9 	bl	8007ec0 <__lshift>
 8006f2e:	4683      	mov	fp, r0
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dd05      	ble.n	8006f42 <_dtoa_r+0x84a>
 8006f36:	4631      	mov	r1, r6
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 ffc0 	bl	8007ec0 <__lshift>
 8006f40:	4606      	mov	r6, r0
 8006f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d069      	beq.n	800701c <_dtoa_r+0x924>
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f001 f824 	bl	8007f98 <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	da63      	bge.n	800701c <_dtoa_r+0x924>
 8006f54:	2300      	movs	r3, #0
 8006f56:	4659      	mov	r1, fp
 8006f58:	220a      	movs	r2, #10
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fdb6 	bl	8007acc <__multadd>
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f66:	4683      	mov	fp, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 818f 	beq.w	800728c <_dtoa_r+0xb94>
 8006f6e:	4639      	mov	r1, r7
 8006f70:	2300      	movs	r3, #0
 8006f72:	220a      	movs	r2, #10
 8006f74:	4620      	mov	r0, r4
 8006f76:	f000 fda9 	bl	8007acc <__multadd>
 8006f7a:	f1b9 0f00 	cmp.w	r9, #0
 8006f7e:	4607      	mov	r7, r0
 8006f80:	f300 808e 	bgt.w	80070a0 <_dtoa_r+0x9a8>
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	dc50      	bgt.n	800702c <_dtoa_r+0x934>
 8006f8a:	e089      	b.n	80070a0 <_dtoa_r+0x9a8>
 8006f8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f92:	e75d      	b.n	8006e50 <_dtoa_r+0x758>
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	1e5e      	subs	r6, r3, #1
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	42b3      	cmp	r3, r6
 8006f9c:	bfbf      	itttt	lt
 8006f9e:	9b06      	ldrlt	r3, [sp, #24]
 8006fa0:	9606      	strlt	r6, [sp, #24]
 8006fa2:	1af2      	sublt	r2, r6, r3
 8006fa4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006fa6:	bfb6      	itet	lt
 8006fa8:	189b      	addlt	r3, r3, r2
 8006faa:	1b9e      	subge	r6, r3, r6
 8006fac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	bfb8      	it	lt
 8006fb2:	2600      	movlt	r6, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfb5      	itete	lt
 8006fb8:	eba8 0503 	sublt.w	r5, r8, r3
 8006fbc:	9b01      	ldrge	r3, [sp, #4]
 8006fbe:	2300      	movlt	r3, #0
 8006fc0:	4645      	movge	r5, r8
 8006fc2:	e747      	b.n	8006e54 <_dtoa_r+0x75c>
 8006fc4:	9e06      	ldr	r6, [sp, #24]
 8006fc6:	9f08      	ldr	r7, [sp, #32]
 8006fc8:	4645      	mov	r5, r8
 8006fca:	e74c      	b.n	8006e66 <_dtoa_r+0x76e>
 8006fcc:	9a06      	ldr	r2, [sp, #24]
 8006fce:	e775      	b.n	8006ebc <_dtoa_r+0x7c4>
 8006fd0:	9b05      	ldr	r3, [sp, #20]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	dc18      	bgt.n	8007008 <_dtoa_r+0x910>
 8006fd6:	9b02      	ldr	r3, [sp, #8]
 8006fd8:	b9b3      	cbnz	r3, 8007008 <_dtoa_r+0x910>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fe0:	b9a3      	cbnz	r3, 800700c <_dtoa_r+0x914>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	051b      	lsls	r3, r3, #20
 8006fec:	b12b      	cbz	r3, 8006ffa <_dtoa_r+0x902>
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	f108 0801 	add.w	r8, r8, #1
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	9306      	str	r3, [sp, #24]
 8006ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f47f af74 	bne.w	8006eec <_dtoa_r+0x7f4>
 8007004:	2001      	movs	r0, #1
 8007006:	e779      	b.n	8006efc <_dtoa_r+0x804>
 8007008:	2300      	movs	r3, #0
 800700a:	e7f6      	b.n	8006ffa <_dtoa_r+0x902>
 800700c:	9b02      	ldr	r3, [sp, #8]
 800700e:	e7f4      	b.n	8006ffa <_dtoa_r+0x902>
 8007010:	d085      	beq.n	8006f1e <_dtoa_r+0x826>
 8007012:	4618      	mov	r0, r3
 8007014:	301c      	adds	r0, #28
 8007016:	e77d      	b.n	8006f14 <_dtoa_r+0x81c>
 8007018:	40240000 	.word	0x40240000
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dc38      	bgt.n	8007094 <_dtoa_r+0x99c>
 8007022:	9b05      	ldr	r3, [sp, #20]
 8007024:	2b02      	cmp	r3, #2
 8007026:	dd35      	ble.n	8007094 <_dtoa_r+0x99c>
 8007028:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800702c:	f1b9 0f00 	cmp.w	r9, #0
 8007030:	d10d      	bne.n	800704e <_dtoa_r+0x956>
 8007032:	4631      	mov	r1, r6
 8007034:	464b      	mov	r3, r9
 8007036:	2205      	movs	r2, #5
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fd47 	bl	8007acc <__multadd>
 800703e:	4601      	mov	r1, r0
 8007040:	4606      	mov	r6, r0
 8007042:	4658      	mov	r0, fp
 8007044:	f000 ffa8 	bl	8007f98 <__mcmp>
 8007048:	2800      	cmp	r0, #0
 800704a:	f73f adbd 	bgt.w	8006bc8 <_dtoa_r+0x4d0>
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	9d00      	ldr	r5, [sp, #0]
 8007052:	ea6f 0a03 	mvn.w	sl, r3
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	4631      	mov	r1, r6
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fd13 	bl	8007a88 <_Bfree>
 8007062:	2f00      	cmp	r7, #0
 8007064:	f43f aeb4 	beq.w	8006dd0 <_dtoa_r+0x6d8>
 8007068:	f1b8 0f00 	cmp.w	r8, #0
 800706c:	d005      	beq.n	800707a <_dtoa_r+0x982>
 800706e:	45b8      	cmp	r8, r7
 8007070:	d003      	beq.n	800707a <_dtoa_r+0x982>
 8007072:	4641      	mov	r1, r8
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fd07 	bl	8007a88 <_Bfree>
 800707a:	4639      	mov	r1, r7
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fd03 	bl	8007a88 <_Bfree>
 8007082:	e6a5      	b.n	8006dd0 <_dtoa_r+0x6d8>
 8007084:	2600      	movs	r6, #0
 8007086:	4637      	mov	r7, r6
 8007088:	e7e1      	b.n	800704e <_dtoa_r+0x956>
 800708a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800708c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007090:	4637      	mov	r7, r6
 8007092:	e599      	b.n	8006bc8 <_dtoa_r+0x4d0>
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 80fd 	beq.w	800729a <_dtoa_r+0xba2>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	dd05      	ble.n	80070b0 <_dtoa_r+0x9b8>
 80070a4:	4639      	mov	r1, r7
 80070a6:	462a      	mov	r2, r5
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 ff09 	bl	8007ec0 <__lshift>
 80070ae:	4607      	mov	r7, r0
 80070b0:	9b06      	ldr	r3, [sp, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d05c      	beq.n	8007170 <_dtoa_r+0xa78>
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fca5 	bl	8007a08 <_Balloc>
 80070be:	4605      	mov	r5, r0
 80070c0:	b928      	cbnz	r0, 80070ce <_dtoa_r+0x9d6>
 80070c2:	4b80      	ldr	r3, [pc, #512]	; (80072c4 <_dtoa_r+0xbcc>)
 80070c4:	4602      	mov	r2, r0
 80070c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070ca:	f7ff bb2e 	b.w	800672a <_dtoa_r+0x32>
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	3202      	adds	r2, #2
 80070d2:	0092      	lsls	r2, r2, #2
 80070d4:	f107 010c 	add.w	r1, r7, #12
 80070d8:	300c      	adds	r0, #12
 80070da:	f000 fc87 	bl	80079ec <memcpy>
 80070de:	2201      	movs	r2, #1
 80070e0:	4629      	mov	r1, r5
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 feec 	bl	8007ec0 <__lshift>
 80070e8:	9b00      	ldr	r3, [sp, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	9b00      	ldr	r3, [sp, #0]
 80070f0:	444b      	add	r3, r9
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	46b8      	mov	r8, r7
 80070fc:	9306      	str	r3, [sp, #24]
 80070fe:	4607      	mov	r7, r0
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	4631      	mov	r1, r6
 8007104:	3b01      	subs	r3, #1
 8007106:	4658      	mov	r0, fp
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	f7ff fa67 	bl	80065dc <quorem>
 800710e:	4603      	mov	r3, r0
 8007110:	3330      	adds	r3, #48	; 0x30
 8007112:	9004      	str	r0, [sp, #16]
 8007114:	4641      	mov	r1, r8
 8007116:	4658      	mov	r0, fp
 8007118:	9308      	str	r3, [sp, #32]
 800711a:	f000 ff3d 	bl	8007f98 <__mcmp>
 800711e:	463a      	mov	r2, r7
 8007120:	4681      	mov	r9, r0
 8007122:	4631      	mov	r1, r6
 8007124:	4620      	mov	r0, r4
 8007126:	f000 ff53 	bl	8007fd0 <__mdiff>
 800712a:	68c2      	ldr	r2, [r0, #12]
 800712c:	9b08      	ldr	r3, [sp, #32]
 800712e:	4605      	mov	r5, r0
 8007130:	bb02      	cbnz	r2, 8007174 <_dtoa_r+0xa7c>
 8007132:	4601      	mov	r1, r0
 8007134:	4658      	mov	r0, fp
 8007136:	f000 ff2f 	bl	8007f98 <__mcmp>
 800713a:	9b08      	ldr	r3, [sp, #32]
 800713c:	4602      	mov	r2, r0
 800713e:	4629      	mov	r1, r5
 8007140:	4620      	mov	r0, r4
 8007142:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007146:	f000 fc9f 	bl	8007a88 <_Bfree>
 800714a:	9b05      	ldr	r3, [sp, #20]
 800714c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714e:	9d01      	ldr	r5, [sp, #4]
 8007150:	ea43 0102 	orr.w	r1, r3, r2
 8007154:	9b06      	ldr	r3, [sp, #24]
 8007156:	430b      	orrs	r3, r1
 8007158:	9b08      	ldr	r3, [sp, #32]
 800715a:	d10d      	bne.n	8007178 <_dtoa_r+0xa80>
 800715c:	2b39      	cmp	r3, #57	; 0x39
 800715e:	d029      	beq.n	80071b4 <_dtoa_r+0xabc>
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	dd01      	ble.n	800716a <_dtoa_r+0xa72>
 8007166:	9b04      	ldr	r3, [sp, #16]
 8007168:	3331      	adds	r3, #49	; 0x31
 800716a:	9a02      	ldr	r2, [sp, #8]
 800716c:	7013      	strb	r3, [r2, #0]
 800716e:	e774      	b.n	800705a <_dtoa_r+0x962>
 8007170:	4638      	mov	r0, r7
 8007172:	e7b9      	b.n	80070e8 <_dtoa_r+0x9f0>
 8007174:	2201      	movs	r2, #1
 8007176:	e7e2      	b.n	800713e <_dtoa_r+0xa46>
 8007178:	f1b9 0f00 	cmp.w	r9, #0
 800717c:	db06      	blt.n	800718c <_dtoa_r+0xa94>
 800717e:	9905      	ldr	r1, [sp, #20]
 8007180:	ea41 0909 	orr.w	r9, r1, r9
 8007184:	9906      	ldr	r1, [sp, #24]
 8007186:	ea59 0101 	orrs.w	r1, r9, r1
 800718a:	d120      	bne.n	80071ce <_dtoa_r+0xad6>
 800718c:	2a00      	cmp	r2, #0
 800718e:	ddec      	ble.n	800716a <_dtoa_r+0xa72>
 8007190:	4659      	mov	r1, fp
 8007192:	2201      	movs	r2, #1
 8007194:	4620      	mov	r0, r4
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f000 fe92 	bl	8007ec0 <__lshift>
 800719c:	4631      	mov	r1, r6
 800719e:	4683      	mov	fp, r0
 80071a0:	f000 fefa 	bl	8007f98 <__mcmp>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	dc02      	bgt.n	80071b0 <_dtoa_r+0xab8>
 80071aa:	d1de      	bne.n	800716a <_dtoa_r+0xa72>
 80071ac:	07da      	lsls	r2, r3, #31
 80071ae:	d5dc      	bpl.n	800716a <_dtoa_r+0xa72>
 80071b0:	2b39      	cmp	r3, #57	; 0x39
 80071b2:	d1d8      	bne.n	8007166 <_dtoa_r+0xa6e>
 80071b4:	9a02      	ldr	r2, [sp, #8]
 80071b6:	2339      	movs	r3, #57	; 0x39
 80071b8:	7013      	strb	r3, [r2, #0]
 80071ba:	462b      	mov	r3, r5
 80071bc:	461d      	mov	r5, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071c4:	2a39      	cmp	r2, #57	; 0x39
 80071c6:	d050      	beq.n	800726a <_dtoa_r+0xb72>
 80071c8:	3201      	adds	r2, #1
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e745      	b.n	800705a <_dtoa_r+0x962>
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	dd03      	ble.n	80071da <_dtoa_r+0xae2>
 80071d2:	2b39      	cmp	r3, #57	; 0x39
 80071d4:	d0ee      	beq.n	80071b4 <_dtoa_r+0xabc>
 80071d6:	3301      	adds	r3, #1
 80071d8:	e7c7      	b.n	800716a <_dtoa_r+0xa72>
 80071da:	9a01      	ldr	r2, [sp, #4]
 80071dc:	9907      	ldr	r1, [sp, #28]
 80071de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071e2:	428a      	cmp	r2, r1
 80071e4:	d02a      	beq.n	800723c <_dtoa_r+0xb44>
 80071e6:	4659      	mov	r1, fp
 80071e8:	2300      	movs	r3, #0
 80071ea:	220a      	movs	r2, #10
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fc6d 	bl	8007acc <__multadd>
 80071f2:	45b8      	cmp	r8, r7
 80071f4:	4683      	mov	fp, r0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	f04f 020a 	mov.w	r2, #10
 80071fe:	4641      	mov	r1, r8
 8007200:	4620      	mov	r0, r4
 8007202:	d107      	bne.n	8007214 <_dtoa_r+0xb1c>
 8007204:	f000 fc62 	bl	8007acc <__multadd>
 8007208:	4680      	mov	r8, r0
 800720a:	4607      	mov	r7, r0
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	3301      	adds	r3, #1
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	e775      	b.n	8007100 <_dtoa_r+0xa08>
 8007214:	f000 fc5a 	bl	8007acc <__multadd>
 8007218:	4639      	mov	r1, r7
 800721a:	4680      	mov	r8, r0
 800721c:	2300      	movs	r3, #0
 800721e:	220a      	movs	r2, #10
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fc53 	bl	8007acc <__multadd>
 8007226:	4607      	mov	r7, r0
 8007228:	e7f0      	b.n	800720c <_dtoa_r+0xb14>
 800722a:	f1b9 0f00 	cmp.w	r9, #0
 800722e:	9a00      	ldr	r2, [sp, #0]
 8007230:	bfcc      	ite	gt
 8007232:	464d      	movgt	r5, r9
 8007234:	2501      	movle	r5, #1
 8007236:	4415      	add	r5, r2
 8007238:	f04f 0800 	mov.w	r8, #0
 800723c:	4659      	mov	r1, fp
 800723e:	2201      	movs	r2, #1
 8007240:	4620      	mov	r0, r4
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	f000 fe3c 	bl	8007ec0 <__lshift>
 8007248:	4631      	mov	r1, r6
 800724a:	4683      	mov	fp, r0
 800724c:	f000 fea4 	bl	8007f98 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	dcb2      	bgt.n	80071ba <_dtoa_r+0xac2>
 8007254:	d102      	bne.n	800725c <_dtoa_r+0xb64>
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	07db      	lsls	r3, r3, #31
 800725a:	d4ae      	bmi.n	80071ba <_dtoa_r+0xac2>
 800725c:	462b      	mov	r3, r5
 800725e:	461d      	mov	r5, r3
 8007260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007264:	2a30      	cmp	r2, #48	; 0x30
 8007266:	d0fa      	beq.n	800725e <_dtoa_r+0xb66>
 8007268:	e6f7      	b.n	800705a <_dtoa_r+0x962>
 800726a:	9a00      	ldr	r2, [sp, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d1a5      	bne.n	80071bc <_dtoa_r+0xac4>
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	2331      	movs	r3, #49	; 0x31
 8007276:	e779      	b.n	800716c <_dtoa_r+0xa74>
 8007278:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <_dtoa_r+0xbd0>)
 800727a:	f7ff baaf 	b.w	80067dc <_dtoa_r+0xe4>
 800727e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007280:	2b00      	cmp	r3, #0
 8007282:	f47f aa86 	bne.w	8006792 <_dtoa_r+0x9a>
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <_dtoa_r+0xbd4>)
 8007288:	f7ff baa8 	b.w	80067dc <_dtoa_r+0xe4>
 800728c:	f1b9 0f00 	cmp.w	r9, #0
 8007290:	dc03      	bgt.n	800729a <_dtoa_r+0xba2>
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f73f aec9 	bgt.w	800702c <_dtoa_r+0x934>
 800729a:	9d00      	ldr	r5, [sp, #0]
 800729c:	4631      	mov	r1, r6
 800729e:	4658      	mov	r0, fp
 80072a0:	f7ff f99c 	bl	80065dc <quorem>
 80072a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072a8:	f805 3b01 	strb.w	r3, [r5], #1
 80072ac:	9a00      	ldr	r2, [sp, #0]
 80072ae:	1aaa      	subs	r2, r5, r2
 80072b0:	4591      	cmp	r9, r2
 80072b2:	ddba      	ble.n	800722a <_dtoa_r+0xb32>
 80072b4:	4659      	mov	r1, fp
 80072b6:	2300      	movs	r3, #0
 80072b8:	220a      	movs	r2, #10
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fc06 	bl	8007acc <__multadd>
 80072c0:	4683      	mov	fp, r0
 80072c2:	e7eb      	b.n	800729c <_dtoa_r+0xba4>
 80072c4:	0800963c 	.word	0x0800963c
 80072c8:	08009438 	.word	0x08009438
 80072cc:	080095b9 	.word	0x080095b9

080072d0 <rshift>:
 80072d0:	6903      	ldr	r3, [r0, #16]
 80072d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80072d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80072de:	f100 0414 	add.w	r4, r0, #20
 80072e2:	dd45      	ble.n	8007370 <rshift+0xa0>
 80072e4:	f011 011f 	ands.w	r1, r1, #31
 80072e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80072ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80072f0:	d10c      	bne.n	800730c <rshift+0x3c>
 80072f2:	f100 0710 	add.w	r7, r0, #16
 80072f6:	4629      	mov	r1, r5
 80072f8:	42b1      	cmp	r1, r6
 80072fa:	d334      	bcc.n	8007366 <rshift+0x96>
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	1eea      	subs	r2, r5, #3
 8007302:	4296      	cmp	r6, r2
 8007304:	bf38      	it	cc
 8007306:	2300      	movcc	r3, #0
 8007308:	4423      	add	r3, r4
 800730a:	e015      	b.n	8007338 <rshift+0x68>
 800730c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007310:	f1c1 0820 	rsb	r8, r1, #32
 8007314:	40cf      	lsrs	r7, r1
 8007316:	f105 0e04 	add.w	lr, r5, #4
 800731a:	46a1      	mov	r9, r4
 800731c:	4576      	cmp	r6, lr
 800731e:	46f4      	mov	ip, lr
 8007320:	d815      	bhi.n	800734e <rshift+0x7e>
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	009a      	lsls	r2, r3, #2
 8007326:	3a04      	subs	r2, #4
 8007328:	3501      	adds	r5, #1
 800732a:	42ae      	cmp	r6, r5
 800732c:	bf38      	it	cc
 800732e:	2200      	movcc	r2, #0
 8007330:	18a3      	adds	r3, r4, r2
 8007332:	50a7      	str	r7, [r4, r2]
 8007334:	b107      	cbz	r7, 8007338 <rshift+0x68>
 8007336:	3304      	adds	r3, #4
 8007338:	1b1a      	subs	r2, r3, r4
 800733a:	42a3      	cmp	r3, r4
 800733c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007340:	bf08      	it	eq
 8007342:	2300      	moveq	r3, #0
 8007344:	6102      	str	r2, [r0, #16]
 8007346:	bf08      	it	eq
 8007348:	6143      	streq	r3, [r0, #20]
 800734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800734e:	f8dc c000 	ldr.w	ip, [ip]
 8007352:	fa0c fc08 	lsl.w	ip, ip, r8
 8007356:	ea4c 0707 	orr.w	r7, ip, r7
 800735a:	f849 7b04 	str.w	r7, [r9], #4
 800735e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007362:	40cf      	lsrs	r7, r1
 8007364:	e7da      	b.n	800731c <rshift+0x4c>
 8007366:	f851 cb04 	ldr.w	ip, [r1], #4
 800736a:	f847 cf04 	str.w	ip, [r7, #4]!
 800736e:	e7c3      	b.n	80072f8 <rshift+0x28>
 8007370:	4623      	mov	r3, r4
 8007372:	e7e1      	b.n	8007338 <rshift+0x68>

08007374 <__hexdig_fun>:
 8007374:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007378:	2b09      	cmp	r3, #9
 800737a:	d802      	bhi.n	8007382 <__hexdig_fun+0xe>
 800737c:	3820      	subs	r0, #32
 800737e:	b2c0      	uxtb	r0, r0
 8007380:	4770      	bx	lr
 8007382:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007386:	2b05      	cmp	r3, #5
 8007388:	d801      	bhi.n	800738e <__hexdig_fun+0x1a>
 800738a:	3847      	subs	r0, #71	; 0x47
 800738c:	e7f7      	b.n	800737e <__hexdig_fun+0xa>
 800738e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007392:	2b05      	cmp	r3, #5
 8007394:	d801      	bhi.n	800739a <__hexdig_fun+0x26>
 8007396:	3827      	subs	r0, #39	; 0x27
 8007398:	e7f1      	b.n	800737e <__hexdig_fun+0xa>
 800739a:	2000      	movs	r0, #0
 800739c:	4770      	bx	lr
	...

080073a0 <__gethex>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	ed2d 8b02 	vpush	{d8}
 80073a8:	b089      	sub	sp, #36	; 0x24
 80073aa:	ee08 0a10 	vmov	s16, r0
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	4bbc      	ldr	r3, [pc, #752]	; (80076a4 <__gethex+0x304>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	4618      	mov	r0, r3
 80073b8:	468b      	mov	fp, r1
 80073ba:	4690      	mov	r8, r2
 80073bc:	f7f8 ff28 	bl	8000210 <strlen>
 80073c0:	9b01      	ldr	r3, [sp, #4]
 80073c2:	f8db 2000 	ldr.w	r2, [fp]
 80073c6:	4403      	add	r3, r0
 80073c8:	4682      	mov	sl, r0
 80073ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	1c93      	adds	r3, r2, #2
 80073d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80073d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80073da:	32fe      	adds	r2, #254	; 0xfe
 80073dc:	18d1      	adds	r1, r2, r3
 80073de:	461f      	mov	r7, r3
 80073e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80073e4:	9100      	str	r1, [sp, #0]
 80073e6:	2830      	cmp	r0, #48	; 0x30
 80073e8:	d0f8      	beq.n	80073dc <__gethex+0x3c>
 80073ea:	f7ff ffc3 	bl	8007374 <__hexdig_fun>
 80073ee:	4604      	mov	r4, r0
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d13a      	bne.n	800746a <__gethex+0xca>
 80073f4:	9901      	ldr	r1, [sp, #4]
 80073f6:	4652      	mov	r2, sl
 80073f8:	4638      	mov	r0, r7
 80073fa:	f001 f9ed 	bl	80087d8 <strncmp>
 80073fe:	4605      	mov	r5, r0
 8007400:	2800      	cmp	r0, #0
 8007402:	d168      	bne.n	80074d6 <__gethex+0x136>
 8007404:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007408:	eb07 060a 	add.w	r6, r7, sl
 800740c:	f7ff ffb2 	bl	8007374 <__hexdig_fun>
 8007410:	2800      	cmp	r0, #0
 8007412:	d062      	beq.n	80074da <__gethex+0x13a>
 8007414:	4633      	mov	r3, r6
 8007416:	7818      	ldrb	r0, [r3, #0]
 8007418:	2830      	cmp	r0, #48	; 0x30
 800741a:	461f      	mov	r7, r3
 800741c:	f103 0301 	add.w	r3, r3, #1
 8007420:	d0f9      	beq.n	8007416 <__gethex+0x76>
 8007422:	f7ff ffa7 	bl	8007374 <__hexdig_fun>
 8007426:	2301      	movs	r3, #1
 8007428:	fab0 f480 	clz	r4, r0
 800742c:	0964      	lsrs	r4, r4, #5
 800742e:	4635      	mov	r5, r6
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	463a      	mov	r2, r7
 8007434:	4616      	mov	r6, r2
 8007436:	3201      	adds	r2, #1
 8007438:	7830      	ldrb	r0, [r6, #0]
 800743a:	f7ff ff9b 	bl	8007374 <__hexdig_fun>
 800743e:	2800      	cmp	r0, #0
 8007440:	d1f8      	bne.n	8007434 <__gethex+0x94>
 8007442:	9901      	ldr	r1, [sp, #4]
 8007444:	4652      	mov	r2, sl
 8007446:	4630      	mov	r0, r6
 8007448:	f001 f9c6 	bl	80087d8 <strncmp>
 800744c:	b980      	cbnz	r0, 8007470 <__gethex+0xd0>
 800744e:	b94d      	cbnz	r5, 8007464 <__gethex+0xc4>
 8007450:	eb06 050a 	add.w	r5, r6, sl
 8007454:	462a      	mov	r2, r5
 8007456:	4616      	mov	r6, r2
 8007458:	3201      	adds	r2, #1
 800745a:	7830      	ldrb	r0, [r6, #0]
 800745c:	f7ff ff8a 	bl	8007374 <__hexdig_fun>
 8007460:	2800      	cmp	r0, #0
 8007462:	d1f8      	bne.n	8007456 <__gethex+0xb6>
 8007464:	1bad      	subs	r5, r5, r6
 8007466:	00ad      	lsls	r5, r5, #2
 8007468:	e004      	b.n	8007474 <__gethex+0xd4>
 800746a:	2400      	movs	r4, #0
 800746c:	4625      	mov	r5, r4
 800746e:	e7e0      	b.n	8007432 <__gethex+0x92>
 8007470:	2d00      	cmp	r5, #0
 8007472:	d1f7      	bne.n	8007464 <__gethex+0xc4>
 8007474:	7833      	ldrb	r3, [r6, #0]
 8007476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800747a:	2b50      	cmp	r3, #80	; 0x50
 800747c:	d13b      	bne.n	80074f6 <__gethex+0x156>
 800747e:	7873      	ldrb	r3, [r6, #1]
 8007480:	2b2b      	cmp	r3, #43	; 0x2b
 8007482:	d02c      	beq.n	80074de <__gethex+0x13e>
 8007484:	2b2d      	cmp	r3, #45	; 0x2d
 8007486:	d02e      	beq.n	80074e6 <__gethex+0x146>
 8007488:	1c71      	adds	r1, r6, #1
 800748a:	f04f 0900 	mov.w	r9, #0
 800748e:	7808      	ldrb	r0, [r1, #0]
 8007490:	f7ff ff70 	bl	8007374 <__hexdig_fun>
 8007494:	1e43      	subs	r3, r0, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b18      	cmp	r3, #24
 800749a:	d82c      	bhi.n	80074f6 <__gethex+0x156>
 800749c:	f1a0 0210 	sub.w	r2, r0, #16
 80074a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074a4:	f7ff ff66 	bl	8007374 <__hexdig_fun>
 80074a8:	1e43      	subs	r3, r0, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b18      	cmp	r3, #24
 80074ae:	d91d      	bls.n	80074ec <__gethex+0x14c>
 80074b0:	f1b9 0f00 	cmp.w	r9, #0
 80074b4:	d000      	beq.n	80074b8 <__gethex+0x118>
 80074b6:	4252      	negs	r2, r2
 80074b8:	4415      	add	r5, r2
 80074ba:	f8cb 1000 	str.w	r1, [fp]
 80074be:	b1e4      	cbz	r4, 80074fa <__gethex+0x15a>
 80074c0:	9b00      	ldr	r3, [sp, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	bf14      	ite	ne
 80074c6:	2700      	movne	r7, #0
 80074c8:	2706      	moveq	r7, #6
 80074ca:	4638      	mov	r0, r7
 80074cc:	b009      	add	sp, #36	; 0x24
 80074ce:	ecbd 8b02 	vpop	{d8}
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d6:	463e      	mov	r6, r7
 80074d8:	4625      	mov	r5, r4
 80074da:	2401      	movs	r4, #1
 80074dc:	e7ca      	b.n	8007474 <__gethex+0xd4>
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	1cb1      	adds	r1, r6, #2
 80074e4:	e7d3      	b.n	800748e <__gethex+0xee>
 80074e6:	f04f 0901 	mov.w	r9, #1
 80074ea:	e7fa      	b.n	80074e2 <__gethex+0x142>
 80074ec:	230a      	movs	r3, #10
 80074ee:	fb03 0202 	mla	r2, r3, r2, r0
 80074f2:	3a10      	subs	r2, #16
 80074f4:	e7d4      	b.n	80074a0 <__gethex+0x100>
 80074f6:	4631      	mov	r1, r6
 80074f8:	e7df      	b.n	80074ba <__gethex+0x11a>
 80074fa:	1bf3      	subs	r3, r6, r7
 80074fc:	3b01      	subs	r3, #1
 80074fe:	4621      	mov	r1, r4
 8007500:	2b07      	cmp	r3, #7
 8007502:	dc0b      	bgt.n	800751c <__gethex+0x17c>
 8007504:	ee18 0a10 	vmov	r0, s16
 8007508:	f000 fa7e 	bl	8007a08 <_Balloc>
 800750c:	4604      	mov	r4, r0
 800750e:	b940      	cbnz	r0, 8007522 <__gethex+0x182>
 8007510:	4b65      	ldr	r3, [pc, #404]	; (80076a8 <__gethex+0x308>)
 8007512:	4602      	mov	r2, r0
 8007514:	21de      	movs	r1, #222	; 0xde
 8007516:	4865      	ldr	r0, [pc, #404]	; (80076ac <__gethex+0x30c>)
 8007518:	f001 f97e 	bl	8008818 <__assert_func>
 800751c:	3101      	adds	r1, #1
 800751e:	105b      	asrs	r3, r3, #1
 8007520:	e7ee      	b.n	8007500 <__gethex+0x160>
 8007522:	f100 0914 	add.w	r9, r0, #20
 8007526:	f04f 0b00 	mov.w	fp, #0
 800752a:	f1ca 0301 	rsb	r3, sl, #1
 800752e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007532:	f8cd b000 	str.w	fp, [sp]
 8007536:	9306      	str	r3, [sp, #24]
 8007538:	42b7      	cmp	r7, r6
 800753a:	d340      	bcc.n	80075be <__gethex+0x21e>
 800753c:	9802      	ldr	r0, [sp, #8]
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	f840 3b04 	str.w	r3, [r0], #4
 8007544:	eba0 0009 	sub.w	r0, r0, r9
 8007548:	1080      	asrs	r0, r0, #2
 800754a:	0146      	lsls	r6, r0, #5
 800754c:	6120      	str	r0, [r4, #16]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fb50 	bl	8007bf4 <__hi0bits>
 8007554:	1a30      	subs	r0, r6, r0
 8007556:	f8d8 6000 	ldr.w	r6, [r8]
 800755a:	42b0      	cmp	r0, r6
 800755c:	dd63      	ble.n	8007626 <__gethex+0x286>
 800755e:	1b87      	subs	r7, r0, r6
 8007560:	4639      	mov	r1, r7
 8007562:	4620      	mov	r0, r4
 8007564:	f000 feea 	bl	800833c <__any_on>
 8007568:	4682      	mov	sl, r0
 800756a:	b1a8      	cbz	r0, 8007598 <__gethex+0x1f8>
 800756c:	1e7b      	subs	r3, r7, #1
 800756e:	1159      	asrs	r1, r3, #5
 8007570:	f003 021f 	and.w	r2, r3, #31
 8007574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007578:	f04f 0a01 	mov.w	sl, #1
 800757c:	fa0a f202 	lsl.w	r2, sl, r2
 8007580:	420a      	tst	r2, r1
 8007582:	d009      	beq.n	8007598 <__gethex+0x1f8>
 8007584:	4553      	cmp	r3, sl
 8007586:	dd05      	ble.n	8007594 <__gethex+0x1f4>
 8007588:	1eb9      	subs	r1, r7, #2
 800758a:	4620      	mov	r0, r4
 800758c:	f000 fed6 	bl	800833c <__any_on>
 8007590:	2800      	cmp	r0, #0
 8007592:	d145      	bne.n	8007620 <__gethex+0x280>
 8007594:	f04f 0a02 	mov.w	sl, #2
 8007598:	4639      	mov	r1, r7
 800759a:	4620      	mov	r0, r4
 800759c:	f7ff fe98 	bl	80072d0 <rshift>
 80075a0:	443d      	add	r5, r7
 80075a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075a6:	42ab      	cmp	r3, r5
 80075a8:	da4c      	bge.n	8007644 <__gethex+0x2a4>
 80075aa:	ee18 0a10 	vmov	r0, s16
 80075ae:	4621      	mov	r1, r4
 80075b0:	f000 fa6a 	bl	8007a88 <_Bfree>
 80075b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075b6:	2300      	movs	r3, #0
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	27a3      	movs	r7, #163	; 0xa3
 80075bc:	e785      	b.n	80074ca <__gethex+0x12a>
 80075be:	1e73      	subs	r3, r6, #1
 80075c0:	9a05      	ldr	r2, [sp, #20]
 80075c2:	9303      	str	r3, [sp, #12]
 80075c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d019      	beq.n	8007600 <__gethex+0x260>
 80075cc:	f1bb 0f20 	cmp.w	fp, #32
 80075d0:	d107      	bne.n	80075e2 <__gethex+0x242>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	9a00      	ldr	r2, [sp, #0]
 80075d6:	f843 2b04 	str.w	r2, [r3], #4
 80075da:	9302      	str	r3, [sp, #8]
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	469b      	mov	fp, r3
 80075e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80075e6:	f7ff fec5 	bl	8007374 <__hexdig_fun>
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	f000 000f 	and.w	r0, r0, #15
 80075f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80075f4:	4303      	orrs	r3, r0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	f10b 0b04 	add.w	fp, fp, #4
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	e00d      	b.n	800761c <__gethex+0x27c>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	9a06      	ldr	r2, [sp, #24]
 8007604:	4413      	add	r3, r2
 8007606:	42bb      	cmp	r3, r7
 8007608:	d3e0      	bcc.n	80075cc <__gethex+0x22c>
 800760a:	4618      	mov	r0, r3
 800760c:	9901      	ldr	r1, [sp, #4]
 800760e:	9307      	str	r3, [sp, #28]
 8007610:	4652      	mov	r2, sl
 8007612:	f001 f8e1 	bl	80087d8 <strncmp>
 8007616:	9b07      	ldr	r3, [sp, #28]
 8007618:	2800      	cmp	r0, #0
 800761a:	d1d7      	bne.n	80075cc <__gethex+0x22c>
 800761c:	461e      	mov	r6, r3
 800761e:	e78b      	b.n	8007538 <__gethex+0x198>
 8007620:	f04f 0a03 	mov.w	sl, #3
 8007624:	e7b8      	b.n	8007598 <__gethex+0x1f8>
 8007626:	da0a      	bge.n	800763e <__gethex+0x29e>
 8007628:	1a37      	subs	r7, r6, r0
 800762a:	4621      	mov	r1, r4
 800762c:	ee18 0a10 	vmov	r0, s16
 8007630:	463a      	mov	r2, r7
 8007632:	f000 fc45 	bl	8007ec0 <__lshift>
 8007636:	1bed      	subs	r5, r5, r7
 8007638:	4604      	mov	r4, r0
 800763a:	f100 0914 	add.w	r9, r0, #20
 800763e:	f04f 0a00 	mov.w	sl, #0
 8007642:	e7ae      	b.n	80075a2 <__gethex+0x202>
 8007644:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007648:	42a8      	cmp	r0, r5
 800764a:	dd72      	ble.n	8007732 <__gethex+0x392>
 800764c:	1b45      	subs	r5, r0, r5
 800764e:	42ae      	cmp	r6, r5
 8007650:	dc36      	bgt.n	80076c0 <__gethex+0x320>
 8007652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d02a      	beq.n	80076b0 <__gethex+0x310>
 800765a:	2b03      	cmp	r3, #3
 800765c:	d02c      	beq.n	80076b8 <__gethex+0x318>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d115      	bne.n	800768e <__gethex+0x2ee>
 8007662:	42ae      	cmp	r6, r5
 8007664:	d113      	bne.n	800768e <__gethex+0x2ee>
 8007666:	2e01      	cmp	r6, #1
 8007668:	d10b      	bne.n	8007682 <__gethex+0x2e2>
 800766a:	9a04      	ldr	r2, [sp, #16]
 800766c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	2301      	movs	r3, #1
 8007674:	6123      	str	r3, [r4, #16]
 8007676:	f8c9 3000 	str.w	r3, [r9]
 800767a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800767c:	2762      	movs	r7, #98	; 0x62
 800767e:	601c      	str	r4, [r3, #0]
 8007680:	e723      	b.n	80074ca <__gethex+0x12a>
 8007682:	1e71      	subs	r1, r6, #1
 8007684:	4620      	mov	r0, r4
 8007686:	f000 fe59 	bl	800833c <__any_on>
 800768a:	2800      	cmp	r0, #0
 800768c:	d1ed      	bne.n	800766a <__gethex+0x2ca>
 800768e:	ee18 0a10 	vmov	r0, s16
 8007692:	4621      	mov	r1, r4
 8007694:	f000 f9f8 	bl	8007a88 <_Bfree>
 8007698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800769a:	2300      	movs	r3, #0
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	2750      	movs	r7, #80	; 0x50
 80076a0:	e713      	b.n	80074ca <__gethex+0x12a>
 80076a2:	bf00      	nop
 80076a4:	080096b8 	.word	0x080096b8
 80076a8:	0800963c 	.word	0x0800963c
 80076ac:	0800964d 	.word	0x0800964d
 80076b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1eb      	bne.n	800768e <__gethex+0x2ee>
 80076b6:	e7d8      	b.n	800766a <__gethex+0x2ca>
 80076b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1d5      	bne.n	800766a <__gethex+0x2ca>
 80076be:	e7e6      	b.n	800768e <__gethex+0x2ee>
 80076c0:	1e6f      	subs	r7, r5, #1
 80076c2:	f1ba 0f00 	cmp.w	sl, #0
 80076c6:	d131      	bne.n	800772c <__gethex+0x38c>
 80076c8:	b127      	cbz	r7, 80076d4 <__gethex+0x334>
 80076ca:	4639      	mov	r1, r7
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fe35 	bl	800833c <__any_on>
 80076d2:	4682      	mov	sl, r0
 80076d4:	117b      	asrs	r3, r7, #5
 80076d6:	2101      	movs	r1, #1
 80076d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80076dc:	f007 071f 	and.w	r7, r7, #31
 80076e0:	fa01 f707 	lsl.w	r7, r1, r7
 80076e4:	421f      	tst	r7, r3
 80076e6:	4629      	mov	r1, r5
 80076e8:	4620      	mov	r0, r4
 80076ea:	bf18      	it	ne
 80076ec:	f04a 0a02 	orrne.w	sl, sl, #2
 80076f0:	1b76      	subs	r6, r6, r5
 80076f2:	f7ff fded 	bl	80072d0 <rshift>
 80076f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80076fa:	2702      	movs	r7, #2
 80076fc:	f1ba 0f00 	cmp.w	sl, #0
 8007700:	d048      	beq.n	8007794 <__gethex+0x3f4>
 8007702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d015      	beq.n	8007736 <__gethex+0x396>
 800770a:	2b03      	cmp	r3, #3
 800770c:	d017      	beq.n	800773e <__gethex+0x39e>
 800770e:	2b01      	cmp	r3, #1
 8007710:	d109      	bne.n	8007726 <__gethex+0x386>
 8007712:	f01a 0f02 	tst.w	sl, #2
 8007716:	d006      	beq.n	8007726 <__gethex+0x386>
 8007718:	f8d9 0000 	ldr.w	r0, [r9]
 800771c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007720:	f01a 0f01 	tst.w	sl, #1
 8007724:	d10e      	bne.n	8007744 <__gethex+0x3a4>
 8007726:	f047 0710 	orr.w	r7, r7, #16
 800772a:	e033      	b.n	8007794 <__gethex+0x3f4>
 800772c:	f04f 0a01 	mov.w	sl, #1
 8007730:	e7d0      	b.n	80076d4 <__gethex+0x334>
 8007732:	2701      	movs	r7, #1
 8007734:	e7e2      	b.n	80076fc <__gethex+0x35c>
 8007736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007738:	f1c3 0301 	rsb	r3, r3, #1
 800773c:	9315      	str	r3, [sp, #84]	; 0x54
 800773e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0f0      	beq.n	8007726 <__gethex+0x386>
 8007744:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007748:	f104 0314 	add.w	r3, r4, #20
 800774c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007750:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007754:	f04f 0c00 	mov.w	ip, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f853 2b04 	ldr.w	r2, [r3], #4
 800775e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007762:	d01c      	beq.n	800779e <__gethex+0x3fe>
 8007764:	3201      	adds	r2, #1
 8007766:	6002      	str	r2, [r0, #0]
 8007768:	2f02      	cmp	r7, #2
 800776a:	f104 0314 	add.w	r3, r4, #20
 800776e:	d13f      	bne.n	80077f0 <__gethex+0x450>
 8007770:	f8d8 2000 	ldr.w	r2, [r8]
 8007774:	3a01      	subs	r2, #1
 8007776:	42b2      	cmp	r2, r6
 8007778:	d10a      	bne.n	8007790 <__gethex+0x3f0>
 800777a:	1171      	asrs	r1, r6, #5
 800777c:	2201      	movs	r2, #1
 800777e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007782:	f006 061f 	and.w	r6, r6, #31
 8007786:	fa02 f606 	lsl.w	r6, r2, r6
 800778a:	421e      	tst	r6, r3
 800778c:	bf18      	it	ne
 800778e:	4617      	movne	r7, r2
 8007790:	f047 0720 	orr.w	r7, r7, #32
 8007794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007796:	601c      	str	r4, [r3, #0]
 8007798:	9b04      	ldr	r3, [sp, #16]
 800779a:	601d      	str	r5, [r3, #0]
 800779c:	e695      	b.n	80074ca <__gethex+0x12a>
 800779e:	4299      	cmp	r1, r3
 80077a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80077a4:	d8d8      	bhi.n	8007758 <__gethex+0x3b8>
 80077a6:	68a3      	ldr	r3, [r4, #8]
 80077a8:	459b      	cmp	fp, r3
 80077aa:	db19      	blt.n	80077e0 <__gethex+0x440>
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	ee18 0a10 	vmov	r0, s16
 80077b2:	3101      	adds	r1, #1
 80077b4:	f000 f928 	bl	8007a08 <_Balloc>
 80077b8:	4681      	mov	r9, r0
 80077ba:	b918      	cbnz	r0, 80077c4 <__gethex+0x424>
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <__gethex+0x488>)
 80077be:	4602      	mov	r2, r0
 80077c0:	2184      	movs	r1, #132	; 0x84
 80077c2:	e6a8      	b.n	8007516 <__gethex+0x176>
 80077c4:	6922      	ldr	r2, [r4, #16]
 80077c6:	3202      	adds	r2, #2
 80077c8:	f104 010c 	add.w	r1, r4, #12
 80077cc:	0092      	lsls	r2, r2, #2
 80077ce:	300c      	adds	r0, #12
 80077d0:	f000 f90c 	bl	80079ec <memcpy>
 80077d4:	4621      	mov	r1, r4
 80077d6:	ee18 0a10 	vmov	r0, s16
 80077da:	f000 f955 	bl	8007a88 <_Bfree>
 80077de:	464c      	mov	r4, r9
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077e8:	6122      	str	r2, [r4, #16]
 80077ea:	2201      	movs	r2, #1
 80077ec:	615a      	str	r2, [r3, #20]
 80077ee:	e7bb      	b.n	8007768 <__gethex+0x3c8>
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	455a      	cmp	r2, fp
 80077f4:	dd0b      	ble.n	800780e <__gethex+0x46e>
 80077f6:	2101      	movs	r1, #1
 80077f8:	4620      	mov	r0, r4
 80077fa:	f7ff fd69 	bl	80072d0 <rshift>
 80077fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007802:	3501      	adds	r5, #1
 8007804:	42ab      	cmp	r3, r5
 8007806:	f6ff aed0 	blt.w	80075aa <__gethex+0x20a>
 800780a:	2701      	movs	r7, #1
 800780c:	e7c0      	b.n	8007790 <__gethex+0x3f0>
 800780e:	f016 061f 	ands.w	r6, r6, #31
 8007812:	d0fa      	beq.n	800780a <__gethex+0x46a>
 8007814:	449a      	add	sl, r3
 8007816:	f1c6 0620 	rsb	r6, r6, #32
 800781a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800781e:	f000 f9e9 	bl	8007bf4 <__hi0bits>
 8007822:	42b0      	cmp	r0, r6
 8007824:	dbe7      	blt.n	80077f6 <__gethex+0x456>
 8007826:	e7f0      	b.n	800780a <__gethex+0x46a>
 8007828:	0800963c 	.word	0x0800963c

0800782c <L_shift>:
 800782c:	f1c2 0208 	rsb	r2, r2, #8
 8007830:	0092      	lsls	r2, r2, #2
 8007832:	b570      	push	{r4, r5, r6, lr}
 8007834:	f1c2 0620 	rsb	r6, r2, #32
 8007838:	6843      	ldr	r3, [r0, #4]
 800783a:	6804      	ldr	r4, [r0, #0]
 800783c:	fa03 f506 	lsl.w	r5, r3, r6
 8007840:	432c      	orrs	r4, r5
 8007842:	40d3      	lsrs	r3, r2
 8007844:	6004      	str	r4, [r0, #0]
 8007846:	f840 3f04 	str.w	r3, [r0, #4]!
 800784a:	4288      	cmp	r0, r1
 800784c:	d3f4      	bcc.n	8007838 <L_shift+0xc>
 800784e:	bd70      	pop	{r4, r5, r6, pc}

08007850 <__match>:
 8007850:	b530      	push	{r4, r5, lr}
 8007852:	6803      	ldr	r3, [r0, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785a:	b914      	cbnz	r4, 8007862 <__match+0x12>
 800785c:	6003      	str	r3, [r0, #0]
 800785e:	2001      	movs	r0, #1
 8007860:	bd30      	pop	{r4, r5, pc}
 8007862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007866:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800786a:	2d19      	cmp	r5, #25
 800786c:	bf98      	it	ls
 800786e:	3220      	addls	r2, #32
 8007870:	42a2      	cmp	r2, r4
 8007872:	d0f0      	beq.n	8007856 <__match+0x6>
 8007874:	2000      	movs	r0, #0
 8007876:	e7f3      	b.n	8007860 <__match+0x10>

08007878 <__hexnan>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	680b      	ldr	r3, [r1, #0]
 800787e:	6801      	ldr	r1, [r0, #0]
 8007880:	115e      	asrs	r6, r3, #5
 8007882:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007886:	f013 031f 	ands.w	r3, r3, #31
 800788a:	b087      	sub	sp, #28
 800788c:	bf18      	it	ne
 800788e:	3604      	addne	r6, #4
 8007890:	2500      	movs	r5, #0
 8007892:	1f37      	subs	r7, r6, #4
 8007894:	4682      	mov	sl, r0
 8007896:	4690      	mov	r8, r2
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	f846 5c04 	str.w	r5, [r6, #-4]
 800789e:	46b9      	mov	r9, r7
 80078a0:	463c      	mov	r4, r7
 80078a2:	9502      	str	r5, [sp, #8]
 80078a4:	46ab      	mov	fp, r5
 80078a6:	784a      	ldrb	r2, [r1, #1]
 80078a8:	1c4b      	adds	r3, r1, #1
 80078aa:	9303      	str	r3, [sp, #12]
 80078ac:	b342      	cbz	r2, 8007900 <__hexnan+0x88>
 80078ae:	4610      	mov	r0, r2
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	9204      	str	r2, [sp, #16]
 80078b4:	f7ff fd5e 	bl	8007374 <__hexdig_fun>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d14f      	bne.n	800795c <__hexnan+0xe4>
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	9905      	ldr	r1, [sp, #20]
 80078c0:	2a20      	cmp	r2, #32
 80078c2:	d818      	bhi.n	80078f6 <__hexnan+0x7e>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	459b      	cmp	fp, r3
 80078c8:	dd13      	ble.n	80078f2 <__hexnan+0x7a>
 80078ca:	454c      	cmp	r4, r9
 80078cc:	d206      	bcs.n	80078dc <__hexnan+0x64>
 80078ce:	2d07      	cmp	r5, #7
 80078d0:	dc04      	bgt.n	80078dc <__hexnan+0x64>
 80078d2:	462a      	mov	r2, r5
 80078d4:	4649      	mov	r1, r9
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff ffa8 	bl	800782c <L_shift>
 80078dc:	4544      	cmp	r4, r8
 80078de:	d950      	bls.n	8007982 <__hexnan+0x10a>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f1a4 0904 	sub.w	r9, r4, #4
 80078e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80078ea:	f8cd b008 	str.w	fp, [sp, #8]
 80078ee:	464c      	mov	r4, r9
 80078f0:	461d      	mov	r5, r3
 80078f2:	9903      	ldr	r1, [sp, #12]
 80078f4:	e7d7      	b.n	80078a6 <__hexnan+0x2e>
 80078f6:	2a29      	cmp	r2, #41	; 0x29
 80078f8:	d156      	bne.n	80079a8 <__hexnan+0x130>
 80078fa:	3102      	adds	r1, #2
 80078fc:	f8ca 1000 	str.w	r1, [sl]
 8007900:	f1bb 0f00 	cmp.w	fp, #0
 8007904:	d050      	beq.n	80079a8 <__hexnan+0x130>
 8007906:	454c      	cmp	r4, r9
 8007908:	d206      	bcs.n	8007918 <__hexnan+0xa0>
 800790a:	2d07      	cmp	r5, #7
 800790c:	dc04      	bgt.n	8007918 <__hexnan+0xa0>
 800790e:	462a      	mov	r2, r5
 8007910:	4649      	mov	r1, r9
 8007912:	4620      	mov	r0, r4
 8007914:	f7ff ff8a 	bl	800782c <L_shift>
 8007918:	4544      	cmp	r4, r8
 800791a:	d934      	bls.n	8007986 <__hexnan+0x10e>
 800791c:	f1a8 0204 	sub.w	r2, r8, #4
 8007920:	4623      	mov	r3, r4
 8007922:	f853 1b04 	ldr.w	r1, [r3], #4
 8007926:	f842 1f04 	str.w	r1, [r2, #4]!
 800792a:	429f      	cmp	r7, r3
 800792c:	d2f9      	bcs.n	8007922 <__hexnan+0xaa>
 800792e:	1b3b      	subs	r3, r7, r4
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	3304      	adds	r3, #4
 8007936:	3401      	adds	r4, #1
 8007938:	3e03      	subs	r6, #3
 800793a:	42b4      	cmp	r4, r6
 800793c:	bf88      	it	hi
 800793e:	2304      	movhi	r3, #4
 8007940:	4443      	add	r3, r8
 8007942:	2200      	movs	r2, #0
 8007944:	f843 2b04 	str.w	r2, [r3], #4
 8007948:	429f      	cmp	r7, r3
 800794a:	d2fb      	bcs.n	8007944 <__hexnan+0xcc>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	b91b      	cbnz	r3, 8007958 <__hexnan+0xe0>
 8007950:	4547      	cmp	r7, r8
 8007952:	d127      	bne.n	80079a4 <__hexnan+0x12c>
 8007954:	2301      	movs	r3, #1
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	2005      	movs	r0, #5
 800795a:	e026      	b.n	80079aa <__hexnan+0x132>
 800795c:	3501      	adds	r5, #1
 800795e:	2d08      	cmp	r5, #8
 8007960:	f10b 0b01 	add.w	fp, fp, #1
 8007964:	dd06      	ble.n	8007974 <__hexnan+0xfc>
 8007966:	4544      	cmp	r4, r8
 8007968:	d9c3      	bls.n	80078f2 <__hexnan+0x7a>
 800796a:	2300      	movs	r3, #0
 800796c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007970:	2501      	movs	r5, #1
 8007972:	3c04      	subs	r4, #4
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	f000 000f 	and.w	r0, r0, #15
 800797a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	e7b7      	b.n	80078f2 <__hexnan+0x7a>
 8007982:	2508      	movs	r5, #8
 8007984:	e7b5      	b.n	80078f2 <__hexnan+0x7a>
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0df      	beq.n	800794c <__hexnan+0xd4>
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	f1c3 0320 	rsb	r3, r3, #32
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
 8007998:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800799c:	401a      	ands	r2, r3
 800799e:	f846 2c04 	str.w	r2, [r6, #-4]
 80079a2:	e7d3      	b.n	800794c <__hexnan+0xd4>
 80079a4:	3f04      	subs	r7, #4
 80079a6:	e7d1      	b.n	800794c <__hexnan+0xd4>
 80079a8:	2004      	movs	r0, #4
 80079aa:	b007      	add	sp, #28
 80079ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079b0 <_localeconv_r>:
 80079b0:	4800      	ldr	r0, [pc, #0]	; (80079b4 <_localeconv_r+0x4>)
 80079b2:	4770      	bx	lr
 80079b4:	20000178 	.word	0x20000178

080079b8 <malloc>:
 80079b8:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <malloc+0xc>)
 80079ba:	4601      	mov	r1, r0
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	f000 bd3d 	b.w	800843c <_malloc_r>
 80079c2:	bf00      	nop
 80079c4:	20000020 	.word	0x20000020

080079c8 <__ascii_mbtowc>:
 80079c8:	b082      	sub	sp, #8
 80079ca:	b901      	cbnz	r1, 80079ce <__ascii_mbtowc+0x6>
 80079cc:	a901      	add	r1, sp, #4
 80079ce:	b142      	cbz	r2, 80079e2 <__ascii_mbtowc+0x1a>
 80079d0:	b14b      	cbz	r3, 80079e6 <__ascii_mbtowc+0x1e>
 80079d2:	7813      	ldrb	r3, [r2, #0]
 80079d4:	600b      	str	r3, [r1, #0]
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	1e10      	subs	r0, r2, #0
 80079da:	bf18      	it	ne
 80079dc:	2001      	movne	r0, #1
 80079de:	b002      	add	sp, #8
 80079e0:	4770      	bx	lr
 80079e2:	4610      	mov	r0, r2
 80079e4:	e7fb      	b.n	80079de <__ascii_mbtowc+0x16>
 80079e6:	f06f 0001 	mvn.w	r0, #1
 80079ea:	e7f8      	b.n	80079de <__ascii_mbtowc+0x16>

080079ec <memcpy>:
 80079ec:	440a      	add	r2, r1
 80079ee:	4291      	cmp	r1, r2
 80079f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f4:	d100      	bne.n	80079f8 <memcpy+0xc>
 80079f6:	4770      	bx	lr
 80079f8:	b510      	push	{r4, lr}
 80079fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a02:	4291      	cmp	r1, r2
 8007a04:	d1f9      	bne.n	80079fa <memcpy+0xe>
 8007a06:	bd10      	pop	{r4, pc}

08007a08 <_Balloc>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	460d      	mov	r5, r1
 8007a10:	b976      	cbnz	r6, 8007a30 <_Balloc+0x28>
 8007a12:	2010      	movs	r0, #16
 8007a14:	f7ff ffd0 	bl	80079b8 <malloc>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a1c:	b920      	cbnz	r0, 8007a28 <_Balloc+0x20>
 8007a1e:	4b18      	ldr	r3, [pc, #96]	; (8007a80 <_Balloc+0x78>)
 8007a20:	4818      	ldr	r0, [pc, #96]	; (8007a84 <_Balloc+0x7c>)
 8007a22:	2166      	movs	r1, #102	; 0x66
 8007a24:	f000 fef8 	bl	8008818 <__assert_func>
 8007a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a2c:	6006      	str	r6, [r0, #0]
 8007a2e:	60c6      	str	r6, [r0, #12]
 8007a30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a32:	68f3      	ldr	r3, [r6, #12]
 8007a34:	b183      	cbz	r3, 8007a58 <_Balloc+0x50>
 8007a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a3e:	b9b8      	cbnz	r0, 8007a70 <_Balloc+0x68>
 8007a40:	2101      	movs	r1, #1
 8007a42:	fa01 f605 	lsl.w	r6, r1, r5
 8007a46:	1d72      	adds	r2, r6, #5
 8007a48:	0092      	lsls	r2, r2, #2
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fc97 	bl	800837e <_calloc_r>
 8007a50:	b160      	cbz	r0, 8007a6c <_Balloc+0x64>
 8007a52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a56:	e00e      	b.n	8007a76 <_Balloc+0x6e>
 8007a58:	2221      	movs	r2, #33	; 0x21
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fc8e 	bl	800837e <_calloc_r>
 8007a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a64:	60f0      	str	r0, [r6, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e4      	bne.n	8007a36 <_Balloc+0x2e>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	6802      	ldr	r2, [r0, #0]
 8007a72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a76:	2300      	movs	r3, #0
 8007a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a7c:	e7f7      	b.n	8007a6e <_Balloc+0x66>
 8007a7e:	bf00      	nop
 8007a80:	080095c6 	.word	0x080095c6
 8007a84:	080096cc 	.word	0x080096cc

08007a88 <_Bfree>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b976      	cbnz	r6, 8007ab0 <_Bfree+0x28>
 8007a92:	2010      	movs	r0, #16
 8007a94:	f7ff ff90 	bl	80079b8 <malloc>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6268      	str	r0, [r5, #36]	; 0x24
 8007a9c:	b920      	cbnz	r0, 8007aa8 <_Bfree+0x20>
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <_Bfree+0x3c>)
 8007aa0:	4809      	ldr	r0, [pc, #36]	; (8007ac8 <_Bfree+0x40>)
 8007aa2:	218a      	movs	r1, #138	; 0x8a
 8007aa4:	f000 feb8 	bl	8008818 <__assert_func>
 8007aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aac:	6006      	str	r6, [r0, #0]
 8007aae:	60c6      	str	r6, [r0, #12]
 8007ab0:	b13c      	cbz	r4, 8007ac2 <_Bfree+0x3a>
 8007ab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ab4:	6862      	ldr	r2, [r4, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007abc:	6021      	str	r1, [r4, #0]
 8007abe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	080095c6 	.word	0x080095c6
 8007ac8:	080096cc 	.word	0x080096cc

08007acc <__multadd>:
 8007acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad0:	690e      	ldr	r6, [r1, #16]
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	4698      	mov	r8, r3
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	f101 0014 	add.w	r0, r1, #20
 8007adc:	2300      	movs	r3, #0
 8007ade:	6805      	ldr	r5, [r0, #0]
 8007ae0:	b2a9      	uxth	r1, r5
 8007ae2:	fb02 8101 	mla	r1, r2, r1, r8
 8007ae6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007aea:	0c2d      	lsrs	r5, r5, #16
 8007aec:	fb02 c505 	mla	r5, r2, r5, ip
 8007af0:	b289      	uxth	r1, r1
 8007af2:	3301      	adds	r3, #1
 8007af4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007af8:	429e      	cmp	r6, r3
 8007afa:	f840 1b04 	str.w	r1, [r0], #4
 8007afe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b02:	dcec      	bgt.n	8007ade <__multadd+0x12>
 8007b04:	f1b8 0f00 	cmp.w	r8, #0
 8007b08:	d022      	beq.n	8007b50 <__multadd+0x84>
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	42b3      	cmp	r3, r6
 8007b0e:	dc19      	bgt.n	8007b44 <__multadd+0x78>
 8007b10:	6861      	ldr	r1, [r4, #4]
 8007b12:	4638      	mov	r0, r7
 8007b14:	3101      	adds	r1, #1
 8007b16:	f7ff ff77 	bl	8007a08 <_Balloc>
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	b928      	cbnz	r0, 8007b2a <__multadd+0x5e>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <__multadd+0x8c>)
 8007b22:	480e      	ldr	r0, [pc, #56]	; (8007b5c <__multadd+0x90>)
 8007b24:	21b5      	movs	r1, #181	; 0xb5
 8007b26:	f000 fe77 	bl	8008818 <__assert_func>
 8007b2a:	6922      	ldr	r2, [r4, #16]
 8007b2c:	3202      	adds	r2, #2
 8007b2e:	f104 010c 	add.w	r1, r4, #12
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	300c      	adds	r0, #12
 8007b36:	f7ff ff59 	bl	80079ec <memcpy>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff ffa3 	bl	8007a88 <_Bfree>
 8007b42:	462c      	mov	r4, r5
 8007b44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b48:	3601      	adds	r6, #1
 8007b4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b4e:	6126      	str	r6, [r4, #16]
 8007b50:	4620      	mov	r0, r4
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b56:	bf00      	nop
 8007b58:	0800963c 	.word	0x0800963c
 8007b5c:	080096cc 	.word	0x080096cc

08007b60 <__s2b>:
 8007b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b64:	460c      	mov	r4, r1
 8007b66:	4615      	mov	r5, r2
 8007b68:	461f      	mov	r7, r3
 8007b6a:	2209      	movs	r2, #9
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	4606      	mov	r6, r0
 8007b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b74:	2100      	movs	r1, #0
 8007b76:	2201      	movs	r2, #1
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	db09      	blt.n	8007b90 <__s2b+0x30>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff ff43 	bl	8007a08 <_Balloc>
 8007b82:	b940      	cbnz	r0, 8007b96 <__s2b+0x36>
 8007b84:	4602      	mov	r2, r0
 8007b86:	4b19      	ldr	r3, [pc, #100]	; (8007bec <__s2b+0x8c>)
 8007b88:	4819      	ldr	r0, [pc, #100]	; (8007bf0 <__s2b+0x90>)
 8007b8a:	21ce      	movs	r1, #206	; 0xce
 8007b8c:	f000 fe44 	bl	8008818 <__assert_func>
 8007b90:	0052      	lsls	r2, r2, #1
 8007b92:	3101      	adds	r1, #1
 8007b94:	e7f0      	b.n	8007b78 <__s2b+0x18>
 8007b96:	9b08      	ldr	r3, [sp, #32]
 8007b98:	6143      	str	r3, [r0, #20]
 8007b9a:	2d09      	cmp	r5, #9
 8007b9c:	f04f 0301 	mov.w	r3, #1
 8007ba0:	6103      	str	r3, [r0, #16]
 8007ba2:	dd16      	ble.n	8007bd2 <__s2b+0x72>
 8007ba4:	f104 0909 	add.w	r9, r4, #9
 8007ba8:	46c8      	mov	r8, r9
 8007baa:	442c      	add	r4, r5
 8007bac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	3b30      	subs	r3, #48	; 0x30
 8007bb4:	220a      	movs	r2, #10
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff ff88 	bl	8007acc <__multadd>
 8007bbc:	45a0      	cmp	r8, r4
 8007bbe:	d1f5      	bne.n	8007bac <__s2b+0x4c>
 8007bc0:	f1a5 0408 	sub.w	r4, r5, #8
 8007bc4:	444c      	add	r4, r9
 8007bc6:	1b2d      	subs	r5, r5, r4
 8007bc8:	1963      	adds	r3, r4, r5
 8007bca:	42bb      	cmp	r3, r7
 8007bcc:	db04      	blt.n	8007bd8 <__s2b+0x78>
 8007bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd2:	340a      	adds	r4, #10
 8007bd4:	2509      	movs	r5, #9
 8007bd6:	e7f6      	b.n	8007bc6 <__s2b+0x66>
 8007bd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bdc:	4601      	mov	r1, r0
 8007bde:	3b30      	subs	r3, #48	; 0x30
 8007be0:	220a      	movs	r2, #10
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7ff ff72 	bl	8007acc <__multadd>
 8007be8:	e7ee      	b.n	8007bc8 <__s2b+0x68>
 8007bea:	bf00      	nop
 8007bec:	0800963c 	.word	0x0800963c
 8007bf0:	080096cc 	.word	0x080096cc

08007bf4 <__hi0bits>:
 8007bf4:	0c03      	lsrs	r3, r0, #16
 8007bf6:	041b      	lsls	r3, r3, #16
 8007bf8:	b9d3      	cbnz	r3, 8007c30 <__hi0bits+0x3c>
 8007bfa:	0400      	lsls	r0, r0, #16
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c02:	bf04      	itt	eq
 8007c04:	0200      	lsleq	r0, r0, #8
 8007c06:	3308      	addeq	r3, #8
 8007c08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c0c:	bf04      	itt	eq
 8007c0e:	0100      	lsleq	r0, r0, #4
 8007c10:	3304      	addeq	r3, #4
 8007c12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c16:	bf04      	itt	eq
 8007c18:	0080      	lsleq	r0, r0, #2
 8007c1a:	3302      	addeq	r3, #2
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	db05      	blt.n	8007c2c <__hi0bits+0x38>
 8007c20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c24:	f103 0301 	add.w	r3, r3, #1
 8007c28:	bf08      	it	eq
 8007c2a:	2320      	moveq	r3, #32
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	4770      	bx	lr
 8007c30:	2300      	movs	r3, #0
 8007c32:	e7e4      	b.n	8007bfe <__hi0bits+0xa>

08007c34 <__lo0bits>:
 8007c34:	6803      	ldr	r3, [r0, #0]
 8007c36:	f013 0207 	ands.w	r2, r3, #7
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	d00b      	beq.n	8007c56 <__lo0bits+0x22>
 8007c3e:	07da      	lsls	r2, r3, #31
 8007c40:	d424      	bmi.n	8007c8c <__lo0bits+0x58>
 8007c42:	0798      	lsls	r0, r3, #30
 8007c44:	bf49      	itett	mi
 8007c46:	085b      	lsrmi	r3, r3, #1
 8007c48:	089b      	lsrpl	r3, r3, #2
 8007c4a:	2001      	movmi	r0, #1
 8007c4c:	600b      	strmi	r3, [r1, #0]
 8007c4e:	bf5c      	itt	pl
 8007c50:	600b      	strpl	r3, [r1, #0]
 8007c52:	2002      	movpl	r0, #2
 8007c54:	4770      	bx	lr
 8007c56:	b298      	uxth	r0, r3
 8007c58:	b9b0      	cbnz	r0, 8007c88 <__lo0bits+0x54>
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	2010      	movs	r0, #16
 8007c5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c62:	bf04      	itt	eq
 8007c64:	0a1b      	lsreq	r3, r3, #8
 8007c66:	3008      	addeq	r0, #8
 8007c68:	071a      	lsls	r2, r3, #28
 8007c6a:	bf04      	itt	eq
 8007c6c:	091b      	lsreq	r3, r3, #4
 8007c6e:	3004      	addeq	r0, #4
 8007c70:	079a      	lsls	r2, r3, #30
 8007c72:	bf04      	itt	eq
 8007c74:	089b      	lsreq	r3, r3, #2
 8007c76:	3002      	addeq	r0, #2
 8007c78:	07da      	lsls	r2, r3, #31
 8007c7a:	d403      	bmi.n	8007c84 <__lo0bits+0x50>
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	f100 0001 	add.w	r0, r0, #1
 8007c82:	d005      	beq.n	8007c90 <__lo0bits+0x5c>
 8007c84:	600b      	str	r3, [r1, #0]
 8007c86:	4770      	bx	lr
 8007c88:	4610      	mov	r0, r2
 8007c8a:	e7e8      	b.n	8007c5e <__lo0bits+0x2a>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	4770      	bx	lr
 8007c90:	2020      	movs	r0, #32
 8007c92:	4770      	bx	lr

08007c94 <__i2b>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	460c      	mov	r4, r1
 8007c98:	2101      	movs	r1, #1
 8007c9a:	f7ff feb5 	bl	8007a08 <_Balloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	b928      	cbnz	r0, 8007cae <__i2b+0x1a>
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <__i2b+0x24>)
 8007ca4:	4805      	ldr	r0, [pc, #20]	; (8007cbc <__i2b+0x28>)
 8007ca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007caa:	f000 fdb5 	bl	8008818 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	6144      	str	r4, [r0, #20]
 8007cb2:	6103      	str	r3, [r0, #16]
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800963c 	.word	0x0800963c
 8007cbc:	080096cc 	.word	0x080096cc

08007cc0 <__multiply>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	690a      	ldr	r2, [r1, #16]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bfb8      	it	lt
 8007cce:	460b      	movlt	r3, r1
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	bfbc      	itt	lt
 8007cd4:	4625      	movlt	r5, r4
 8007cd6:	461c      	movlt	r4, r3
 8007cd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007cdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ce0:	68ab      	ldr	r3, [r5, #8]
 8007ce2:	6869      	ldr	r1, [r5, #4]
 8007ce4:	eb0a 0709 	add.w	r7, sl, r9
 8007ce8:	42bb      	cmp	r3, r7
 8007cea:	b085      	sub	sp, #20
 8007cec:	bfb8      	it	lt
 8007cee:	3101      	addlt	r1, #1
 8007cf0:	f7ff fe8a 	bl	8007a08 <_Balloc>
 8007cf4:	b930      	cbnz	r0, 8007d04 <__multiply+0x44>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b42      	ldr	r3, [pc, #264]	; (8007e04 <__multiply+0x144>)
 8007cfa:	4843      	ldr	r0, [pc, #268]	; (8007e08 <__multiply+0x148>)
 8007cfc:	f240 115d 	movw	r1, #349	; 0x15d
 8007d00:	f000 fd8a 	bl	8008818 <__assert_func>
 8007d04:	f100 0614 	add.w	r6, r0, #20
 8007d08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d0c:	4633      	mov	r3, r6
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4543      	cmp	r3, r8
 8007d12:	d31e      	bcc.n	8007d52 <__multiply+0x92>
 8007d14:	f105 0c14 	add.w	ip, r5, #20
 8007d18:	f104 0314 	add.w	r3, r4, #20
 8007d1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d24:	9202      	str	r2, [sp, #8]
 8007d26:	ebac 0205 	sub.w	r2, ip, r5
 8007d2a:	3a15      	subs	r2, #21
 8007d2c:	f022 0203 	bic.w	r2, r2, #3
 8007d30:	3204      	adds	r2, #4
 8007d32:	f105 0115 	add.w	r1, r5, #21
 8007d36:	458c      	cmp	ip, r1
 8007d38:	bf38      	it	cc
 8007d3a:	2204      	movcc	r2, #4
 8007d3c:	9201      	str	r2, [sp, #4]
 8007d3e:	9a02      	ldr	r2, [sp, #8]
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d808      	bhi.n	8007d58 <__multiply+0x98>
 8007d46:	2f00      	cmp	r7, #0
 8007d48:	dc55      	bgt.n	8007df6 <__multiply+0x136>
 8007d4a:	6107      	str	r7, [r0, #16]
 8007d4c:	b005      	add	sp, #20
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	f843 2b04 	str.w	r2, [r3], #4
 8007d56:	e7db      	b.n	8007d10 <__multiply+0x50>
 8007d58:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d5c:	f1ba 0f00 	cmp.w	sl, #0
 8007d60:	d020      	beq.n	8007da4 <__multiply+0xe4>
 8007d62:	f105 0e14 	add.w	lr, r5, #20
 8007d66:	46b1      	mov	r9, r6
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d6e:	f8d9 b000 	ldr.w	fp, [r9]
 8007d72:	b2a1      	uxth	r1, r4
 8007d74:	fa1f fb8b 	uxth.w	fp, fp
 8007d78:	fb0a b101 	mla	r1, sl, r1, fp
 8007d7c:	4411      	add	r1, r2
 8007d7e:	f8d9 2000 	ldr.w	r2, [r9]
 8007d82:	0c24      	lsrs	r4, r4, #16
 8007d84:	0c12      	lsrs	r2, r2, #16
 8007d86:	fb0a 2404 	mla	r4, sl, r4, r2
 8007d8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007d8e:	b289      	uxth	r1, r1
 8007d90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d94:	45f4      	cmp	ip, lr
 8007d96:	f849 1b04 	str.w	r1, [r9], #4
 8007d9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007d9e:	d8e4      	bhi.n	8007d6a <__multiply+0xaa>
 8007da0:	9901      	ldr	r1, [sp, #4]
 8007da2:	5072      	str	r2, [r6, r1]
 8007da4:	9a03      	ldr	r2, [sp, #12]
 8007da6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007daa:	3304      	adds	r3, #4
 8007dac:	f1b9 0f00 	cmp.w	r9, #0
 8007db0:	d01f      	beq.n	8007df2 <__multiply+0x132>
 8007db2:	6834      	ldr	r4, [r6, #0]
 8007db4:	f105 0114 	add.w	r1, r5, #20
 8007db8:	46b6      	mov	lr, r6
 8007dba:	f04f 0a00 	mov.w	sl, #0
 8007dbe:	880a      	ldrh	r2, [r1, #0]
 8007dc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007dc4:	fb09 b202 	mla	r2, r9, r2, fp
 8007dc8:	4492      	add	sl, r2
 8007dca:	b2a4      	uxth	r4, r4
 8007dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007dd0:	f84e 4b04 	str.w	r4, [lr], #4
 8007dd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8007dd8:	f8be 2000 	ldrh.w	r2, [lr]
 8007ddc:	0c24      	lsrs	r4, r4, #16
 8007dde:	fb09 2404 	mla	r4, r9, r4, r2
 8007de2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007de6:	458c      	cmp	ip, r1
 8007de8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007dec:	d8e7      	bhi.n	8007dbe <__multiply+0xfe>
 8007dee:	9a01      	ldr	r2, [sp, #4]
 8007df0:	50b4      	str	r4, [r6, r2]
 8007df2:	3604      	adds	r6, #4
 8007df4:	e7a3      	b.n	8007d3e <__multiply+0x7e>
 8007df6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1a5      	bne.n	8007d4a <__multiply+0x8a>
 8007dfe:	3f01      	subs	r7, #1
 8007e00:	e7a1      	b.n	8007d46 <__multiply+0x86>
 8007e02:	bf00      	nop
 8007e04:	0800963c 	.word	0x0800963c
 8007e08:	080096cc 	.word	0x080096cc

08007e0c <__pow5mult>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4615      	mov	r5, r2
 8007e12:	f012 0203 	ands.w	r2, r2, #3
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	d007      	beq.n	8007e2c <__pow5mult+0x20>
 8007e1c:	4c25      	ldr	r4, [pc, #148]	; (8007eb4 <__pow5mult+0xa8>)
 8007e1e:	3a01      	subs	r2, #1
 8007e20:	2300      	movs	r3, #0
 8007e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e26:	f7ff fe51 	bl	8007acc <__multadd>
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	10ad      	asrs	r5, r5, #2
 8007e2e:	d03d      	beq.n	8007eac <__pow5mult+0xa0>
 8007e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e32:	b97c      	cbnz	r4, 8007e54 <__pow5mult+0x48>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f7ff fdbf 	bl	80079b8 <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e3e:	b928      	cbnz	r0, 8007e4c <__pow5mult+0x40>
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <__pow5mult+0xac>)
 8007e42:	481e      	ldr	r0, [pc, #120]	; (8007ebc <__pow5mult+0xb0>)
 8007e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e48:	f000 fce6 	bl	8008818 <__assert_func>
 8007e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e50:	6004      	str	r4, [r0, #0]
 8007e52:	60c4      	str	r4, [r0, #12]
 8007e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e5c:	b94c      	cbnz	r4, 8007e72 <__pow5mult+0x66>
 8007e5e:	f240 2171 	movw	r1, #625	; 0x271
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ff16 	bl	8007c94 <__i2b>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6e:	4604      	mov	r4, r0
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	07eb      	lsls	r3, r5, #31
 8007e78:	d50a      	bpl.n	8007e90 <__pow5mult+0x84>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff1e 	bl	8007cc0 <__multiply>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4680      	mov	r8, r0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff fdfd 	bl	8007a88 <_Bfree>
 8007e8e:	4647      	mov	r7, r8
 8007e90:	106d      	asrs	r5, r5, #1
 8007e92:	d00b      	beq.n	8007eac <__pow5mult+0xa0>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	b938      	cbnz	r0, 8007ea8 <__pow5mult+0x9c>
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff ff0f 	bl	8007cc0 <__multiply>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	f8c0 9000 	str.w	r9, [r0]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e7e4      	b.n	8007e76 <__pow5mult+0x6a>
 8007eac:	4638      	mov	r0, r7
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08009820 	.word	0x08009820
 8007eb8:	080095c6 	.word	0x080095c6
 8007ebc:	080096cc 	.word	0x080096cc

08007ec0 <__lshift>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6849      	ldr	r1, [r1, #4]
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4691      	mov	r9, r2
 8007ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed8:	f108 0601 	add.w	r6, r8, #1
 8007edc:	42b3      	cmp	r3, r6
 8007ede:	db0b      	blt.n	8007ef8 <__lshift+0x38>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fd91 	bl	8007a08 <_Balloc>
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	b948      	cbnz	r0, 8007efe <__lshift+0x3e>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <__lshift+0xd0>)
 8007eee:	4829      	ldr	r0, [pc, #164]	; (8007f94 <__lshift+0xd4>)
 8007ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ef4:	f000 fc90 	bl	8008818 <__assert_func>
 8007ef8:	3101      	adds	r1, #1
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	e7ee      	b.n	8007edc <__lshift+0x1c>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f100 0114 	add.w	r1, r0, #20
 8007f04:	f100 0210 	add.w	r2, r0, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4553      	cmp	r3, sl
 8007f0c:	db33      	blt.n	8007f76 <__lshift+0xb6>
 8007f0e:	6920      	ldr	r0, [r4, #16]
 8007f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f14:	f104 0314 	add.w	r3, r4, #20
 8007f18:	f019 091f 	ands.w	r9, r9, #31
 8007f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f24:	d02b      	beq.n	8007f7e <__lshift+0xbe>
 8007f26:	f1c9 0e20 	rsb	lr, r9, #32
 8007f2a:	468a      	mov	sl, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	fa00 f009 	lsl.w	r0, r0, r9
 8007f34:	4302      	orrs	r2, r0
 8007f36:	f84a 2b04 	str.w	r2, [sl], #4
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	459c      	cmp	ip, r3
 8007f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f44:	d8f3      	bhi.n	8007f2e <__lshift+0x6e>
 8007f46:	ebac 0304 	sub.w	r3, ip, r4
 8007f4a:	3b15      	subs	r3, #21
 8007f4c:	f023 0303 	bic.w	r3, r3, #3
 8007f50:	3304      	adds	r3, #4
 8007f52:	f104 0015 	add.w	r0, r4, #21
 8007f56:	4584      	cmp	ip, r0
 8007f58:	bf38      	it	cc
 8007f5a:	2304      	movcc	r3, #4
 8007f5c:	50ca      	str	r2, [r1, r3]
 8007f5e:	b10a      	cbz	r2, 8007f64 <__lshift+0xa4>
 8007f60:	f108 0602 	add.w	r6, r8, #2
 8007f64:	3e01      	subs	r6, #1
 8007f66:	4638      	mov	r0, r7
 8007f68:	612e      	str	r6, [r5, #16]
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f7ff fd8c 	bl	8007a88 <_Bfree>
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	e7c5      	b.n	8007f0a <__lshift+0x4a>
 8007f7e:	3904      	subs	r1, #4
 8007f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f88:	459c      	cmp	ip, r3
 8007f8a:	d8f9      	bhi.n	8007f80 <__lshift+0xc0>
 8007f8c:	e7ea      	b.n	8007f64 <__lshift+0xa4>
 8007f8e:	bf00      	nop
 8007f90:	0800963c 	.word	0x0800963c
 8007f94:	080096cc 	.word	0x080096cc

08007f98 <__mcmp>:
 8007f98:	b530      	push	{r4, r5, lr}
 8007f9a:	6902      	ldr	r2, [r0, #16]
 8007f9c:	690c      	ldr	r4, [r1, #16]
 8007f9e:	1b12      	subs	r2, r2, r4
 8007fa0:	d10e      	bne.n	8007fc0 <__mcmp+0x28>
 8007fa2:	f100 0314 	add.w	r3, r0, #20
 8007fa6:	3114      	adds	r1, #20
 8007fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fb8:	42a5      	cmp	r5, r4
 8007fba:	d003      	beq.n	8007fc4 <__mcmp+0x2c>
 8007fbc:	d305      	bcc.n	8007fca <__mcmp+0x32>
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	4283      	cmp	r3, r0
 8007fc6:	d3f3      	bcc.n	8007fb0 <__mcmp+0x18>
 8007fc8:	e7fa      	b.n	8007fc0 <__mcmp+0x28>
 8007fca:	f04f 32ff 	mov.w	r2, #4294967295
 8007fce:	e7f7      	b.n	8007fc0 <__mcmp+0x28>

08007fd0 <__mdiff>:
 8007fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4617      	mov	r7, r2
 8007fde:	f7ff ffdb 	bl	8007f98 <__mcmp>
 8007fe2:	1e05      	subs	r5, r0, #0
 8007fe4:	d110      	bne.n	8008008 <__mdiff+0x38>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff fd0d 	bl	8007a08 <_Balloc>
 8007fee:	b930      	cbnz	r0, 8007ffe <__mdiff+0x2e>
 8007ff0:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <__mdiff+0x108>)
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	f240 2132 	movw	r1, #562	; 0x232
 8007ff8:	4838      	ldr	r0, [pc, #224]	; (80080dc <__mdiff+0x10c>)
 8007ffa:	f000 fc0d 	bl	8008818 <__assert_func>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	bfa4      	itt	ge
 800800a:	463b      	movge	r3, r7
 800800c:	4627      	movge	r7, r4
 800800e:	4630      	mov	r0, r6
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	bfa6      	itte	ge
 8008014:	461c      	movge	r4, r3
 8008016:	2500      	movge	r5, #0
 8008018:	2501      	movlt	r5, #1
 800801a:	f7ff fcf5 	bl	8007a08 <_Balloc>
 800801e:	b920      	cbnz	r0, 800802a <__mdiff+0x5a>
 8008020:	4b2d      	ldr	r3, [pc, #180]	; (80080d8 <__mdiff+0x108>)
 8008022:	4602      	mov	r2, r0
 8008024:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008028:	e7e6      	b.n	8007ff8 <__mdiff+0x28>
 800802a:	693e      	ldr	r6, [r7, #16]
 800802c:	60c5      	str	r5, [r0, #12]
 800802e:	6925      	ldr	r5, [r4, #16]
 8008030:	f107 0114 	add.w	r1, r7, #20
 8008034:	f104 0914 	add.w	r9, r4, #20
 8008038:	f100 0e14 	add.w	lr, r0, #20
 800803c:	f107 0210 	add.w	r2, r7, #16
 8008040:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008044:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008048:	46f2      	mov	sl, lr
 800804a:	2700      	movs	r7, #0
 800804c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008054:	fa1f f883 	uxth.w	r8, r3
 8008058:	fa17 f78b 	uxtah	r7, r7, fp
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	eba7 0808 	sub.w	r8, r7, r8
 8008062:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008066:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800806a:	fa1f f888 	uxth.w	r8, r8
 800806e:	141f      	asrs	r7, r3, #16
 8008070:	454d      	cmp	r5, r9
 8008072:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008076:	f84a 3b04 	str.w	r3, [sl], #4
 800807a:	d8e7      	bhi.n	800804c <__mdiff+0x7c>
 800807c:	1b2b      	subs	r3, r5, r4
 800807e:	3b15      	subs	r3, #21
 8008080:	f023 0303 	bic.w	r3, r3, #3
 8008084:	3304      	adds	r3, #4
 8008086:	3415      	adds	r4, #21
 8008088:	42a5      	cmp	r5, r4
 800808a:	bf38      	it	cc
 800808c:	2304      	movcc	r3, #4
 800808e:	4419      	add	r1, r3
 8008090:	4473      	add	r3, lr
 8008092:	469e      	mov	lr, r3
 8008094:	460d      	mov	r5, r1
 8008096:	4565      	cmp	r5, ip
 8008098:	d30e      	bcc.n	80080b8 <__mdiff+0xe8>
 800809a:	f10c 0203 	add.w	r2, ip, #3
 800809e:	1a52      	subs	r2, r2, r1
 80080a0:	f022 0203 	bic.w	r2, r2, #3
 80080a4:	3903      	subs	r1, #3
 80080a6:	458c      	cmp	ip, r1
 80080a8:	bf38      	it	cc
 80080aa:	2200      	movcc	r2, #0
 80080ac:	441a      	add	r2, r3
 80080ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080b2:	b17b      	cbz	r3, 80080d4 <__mdiff+0x104>
 80080b4:	6106      	str	r6, [r0, #16]
 80080b6:	e7a5      	b.n	8008004 <__mdiff+0x34>
 80080b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80080bc:	fa17 f488 	uxtah	r4, r7, r8
 80080c0:	1422      	asrs	r2, r4, #16
 80080c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80080c6:	b2a4      	uxth	r4, r4
 80080c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080cc:	f84e 4b04 	str.w	r4, [lr], #4
 80080d0:	1417      	asrs	r7, r2, #16
 80080d2:	e7e0      	b.n	8008096 <__mdiff+0xc6>
 80080d4:	3e01      	subs	r6, #1
 80080d6:	e7ea      	b.n	80080ae <__mdiff+0xde>
 80080d8:	0800963c 	.word	0x0800963c
 80080dc:	080096cc 	.word	0x080096cc

080080e0 <__ulp>:
 80080e0:	b082      	sub	sp, #8
 80080e2:	ed8d 0b00 	vstr	d0, [sp]
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	4912      	ldr	r1, [pc, #72]	; (8008134 <__ulp+0x54>)
 80080ea:	4019      	ands	r1, r3
 80080ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80080f0:	2900      	cmp	r1, #0
 80080f2:	dd05      	ble.n	8008100 <__ulp+0x20>
 80080f4:	2200      	movs	r2, #0
 80080f6:	460b      	mov	r3, r1
 80080f8:	ec43 2b10 	vmov	d0, r2, r3
 80080fc:	b002      	add	sp, #8
 80080fe:	4770      	bx	lr
 8008100:	4249      	negs	r1, r1
 8008102:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008106:	ea4f 5021 	mov.w	r0, r1, asr #20
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	da04      	bge.n	800811e <__ulp+0x3e>
 8008114:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008118:	fa41 f300 	asr.w	r3, r1, r0
 800811c:	e7ec      	b.n	80080f8 <__ulp+0x18>
 800811e:	f1a0 0114 	sub.w	r1, r0, #20
 8008122:	291e      	cmp	r1, #30
 8008124:	bfda      	itte	le
 8008126:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800812a:	fa20 f101 	lsrle.w	r1, r0, r1
 800812e:	2101      	movgt	r1, #1
 8008130:	460a      	mov	r2, r1
 8008132:	e7e1      	b.n	80080f8 <__ulp+0x18>
 8008134:	7ff00000 	.word	0x7ff00000

08008138 <__b2d>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	6905      	ldr	r5, [r0, #16]
 800813c:	f100 0714 	add.w	r7, r0, #20
 8008140:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008144:	1f2e      	subs	r6, r5, #4
 8008146:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff fd52 	bl	8007bf4 <__hi0bits>
 8008150:	f1c0 0320 	rsb	r3, r0, #32
 8008154:	280a      	cmp	r0, #10
 8008156:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80081d4 <__b2d+0x9c>
 800815a:	600b      	str	r3, [r1, #0]
 800815c:	dc14      	bgt.n	8008188 <__b2d+0x50>
 800815e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008162:	fa24 f10e 	lsr.w	r1, r4, lr
 8008166:	42b7      	cmp	r7, r6
 8008168:	ea41 030c 	orr.w	r3, r1, ip
 800816c:	bf34      	ite	cc
 800816e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008172:	2100      	movcs	r1, #0
 8008174:	3015      	adds	r0, #21
 8008176:	fa04 f000 	lsl.w	r0, r4, r0
 800817a:	fa21 f10e 	lsr.w	r1, r1, lr
 800817e:	ea40 0201 	orr.w	r2, r0, r1
 8008182:	ec43 2b10 	vmov	d0, r2, r3
 8008186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008188:	42b7      	cmp	r7, r6
 800818a:	bf3a      	itte	cc
 800818c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008190:	f1a5 0608 	subcc.w	r6, r5, #8
 8008194:	2100      	movcs	r1, #0
 8008196:	380b      	subs	r0, #11
 8008198:	d017      	beq.n	80081ca <__b2d+0x92>
 800819a:	f1c0 0c20 	rsb	ip, r0, #32
 800819e:	fa04 f500 	lsl.w	r5, r4, r0
 80081a2:	42be      	cmp	r6, r7
 80081a4:	fa21 f40c 	lsr.w	r4, r1, ip
 80081a8:	ea45 0504 	orr.w	r5, r5, r4
 80081ac:	bf8c      	ite	hi
 80081ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80081b2:	2400      	movls	r4, #0
 80081b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80081b8:	fa01 f000 	lsl.w	r0, r1, r0
 80081bc:	fa24 f40c 	lsr.w	r4, r4, ip
 80081c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80081c4:	ea40 0204 	orr.w	r2, r0, r4
 80081c8:	e7db      	b.n	8008182 <__b2d+0x4a>
 80081ca:	ea44 030c 	orr.w	r3, r4, ip
 80081ce:	460a      	mov	r2, r1
 80081d0:	e7d7      	b.n	8008182 <__b2d+0x4a>
 80081d2:	bf00      	nop
 80081d4:	3ff00000 	.word	0x3ff00000

080081d8 <__d2b>:
 80081d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	4689      	mov	r9, r1
 80081de:	2101      	movs	r1, #1
 80081e0:	ec57 6b10 	vmov	r6, r7, d0
 80081e4:	4690      	mov	r8, r2
 80081e6:	f7ff fc0f 	bl	8007a08 <_Balloc>
 80081ea:	4604      	mov	r4, r0
 80081ec:	b930      	cbnz	r0, 80081fc <__d2b+0x24>
 80081ee:	4602      	mov	r2, r0
 80081f0:	4b25      	ldr	r3, [pc, #148]	; (8008288 <__d2b+0xb0>)
 80081f2:	4826      	ldr	r0, [pc, #152]	; (800828c <__d2b+0xb4>)
 80081f4:	f240 310a 	movw	r1, #778	; 0x30a
 80081f8:	f000 fb0e 	bl	8008818 <__assert_func>
 80081fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008204:	bb35      	cbnz	r5, 8008254 <__d2b+0x7c>
 8008206:	2e00      	cmp	r6, #0
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	d028      	beq.n	800825e <__d2b+0x86>
 800820c:	4668      	mov	r0, sp
 800820e:	9600      	str	r6, [sp, #0]
 8008210:	f7ff fd10 	bl	8007c34 <__lo0bits>
 8008214:	9900      	ldr	r1, [sp, #0]
 8008216:	b300      	cbz	r0, 800825a <__d2b+0x82>
 8008218:	9a01      	ldr	r2, [sp, #4]
 800821a:	f1c0 0320 	rsb	r3, r0, #32
 800821e:	fa02 f303 	lsl.w	r3, r2, r3
 8008222:	430b      	orrs	r3, r1
 8008224:	40c2      	lsrs	r2, r0
 8008226:	6163      	str	r3, [r4, #20]
 8008228:	9201      	str	r2, [sp, #4]
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	61a3      	str	r3, [r4, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf14      	ite	ne
 8008232:	2202      	movne	r2, #2
 8008234:	2201      	moveq	r2, #1
 8008236:	6122      	str	r2, [r4, #16]
 8008238:	b1d5      	cbz	r5, 8008270 <__d2b+0x98>
 800823a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800823e:	4405      	add	r5, r0
 8008240:	f8c9 5000 	str.w	r5, [r9]
 8008244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008248:	f8c8 0000 	str.w	r0, [r8]
 800824c:	4620      	mov	r0, r4
 800824e:	b003      	add	sp, #12
 8008250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008258:	e7d5      	b.n	8008206 <__d2b+0x2e>
 800825a:	6161      	str	r1, [r4, #20]
 800825c:	e7e5      	b.n	800822a <__d2b+0x52>
 800825e:	a801      	add	r0, sp, #4
 8008260:	f7ff fce8 	bl	8007c34 <__lo0bits>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	6163      	str	r3, [r4, #20]
 8008268:	2201      	movs	r2, #1
 800826a:	6122      	str	r2, [r4, #16]
 800826c:	3020      	adds	r0, #32
 800826e:	e7e3      	b.n	8008238 <__d2b+0x60>
 8008270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008278:	f8c9 0000 	str.w	r0, [r9]
 800827c:	6918      	ldr	r0, [r3, #16]
 800827e:	f7ff fcb9 	bl	8007bf4 <__hi0bits>
 8008282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008286:	e7df      	b.n	8008248 <__d2b+0x70>
 8008288:	0800963c 	.word	0x0800963c
 800828c:	080096cc 	.word	0x080096cc

08008290 <__ratio>:
 8008290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	4688      	mov	r8, r1
 8008296:	4669      	mov	r1, sp
 8008298:	4681      	mov	r9, r0
 800829a:	f7ff ff4d 	bl	8008138 <__b2d>
 800829e:	a901      	add	r1, sp, #4
 80082a0:	4640      	mov	r0, r8
 80082a2:	ec55 4b10 	vmov	r4, r5, d0
 80082a6:	f7ff ff47 	bl	8008138 <__b2d>
 80082aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80082b2:	eba3 0c02 	sub.w	ip, r3, r2
 80082b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80082c0:	ec51 0b10 	vmov	r0, r1, d0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfd6      	itet	le
 80082c8:	460a      	movle	r2, r1
 80082ca:	462a      	movgt	r2, r5
 80082cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082d0:	468b      	mov	fp, r1
 80082d2:	462f      	mov	r7, r5
 80082d4:	bfd4      	ite	le
 80082d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80082da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80082de:	4620      	mov	r0, r4
 80082e0:	ee10 2a10 	vmov	r2, s0
 80082e4:	465b      	mov	r3, fp
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f8 fad0 	bl	800088c <__aeabi_ddiv>
 80082ec:	ec41 0b10 	vmov	d0, r0, r1
 80082f0:	b003      	add	sp, #12
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082f6 <__copybits>:
 80082f6:	3901      	subs	r1, #1
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	1149      	asrs	r1, r1, #5
 80082fc:	6914      	ldr	r4, [r2, #16]
 80082fe:	3101      	adds	r1, #1
 8008300:	f102 0314 	add.w	r3, r2, #20
 8008304:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008308:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800830c:	1f05      	subs	r5, r0, #4
 800830e:	42a3      	cmp	r3, r4
 8008310:	d30c      	bcc.n	800832c <__copybits+0x36>
 8008312:	1aa3      	subs	r3, r4, r2
 8008314:	3b11      	subs	r3, #17
 8008316:	f023 0303 	bic.w	r3, r3, #3
 800831a:	3211      	adds	r2, #17
 800831c:	42a2      	cmp	r2, r4
 800831e:	bf88      	it	hi
 8008320:	2300      	movhi	r3, #0
 8008322:	4418      	add	r0, r3
 8008324:	2300      	movs	r3, #0
 8008326:	4288      	cmp	r0, r1
 8008328:	d305      	bcc.n	8008336 <__copybits+0x40>
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008330:	f845 6f04 	str.w	r6, [r5, #4]!
 8008334:	e7eb      	b.n	800830e <__copybits+0x18>
 8008336:	f840 3b04 	str.w	r3, [r0], #4
 800833a:	e7f4      	b.n	8008326 <__copybits+0x30>

0800833c <__any_on>:
 800833c:	f100 0214 	add.w	r2, r0, #20
 8008340:	6900      	ldr	r0, [r0, #16]
 8008342:	114b      	asrs	r3, r1, #5
 8008344:	4298      	cmp	r0, r3
 8008346:	b510      	push	{r4, lr}
 8008348:	db11      	blt.n	800836e <__any_on+0x32>
 800834a:	dd0a      	ble.n	8008362 <__any_on+0x26>
 800834c:	f011 011f 	ands.w	r1, r1, #31
 8008350:	d007      	beq.n	8008362 <__any_on+0x26>
 8008352:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008356:	fa24 f001 	lsr.w	r0, r4, r1
 800835a:	fa00 f101 	lsl.w	r1, r0, r1
 800835e:	428c      	cmp	r4, r1
 8008360:	d10b      	bne.n	800837a <__any_on+0x3e>
 8008362:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008366:	4293      	cmp	r3, r2
 8008368:	d803      	bhi.n	8008372 <__any_on+0x36>
 800836a:	2000      	movs	r0, #0
 800836c:	bd10      	pop	{r4, pc}
 800836e:	4603      	mov	r3, r0
 8008370:	e7f7      	b.n	8008362 <__any_on+0x26>
 8008372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008376:	2900      	cmp	r1, #0
 8008378:	d0f5      	beq.n	8008366 <__any_on+0x2a>
 800837a:	2001      	movs	r0, #1
 800837c:	e7f6      	b.n	800836c <__any_on+0x30>

0800837e <_calloc_r>:
 800837e:	b513      	push	{r0, r1, r4, lr}
 8008380:	434a      	muls	r2, r1
 8008382:	4611      	mov	r1, r2
 8008384:	9201      	str	r2, [sp, #4]
 8008386:	f000 f859 	bl	800843c <_malloc_r>
 800838a:	4604      	mov	r4, r0
 800838c:	b118      	cbz	r0, 8008396 <_calloc_r+0x18>
 800838e:	9a01      	ldr	r2, [sp, #4]
 8008390:	2100      	movs	r1, #0
 8008392:	f7fc fbc9 	bl	8004b28 <memset>
 8008396:	4620      	mov	r0, r4
 8008398:	b002      	add	sp, #8
 800839a:	bd10      	pop	{r4, pc}

0800839c <_free_r>:
 800839c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800839e:	2900      	cmp	r1, #0
 80083a0:	d048      	beq.n	8008434 <_free_r+0x98>
 80083a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a6:	9001      	str	r0, [sp, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f1a1 0404 	sub.w	r4, r1, #4
 80083ae:	bfb8      	it	lt
 80083b0:	18e4      	addlt	r4, r4, r3
 80083b2:	f000 fa7b 	bl	80088ac <__malloc_lock>
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <_free_r+0x9c>)
 80083b8:	9801      	ldr	r0, [sp, #4]
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	4615      	mov	r5, r2
 80083be:	b933      	cbnz	r3, 80083ce <_free_r+0x32>
 80083c0:	6063      	str	r3, [r4, #4]
 80083c2:	6014      	str	r4, [r2, #0]
 80083c4:	b003      	add	sp, #12
 80083c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ca:	f000 ba75 	b.w	80088b8 <__malloc_unlock>
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	d90b      	bls.n	80083ea <_free_r+0x4e>
 80083d2:	6821      	ldr	r1, [r4, #0]
 80083d4:	1862      	adds	r2, r4, r1
 80083d6:	4293      	cmp	r3, r2
 80083d8:	bf04      	itt	eq
 80083da:	681a      	ldreq	r2, [r3, #0]
 80083dc:	685b      	ldreq	r3, [r3, #4]
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	bf04      	itt	eq
 80083e2:	1852      	addeq	r2, r2, r1
 80083e4:	6022      	streq	r2, [r4, #0]
 80083e6:	602c      	str	r4, [r5, #0]
 80083e8:	e7ec      	b.n	80083c4 <_free_r+0x28>
 80083ea:	461a      	mov	r2, r3
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	b10b      	cbz	r3, 80083f4 <_free_r+0x58>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d9fa      	bls.n	80083ea <_free_r+0x4e>
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	1855      	adds	r5, r2, r1
 80083f8:	42a5      	cmp	r5, r4
 80083fa:	d10b      	bne.n	8008414 <_free_r+0x78>
 80083fc:	6824      	ldr	r4, [r4, #0]
 80083fe:	4421      	add	r1, r4
 8008400:	1854      	adds	r4, r2, r1
 8008402:	42a3      	cmp	r3, r4
 8008404:	6011      	str	r1, [r2, #0]
 8008406:	d1dd      	bne.n	80083c4 <_free_r+0x28>
 8008408:	681c      	ldr	r4, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	6053      	str	r3, [r2, #4]
 800840e:	4421      	add	r1, r4
 8008410:	6011      	str	r1, [r2, #0]
 8008412:	e7d7      	b.n	80083c4 <_free_r+0x28>
 8008414:	d902      	bls.n	800841c <_free_r+0x80>
 8008416:	230c      	movs	r3, #12
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	e7d3      	b.n	80083c4 <_free_r+0x28>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf04      	itt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	bf04      	itt	eq
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	6054      	str	r4, [r2, #4]
 8008432:	e7c7      	b.n	80083c4 <_free_r+0x28>
 8008434:	b003      	add	sp, #12
 8008436:	bd30      	pop	{r4, r5, pc}
 8008438:	20000214 	.word	0x20000214

0800843c <_malloc_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	1ccd      	adds	r5, r1, #3
 8008440:	f025 0503 	bic.w	r5, r5, #3
 8008444:	3508      	adds	r5, #8
 8008446:	2d0c      	cmp	r5, #12
 8008448:	bf38      	it	cc
 800844a:	250c      	movcc	r5, #12
 800844c:	2d00      	cmp	r5, #0
 800844e:	4606      	mov	r6, r0
 8008450:	db01      	blt.n	8008456 <_malloc_r+0x1a>
 8008452:	42a9      	cmp	r1, r5
 8008454:	d903      	bls.n	800845e <_malloc_r+0x22>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	2000      	movs	r0, #0
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	f000 fa25 	bl	80088ac <__malloc_lock>
 8008462:	4921      	ldr	r1, [pc, #132]	; (80084e8 <_malloc_r+0xac>)
 8008464:	680a      	ldr	r2, [r1, #0]
 8008466:	4614      	mov	r4, r2
 8008468:	b99c      	cbnz	r4, 8008492 <_malloc_r+0x56>
 800846a:	4f20      	ldr	r7, [pc, #128]	; (80084ec <_malloc_r+0xb0>)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	b923      	cbnz	r3, 800847a <_malloc_r+0x3e>
 8008470:	4621      	mov	r1, r4
 8008472:	4630      	mov	r0, r6
 8008474:	f000 f9a0 	bl	80087b8 <_sbrk_r>
 8008478:	6038      	str	r0, [r7, #0]
 800847a:	4629      	mov	r1, r5
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f99b 	bl	80087b8 <_sbrk_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d123      	bne.n	80084ce <_malloc_r+0x92>
 8008486:	230c      	movs	r3, #12
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	4630      	mov	r0, r6
 800848c:	f000 fa14 	bl	80088b8 <__malloc_unlock>
 8008490:	e7e3      	b.n	800845a <_malloc_r+0x1e>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	1b5b      	subs	r3, r3, r5
 8008496:	d417      	bmi.n	80084c8 <_malloc_r+0x8c>
 8008498:	2b0b      	cmp	r3, #11
 800849a:	d903      	bls.n	80084a4 <_malloc_r+0x68>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	441c      	add	r4, r3
 80084a0:	6025      	str	r5, [r4, #0]
 80084a2:	e004      	b.n	80084ae <_malloc_r+0x72>
 80084a4:	6863      	ldr	r3, [r4, #4]
 80084a6:	42a2      	cmp	r2, r4
 80084a8:	bf0c      	ite	eq
 80084aa:	600b      	streq	r3, [r1, #0]
 80084ac:	6053      	strne	r3, [r2, #4]
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 fa02 	bl	80088b8 <__malloc_unlock>
 80084b4:	f104 000b 	add.w	r0, r4, #11
 80084b8:	1d23      	adds	r3, r4, #4
 80084ba:	f020 0007 	bic.w	r0, r0, #7
 80084be:	1ac2      	subs	r2, r0, r3
 80084c0:	d0cc      	beq.n	800845c <_malloc_r+0x20>
 80084c2:	1a1b      	subs	r3, r3, r0
 80084c4:	50a3      	str	r3, [r4, r2]
 80084c6:	e7c9      	b.n	800845c <_malloc_r+0x20>
 80084c8:	4622      	mov	r2, r4
 80084ca:	6864      	ldr	r4, [r4, #4]
 80084cc:	e7cc      	b.n	8008468 <_malloc_r+0x2c>
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0e3      	beq.n	80084a0 <_malloc_r+0x64>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 f96c 	bl	80087b8 <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1dd      	bne.n	80084a0 <_malloc_r+0x64>
 80084e4:	e7cf      	b.n	8008486 <_malloc_r+0x4a>
 80084e6:	bf00      	nop
 80084e8:	20000214 	.word	0x20000214
 80084ec:	20000218 	.word	0x20000218

080084f0 <__ssputs_r>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	688e      	ldr	r6, [r1, #8]
 80084f6:	429e      	cmp	r6, r3
 80084f8:	4682      	mov	sl, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	4690      	mov	r8, r2
 80084fe:	461f      	mov	r7, r3
 8008500:	d838      	bhi.n	8008574 <__ssputs_r+0x84>
 8008502:	898a      	ldrh	r2, [r1, #12]
 8008504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008508:	d032      	beq.n	8008570 <__ssputs_r+0x80>
 800850a:	6825      	ldr	r5, [r4, #0]
 800850c:	6909      	ldr	r1, [r1, #16]
 800850e:	eba5 0901 	sub.w	r9, r5, r1
 8008512:	6965      	ldr	r5, [r4, #20]
 8008514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800851c:	3301      	adds	r3, #1
 800851e:	444b      	add	r3, r9
 8008520:	106d      	asrs	r5, r5, #1
 8008522:	429d      	cmp	r5, r3
 8008524:	bf38      	it	cc
 8008526:	461d      	movcc	r5, r3
 8008528:	0553      	lsls	r3, r2, #21
 800852a:	d531      	bpl.n	8008590 <__ssputs_r+0xa0>
 800852c:	4629      	mov	r1, r5
 800852e:	f7ff ff85 	bl	800843c <_malloc_r>
 8008532:	4606      	mov	r6, r0
 8008534:	b950      	cbnz	r0, 800854c <__ssputs_r+0x5c>
 8008536:	230c      	movs	r3, #12
 8008538:	f8ca 3000 	str.w	r3, [sl]
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	6921      	ldr	r1, [r4, #16]
 800854e:	464a      	mov	r2, r9
 8008550:	f7ff fa4c 	bl	80079ec <memcpy>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800855a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	6126      	str	r6, [r4, #16]
 8008562:	6165      	str	r5, [r4, #20]
 8008564:	444e      	add	r6, r9
 8008566:	eba5 0509 	sub.w	r5, r5, r9
 800856a:	6026      	str	r6, [r4, #0]
 800856c:	60a5      	str	r5, [r4, #8]
 800856e:	463e      	mov	r6, r7
 8008570:	42be      	cmp	r6, r7
 8008572:	d900      	bls.n	8008576 <__ssputs_r+0x86>
 8008574:	463e      	mov	r6, r7
 8008576:	4632      	mov	r2, r6
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	4641      	mov	r1, r8
 800857c:	f000 f97c 	bl	8008878 <memmove>
 8008580:	68a3      	ldr	r3, [r4, #8]
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	1b9b      	subs	r3, r3, r6
 8008586:	4432      	add	r2, r6
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	2000      	movs	r0, #0
 800858e:	e7db      	b.n	8008548 <__ssputs_r+0x58>
 8008590:	462a      	mov	r2, r5
 8008592:	f000 f997 	bl	80088c4 <_realloc_r>
 8008596:	4606      	mov	r6, r0
 8008598:	2800      	cmp	r0, #0
 800859a:	d1e1      	bne.n	8008560 <__ssputs_r+0x70>
 800859c:	6921      	ldr	r1, [r4, #16]
 800859e:	4650      	mov	r0, sl
 80085a0:	f7ff fefc 	bl	800839c <_free_r>
 80085a4:	e7c7      	b.n	8008536 <__ssputs_r+0x46>
	...

080085a8 <_svfiprintf_r>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	4698      	mov	r8, r3
 80085ae:	898b      	ldrh	r3, [r1, #12]
 80085b0:	061b      	lsls	r3, r3, #24
 80085b2:	b09d      	sub	sp, #116	; 0x74
 80085b4:	4607      	mov	r7, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	d50e      	bpl.n	80085da <_svfiprintf_r+0x32>
 80085bc:	690b      	ldr	r3, [r1, #16]
 80085be:	b963      	cbnz	r3, 80085da <_svfiprintf_r+0x32>
 80085c0:	2140      	movs	r1, #64	; 0x40
 80085c2:	f7ff ff3b 	bl	800843c <_malloc_r>
 80085c6:	6028      	str	r0, [r5, #0]
 80085c8:	6128      	str	r0, [r5, #16]
 80085ca:	b920      	cbnz	r0, 80085d6 <_svfiprintf_r+0x2e>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	e0d1      	b.n	800877a <_svfiprintf_r+0x1d2>
 80085d6:	2340      	movs	r3, #64	; 0x40
 80085d8:	616b      	str	r3, [r5, #20]
 80085da:	2300      	movs	r3, #0
 80085dc:	9309      	str	r3, [sp, #36]	; 0x24
 80085de:	2320      	movs	r3, #32
 80085e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e8:	2330      	movs	r3, #48	; 0x30
 80085ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008794 <_svfiprintf_r+0x1ec>
 80085ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085f2:	f04f 0901 	mov.w	r9, #1
 80085f6:	4623      	mov	r3, r4
 80085f8:	469a      	mov	sl, r3
 80085fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fe:	b10a      	cbz	r2, 8008604 <_svfiprintf_r+0x5c>
 8008600:	2a25      	cmp	r2, #37	; 0x25
 8008602:	d1f9      	bne.n	80085f8 <_svfiprintf_r+0x50>
 8008604:	ebba 0b04 	subs.w	fp, sl, r4
 8008608:	d00b      	beq.n	8008622 <_svfiprintf_r+0x7a>
 800860a:	465b      	mov	r3, fp
 800860c:	4622      	mov	r2, r4
 800860e:	4629      	mov	r1, r5
 8008610:	4638      	mov	r0, r7
 8008612:	f7ff ff6d 	bl	80084f0 <__ssputs_r>
 8008616:	3001      	adds	r0, #1
 8008618:	f000 80aa 	beq.w	8008770 <_svfiprintf_r+0x1c8>
 800861c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800861e:	445a      	add	r2, fp
 8008620:	9209      	str	r2, [sp, #36]	; 0x24
 8008622:	f89a 3000 	ldrb.w	r3, [sl]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80a2 	beq.w	8008770 <_svfiprintf_r+0x1c8>
 800862c:	2300      	movs	r3, #0
 800862e:	f04f 32ff 	mov.w	r2, #4294967295
 8008632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008636:	f10a 0a01 	add.w	sl, sl, #1
 800863a:	9304      	str	r3, [sp, #16]
 800863c:	9307      	str	r3, [sp, #28]
 800863e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008642:	931a      	str	r3, [sp, #104]	; 0x68
 8008644:	4654      	mov	r4, sl
 8008646:	2205      	movs	r2, #5
 8008648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864c:	4851      	ldr	r0, [pc, #324]	; (8008794 <_svfiprintf_r+0x1ec>)
 800864e:	f7f7 fde7 	bl	8000220 <memchr>
 8008652:	9a04      	ldr	r2, [sp, #16]
 8008654:	b9d8      	cbnz	r0, 800868e <_svfiprintf_r+0xe6>
 8008656:	06d0      	lsls	r0, r2, #27
 8008658:	bf44      	itt	mi
 800865a:	2320      	movmi	r3, #32
 800865c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008660:	0711      	lsls	r1, r2, #28
 8008662:	bf44      	itt	mi
 8008664:	232b      	movmi	r3, #43	; 0x2b
 8008666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866a:	f89a 3000 	ldrb.w	r3, [sl]
 800866e:	2b2a      	cmp	r3, #42	; 0x2a
 8008670:	d015      	beq.n	800869e <_svfiprintf_r+0xf6>
 8008672:	9a07      	ldr	r2, [sp, #28]
 8008674:	4654      	mov	r4, sl
 8008676:	2000      	movs	r0, #0
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4621      	mov	r1, r4
 800867e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008682:	3b30      	subs	r3, #48	; 0x30
 8008684:	2b09      	cmp	r3, #9
 8008686:	d94e      	bls.n	8008726 <_svfiprintf_r+0x17e>
 8008688:	b1b0      	cbz	r0, 80086b8 <_svfiprintf_r+0x110>
 800868a:	9207      	str	r2, [sp, #28]
 800868c:	e014      	b.n	80086b8 <_svfiprintf_r+0x110>
 800868e:	eba0 0308 	sub.w	r3, r0, r8
 8008692:	fa09 f303 	lsl.w	r3, r9, r3
 8008696:	4313      	orrs	r3, r2
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	46a2      	mov	sl, r4
 800869c:	e7d2      	b.n	8008644 <_svfiprintf_r+0x9c>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	1d19      	adds	r1, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9103      	str	r1, [sp, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfbb      	ittet	lt
 80086aa:	425b      	neglt	r3, r3
 80086ac:	f042 0202 	orrlt.w	r2, r2, #2
 80086b0:	9307      	strge	r3, [sp, #28]
 80086b2:	9307      	strlt	r3, [sp, #28]
 80086b4:	bfb8      	it	lt
 80086b6:	9204      	strlt	r2, [sp, #16]
 80086b8:	7823      	ldrb	r3, [r4, #0]
 80086ba:	2b2e      	cmp	r3, #46	; 0x2e
 80086bc:	d10c      	bne.n	80086d8 <_svfiprintf_r+0x130>
 80086be:	7863      	ldrb	r3, [r4, #1]
 80086c0:	2b2a      	cmp	r3, #42	; 0x2a
 80086c2:	d135      	bne.n	8008730 <_svfiprintf_r+0x188>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9203      	str	r2, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfb8      	it	lt
 80086d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086d4:	3402      	adds	r4, #2
 80086d6:	9305      	str	r3, [sp, #20]
 80086d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087a4 <_svfiprintf_r+0x1fc>
 80086dc:	7821      	ldrb	r1, [r4, #0]
 80086de:	2203      	movs	r2, #3
 80086e0:	4650      	mov	r0, sl
 80086e2:	f7f7 fd9d 	bl	8000220 <memchr>
 80086e6:	b140      	cbz	r0, 80086fa <_svfiprintf_r+0x152>
 80086e8:	2340      	movs	r3, #64	; 0x40
 80086ea:	eba0 000a 	sub.w	r0, r0, sl
 80086ee:	fa03 f000 	lsl.w	r0, r3, r0
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	4303      	orrs	r3, r0
 80086f6:	3401      	adds	r4, #1
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fe:	4826      	ldr	r0, [pc, #152]	; (8008798 <_svfiprintf_r+0x1f0>)
 8008700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008704:	2206      	movs	r2, #6
 8008706:	f7f7 fd8b 	bl	8000220 <memchr>
 800870a:	2800      	cmp	r0, #0
 800870c:	d038      	beq.n	8008780 <_svfiprintf_r+0x1d8>
 800870e:	4b23      	ldr	r3, [pc, #140]	; (800879c <_svfiprintf_r+0x1f4>)
 8008710:	bb1b      	cbnz	r3, 800875a <_svfiprintf_r+0x1b2>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	3307      	adds	r3, #7
 8008716:	f023 0307 	bic.w	r3, r3, #7
 800871a:	3308      	adds	r3, #8
 800871c:	9303      	str	r3, [sp, #12]
 800871e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008720:	4433      	add	r3, r6
 8008722:	9309      	str	r3, [sp, #36]	; 0x24
 8008724:	e767      	b.n	80085f6 <_svfiprintf_r+0x4e>
 8008726:	fb0c 3202 	mla	r2, ip, r2, r3
 800872a:	460c      	mov	r4, r1
 800872c:	2001      	movs	r0, #1
 800872e:	e7a5      	b.n	800867c <_svfiprintf_r+0xd4>
 8008730:	2300      	movs	r3, #0
 8008732:	3401      	adds	r4, #1
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	4619      	mov	r1, r3
 8008738:	f04f 0c0a 	mov.w	ip, #10
 800873c:	4620      	mov	r0, r4
 800873e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008742:	3a30      	subs	r2, #48	; 0x30
 8008744:	2a09      	cmp	r2, #9
 8008746:	d903      	bls.n	8008750 <_svfiprintf_r+0x1a8>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0c5      	beq.n	80086d8 <_svfiprintf_r+0x130>
 800874c:	9105      	str	r1, [sp, #20]
 800874e:	e7c3      	b.n	80086d8 <_svfiprintf_r+0x130>
 8008750:	fb0c 2101 	mla	r1, ip, r1, r2
 8008754:	4604      	mov	r4, r0
 8008756:	2301      	movs	r3, #1
 8008758:	e7f0      	b.n	800873c <_svfiprintf_r+0x194>
 800875a:	ab03      	add	r3, sp, #12
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	462a      	mov	r2, r5
 8008760:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <_svfiprintf_r+0x1f8>)
 8008762:	a904      	add	r1, sp, #16
 8008764:	4638      	mov	r0, r7
 8008766:	f7fc fa87 	bl	8004c78 <_printf_float>
 800876a:	1c42      	adds	r2, r0, #1
 800876c:	4606      	mov	r6, r0
 800876e:	d1d6      	bne.n	800871e <_svfiprintf_r+0x176>
 8008770:	89ab      	ldrh	r3, [r5, #12]
 8008772:	065b      	lsls	r3, r3, #25
 8008774:	f53f af2c 	bmi.w	80085d0 <_svfiprintf_r+0x28>
 8008778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877a:	b01d      	add	sp, #116	; 0x74
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	ab03      	add	r3, sp, #12
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	462a      	mov	r2, r5
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <_svfiprintf_r+0x1f8>)
 8008788:	a904      	add	r1, sp, #16
 800878a:	4638      	mov	r0, r7
 800878c:	f7fc fd18 	bl	80051c0 <_printf_i>
 8008790:	e7eb      	b.n	800876a <_svfiprintf_r+0x1c2>
 8008792:	bf00      	nop
 8008794:	0800982c 	.word	0x0800982c
 8008798:	08009836 	.word	0x08009836
 800879c:	08004c79 	.word	0x08004c79
 80087a0:	080084f1 	.word	0x080084f1
 80087a4:	08009832 	.word	0x08009832

080087a8 <nan>:
 80087a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087b0 <nan+0x8>
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	00000000 	.word	0x00000000
 80087b4:	7ff80000 	.word	0x7ff80000

080087b8 <_sbrk_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d06      	ldr	r5, [pc, #24]	; (80087d4 <_sbrk_r+0x1c>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f9 f938 	bl	8001a38 <_sbrk>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_sbrk_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_sbrk_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200003b0 	.word	0x200003b0

080087d8 <strncmp>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	b16a      	cbz	r2, 80087f8 <strncmp+0x20>
 80087dc:	3901      	subs	r1, #1
 80087de:	1884      	adds	r4, r0, r2
 80087e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80087e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d103      	bne.n	80087f4 <strncmp+0x1c>
 80087ec:	42a0      	cmp	r0, r4
 80087ee:	d001      	beq.n	80087f4 <strncmp+0x1c>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f5      	bne.n	80087e0 <strncmp+0x8>
 80087f4:	1a98      	subs	r0, r3, r2
 80087f6:	bd10      	pop	{r4, pc}
 80087f8:	4610      	mov	r0, r2
 80087fa:	e7fc      	b.n	80087f6 <strncmp+0x1e>

080087fc <__ascii_wctomb>:
 80087fc:	b149      	cbz	r1, 8008812 <__ascii_wctomb+0x16>
 80087fe:	2aff      	cmp	r2, #255	; 0xff
 8008800:	bf85      	ittet	hi
 8008802:	238a      	movhi	r3, #138	; 0x8a
 8008804:	6003      	strhi	r3, [r0, #0]
 8008806:	700a      	strbls	r2, [r1, #0]
 8008808:	f04f 30ff 	movhi.w	r0, #4294967295
 800880c:	bf98      	it	ls
 800880e:	2001      	movls	r0, #1
 8008810:	4770      	bx	lr
 8008812:	4608      	mov	r0, r1
 8008814:	4770      	bx	lr
	...

08008818 <__assert_func>:
 8008818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881a:	4614      	mov	r4, r2
 800881c:	461a      	mov	r2, r3
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <__assert_func+0x2c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4605      	mov	r5, r0
 8008824:	68d8      	ldr	r0, [r3, #12]
 8008826:	b14c      	cbz	r4, 800883c <__assert_func+0x24>
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <__assert_func+0x30>)
 800882a:	9100      	str	r1, [sp, #0]
 800882c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008830:	4906      	ldr	r1, [pc, #24]	; (800884c <__assert_func+0x34>)
 8008832:	462b      	mov	r3, r5
 8008834:	f000 f80e 	bl	8008854 <fiprintf>
 8008838:	f000 fa84 	bl	8008d44 <abort>
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <__assert_func+0x38>)
 800883e:	461c      	mov	r4, r3
 8008840:	e7f3      	b.n	800882a <__assert_func+0x12>
 8008842:	bf00      	nop
 8008844:	20000020 	.word	0x20000020
 8008848:	0800983d 	.word	0x0800983d
 800884c:	0800984a 	.word	0x0800984a
 8008850:	08009878 	.word	0x08009878

08008854 <fiprintf>:
 8008854:	b40e      	push	{r1, r2, r3}
 8008856:	b503      	push	{r0, r1, lr}
 8008858:	4601      	mov	r1, r0
 800885a:	ab03      	add	r3, sp, #12
 800885c:	4805      	ldr	r0, [pc, #20]	; (8008874 <fiprintf+0x20>)
 800885e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	f000 f87d 	bl	8008964 <_vfiprintf_r>
 800886a:	b002      	add	sp, #8
 800886c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008870:	b003      	add	sp, #12
 8008872:	4770      	bx	lr
 8008874:	20000020 	.word	0x20000020

08008878 <memmove>:
 8008878:	4288      	cmp	r0, r1
 800887a:	b510      	push	{r4, lr}
 800887c:	eb01 0402 	add.w	r4, r1, r2
 8008880:	d902      	bls.n	8008888 <memmove+0x10>
 8008882:	4284      	cmp	r4, r0
 8008884:	4623      	mov	r3, r4
 8008886:	d807      	bhi.n	8008898 <memmove+0x20>
 8008888:	1e43      	subs	r3, r0, #1
 800888a:	42a1      	cmp	r1, r4
 800888c:	d008      	beq.n	80088a0 <memmove+0x28>
 800888e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008896:	e7f8      	b.n	800888a <memmove+0x12>
 8008898:	4402      	add	r2, r0
 800889a:	4601      	mov	r1, r0
 800889c:	428a      	cmp	r2, r1
 800889e:	d100      	bne.n	80088a2 <memmove+0x2a>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088aa:	e7f7      	b.n	800889c <memmove+0x24>

080088ac <__malloc_lock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__malloc_lock+0x8>)
 80088ae:	f000 bc09 	b.w	80090c4 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	200003b8 	.word	0x200003b8

080088b8 <__malloc_unlock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_unlock+0x8>)
 80088ba:	f000 bc04 	b.w	80090c6 <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	200003b8 	.word	0x200003b8

080088c4 <_realloc_r>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	4607      	mov	r7, r0
 80088c8:	4614      	mov	r4, r2
 80088ca:	460e      	mov	r6, r1
 80088cc:	b921      	cbnz	r1, 80088d8 <_realloc_r+0x14>
 80088ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088d2:	4611      	mov	r1, r2
 80088d4:	f7ff bdb2 	b.w	800843c <_malloc_r>
 80088d8:	b922      	cbnz	r2, 80088e4 <_realloc_r+0x20>
 80088da:	f7ff fd5f 	bl	800839c <_free_r>
 80088de:	4625      	mov	r5, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	f000 fc54 	bl	8009190 <_malloc_usable_size_r>
 80088e8:	42a0      	cmp	r0, r4
 80088ea:	d20f      	bcs.n	800890c <_realloc_r+0x48>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4638      	mov	r0, r7
 80088f0:	f7ff fda4 	bl	800843c <_malloc_r>
 80088f4:	4605      	mov	r5, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d0f2      	beq.n	80088e0 <_realloc_r+0x1c>
 80088fa:	4631      	mov	r1, r6
 80088fc:	4622      	mov	r2, r4
 80088fe:	f7ff f875 	bl	80079ec <memcpy>
 8008902:	4631      	mov	r1, r6
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fd49 	bl	800839c <_free_r>
 800890a:	e7e9      	b.n	80088e0 <_realloc_r+0x1c>
 800890c:	4635      	mov	r5, r6
 800890e:	e7e7      	b.n	80088e0 <_realloc_r+0x1c>

08008910 <__sfputc_r>:
 8008910:	6893      	ldr	r3, [r2, #8]
 8008912:	3b01      	subs	r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	b410      	push	{r4}
 8008918:	6093      	str	r3, [r2, #8]
 800891a:	da08      	bge.n	800892e <__sfputc_r+0x1e>
 800891c:	6994      	ldr	r4, [r2, #24]
 800891e:	42a3      	cmp	r3, r4
 8008920:	db01      	blt.n	8008926 <__sfputc_r+0x16>
 8008922:	290a      	cmp	r1, #10
 8008924:	d103      	bne.n	800892e <__sfputc_r+0x1e>
 8008926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800892a:	f000 b94b 	b.w	8008bc4 <__swbuf_r>
 800892e:	6813      	ldr	r3, [r2, #0]
 8008930:	1c58      	adds	r0, r3, #1
 8008932:	6010      	str	r0, [r2, #0]
 8008934:	7019      	strb	r1, [r3, #0]
 8008936:	4608      	mov	r0, r1
 8008938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800893c:	4770      	bx	lr

0800893e <__sfputs_r>:
 800893e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008940:	4606      	mov	r6, r0
 8008942:	460f      	mov	r7, r1
 8008944:	4614      	mov	r4, r2
 8008946:	18d5      	adds	r5, r2, r3
 8008948:	42ac      	cmp	r4, r5
 800894a:	d101      	bne.n	8008950 <__sfputs_r+0x12>
 800894c:	2000      	movs	r0, #0
 800894e:	e007      	b.n	8008960 <__sfputs_r+0x22>
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	463a      	mov	r2, r7
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ffda 	bl	8008910 <__sfputc_r>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d1f3      	bne.n	8008948 <__sfputs_r+0xa>
 8008960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008964 <_vfiprintf_r>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	460d      	mov	r5, r1
 800896a:	b09d      	sub	sp, #116	; 0x74
 800896c:	4614      	mov	r4, r2
 800896e:	4698      	mov	r8, r3
 8008970:	4606      	mov	r6, r0
 8008972:	b118      	cbz	r0, 800897c <_vfiprintf_r+0x18>
 8008974:	6983      	ldr	r3, [r0, #24]
 8008976:	b90b      	cbnz	r3, 800897c <_vfiprintf_r+0x18>
 8008978:	f000 fb06 	bl	8008f88 <__sinit>
 800897c:	4b89      	ldr	r3, [pc, #548]	; (8008ba4 <_vfiprintf_r+0x240>)
 800897e:	429d      	cmp	r5, r3
 8008980:	d11b      	bne.n	80089ba <_vfiprintf_r+0x56>
 8008982:	6875      	ldr	r5, [r6, #4]
 8008984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008986:	07d9      	lsls	r1, r3, #31
 8008988:	d405      	bmi.n	8008996 <_vfiprintf_r+0x32>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	059a      	lsls	r2, r3, #22
 800898e:	d402      	bmi.n	8008996 <_vfiprintf_r+0x32>
 8008990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008992:	f000 fb97 	bl	80090c4 <__retarget_lock_acquire_recursive>
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	071b      	lsls	r3, r3, #28
 800899a:	d501      	bpl.n	80089a0 <_vfiprintf_r+0x3c>
 800899c:	692b      	ldr	r3, [r5, #16]
 800899e:	b9eb      	cbnz	r3, 80089dc <_vfiprintf_r+0x78>
 80089a0:	4629      	mov	r1, r5
 80089a2:	4630      	mov	r0, r6
 80089a4:	f000 f960 	bl	8008c68 <__swsetup_r>
 80089a8:	b1c0      	cbz	r0, 80089dc <_vfiprintf_r+0x78>
 80089aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ac:	07dc      	lsls	r4, r3, #31
 80089ae:	d50e      	bpl.n	80089ce <_vfiprintf_r+0x6a>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	b01d      	add	sp, #116	; 0x74
 80089b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ba:	4b7b      	ldr	r3, [pc, #492]	; (8008ba8 <_vfiprintf_r+0x244>)
 80089bc:	429d      	cmp	r5, r3
 80089be:	d101      	bne.n	80089c4 <_vfiprintf_r+0x60>
 80089c0:	68b5      	ldr	r5, [r6, #8]
 80089c2:	e7df      	b.n	8008984 <_vfiprintf_r+0x20>
 80089c4:	4b79      	ldr	r3, [pc, #484]	; (8008bac <_vfiprintf_r+0x248>)
 80089c6:	429d      	cmp	r5, r3
 80089c8:	bf08      	it	eq
 80089ca:	68f5      	ldreq	r5, [r6, #12]
 80089cc:	e7da      	b.n	8008984 <_vfiprintf_r+0x20>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	0598      	lsls	r0, r3, #22
 80089d2:	d4ed      	bmi.n	80089b0 <_vfiprintf_r+0x4c>
 80089d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d6:	f000 fb76 	bl	80090c6 <__retarget_lock_release_recursive>
 80089da:	e7e9      	b.n	80089b0 <_vfiprintf_r+0x4c>
 80089dc:	2300      	movs	r3, #0
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	2320      	movs	r3, #32
 80089e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ea:	2330      	movs	r3, #48	; 0x30
 80089ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bb0 <_vfiprintf_r+0x24c>
 80089f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f4:	f04f 0901 	mov.w	r9, #1
 80089f8:	4623      	mov	r3, r4
 80089fa:	469a      	mov	sl, r3
 80089fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a00:	b10a      	cbz	r2, 8008a06 <_vfiprintf_r+0xa2>
 8008a02:	2a25      	cmp	r2, #37	; 0x25
 8008a04:	d1f9      	bne.n	80089fa <_vfiprintf_r+0x96>
 8008a06:	ebba 0b04 	subs.w	fp, sl, r4
 8008a0a:	d00b      	beq.n	8008a24 <_vfiprintf_r+0xc0>
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	4622      	mov	r2, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff ff93 	bl	800893e <__sfputs_r>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	f000 80aa 	beq.w	8008b72 <_vfiprintf_r+0x20e>
 8008a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a20:	445a      	add	r2, fp
 8008a22:	9209      	str	r2, [sp, #36]	; 0x24
 8008a24:	f89a 3000 	ldrb.w	r3, [sl]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a2 	beq.w	8008b72 <_vfiprintf_r+0x20e>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a38:	f10a 0a01 	add.w	sl, sl, #1
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a44:	931a      	str	r3, [sp, #104]	; 0x68
 8008a46:	4654      	mov	r4, sl
 8008a48:	2205      	movs	r2, #5
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	4858      	ldr	r0, [pc, #352]	; (8008bb0 <_vfiprintf_r+0x24c>)
 8008a50:	f7f7 fbe6 	bl	8000220 <memchr>
 8008a54:	9a04      	ldr	r2, [sp, #16]
 8008a56:	b9d8      	cbnz	r0, 8008a90 <_vfiprintf_r+0x12c>
 8008a58:	06d1      	lsls	r1, r2, #27
 8008a5a:	bf44      	itt	mi
 8008a5c:	2320      	movmi	r3, #32
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a62:	0713      	lsls	r3, r2, #28
 8008a64:	bf44      	itt	mi
 8008a66:	232b      	movmi	r3, #43	; 0x2b
 8008a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b2a      	cmp	r3, #42	; 0x2a
 8008a72:	d015      	beq.n	8008aa0 <_vfiprintf_r+0x13c>
 8008a74:	9a07      	ldr	r2, [sp, #28]
 8008a76:	4654      	mov	r4, sl
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a84:	3b30      	subs	r3, #48	; 0x30
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d94e      	bls.n	8008b28 <_vfiprintf_r+0x1c4>
 8008a8a:	b1b0      	cbz	r0, 8008aba <_vfiprintf_r+0x156>
 8008a8c:	9207      	str	r2, [sp, #28]
 8008a8e:	e014      	b.n	8008aba <_vfiprintf_r+0x156>
 8008a90:	eba0 0308 	sub.w	r3, r0, r8
 8008a94:	fa09 f303 	lsl.w	r3, r9, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	46a2      	mov	sl, r4
 8008a9e:	e7d2      	b.n	8008a46 <_vfiprintf_r+0xe2>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	1d19      	adds	r1, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9103      	str	r1, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfbb      	ittet	lt
 8008aac:	425b      	neglt	r3, r3
 8008aae:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab2:	9307      	strge	r3, [sp, #28]
 8008ab4:	9307      	strlt	r3, [sp, #28]
 8008ab6:	bfb8      	it	lt
 8008ab8:	9204      	strlt	r2, [sp, #16]
 8008aba:	7823      	ldrb	r3, [r4, #0]
 8008abc:	2b2e      	cmp	r3, #46	; 0x2e
 8008abe:	d10c      	bne.n	8008ada <_vfiprintf_r+0x176>
 8008ac0:	7863      	ldrb	r3, [r4, #1]
 8008ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac4:	d135      	bne.n	8008b32 <_vfiprintf_r+0x1ce>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	9203      	str	r2, [sp, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad6:	3402      	adds	r4, #2
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bc0 <_vfiprintf_r+0x25c>
 8008ade:	7821      	ldrb	r1, [r4, #0]
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	f7f7 fb9c 	bl	8000220 <memchr>
 8008ae8:	b140      	cbz	r0, 8008afc <_vfiprintf_r+0x198>
 8008aea:	2340      	movs	r3, #64	; 0x40
 8008aec:	eba0 000a 	sub.w	r0, r0, sl
 8008af0:	fa03 f000 	lsl.w	r0, r3, r0
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	4303      	orrs	r3, r0
 8008af8:	3401      	adds	r4, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b00:	482c      	ldr	r0, [pc, #176]	; (8008bb4 <_vfiprintf_r+0x250>)
 8008b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b06:	2206      	movs	r2, #6
 8008b08:	f7f7 fb8a 	bl	8000220 <memchr>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d03f      	beq.n	8008b90 <_vfiprintf_r+0x22c>
 8008b10:	4b29      	ldr	r3, [pc, #164]	; (8008bb8 <_vfiprintf_r+0x254>)
 8008b12:	bb1b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x1f8>
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	3307      	adds	r3, #7
 8008b18:	f023 0307 	bic.w	r3, r3, #7
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b22:	443b      	add	r3, r7
 8008b24:	9309      	str	r3, [sp, #36]	; 0x24
 8008b26:	e767      	b.n	80089f8 <_vfiprintf_r+0x94>
 8008b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	2001      	movs	r0, #1
 8008b30:	e7a5      	b.n	8008a7e <_vfiprintf_r+0x11a>
 8008b32:	2300      	movs	r3, #0
 8008b34:	3401      	adds	r4, #1
 8008b36:	9305      	str	r3, [sp, #20]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f04f 0c0a 	mov.w	ip, #10
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b44:	3a30      	subs	r2, #48	; 0x30
 8008b46:	2a09      	cmp	r2, #9
 8008b48:	d903      	bls.n	8008b52 <_vfiprintf_r+0x1ee>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0c5      	beq.n	8008ada <_vfiprintf_r+0x176>
 8008b4e:	9105      	str	r1, [sp, #20]
 8008b50:	e7c3      	b.n	8008ada <_vfiprintf_r+0x176>
 8008b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b56:	4604      	mov	r4, r0
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e7f0      	b.n	8008b3e <_vfiprintf_r+0x1da>
 8008b5c:	ab03      	add	r3, sp, #12
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4b16      	ldr	r3, [pc, #88]	; (8008bbc <_vfiprintf_r+0x258>)
 8008b64:	a904      	add	r1, sp, #16
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7fc f886 	bl	8004c78 <_printf_float>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	1c78      	adds	r0, r7, #1
 8008b70:	d1d6      	bne.n	8008b20 <_vfiprintf_r+0x1bc>
 8008b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b74:	07d9      	lsls	r1, r3, #31
 8008b76:	d405      	bmi.n	8008b84 <_vfiprintf_r+0x220>
 8008b78:	89ab      	ldrh	r3, [r5, #12]
 8008b7a:	059a      	lsls	r2, r3, #22
 8008b7c:	d402      	bmi.n	8008b84 <_vfiprintf_r+0x220>
 8008b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b80:	f000 faa1 	bl	80090c6 <__retarget_lock_release_recursive>
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	065b      	lsls	r3, r3, #25
 8008b88:	f53f af12 	bmi.w	80089b0 <_vfiprintf_r+0x4c>
 8008b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8e:	e711      	b.n	80089b4 <_vfiprintf_r+0x50>
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <_vfiprintf_r+0x258>)
 8008b98:	a904      	add	r1, sp, #16
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7fc fb10 	bl	80051c0 <_printf_i>
 8008ba0:	e7e4      	b.n	8008b6c <_vfiprintf_r+0x208>
 8008ba2:	bf00      	nop
 8008ba4:	0800989c 	.word	0x0800989c
 8008ba8:	080098bc 	.word	0x080098bc
 8008bac:	0800987c 	.word	0x0800987c
 8008bb0:	0800982c 	.word	0x0800982c
 8008bb4:	08009836 	.word	0x08009836
 8008bb8:	08004c79 	.word	0x08004c79
 8008bbc:	0800893f 	.word	0x0800893f
 8008bc0:	08009832 	.word	0x08009832

08008bc4 <__swbuf_r>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	460e      	mov	r6, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	4605      	mov	r5, r0
 8008bcc:	b118      	cbz	r0, 8008bd6 <__swbuf_r+0x12>
 8008bce:	6983      	ldr	r3, [r0, #24]
 8008bd0:	b90b      	cbnz	r3, 8008bd6 <__swbuf_r+0x12>
 8008bd2:	f000 f9d9 	bl	8008f88 <__sinit>
 8008bd6:	4b21      	ldr	r3, [pc, #132]	; (8008c5c <__swbuf_r+0x98>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	d12b      	bne.n	8008c34 <__swbuf_r+0x70>
 8008bdc:	686c      	ldr	r4, [r5, #4]
 8008bde:	69a3      	ldr	r3, [r4, #24]
 8008be0:	60a3      	str	r3, [r4, #8]
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	071a      	lsls	r2, r3, #28
 8008be6:	d52f      	bpl.n	8008c48 <__swbuf_r+0x84>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	b36b      	cbz	r3, 8008c48 <__swbuf_r+0x84>
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	6820      	ldr	r0, [r4, #0]
 8008bf0:	1ac0      	subs	r0, r0, r3
 8008bf2:	6963      	ldr	r3, [r4, #20]
 8008bf4:	b2f6      	uxtb	r6, r6
 8008bf6:	4283      	cmp	r3, r0
 8008bf8:	4637      	mov	r7, r6
 8008bfa:	dc04      	bgt.n	8008c06 <__swbuf_r+0x42>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f000 f92e 	bl	8008e60 <_fflush_r>
 8008c04:	bb30      	cbnz	r0, 8008c54 <__swbuf_r+0x90>
 8008c06:	68a3      	ldr	r3, [r4, #8]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	701e      	strb	r6, [r3, #0]
 8008c14:	6963      	ldr	r3, [r4, #20]
 8008c16:	3001      	adds	r0, #1
 8008c18:	4283      	cmp	r3, r0
 8008c1a:	d004      	beq.n	8008c26 <__swbuf_r+0x62>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	07db      	lsls	r3, r3, #31
 8008c20:	d506      	bpl.n	8008c30 <__swbuf_r+0x6c>
 8008c22:	2e0a      	cmp	r6, #10
 8008c24:	d104      	bne.n	8008c30 <__swbuf_r+0x6c>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f000 f919 	bl	8008e60 <_fflush_r>
 8008c2e:	b988      	cbnz	r0, 8008c54 <__swbuf_r+0x90>
 8008c30:	4638      	mov	r0, r7
 8008c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c34:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <__swbuf_r+0x9c>)
 8008c36:	429c      	cmp	r4, r3
 8008c38:	d101      	bne.n	8008c3e <__swbuf_r+0x7a>
 8008c3a:	68ac      	ldr	r4, [r5, #8]
 8008c3c:	e7cf      	b.n	8008bde <__swbuf_r+0x1a>
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <__swbuf_r+0xa0>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	bf08      	it	eq
 8008c44:	68ec      	ldreq	r4, [r5, #12]
 8008c46:	e7ca      	b.n	8008bde <__swbuf_r+0x1a>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 f80c 	bl	8008c68 <__swsetup_r>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d0cb      	beq.n	8008bec <__swbuf_r+0x28>
 8008c54:	f04f 37ff 	mov.w	r7, #4294967295
 8008c58:	e7ea      	b.n	8008c30 <__swbuf_r+0x6c>
 8008c5a:	bf00      	nop
 8008c5c:	0800989c 	.word	0x0800989c
 8008c60:	080098bc 	.word	0x080098bc
 8008c64:	0800987c 	.word	0x0800987c

08008c68 <__swsetup_r>:
 8008c68:	4b32      	ldr	r3, [pc, #200]	; (8008d34 <__swsetup_r+0xcc>)
 8008c6a:	b570      	push	{r4, r5, r6, lr}
 8008c6c:	681d      	ldr	r5, [r3, #0]
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460c      	mov	r4, r1
 8008c72:	b125      	cbz	r5, 8008c7e <__swsetup_r+0x16>
 8008c74:	69ab      	ldr	r3, [r5, #24]
 8008c76:	b913      	cbnz	r3, 8008c7e <__swsetup_r+0x16>
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f000 f985 	bl	8008f88 <__sinit>
 8008c7e:	4b2e      	ldr	r3, [pc, #184]	; (8008d38 <__swsetup_r+0xd0>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	d10f      	bne.n	8008ca4 <__swsetup_r+0x3c>
 8008c84:	686c      	ldr	r4, [r5, #4]
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c8c:	0719      	lsls	r1, r3, #28
 8008c8e:	d42c      	bmi.n	8008cea <__swsetup_r+0x82>
 8008c90:	06dd      	lsls	r5, r3, #27
 8008c92:	d411      	bmi.n	8008cb8 <__swsetup_r+0x50>
 8008c94:	2309      	movs	r3, #9
 8008c96:	6033      	str	r3, [r6, #0]
 8008c98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	e03e      	b.n	8008d22 <__swsetup_r+0xba>
 8008ca4:	4b25      	ldr	r3, [pc, #148]	; (8008d3c <__swsetup_r+0xd4>)
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	d101      	bne.n	8008cae <__swsetup_r+0x46>
 8008caa:	68ac      	ldr	r4, [r5, #8]
 8008cac:	e7eb      	b.n	8008c86 <__swsetup_r+0x1e>
 8008cae:	4b24      	ldr	r3, [pc, #144]	; (8008d40 <__swsetup_r+0xd8>)
 8008cb0:	429c      	cmp	r4, r3
 8008cb2:	bf08      	it	eq
 8008cb4:	68ec      	ldreq	r4, [r5, #12]
 8008cb6:	e7e6      	b.n	8008c86 <__swsetup_r+0x1e>
 8008cb8:	0758      	lsls	r0, r3, #29
 8008cba:	d512      	bpl.n	8008ce2 <__swsetup_r+0x7a>
 8008cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cbe:	b141      	cbz	r1, 8008cd2 <__swsetup_r+0x6a>
 8008cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d002      	beq.n	8008cce <__swsetup_r+0x66>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff fb67 	bl	800839c <_free_r>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0308 	orr.w	r3, r3, #8
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	b94b      	cbnz	r3, 8008d02 <__swsetup_r+0x9a>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf8:	d003      	beq.n	8008d02 <__swsetup_r+0x9a>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 fa07 	bl	8009110 <__smakebuf_r>
 8008d02:	89a0      	ldrh	r0, [r4, #12]
 8008d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d08:	f010 0301 	ands.w	r3, r0, #1
 8008d0c:	d00a      	beq.n	8008d24 <__swsetup_r+0xbc>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	6963      	ldr	r3, [r4, #20]
 8008d14:	425b      	negs	r3, r3
 8008d16:	61a3      	str	r3, [r4, #24]
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	b943      	cbnz	r3, 8008d2e <__swsetup_r+0xc6>
 8008d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d20:	d1ba      	bne.n	8008c98 <__swsetup_r+0x30>
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	0781      	lsls	r1, r0, #30
 8008d26:	bf58      	it	pl
 8008d28:	6963      	ldrpl	r3, [r4, #20]
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	e7f4      	b.n	8008d18 <__swsetup_r+0xb0>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	e7f7      	b.n	8008d22 <__swsetup_r+0xba>
 8008d32:	bf00      	nop
 8008d34:	20000020 	.word	0x20000020
 8008d38:	0800989c 	.word	0x0800989c
 8008d3c:	080098bc 	.word	0x080098bc
 8008d40:	0800987c 	.word	0x0800987c

08008d44 <abort>:
 8008d44:	b508      	push	{r3, lr}
 8008d46:	2006      	movs	r0, #6
 8008d48:	f000 fa52 	bl	80091f0 <raise>
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	f7f8 fdfb 	bl	8001948 <_exit>
	...

08008d54 <__sflush_r>:
 8008d54:	898a      	ldrh	r2, [r1, #12]
 8008d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	0710      	lsls	r0, r2, #28
 8008d5e:	460c      	mov	r4, r1
 8008d60:	d458      	bmi.n	8008e14 <__sflush_r+0xc0>
 8008d62:	684b      	ldr	r3, [r1, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dc05      	bgt.n	8008d74 <__sflush_r+0x20>
 8008d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dc02      	bgt.n	8008d74 <__sflush_r+0x20>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	d0f9      	beq.n	8008d6e <__sflush_r+0x1a>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d80:	682f      	ldr	r7, [r5, #0]
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	d032      	beq.n	8008dec <__sflush_r+0x98>
 8008d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	075a      	lsls	r2, r3, #29
 8008d8c:	d505      	bpl.n	8008d9a <__sflush_r+0x46>
 8008d8e:	6863      	ldr	r3, [r4, #4]
 8008d90:	1ac0      	subs	r0, r0, r3
 8008d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d94:	b10b      	cbz	r3, 8008d9a <__sflush_r+0x46>
 8008d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d98:	1ac0      	subs	r0, r0, r3
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b0      	blx	r6
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	d106      	bne.n	8008dba <__sflush_r+0x66>
 8008dac:	6829      	ldr	r1, [r5, #0]
 8008dae:	291d      	cmp	r1, #29
 8008db0:	d82c      	bhi.n	8008e0c <__sflush_r+0xb8>
 8008db2:	4a2a      	ldr	r2, [pc, #168]	; (8008e5c <__sflush_r+0x108>)
 8008db4:	40ca      	lsrs	r2, r1
 8008db6:	07d6      	lsls	r6, r2, #31
 8008db8:	d528      	bpl.n	8008e0c <__sflush_r+0xb8>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	6062      	str	r2, [r4, #4]
 8008dbe:	04d9      	lsls	r1, r3, #19
 8008dc0:	6922      	ldr	r2, [r4, #16]
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	d504      	bpl.n	8008dd0 <__sflush_r+0x7c>
 8008dc6:	1c42      	adds	r2, r0, #1
 8008dc8:	d101      	bne.n	8008dce <__sflush_r+0x7a>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	b903      	cbnz	r3, 8008dd0 <__sflush_r+0x7c>
 8008dce:	6560      	str	r0, [r4, #84]	; 0x54
 8008dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dd2:	602f      	str	r7, [r5, #0]
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	d0ca      	beq.n	8008d6e <__sflush_r+0x1a>
 8008dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ddc:	4299      	cmp	r1, r3
 8008dde:	d002      	beq.n	8008de6 <__sflush_r+0x92>
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7ff fadb 	bl	800839c <_free_r>
 8008de6:	2000      	movs	r0, #0
 8008de8:	6360      	str	r0, [r4, #52]	; 0x34
 8008dea:	e7c1      	b.n	8008d70 <__sflush_r+0x1c>
 8008dec:	6a21      	ldr	r1, [r4, #32]
 8008dee:	2301      	movs	r3, #1
 8008df0:	4628      	mov	r0, r5
 8008df2:	47b0      	blx	r6
 8008df4:	1c41      	adds	r1, r0, #1
 8008df6:	d1c7      	bne.n	8008d88 <__sflush_r+0x34>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0c4      	beq.n	8008d88 <__sflush_r+0x34>
 8008dfe:	2b1d      	cmp	r3, #29
 8008e00:	d001      	beq.n	8008e06 <__sflush_r+0xb2>
 8008e02:	2b16      	cmp	r3, #22
 8008e04:	d101      	bne.n	8008e0a <__sflush_r+0xb6>
 8008e06:	602f      	str	r7, [r5, #0]
 8008e08:	e7b1      	b.n	8008d6e <__sflush_r+0x1a>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	e7ad      	b.n	8008d70 <__sflush_r+0x1c>
 8008e14:	690f      	ldr	r7, [r1, #16]
 8008e16:	2f00      	cmp	r7, #0
 8008e18:	d0a9      	beq.n	8008d6e <__sflush_r+0x1a>
 8008e1a:	0793      	lsls	r3, r2, #30
 8008e1c:	680e      	ldr	r6, [r1, #0]
 8008e1e:	bf08      	it	eq
 8008e20:	694b      	ldreq	r3, [r1, #20]
 8008e22:	600f      	str	r7, [r1, #0]
 8008e24:	bf18      	it	ne
 8008e26:	2300      	movne	r3, #0
 8008e28:	eba6 0807 	sub.w	r8, r6, r7
 8008e2c:	608b      	str	r3, [r1, #8]
 8008e2e:	f1b8 0f00 	cmp.w	r8, #0
 8008e32:	dd9c      	ble.n	8008d6e <__sflush_r+0x1a>
 8008e34:	6a21      	ldr	r1, [r4, #32]
 8008e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e38:	4643      	mov	r3, r8
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b0      	blx	r6
 8008e40:	2800      	cmp	r0, #0
 8008e42:	dc06      	bgt.n	8008e52 <__sflush_r+0xfe>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	e78e      	b.n	8008d70 <__sflush_r+0x1c>
 8008e52:	4407      	add	r7, r0
 8008e54:	eba8 0800 	sub.w	r8, r8, r0
 8008e58:	e7e9      	b.n	8008e2e <__sflush_r+0xda>
 8008e5a:	bf00      	nop
 8008e5c:	20400001 	.word	0x20400001

08008e60 <_fflush_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	690b      	ldr	r3, [r1, #16]
 8008e64:	4605      	mov	r5, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	b913      	cbnz	r3, 8008e70 <_fflush_r+0x10>
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	b118      	cbz	r0, 8008e7a <_fflush_r+0x1a>
 8008e72:	6983      	ldr	r3, [r0, #24]
 8008e74:	b90b      	cbnz	r3, 8008e7a <_fflush_r+0x1a>
 8008e76:	f000 f887 	bl	8008f88 <__sinit>
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <_fflush_r+0x6c>)
 8008e7c:	429c      	cmp	r4, r3
 8008e7e:	d11b      	bne.n	8008eb8 <_fflush_r+0x58>
 8008e80:	686c      	ldr	r4, [r5, #4]
 8008e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0ef      	beq.n	8008e6a <_fflush_r+0xa>
 8008e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e8c:	07d0      	lsls	r0, r2, #31
 8008e8e:	d404      	bmi.n	8008e9a <_fflush_r+0x3a>
 8008e90:	0599      	lsls	r1, r3, #22
 8008e92:	d402      	bmi.n	8008e9a <_fflush_r+0x3a>
 8008e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e96:	f000 f915 	bl	80090c4 <__retarget_lock_acquire_recursive>
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	f7ff ff59 	bl	8008d54 <__sflush_r>
 8008ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea4:	07da      	lsls	r2, r3, #31
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	d4e0      	bmi.n	8008e6c <_fflush_r+0xc>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	059b      	lsls	r3, r3, #22
 8008eae:	d4dd      	bmi.n	8008e6c <_fflush_r+0xc>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb2:	f000 f908 	bl	80090c6 <__retarget_lock_release_recursive>
 8008eb6:	e7d9      	b.n	8008e6c <_fflush_r+0xc>
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <_fflush_r+0x70>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d101      	bne.n	8008ec2 <_fflush_r+0x62>
 8008ebe:	68ac      	ldr	r4, [r5, #8]
 8008ec0:	e7df      	b.n	8008e82 <_fflush_r+0x22>
 8008ec2:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <_fflush_r+0x74>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	bf08      	it	eq
 8008ec8:	68ec      	ldreq	r4, [r5, #12]
 8008eca:	e7da      	b.n	8008e82 <_fflush_r+0x22>
 8008ecc:	0800989c 	.word	0x0800989c
 8008ed0:	080098bc 	.word	0x080098bc
 8008ed4:	0800987c 	.word	0x0800987c

08008ed8 <std>:
 8008ed8:	2300      	movs	r3, #0
 8008eda:	b510      	push	{r4, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	e9c0 3300 	strd	r3, r3, [r0]
 8008ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ee6:	6083      	str	r3, [r0, #8]
 8008ee8:	8181      	strh	r1, [r0, #12]
 8008eea:	6643      	str	r3, [r0, #100]	; 0x64
 8008eec:	81c2      	strh	r2, [r0, #14]
 8008eee:	6183      	str	r3, [r0, #24]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	2208      	movs	r2, #8
 8008ef4:	305c      	adds	r0, #92	; 0x5c
 8008ef6:	f7fb fe17 	bl	8004b28 <memset>
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <std+0x38>)
 8008efc:	6263      	str	r3, [r4, #36]	; 0x24
 8008efe:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <std+0x3c>)
 8008f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <std+0x40>)
 8008f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <std+0x44>)
 8008f08:	6224      	str	r4, [r4, #32]
 8008f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	08009229 	.word	0x08009229
 8008f14:	0800924b 	.word	0x0800924b
 8008f18:	08009283 	.word	0x08009283
 8008f1c:	080092a7 	.word	0x080092a7

08008f20 <_cleanup_r>:
 8008f20:	4901      	ldr	r1, [pc, #4]	; (8008f28 <_cleanup_r+0x8>)
 8008f22:	f000 b8af 	b.w	8009084 <_fwalk_reent>
 8008f26:	bf00      	nop
 8008f28:	08008e61 	.word	0x08008e61

08008f2c <__sfmoreglue>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	1e4a      	subs	r2, r1, #1
 8008f30:	2568      	movs	r5, #104	; 0x68
 8008f32:	4355      	muls	r5, r2
 8008f34:	460e      	mov	r6, r1
 8008f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f3a:	f7ff fa7f 	bl	800843c <_malloc_r>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b140      	cbz	r0, 8008f54 <__sfmoreglue+0x28>
 8008f42:	2100      	movs	r1, #0
 8008f44:	e9c0 1600 	strd	r1, r6, [r0]
 8008f48:	300c      	adds	r0, #12
 8008f4a:	60a0      	str	r0, [r4, #8]
 8008f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f50:	f7fb fdea 	bl	8004b28 <memset>
 8008f54:	4620      	mov	r0, r4
 8008f56:	bd70      	pop	{r4, r5, r6, pc}

08008f58 <__sfp_lock_acquire>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sfp_lock_acquire+0x8>)
 8008f5a:	f000 b8b3 	b.w	80090c4 <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	200003bc 	.word	0x200003bc

08008f64 <__sfp_lock_release>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sfp_lock_release+0x8>)
 8008f66:	f000 b8ae 	b.w	80090c6 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	200003bc 	.word	0x200003bc

08008f70 <__sinit_lock_acquire>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sinit_lock_acquire+0x8>)
 8008f72:	f000 b8a7 	b.w	80090c4 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	200003b7 	.word	0x200003b7

08008f7c <__sinit_lock_release>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sinit_lock_release+0x8>)
 8008f7e:	f000 b8a2 	b.w	80090c6 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	200003b7 	.word	0x200003b7

08008f88 <__sinit>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	f7ff fff0 	bl	8008f70 <__sinit_lock_acquire>
 8008f90:	69a3      	ldr	r3, [r4, #24]
 8008f92:	b11b      	cbz	r3, 8008f9c <__sinit+0x14>
 8008f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f98:	f7ff bff0 	b.w	8008f7c <__sinit_lock_release>
 8008f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fa2:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <__sinit+0x68>)
 8008fa4:	4a13      	ldr	r2, [pc, #76]	; (8008ff4 <__sinit+0x6c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	bf04      	itt	eq
 8008fae:	2301      	moveq	r3, #1
 8008fb0:	61a3      	streq	r3, [r4, #24]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 f820 	bl	8008ff8 <__sfp>
 8008fb8:	6060      	str	r0, [r4, #4]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 f81c 	bl	8008ff8 <__sfp>
 8008fc0:	60a0      	str	r0, [r4, #8]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f818 	bl	8008ff8 <__sfp>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	60e0      	str	r0, [r4, #12]
 8008fcc:	2104      	movs	r1, #4
 8008fce:	6860      	ldr	r0, [r4, #4]
 8008fd0:	f7ff ff82 	bl	8008ed8 <std>
 8008fd4:	68a0      	ldr	r0, [r4, #8]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	2109      	movs	r1, #9
 8008fda:	f7ff ff7d 	bl	8008ed8 <std>
 8008fde:	68e0      	ldr	r0, [r4, #12]
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	2112      	movs	r1, #18
 8008fe4:	f7ff ff78 	bl	8008ed8 <std>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	61a3      	str	r3, [r4, #24]
 8008fec:	e7d2      	b.n	8008f94 <__sinit+0xc>
 8008fee:	bf00      	nop
 8008ff0:	08009424 	.word	0x08009424
 8008ff4:	08008f21 	.word	0x08008f21

08008ff8 <__sfp>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	f7ff ffac 	bl	8008f58 <__sfp_lock_acquire>
 8009000:	4b1e      	ldr	r3, [pc, #120]	; (800907c <__sfp+0x84>)
 8009002:	681e      	ldr	r6, [r3, #0]
 8009004:	69b3      	ldr	r3, [r6, #24]
 8009006:	b913      	cbnz	r3, 800900e <__sfp+0x16>
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff ffbd 	bl	8008f88 <__sinit>
 800900e:	3648      	adds	r6, #72	; 0x48
 8009010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009014:	3b01      	subs	r3, #1
 8009016:	d503      	bpl.n	8009020 <__sfp+0x28>
 8009018:	6833      	ldr	r3, [r6, #0]
 800901a:	b30b      	cbz	r3, 8009060 <__sfp+0x68>
 800901c:	6836      	ldr	r6, [r6, #0]
 800901e:	e7f7      	b.n	8009010 <__sfp+0x18>
 8009020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009024:	b9d5      	cbnz	r5, 800905c <__sfp+0x64>
 8009026:	4b16      	ldr	r3, [pc, #88]	; (8009080 <__sfp+0x88>)
 8009028:	60e3      	str	r3, [r4, #12]
 800902a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800902e:	6665      	str	r5, [r4, #100]	; 0x64
 8009030:	f000 f847 	bl	80090c2 <__retarget_lock_init_recursive>
 8009034:	f7ff ff96 	bl	8008f64 <__sfp_lock_release>
 8009038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800903c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	61a5      	str	r5, [r4, #24]
 8009044:	2208      	movs	r2, #8
 8009046:	4629      	mov	r1, r5
 8009048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800904c:	f7fb fd6c 	bl	8004b28 <memset>
 8009050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009058:	4620      	mov	r0, r4
 800905a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800905c:	3468      	adds	r4, #104	; 0x68
 800905e:	e7d9      	b.n	8009014 <__sfp+0x1c>
 8009060:	2104      	movs	r1, #4
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff ff62 	bl	8008f2c <__sfmoreglue>
 8009068:	4604      	mov	r4, r0
 800906a:	6030      	str	r0, [r6, #0]
 800906c:	2800      	cmp	r0, #0
 800906e:	d1d5      	bne.n	800901c <__sfp+0x24>
 8009070:	f7ff ff78 	bl	8008f64 <__sfp_lock_release>
 8009074:	230c      	movs	r3, #12
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	e7ee      	b.n	8009058 <__sfp+0x60>
 800907a:	bf00      	nop
 800907c:	08009424 	.word	0x08009424
 8009080:	ffff0001 	.word	0xffff0001

08009084 <_fwalk_reent>:
 8009084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009088:	4606      	mov	r6, r0
 800908a:	4688      	mov	r8, r1
 800908c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009090:	2700      	movs	r7, #0
 8009092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009096:	f1b9 0901 	subs.w	r9, r9, #1
 800909a:	d505      	bpl.n	80090a8 <_fwalk_reent+0x24>
 800909c:	6824      	ldr	r4, [r4, #0]
 800909e:	2c00      	cmp	r4, #0
 80090a0:	d1f7      	bne.n	8009092 <_fwalk_reent+0xe>
 80090a2:	4638      	mov	r0, r7
 80090a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a8:	89ab      	ldrh	r3, [r5, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d907      	bls.n	80090be <_fwalk_reent+0x3a>
 80090ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090b2:	3301      	adds	r3, #1
 80090b4:	d003      	beq.n	80090be <_fwalk_reent+0x3a>
 80090b6:	4629      	mov	r1, r5
 80090b8:	4630      	mov	r0, r6
 80090ba:	47c0      	blx	r8
 80090bc:	4307      	orrs	r7, r0
 80090be:	3568      	adds	r5, #104	; 0x68
 80090c0:	e7e9      	b.n	8009096 <_fwalk_reent+0x12>

080090c2 <__retarget_lock_init_recursive>:
 80090c2:	4770      	bx	lr

080090c4 <__retarget_lock_acquire_recursive>:
 80090c4:	4770      	bx	lr

080090c6 <__retarget_lock_release_recursive>:
 80090c6:	4770      	bx	lr

080090c8 <__swhatbuf_r>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	460e      	mov	r6, r1
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	2900      	cmp	r1, #0
 80090d2:	b096      	sub	sp, #88	; 0x58
 80090d4:	4614      	mov	r4, r2
 80090d6:	461d      	mov	r5, r3
 80090d8:	da07      	bge.n	80090ea <__swhatbuf_r+0x22>
 80090da:	2300      	movs	r3, #0
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	89b3      	ldrh	r3, [r6, #12]
 80090e0:	061a      	lsls	r2, r3, #24
 80090e2:	d410      	bmi.n	8009106 <__swhatbuf_r+0x3e>
 80090e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e8:	e00e      	b.n	8009108 <__swhatbuf_r+0x40>
 80090ea:	466a      	mov	r2, sp
 80090ec:	f000 f902 	bl	80092f4 <_fstat_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dbf2      	blt.n	80090da <__swhatbuf_r+0x12>
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090fe:	425a      	negs	r2, r3
 8009100:	415a      	adcs	r2, r3
 8009102:	602a      	str	r2, [r5, #0]
 8009104:	e7ee      	b.n	80090e4 <__swhatbuf_r+0x1c>
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	2000      	movs	r0, #0
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	b016      	add	sp, #88	; 0x58
 800910e:	bd70      	pop	{r4, r5, r6, pc}

08009110 <__smakebuf_r>:
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009114:	079d      	lsls	r5, r3, #30
 8009116:	4606      	mov	r6, r0
 8009118:	460c      	mov	r4, r1
 800911a:	d507      	bpl.n	800912c <__smakebuf_r+0x1c>
 800911c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2301      	movs	r3, #1
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	b002      	add	sp, #8
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	ab01      	add	r3, sp, #4
 800912e:	466a      	mov	r2, sp
 8009130:	f7ff ffca 	bl	80090c8 <__swhatbuf_r>
 8009134:	9900      	ldr	r1, [sp, #0]
 8009136:	4605      	mov	r5, r0
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff f97f 	bl	800843c <_malloc_r>
 800913e:	b948      	cbnz	r0, 8009154 <__smakebuf_r+0x44>
 8009140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009144:	059a      	lsls	r2, r3, #22
 8009146:	d4ef      	bmi.n	8009128 <__smakebuf_r+0x18>
 8009148:	f023 0303 	bic.w	r3, r3, #3
 800914c:	f043 0302 	orr.w	r3, r3, #2
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	e7e3      	b.n	800911c <__smakebuf_r+0xc>
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <__smakebuf_r+0x7c>)
 8009156:	62b3      	str	r3, [r6, #40]	; 0x28
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	6020      	str	r0, [r4, #0]
 800915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	9b00      	ldr	r3, [sp, #0]
 8009164:	6163      	str	r3, [r4, #20]
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	6120      	str	r0, [r4, #16]
 800916a:	b15b      	cbz	r3, 8009184 <__smakebuf_r+0x74>
 800916c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009170:	4630      	mov	r0, r6
 8009172:	f000 f8d1 	bl	8009318 <_isatty_r>
 8009176:	b128      	cbz	r0, 8009184 <__smakebuf_r+0x74>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	89a0      	ldrh	r0, [r4, #12]
 8009186:	4305      	orrs	r5, r0
 8009188:	81a5      	strh	r5, [r4, #12]
 800918a:	e7cd      	b.n	8009128 <__smakebuf_r+0x18>
 800918c:	08008f21 	.word	0x08008f21

08009190 <_malloc_usable_size_r>:
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f18      	subs	r0, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfbc      	itt	lt
 800919a:	580b      	ldrlt	r3, [r1, r0]
 800919c:	18c0      	addlt	r0, r0, r3
 800919e:	4770      	bx	lr

080091a0 <_raise_r>:
 80091a0:	291f      	cmp	r1, #31
 80091a2:	b538      	push	{r3, r4, r5, lr}
 80091a4:	4604      	mov	r4, r0
 80091a6:	460d      	mov	r5, r1
 80091a8:	d904      	bls.n	80091b4 <_raise_r+0x14>
 80091aa:	2316      	movs	r3, #22
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091b6:	b112      	cbz	r2, 80091be <_raise_r+0x1e>
 80091b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091bc:	b94b      	cbnz	r3, 80091d2 <_raise_r+0x32>
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 f830 	bl	8009224 <_getpid_r>
 80091c4:	462a      	mov	r2, r5
 80091c6:	4601      	mov	r1, r0
 80091c8:	4620      	mov	r0, r4
 80091ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ce:	f000 b817 	b.w	8009200 <_kill_r>
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d00a      	beq.n	80091ec <_raise_r+0x4c>
 80091d6:	1c59      	adds	r1, r3, #1
 80091d8:	d103      	bne.n	80091e2 <_raise_r+0x42>
 80091da:	2316      	movs	r3, #22
 80091dc:	6003      	str	r3, [r0, #0]
 80091de:	2001      	movs	r0, #1
 80091e0:	e7e7      	b.n	80091b2 <_raise_r+0x12>
 80091e2:	2400      	movs	r4, #0
 80091e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091e8:	4628      	mov	r0, r5
 80091ea:	4798      	blx	r3
 80091ec:	2000      	movs	r0, #0
 80091ee:	e7e0      	b.n	80091b2 <_raise_r+0x12>

080091f0 <raise>:
 80091f0:	4b02      	ldr	r3, [pc, #8]	; (80091fc <raise+0xc>)
 80091f2:	4601      	mov	r1, r0
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	f7ff bfd3 	b.w	80091a0 <_raise_r>
 80091fa:	bf00      	nop
 80091fc:	20000020 	.word	0x20000020

08009200 <_kill_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d07      	ldr	r5, [pc, #28]	; (8009220 <_kill_r+0x20>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	4611      	mov	r1, r2
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	f7f8 fb8b 	bl	8001928 <_kill>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	d102      	bne.n	800921c <_kill_r+0x1c>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	b103      	cbz	r3, 800921c <_kill_r+0x1c>
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	bd38      	pop	{r3, r4, r5, pc}
 800921e:	bf00      	nop
 8009220:	200003b0 	.word	0x200003b0

08009224 <_getpid_r>:
 8009224:	f7f8 bb78 	b.w	8001918 <_getpid>

08009228 <__sread>:
 8009228:	b510      	push	{r4, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009230:	f000 f894 	bl	800935c <_read_r>
 8009234:	2800      	cmp	r0, #0
 8009236:	bfab      	itete	ge
 8009238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800923a:	89a3      	ldrhlt	r3, [r4, #12]
 800923c:	181b      	addge	r3, r3, r0
 800923e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009242:	bfac      	ite	ge
 8009244:	6563      	strge	r3, [r4, #84]	; 0x54
 8009246:	81a3      	strhlt	r3, [r4, #12]
 8009248:	bd10      	pop	{r4, pc}

0800924a <__swrite>:
 800924a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	461f      	mov	r7, r3
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	05db      	lsls	r3, r3, #23
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	4616      	mov	r6, r2
 800925a:	d505      	bpl.n	8009268 <__swrite+0x1e>
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	2302      	movs	r3, #2
 8009262:	2200      	movs	r2, #0
 8009264:	f000 f868 	bl	8009338 <_lseek_r>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	4628      	mov	r0, r5
 800927a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927e:	f000 b817 	b.w	80092b0 <_write_r>

08009282 <__sseek>:
 8009282:	b510      	push	{r4, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	f000 f855 	bl	8009338 <_lseek_r>
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	bf15      	itete	ne
 8009294:	6560      	strne	r0, [r4, #84]	; 0x54
 8009296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800929a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800929e:	81a3      	strheq	r3, [r4, #12]
 80092a0:	bf18      	it	ne
 80092a2:	81a3      	strhne	r3, [r4, #12]
 80092a4:	bd10      	pop	{r4, pc}

080092a6 <__sclose>:
 80092a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092aa:	f000 b813 	b.w	80092d4 <_close_r>
	...

080092b0 <_write_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_write_r+0x20>)
 80092b4:	4604      	mov	r4, r0
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	2200      	movs	r2, #0
 80092bc:	602a      	str	r2, [r5, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f7f8 fb69 	bl	8001996 <_write>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_write_r+0x1e>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_write_r+0x1e>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	200003b0 	.word	0x200003b0

080092d4 <_close_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d06      	ldr	r5, [pc, #24]	; (80092f0 <_close_r+0x1c>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	f7f8 fb75 	bl	80019ce <_close>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_close_r+0x1a>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_close_r+0x1a>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	200003b0 	.word	0x200003b0

080092f4 <_fstat_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4d07      	ldr	r5, [pc, #28]	; (8009314 <_fstat_r+0x20>)
 80092f8:	2300      	movs	r3, #0
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	4611      	mov	r1, r2
 8009300:	602b      	str	r3, [r5, #0]
 8009302:	f7f8 fb70 	bl	80019e6 <_fstat>
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	d102      	bne.n	8009310 <_fstat_r+0x1c>
 800930a:	682b      	ldr	r3, [r5, #0]
 800930c:	b103      	cbz	r3, 8009310 <_fstat_r+0x1c>
 800930e:	6023      	str	r3, [r4, #0]
 8009310:	bd38      	pop	{r3, r4, r5, pc}
 8009312:	bf00      	nop
 8009314:	200003b0 	.word	0x200003b0

08009318 <_isatty_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	; (8009334 <_isatty_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f8 fb6f 	bl	8001a06 <_isatty>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_isatty_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_isatty_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	200003b0 	.word	0x200003b0

08009338 <_lseek_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d07      	ldr	r5, [pc, #28]	; (8009358 <_lseek_r+0x20>)
 800933c:	4604      	mov	r4, r0
 800933e:	4608      	mov	r0, r1
 8009340:	4611      	mov	r1, r2
 8009342:	2200      	movs	r2, #0
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f7f8 fb68 	bl	8001a1c <_lseek>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_lseek_r+0x1e>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_lseek_r+0x1e>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	200003b0 	.word	0x200003b0

0800935c <_read_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d07      	ldr	r5, [pc, #28]	; (800937c <_read_r+0x20>)
 8009360:	4604      	mov	r4, r0
 8009362:	4608      	mov	r0, r1
 8009364:	4611      	mov	r1, r2
 8009366:	2200      	movs	r2, #0
 8009368:	602a      	str	r2, [r5, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	f7f8 faf6 	bl	800195c <_read>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_read_r+0x1e>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_read_r+0x1e>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	200003b0 	.word	0x200003b0

08009380 <_init>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr

0800938c <_fini>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr
